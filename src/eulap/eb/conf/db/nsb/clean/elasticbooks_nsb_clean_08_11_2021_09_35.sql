-- MySQL dump 10.13  Distrib 5.7.35, for Linux (x86_64)
--
-- Host: localhost    Database: CBS
-- ------------------------------------------------------
-- Server version	5.7.35-0ubuntu0.18.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `ACCOUNT`
--

DROP TABLE IF EXISTS `ACCOUNT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ACCOUNT` (
  `ACCOUNT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NUMBER` varchar(10) NOT NULL,
  `ACCOUNT_NAME` varchar(100) NOT NULL,
  `DESCRIPTION` varchar(200) NOT NULL,
  `ACCOUNT_TYPE_ID` int(10) unsigned NOT NULL,
  `RELATED_ACCOUNT_ID` int(10) unsigned DEFAULT NULL,
  `PARENT_ACCOUNT_ID` int(10) unsigned DEFAULT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `EB_SL_KEY_ID` int(10) unsigned NOT NULL DEFAULT '1',
  PRIMARY KEY (`ACCOUNT_ID`),
  KEY `FK_ACCOUNT_ACCOUNT_TYPE` (`ACCOUNT_TYPE_ID`),
  KEY `FK_ACCOUNT_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_ACCOUNT_CREATED_BY` (`CREATED_BY`),
  KEY `FK_ACCOUNT_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_ACCOUNT_EB_SL_KEY_ID` (`EB_SL_KEY_ID`),
  CONSTRAINT `FK_ACCOUNT_ACCOUNT_TYPE` FOREIGN KEY (`ACCOUNT_TYPE_ID`) REFERENCES `ACCOUNT_TYPE` (`ACCOUNT_TYPE_ID`),
  CONSTRAINT `FK_ACCOUNT_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_ACCOUNT_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_ACCOUNT_EB_SL_KEY_ID` FOREIGN KEY (`EB_SL_KEY_ID`) REFERENCES `EB_SL_KEY` (`EB_SL_KEY_ID`),
  CONSTRAINT `FK_ACCOUNT_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=60 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ACCOUNT`
--

LOCK TABLES `ACCOUNT` WRITE;
/*!40000 ALTER TABLE `ACCOUNT` DISABLE KEYS */;
INSERT INTO `ACCOUNT` VALUES (1,'1010200000','Cash in Bank','Cash in Bank',1,NULL,NULL,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(2,'1010100000','Cash on Hand','Cash on Hand',1,NULL,NULL,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(3,'1010300000','Accounts Receivable','Accounts Receivable',1,NULL,NULL,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(4,'1010400000','Merchandise Inventory','Merchandise Inventory',1,NULL,NULL,7,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(5,'1010500000','Prepaid expenses','Prepaid expenses',1,NULL,NULL,8,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(6,'1020100000','Land','Land',2,NULL,NULL,9,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(7,'1020200000','Building','Building',2,NULL,NULL,10,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(8,'1020300000','Equipments','Equipments',2,NULL,NULL,11,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(9,'1020400000','Furniture & Fixtures','Furniture & Fixtures',2,NULL,NULL,12,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(10,'1020201000','Accum. Dep. - Building','Accumulated Depreciation - Building',2,NULL,NULL,13,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(11,'1020301000','Accum. Dep. - Equipments','Accumulated Depreciation - Equipments',2,NULL,NULL,14,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(12,'1020401000','Accum. Dep. - Furniture & Fixtures','Accumulated Depreciation - Furniture & Fixtures',2,NULL,NULL,15,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(13,'1020500000','Intangible Assets','Intangible Assets',2,NULL,NULL,16,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(14,'1020501000','Accum. Dep. - Intangible Assets','Accumulated Depreciation - Intangible Assets',2,NULL,NULL,17,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(15,'1020600000','Other Assets','Other Assets',2,NULL,NULL,18,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(16,'2010100000','Accounts Payable','Accounts Payable',3,NULL,NULL,19,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(17,'2010200000','Customers Deposit','Customers Deposit',3,NULL,NULL,20,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(18,'2020100000','Loans Payable','Loans Payable',4,NULL,NULL,21,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(19,'4010000000','Sales','Sales',5,NULL,NULL,22,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(20,'6020900000','Rental Expense','Rental Expense',7,NULL,NULL,23,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(21,'5010000000','Cost of Sales','Cost of Sales',6,NULL,NULL,24,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(22,'6020100000','Salaries and Wages','Salaries and Wages',7,NULL,NULL,25,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(23,'6020200000','Security Service','Security Service',7,NULL,NULL,26,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(24,'6020300000','Insurance Expense','Insurance Expense',7,NULL,NULL,27,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(25,'6020400000','Supplies Expense','Supplies Expense',7,NULL,NULL,28,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(26,'6020500000','Lights & Water','Lights & Water',7,NULL,NULL,29,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(27,'6020600000','Communication Expense','Communication Expense',7,NULL,NULL,30,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(28,'6020700000','Software Maintenance','Software Maintenance',7,NULL,NULL,31,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(29,'6020800000','Repairs & Maintenance','Repairs & Maintenance',7,NULL,NULL,32,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(30,'7010000000','Other  Income','Other Income',7,NULL,NULL,33,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(31,'3010000000','Capital','Capital',8,NULL,NULL,34,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(32,'3020000000','Income & Expense Summary','Income & Expense Summary',9,NULL,NULL,35,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(33,'4010100000','Sales Discount','Sales Discount',5,NULL,NULL,36,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(34,'4010200000','Sales Return','Sales Return',5,NULL,NULL,37,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(35,'6021000000','Petty Cash Expense','Petty Cash Expense',7,NULL,NULL,38,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(36,'6021100000','Miscellaneous Expense','Miscellaneous Expense',7,NULL,NULL,39,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(37,'1010301000','AR Clearing','AR Clearing',9,NULL,NULL,40,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(38,'6021200000','BIR-Taxes','Taxes',7,NULL,NULL,41,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(39,'2010300000','WT 1% - WI 158/WC 158','WT 1% - WI 158/WC 158',3,NULL,NULL,47,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(40,'2010400000','WT 1% - WI 630/WC 630','WT 1% - WI 630/WC 630',3,NULL,NULL,48,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(41,'2010500000','WT 2% - WI 120/WC 120','WT 2% - WI 120/WC 120',3,NULL,NULL,49,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(42,'2010600000','WT 2% - WI 160/WC 160','WT 2% - WI 160/WC 160',3,NULL,NULL,50,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(43,'2010700000','WT 5% - WI 100/WC 100','WT 5% - WI 100/WC 100',3,NULL,NULL,51,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(44,'2010800000','WT 10% - WI 010/WC 010','WT 10% - WI 010/WC 010',3,NULL,NULL,52,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(45,'2010900000','WT 15% - WI 011/WC 011','WT 15% - WI 011/WC 011',3,NULL,NULL,53,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(46,'1010600000','CWT 1% - WI 158/WC 158','CWT 1% - WI 158/WC 158',1,NULL,NULL,54,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(47,'1010700000','CWT 1% - WI 630/WC 630','CWT 1% - WI 630/WC 630',1,NULL,NULL,55,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(48,'1010800000','CWT 2% - WI 120/WC 120','CWT 2% - WI 120/WC 120',1,NULL,NULL,56,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(49,'1010900000','CWT 2% - WI 160/WC 160','CWT 2% - WI 160/WC 160',1,NULL,NULL,57,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(50,'1011000000','CWT 5% - WI 100/WC 100','CWT 5% - WI 100/WC 100',1,NULL,NULL,58,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(51,'1011100000','CWT 10% - WI 010/WC 010','CWT 10% - WI 010/WC 010',1,NULL,NULL,59,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(52,'1011200000','CWT 15% - WI 011/WC 011','CWT 15% - WI 011/WC 011',1,NULL,NULL,60,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(53,'1011300000','Input VAT','Input VAT',1,NULL,NULL,61,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(54,'2011000000','Output VAT','Output VAT',3,NULL,NULL,62,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(55,'3030000000','Goods Receipt Not Invoiced','Goods Receipt Not Invoiced',9,NULL,NULL,68,1,1,'2021-08-11 01:34:26',1,'2021-08-11 01:34:26',1),(56,'3040000000','Work in Progress','Work in Progress',9,NULL,NULL,69,1,1,'2021-08-11 01:34:26',1,'2021-08-11 01:34:26',1),(57,'1111','ADVANCES FROM CUSTOMER','ADVANCES FROM CUSTOMER',9,NULL,NULL,70,1,1,'2021-08-11 01:34:39',1,'2021-08-11 01:34:39',1),(58,'1010370000','AR RETENTION','AR RETENTION',9,NULL,NULL,71,1,1,'2021-08-11 01:34:40',1,'2021-08-11 01:34:40',1),(59,'123','CREDITABLE WITHHOLDING TAX - VAT','CREDITABLE WITHHOLDING TAX - VAT',9,NULL,NULL,72,1,1,'2021-08-11 01:34:40',1,'2021-08-11 01:34:40',1);
/*!40000 ALTER TABLE `ACCOUNT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ACCOUNT_COMBINATION`
--

DROP TABLE IF EXISTS `ACCOUNT_COMBINATION`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ACCOUNT_COMBINATION` (
  `ACCOUNT_COMBINATION_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `ACCOUNT_ID` int(10) unsigned NOT NULL,
  `DIVISION_ID` int(10) unsigned NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `EB_SL_KEY_ID` int(10) unsigned NOT NULL DEFAULT '1',
  PRIMARY KEY (`ACCOUNT_COMBINATION_ID`),
  KEY `FK_ACCOUNT_COMBINATION_COMPANY` (`COMPANY_ID`),
  KEY `FK_ACCOUNT_COMBINATION_ACCOUNT` (`ACCOUNT_ID`),
  KEY `FK_ACCOUNT_COMBINATION_DIVISION` (`DIVISION_ID`),
  KEY `FK_ACCOUNT_COMBINATION_CREATED_BY` (`CREATED_BY`),
  KEY `FK_ACCOUNT_COMBINATION_UPDATED_BY` (`UPDATED_BY`),
  KEY `EB_SL_KEY_ID` (`EB_SL_KEY_ID`),
  CONSTRAINT `ACCOUNT_COMBINATION_ibfk_1` FOREIGN KEY (`EB_SL_KEY_ID`) REFERENCES `EB_SL_KEY` (`EB_SL_KEY_ID`),
  CONSTRAINT `FK_ACCOUNT_COMBINATION_ACCOUNT` FOREIGN KEY (`ACCOUNT_ID`) REFERENCES `ACCOUNT` (`ACCOUNT_ID`),
  CONSTRAINT `FK_ACCOUNT_COMBINATION_COMPANY` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_ACCOUNT_COMBINATION_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_ACCOUNT_COMBINATION_DIVISION` FOREIGN KEY (`DIVISION_ID`) REFERENCES `DIVISION` (`DIVISION_ID`),
  CONSTRAINT `FK_ACCOUNT_COMBINATION_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=447 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ACCOUNT_COMBINATION`
--

LOCK TABLES `ACCOUNT_COMBINATION` WRITE;
/*!40000 ALTER TABLE `ACCOUNT_COMBINATION` DISABLE KEYS */;
INSERT INTO `ACCOUNT_COMBINATION` VALUES (1,1,1,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(2,1,16,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(3,1,3,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(4,1,10,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(5,1,7,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(6,1,11,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(7,1,8,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(8,1,12,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(9,1,9,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(10,1,14,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(11,1,13,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(12,1,4,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(13,1,27,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(14,1,21,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(15,1,17,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(16,1,31,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(17,1,32,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(18,1,24,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(19,1,6,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(20,1,26,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(21,1,18,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(22,1,15,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(23,1,25,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(24,1,30,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(25,1,19,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(26,1,33,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(27,1,34,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(28,1,22,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(29,1,35,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(30,1,23,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(31,1,36,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(32,1,37,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(33,1,38,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(34,1,5,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(35,1,2,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(36,1,1,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(37,1,2,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(38,1,3,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(39,1,4,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(40,1,5,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(41,1,6,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(42,1,7,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(43,1,8,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(44,1,9,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(45,1,10,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(46,1,11,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(47,1,12,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(48,1,13,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(49,1,14,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(50,1,15,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(51,1,16,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(52,1,17,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(53,1,18,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(54,1,19,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(55,1,33,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(56,1,34,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(57,1,21,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(58,1,20,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(59,1,22,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(60,1,23,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(61,1,24,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(62,1,25,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(63,1,26,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(64,1,27,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(65,1,28,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(66,1,29,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(67,1,30,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(68,1,35,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(69,1,36,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(70,1,38,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(71,1,31,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(72,1,32,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(73,1,37,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(99,1,1,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(100,1,2,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(101,1,3,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(102,1,4,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(103,1,5,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(104,1,6,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(105,1,7,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(106,1,8,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(107,1,9,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(108,1,10,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(109,1,11,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(110,1,12,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(111,1,13,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(112,1,14,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(113,1,15,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(114,1,16,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(115,1,17,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(116,1,18,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(117,1,19,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(118,1,33,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(119,1,34,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(120,1,21,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(121,1,20,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(122,1,22,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(123,1,23,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(124,1,24,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(125,1,25,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(126,1,26,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(127,1,27,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(128,1,28,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(129,1,29,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(130,1,30,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(131,1,35,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(132,1,36,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(133,1,38,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(134,1,31,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(135,1,32,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(136,1,37,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(162,1,1,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(163,1,2,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(164,1,3,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(165,1,4,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(166,1,5,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(167,1,6,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(168,1,7,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(169,1,8,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(170,1,9,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(171,1,10,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(172,1,11,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(173,1,12,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(174,1,13,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(175,1,14,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(176,1,15,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(177,1,16,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(178,1,17,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(179,1,18,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(180,1,19,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(181,1,33,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(182,1,34,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(183,1,21,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(184,1,20,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(185,1,22,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(186,1,23,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(187,1,24,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(188,1,25,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(189,1,26,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(190,1,27,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(191,1,28,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(192,1,29,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(193,1,30,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(194,1,35,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(195,1,36,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(196,1,38,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(197,1,31,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(198,1,32,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(199,1,37,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(225,1,1,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(226,1,2,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(227,1,3,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(228,1,4,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(229,1,5,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(230,1,6,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(231,1,7,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(232,1,8,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(233,1,9,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(234,1,10,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(235,1,11,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(236,1,12,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(237,1,13,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(238,1,14,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(239,1,15,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(240,1,16,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(241,1,17,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(242,1,18,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(243,1,19,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(244,1,33,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(245,1,34,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(246,1,21,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(247,1,20,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(248,1,22,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(249,1,23,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(250,1,24,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(251,1,25,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(252,1,26,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(253,1,27,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(254,1,28,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(255,1,29,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(256,1,30,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(257,1,35,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(258,1,36,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(259,1,38,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(260,1,31,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(261,1,32,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(262,1,37,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(288,1,1,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(289,1,2,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(290,1,3,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(291,1,4,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(292,1,5,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(293,1,6,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(294,1,7,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(295,1,8,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(296,1,9,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(297,1,10,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(298,1,11,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(299,1,12,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(300,1,13,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(301,1,14,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(302,1,15,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(303,1,16,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(304,1,17,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(305,1,18,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(306,1,19,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(307,1,33,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(308,1,34,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(309,1,21,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(310,1,20,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(311,1,22,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(312,1,23,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(313,1,24,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(314,1,25,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(315,1,26,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(316,1,27,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(317,1,28,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(318,1,29,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(319,1,30,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(320,1,35,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(321,1,36,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(322,1,38,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(323,1,31,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(324,1,32,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(325,1,37,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(351,1,39,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(352,1,40,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(353,1,41,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(354,1,42,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(355,1,43,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(356,1,44,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(357,1,45,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(358,1,46,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(359,1,47,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(360,1,48,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(361,1,49,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(362,1,50,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(363,1,51,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(364,1,52,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(365,1,39,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(366,1,40,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(367,1,41,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(368,1,42,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(369,1,43,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(370,1,44,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(371,1,45,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(372,1,46,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(373,1,47,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(374,1,48,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(375,1,49,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(376,1,50,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(377,1,51,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(378,1,52,2,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(379,1,39,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(380,1,40,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(381,1,41,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(382,1,42,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(383,1,43,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(384,1,44,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(385,1,45,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(386,1,46,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(387,1,47,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(388,1,48,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(389,1,49,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(390,1,50,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(391,1,51,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(392,1,52,3,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(393,1,39,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(394,1,40,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(395,1,41,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(396,1,42,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(397,1,43,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(398,1,44,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(399,1,45,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(400,1,46,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(401,1,47,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(402,1,48,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(403,1,49,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(404,1,50,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(405,1,51,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(406,1,52,4,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(407,1,39,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(408,1,40,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(409,1,41,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(410,1,42,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(411,1,43,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(412,1,44,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(413,1,45,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(414,1,46,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(415,1,47,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(416,1,48,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(417,1,49,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(418,1,50,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(419,1,51,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(420,1,52,5,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(421,1,39,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(422,1,40,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(423,1,41,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(424,1,42,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(425,1,43,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(426,1,44,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(427,1,45,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(428,1,46,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(429,1,47,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(430,1,48,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(431,1,49,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(432,1,50,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(433,1,51,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(434,1,52,6,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(435,1,53,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(436,1,54,1,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(437,1,55,1,1,1,'2021-08-11 01:34:26',1,'2021-08-11 01:34:26',1),(438,1,55,2,1,1,'2021-08-11 01:34:26',1,'2021-08-11 01:34:26',1),(439,1,55,3,1,1,'2021-08-11 01:34:26',1,'2021-08-11 01:34:26',1),(440,1,55,4,1,1,'2021-08-11 01:34:26',1,'2021-08-11 01:34:26',1),(441,1,55,5,1,1,'2021-08-11 01:34:26',1,'2021-08-11 01:34:26',1),(442,1,55,6,1,1,'2021-08-11 01:34:26',1,'2021-08-11 01:34:26',1),(443,1,56,1,1,1,'2021-08-11 01:34:26',1,'2021-08-11 01:34:26',1),(444,1,57,1,1,1,'2021-08-11 01:34:39',1,'2021-08-11 01:34:39',1),(445,1,58,1,1,1,'2021-08-11 01:34:40',1,'2021-08-11 01:34:40',1),(446,1,59,1,1,1,'2021-08-11 01:34:40',1,'2021-08-11 01:34:40',1);
/*!40000 ALTER TABLE `ACCOUNT_COMBINATION` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ACCOUNT_SALE`
--

DROP TABLE IF EXISTS `ACCOUNT_SALE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ACCOUNT_SALE` (
  `ACCOUNT_SALE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `FORM_WORKFLOW_ID` int(10) unsigned NOT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `AR_CUSTOMER_ID` int(10) unsigned NOT NULL,
  `AR_CUSTOMER_ACCOUNT_ID` int(10) unsigned NOT NULL,
  `PO_DATE` date NOT NULL,
  `PO_NUMBER` int(20) NOT NULL,
  `REMARKS` varchar(100) DEFAULT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`ACCOUNT_SALE_ID`),
  KEY `FK_AS_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_AS_AR_CUSTOMER_ID` (`AR_CUSTOMER_ID`),
  KEY `FK_AS_AR_CUSTOMER_ACCOUNT_ID` (`AR_CUSTOMER_ACCOUNT_ID`),
  KEY `FK_AS_CREATED_BY` (`CREATED_BY`),
  KEY `FK_AS_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_AS_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_AS_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_AS_AR_CUSTOMER_ACCOUNT_ID` FOREIGN KEY (`AR_CUSTOMER_ACCOUNT_ID`) REFERENCES `AR_CUSTOMER_ACCOUNT` (`AR_CUSTOMER_ACCOUNT_ID`),
  CONSTRAINT `FK_AS_AR_CUSTOMER_ID` FOREIGN KEY (`AR_CUSTOMER_ID`) REFERENCES `AR_CUSTOMER` (`AR_CUSTOMER_ID`),
  CONSTRAINT `FK_AS_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_AS_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_AS_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_AS_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_AS_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ACCOUNT_SALE`
--

LOCK TABLES `ACCOUNT_SALE` WRITE;
/*!40000 ALTER TABLE `ACCOUNT_SALE` DISABLE KEYS */;
/*!40000 ALTER TABLE `ACCOUNT_SALE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ACCOUNT_SALES_PO_ITEM`
--

DROP TABLE IF EXISTS `ACCOUNT_SALES_PO_ITEM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ACCOUNT_SALES_PO_ITEM` (
  `ACCOUNT_SALES_PO_ITEM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `ACCOUNT_SALE_ID` int(10) unsigned NOT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double DEFAULT '0',
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `WAREHOUSE_ID` int(10) unsigned NOT NULL,
  PRIMARY KEY (`ACCOUNT_SALES_PO_ITEM_ID`),
  KEY `FK_ASPOI_ACCOUNT_SALE_ID` (`ACCOUNT_SALE_ID`),
  KEY `FK_ASPOI_ITEM_ID` (`ITEM_ID`),
  KEY `FK_ASPOI_WAREHOUSE_ID` (`WAREHOUSE_ID`),
  KEY `FK_ASPOI_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_ASPOI_ACCOUNT_SALE_ID` FOREIGN KEY (`ACCOUNT_SALE_ID`) REFERENCES `ACCOUNT_SALE` (`ACCOUNT_SALE_ID`),
  CONSTRAINT `FK_ASPOI_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_ASPOI_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_ASPOI_WAREHOUSE_ID` FOREIGN KEY (`WAREHOUSE_ID`) REFERENCES `WAREHOUSE` (`WAREHOUSE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ACCOUNT_SALES_PO_ITEM`
--

LOCK TABLES `ACCOUNT_SALES_PO_ITEM` WRITE;
/*!40000 ALTER TABLE `ACCOUNT_SALES_PO_ITEM` DISABLE KEYS */;
/*!40000 ALTER TABLE `ACCOUNT_SALES_PO_ITEM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ACCOUNT_SALE_ITEM`
--

DROP TABLE IF EXISTS `ACCOUNT_SALE_ITEM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ACCOUNT_SALE_ITEM` (
  `ACCOUNT_SALE_ITEM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `REF_ACCOUNT_SALE_ITEM_ID` int(10) unsigned DEFAULT NULL,
  `AR_TRANSACTION_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `WAREHOUSE_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double NOT NULL,
  `ITEM_SRP_ID` int(10) unsigned NOT NULL,
  `SRP` double NOT NULL,
  `ITEM_DISCOUNT_ID` int(10) unsigned DEFAULT NULL,
  `UNIT_COST` double NOT NULL DEFAULT '0',
  `DISCOUNT` double DEFAULT '0',
  `ITEM_ADD_ON_ID` int(10) unsigned DEFAULT NULL,
  `AMOUNT` double NOT NULL,
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  PRIMARY KEY (`ACCOUNT_SALE_ITEM_ID`),
  KEY `FK_ACCOUNT_SALES_ITEM_AR_TRANSACTION_ID` (`AR_TRANSACTION_ID`),
  KEY `FK_ACCOUNT_SALES_ITEM_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_ACCOUNT_SALES_ITEM_ITEM_ID` (`ITEM_ID`),
  KEY `FK_ACCOUNT_SALES_ITEM_WAREHOUSE_ID` (`WAREHOUSE_ID`),
  KEY `FK_ACCOUNT_SALES_ITEM_ITEM_SRP_ID` (`ITEM_SRP_ID`),
  KEY `FK_ACCOUNT_SALES_ITEM_ITEM_DISCOUNT_ID` (`ITEM_DISCOUNT_ID`),
  KEY `FK_ACCOUNT_SALES_ITEM_ADD_ON_ID` (`ITEM_ADD_ON_ID`),
  KEY `FK_ACCOUNT_SALES_ITEM_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_ACCOUNT_SALES_ITEM_ADD_ON_ID` FOREIGN KEY (`ITEM_ADD_ON_ID`) REFERENCES `ITEM_ADD_ON` (`ITEM_ADD_ON_ID`),
  CONSTRAINT `FK_ACCOUNT_SALES_ITEM_AR_TRANSACTION_ID` FOREIGN KEY (`AR_TRANSACTION_ID`) REFERENCES `AR_TRANSACTION` (`AR_TRANSACTION_ID`),
  CONSTRAINT `FK_ACCOUNT_SALES_ITEM_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_ACCOUNT_SALES_ITEM_ITEM_DISCOUNT_ID` FOREIGN KEY (`ITEM_DISCOUNT_ID`) REFERENCES `ITEM_DISCOUNT` (`ITEM_DISCOUNT_ID`),
  CONSTRAINT `FK_ACCOUNT_SALES_ITEM_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_ACCOUNT_SALES_ITEM_ITEM_SRP_ID` FOREIGN KEY (`ITEM_SRP_ID`) REFERENCES `ITEM_SRP` (`ITEM_SRP_ID`),
  CONSTRAINT `FK_ACCOUNT_SALES_ITEM_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_ACCOUNT_SALES_ITEM_WAREHOUSE_ID` FOREIGN KEY (`WAREHOUSE_ID`) REFERENCES `WAREHOUSE` (`WAREHOUSE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ACCOUNT_SALE_ITEM`
--

LOCK TABLES `ACCOUNT_SALE_ITEM` WRITE;
/*!40000 ALTER TABLE `ACCOUNT_SALE_ITEM` DISABLE KEYS */;
/*!40000 ALTER TABLE `ACCOUNT_SALE_ITEM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ACCOUNT_TYPE`
--

DROP TABLE IF EXISTS `ACCOUNT_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ACCOUNT_TYPE` (
  `ACCOUNT_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(100) NOT NULL,
  `NORMAL_BALANCE_ID` int(10) unsigned NOT NULL,
  `EB_SL_KEY_ID` int(10) unsigned NOT NULL DEFAULT '1',
  `CONTRA_ACCOUNT` tinyint(1) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`ACCOUNT_TYPE_ID`),
  KEY `FK_ACCOUNT_TYPE_NORMAL_BALANCE` (`NORMAL_BALANCE_ID`),
  KEY `FK_ACCOUNT_TYPE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_ACCOUNT_TYPE_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_ACCOUNT_TYPE_EB_SL_KEY` (`EB_SL_KEY_ID`),
  CONSTRAINT `FK_ACCOUNT_TYPE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_ACCOUNT_TYPE_EB_SL_KEY` FOREIGN KEY (`EB_SL_KEY_ID`) REFERENCES `EB_SL_KEY` (`EB_SL_KEY_ID`),
  CONSTRAINT `FK_ACCOUNT_TYPE_NORMAL_BALANCE` FOREIGN KEY (`NORMAL_BALANCE_ID`) REFERENCES `NORMAL_BALANCE` (`NORMAL_BALANCE_ID`),
  CONSTRAINT `FK_ACCOUNT_TYPE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ACCOUNT_TYPE`
--

LOCK TABLES `ACCOUNT_TYPE` WRITE;
/*!40000 ALTER TABLE `ACCOUNT_TYPE` DISABLE KEYS */;
INSERT INTO `ACCOUNT_TYPE` VALUES (1,'Current Assets',1,1,0,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20'),(2,'Non-Current Assets',1,1,0,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20'),(3,'Current Liabilities',2,1,0,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20'),(4,'Non-Current Liabilities',2,1,0,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20'),(5,'Net Sales',2,1,0,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20'),(6,'Cost of Sales',1,1,0,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20'),(7,'Operating Expenses',1,1,0,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20'),(8,'Equity',2,1,0,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20'),(9,'Temporary Account',1,1,0,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20');
/*!40000 ALTER TABLE `ACCOUNT_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ACTION_NOTICE`
--

DROP TABLE IF EXISTS `ACTION_NOTICE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ACTION_NOTICE` (
  `ACTION_NOTICE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(25) NOT NULL,
  `ACTIVE` tinyint(1) DEFAULT '1',
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`ACTION_NOTICE_ID`),
  KEY `FK_ACTION_NOTICE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_ACTION_NOTICE_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_ACTION_NOTICE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_ACTION_NOTICE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ACTION_NOTICE`
--

LOCK TABLES `ACTION_NOTICE` WRITE;
/*!40000 ALTER TABLE `ACTION_NOTICE` DISABLE KEYS */;
/*!40000 ALTER TABLE `ACTION_NOTICE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AC_AR_LINE`
--

DROP TABLE IF EXISTS `AC_AR_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AC_AR_LINE` (
  `AC_AR_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `AR_RECEIPT_ID` int(10) unsigned NOT NULL,
  `AR_LINE_SETUP_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double DEFAULT '0',
  `UNITOFMEASUREMENT_ID` int(10) unsigned DEFAULT NULL,
  `UP_AMOUNT` double DEFAULT '0',
  `AMOUNT` double DEFAULT '0',
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`AC_AR_LINE_ID`),
  KEY `FK_AC_AL_AR_RECEIPT_ID` (`AR_RECEIPT_ID`),
  KEY `FK_AC_AL_AR_LINE_SETUP_ID` (`AR_LINE_SETUP_ID`),
  KEY `FK_AC_AR_LINE_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_AC_AL_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  KEY `FK_AC_AL_DISCOUNT_TYPE_ID` (`DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_AC_AL_AR_LINE_SETUP_ID` FOREIGN KEY (`AR_LINE_SETUP_ID`) REFERENCES `AR_LINE_SETUP` (`AR_LINE_SETUP_ID`),
  CONSTRAINT `FK_AC_AL_AR_RECEIPT_ID` FOREIGN KEY (`AR_RECEIPT_ID`) REFERENCES `AR_RECEIPT` (`AR_RECEIPT_ID`),
  CONSTRAINT `FK_AC_AL_DISCOUNT_TYPE_ID` FOREIGN KEY (`DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_AC_AL_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_AC_AR_LINE_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AC_AR_LINE`
--

LOCK TABLES `AC_AR_LINE` WRITE;
/*!40000 ALTER TABLE `AC_AR_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `AC_AR_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AP_INVOICE`
--

DROP TABLE IF EXISTS `AP_INVOICE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AP_INVOICE` (
  `AP_INVOICE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `FORM_WORKFLOW_ID` int(10) unsigned DEFAULT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `EB_SL_KEY_ID` int(10) unsigned NOT NULL,
  `SEQUENCE_NO` int(10) unsigned NOT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `DIVISION_ID` int(10) unsigned DEFAULT NULL,
  `INVOICE_TYPE_ID` int(10) unsigned NOT NULL,
  `INVOICE_CLASSIFICATION_ID` int(10) unsigned DEFAULT NULL,
  `BMS_NUMBER` varchar(50) DEFAULT NULL,
  `INVOICE_NUMBER` varchar(100) DEFAULT NULL,
  `SUPPLIER_ID` int(10) unsigned NOT NULL,
  `SUPPLIER_ACCOUNT_ID` int(10) unsigned NOT NULL,
  `TERM_ID` int(10) unsigned DEFAULT NULL,
  `INVOICE_DATE` date DEFAULT NULL,
  `GL_DATE` date NOT NULL,
  `DUE_DATE` date DEFAULT NULL,
  `DESCRIPTION` text,
  `CURRENCY_ID` int(10) unsigned DEFAULT NULL,
  `CURRENCY_RATE_ID` int(10) unsigned DEFAULT NULL,
  `CURRENCY_RATE_VALUE` double DEFAULT '0',
  `AMOUNT` double NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `WT_ACCOUNT_SETTING_ID` int(10) unsigned DEFAULT NULL,
  `WT_AMOUNT` double DEFAULT '0',
  PRIMARY KEY (`AP_INVOICE_ID`),
  KEY `FK_AP_INVOICE_EB_SL_KEY_ID` (`EB_SL_KEY_ID`),
  KEY `FK_AP_INVOICE_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_AP_INVOICE_DIVISION_ID` (`DIVISION_ID`),
  KEY `FK_AP_INVOICE_INVOICE_TYPE_ID` (`INVOICE_TYPE_ID`),
  KEY `FK_AP_INVOICE_INVOICE_CLASSIFICATION_ID` (`INVOICE_CLASSIFICATION_ID`),
  KEY `FK_AP_INVOICE_SUPPLIER_ID` (`SUPPLIER_ID`),
  KEY `FK_AP_INVOICE_SUPPLIER_ACCOUNT_ID` (`SUPPLIER_ACCOUNT_ID`),
  KEY `FK_AP_INVOICE_TERM_ID` (`TERM_ID`),
  KEY `FK_AP_INVOICE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_AP_INVOICE_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_AP_INVOICE_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_AP_INVOICE_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_AP_INVOICE_CURRENCY_ID` (`CURRENCY_ID`),
  KEY `FK_AP_INVOICE_CURRENCY_RATE_ID` (`CURRENCY_RATE_ID`),
  KEY `FK_AP_INVOICE_WT_ACCOUNT_SETTING_ID` (`WT_ACCOUNT_SETTING_ID`),
  CONSTRAINT `FK_AP_INVOICE_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_AP_INVOICE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_AP_INVOICE_CURRENCY_ID` FOREIGN KEY (`CURRENCY_ID`) REFERENCES `CURRENCY` (`CURRENCY_ID`),
  CONSTRAINT `FK_AP_INVOICE_CURRENCY_RATE_ID` FOREIGN KEY (`CURRENCY_RATE_ID`) REFERENCES `CURRENCY_RATE` (`CURRENCY_RATE_ID`),
  CONSTRAINT `FK_AP_INVOICE_DIVISION_ID` FOREIGN KEY (`DIVISION_ID`) REFERENCES `DIVISION` (`DIVISION_ID`),
  CONSTRAINT `FK_AP_INVOICE_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_AP_INVOICE_EB_SL_KEY_ID` FOREIGN KEY (`EB_SL_KEY_ID`) REFERENCES `EB_SL_KEY` (`EB_SL_KEY_ID`),
  CONSTRAINT `FK_AP_INVOICE_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_AP_INVOICE_INVOICE_CLASSIFICATION_ID` FOREIGN KEY (`INVOICE_CLASSIFICATION_ID`) REFERENCES `INVOICE_CLASSIFICATION` (`INVOICE_CLASSIFICATION_ID`),
  CONSTRAINT `FK_AP_INVOICE_INVOICE_TYPE_ID` FOREIGN KEY (`INVOICE_TYPE_ID`) REFERENCES `INVOICE_TYPE` (`INVOICE_TYPE_ID`),
  CONSTRAINT `FK_AP_INVOICE_SUPPLIER_ACCOUNT_ID` FOREIGN KEY (`SUPPLIER_ACCOUNT_ID`) REFERENCES `SUPPLIER_ACCOUNT` (`SUPPLIER_ACCOUNT_ID`),
  CONSTRAINT `FK_AP_INVOICE_SUPPLIER_ID` FOREIGN KEY (`SUPPLIER_ID`) REFERENCES `SUPPLIER` (`SUPPLIER_ID`),
  CONSTRAINT `FK_AP_INVOICE_TERM_ID` FOREIGN KEY (`TERM_ID`) REFERENCES `TERM` (`TERM_ID`),
  CONSTRAINT `FK_AP_INVOICE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_AP_INVOICE_WT_ACCOUNT_SETTING_ID` FOREIGN KEY (`WT_ACCOUNT_SETTING_ID`) REFERENCES `WT_ACCOUNT_SETTING` (`WT_ACCOUNT_SETTING_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AP_INVOICE`
--

LOCK TABLES `AP_INVOICE` WRITE;
/*!40000 ALTER TABLE `AP_INVOICE` DISABLE KEYS */;
/*!40000 ALTER TABLE `AP_INVOICE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AP_INVOICE_ACCOUNT`
--

DROP TABLE IF EXISTS `AP_INVOICE_ACCOUNT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AP_INVOICE_ACCOUNT` (
  `AP_INVOICE_ACCOUNT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `DIVISION_ID` int(10) unsigned DEFAULT NULL,
  `ACCOUNT_COMBINATION_ID` int(10) unsigned NOT NULL,
  `DISCOUNT_AC_ID` int(10) unsigned NOT NULL,
  `ACTIVE` tinyint(1) DEFAULT '1',
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`AP_INVOICE_ACCOUNT_ID`),
  KEY `FK_AIA_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_AIA_DIVISION_ID` (`DIVISION_ID`),
  KEY `FK_AIA_AC_ID` (`ACCOUNT_COMBINATION_ID`),
  KEY `FK_AIA_DISCOUNT_AC_ID` (`DISCOUNT_AC_ID`),
  KEY `FK_AIA_CREATED_BY` (`CREATED_BY`),
  KEY `FK_AIA_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_AIA_AC_ID` FOREIGN KEY (`ACCOUNT_COMBINATION_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_AIA_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_AIA_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_AIA_DISCOUNT_AC_ID` FOREIGN KEY (`DISCOUNT_AC_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_AIA_DIVISION_ID` FOREIGN KEY (`DIVISION_ID`) REFERENCES `DIVISION` (`DIVISION_ID`),
  CONSTRAINT `FK_AIA_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AP_INVOICE_ACCOUNT`
--

LOCK TABLES `AP_INVOICE_ACCOUNT` WRITE;
/*!40000 ALTER TABLE `AP_INVOICE_ACCOUNT` DISABLE KEYS */;
INSERT INTO `AP_INVOICE_ACCOUNT` VALUES (1,1,1,437,26,1,1,'2021-08-11 01:34:26',1,'2021-08-11 01:34:26'),(2,1,2,438,55,1,1,'2021-08-11 01:34:26',1,'2021-08-11 01:34:26'),(3,1,3,439,118,1,1,'2021-08-11 01:34:26',1,'2021-08-11 01:34:26'),(4,1,4,440,181,1,1,'2021-08-11 01:34:26',1,'2021-08-11 01:34:26'),(5,1,5,441,244,1,1,'2021-08-11 01:34:26',1,'2021-08-11 01:34:26'),(6,1,6,442,307,1,1,'2021-08-11 01:34:26',1,'2021-08-11 01:34:26');
/*!40000 ALTER TABLE `AP_INVOICE_ACCOUNT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AP_INVOICE_GOODS`
--

DROP TABLE IF EXISTS `AP_INVOICE_GOODS`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AP_INVOICE_GOODS` (
  `AP_INVOICE_GOODS_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `AP_INVOICE_ID` int(10) unsigned DEFAULT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double NOT NULL,
  `UNIT_COST` double NOT NULL,
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `ITEM_DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `DISCOUNT_VALUE` double unsigned DEFAULT NULL,
  `DISCOUNT` double unsigned DEFAULT NULL,
  PRIMARY KEY (`AP_INVOICE_GOODS_ID`),
  KEY `FK_APIG_ITEM_ID` (`ITEM_ID`),
  KEY `FK_APIG_AP_INVOICE_ID` (`AP_INVOICE_ID`),
  KEY `FK_APIG_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_APIG_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  KEY `FK_APIG_ITEM_DISCOUNT_TYPE_ID` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_APIG_AP_INVOICE_ID` FOREIGN KEY (`AP_INVOICE_ID`) REFERENCES `AP_INVOICE` (`AP_INVOICE_ID`),
  CONSTRAINT `FK_APIG_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_APIG_ITEM_DISCOUNT_TYPE_ID` FOREIGN KEY (`ITEM_DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_APIG_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_APIG_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AP_INVOICE_GOODS`
--

LOCK TABLES `AP_INVOICE_GOODS` WRITE;
/*!40000 ALTER TABLE `AP_INVOICE_GOODS` DISABLE KEYS */;
/*!40000 ALTER TABLE `AP_INVOICE_GOODS` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AP_INVOICE_ITEM`
--

DROP TABLE IF EXISTS `AP_INVOICE_ITEM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AP_INVOICE_ITEM` (
  `AP_INVOICE_ITEM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `AP_INVOICE_ID` int(10) unsigned NOT NULL,
  `AMOUNT` double DEFAULT '0',
  `ACTIVE` tinyint(1) DEFAULT '1',
  PRIMARY KEY (`AP_INVOICE_ITEM_ID`),
  KEY `FK_APII_AP_INVOICE_ID` (`AP_INVOICE_ID`),
  KEY `FK_APII_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_APII_AP_INVOICE_ID` FOREIGN KEY (`AP_INVOICE_ID`) REFERENCES `AP_INVOICE` (`AP_INVOICE_ID`),
  CONSTRAINT `FK_APII_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AP_INVOICE_ITEM`
--

LOCK TABLES `AP_INVOICE_ITEM` WRITE;
/*!40000 ALTER TABLE `AP_INVOICE_ITEM` DISABLE KEYS */;
/*!40000 ALTER TABLE `AP_INVOICE_ITEM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AP_INVOICE_LINE`
--

DROP TABLE IF EXISTS `AP_INVOICE_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AP_INVOICE_LINE` (
  `AP_INVOICE_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `AP_INVOICE_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `AP_LINE_SETUP_ID` int(10) unsigned NOT NULL,
  `UNITOFMEASUREMENT_ID` int(10) unsigned DEFAULT NULL,
  `QUANTITY` double DEFAULT NULL,
  `UP_AMOUNT` double DEFAULT NULL,
  `AMOUNT` double NOT NULL,
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `DISCOUNT_VALUE` double unsigned DEFAULT NULL,
  `DISCOUNT` double unsigned DEFAULT NULL,
  `PERCENTILE` double DEFAULT NULL,
  PRIMARY KEY (`AP_INVOICE_LINE_ID`),
  KEY `FK_AP_IL_AP_INVOICE_ID` (`AP_INVOICE_ID`),
  KEY `FK_AP_IL_AP_LINE_SETUP_ID` (`AP_LINE_SETUP_ID`),
  KEY `FK_AP_IL_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_AP_IL_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  KEY `FK_AP_IL_DISCOUNT_TYPE_ID` (`DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_AP_IL_AP_INVOICE_ID` FOREIGN KEY (`AP_INVOICE_ID`) REFERENCES `AP_INVOICE` (`AP_INVOICE_ID`),
  CONSTRAINT `FK_AP_IL_AP_LINE_SETUP_ID` FOREIGN KEY (`AP_LINE_SETUP_ID`) REFERENCES `AP_LINE_SETUP` (`AP_LINE_SETUP_ID`),
  CONSTRAINT `FK_AP_IL_DISCOUNT_TYPE_ID` FOREIGN KEY (`DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_AP_IL_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_AP_IL_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AP_INVOICE_LINE`
--

LOCK TABLES `AP_INVOICE_LINE` WRITE;
/*!40000 ALTER TABLE `AP_INVOICE_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `AP_INVOICE_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AP_LINE`
--

DROP TABLE IF EXISTS `AP_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AP_LINE` (
  `AP_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `AP_INVOICE_ID` int(10) unsigned NOT NULL,
  `ACCOUNT_COMBINATION_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `AMOUNT` double NOT NULL,
  `DESCRIPTION` text,
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `GROSS_AMOUNT` double DEFAULT '0',
  PRIMARY KEY (`AP_LINE_ID`),
  KEY `FK_AP_LINE_AP_INVOICE_ID` (`AP_INVOICE_ID`),
  KEY `FK_AP_LINE_ACCOUNT_COMBINATION_ID` (`ACCOUNT_COMBINATION_ID`),
  KEY `FK_AP_LINE_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_AP_LINE_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_AP_LINE_ACCOUNT_COMBINATION` FOREIGN KEY (`ACCOUNT_COMBINATION_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_AP_LINE_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_AP_LINE_INVOICE_ID` FOREIGN KEY (`AP_INVOICE_ID`) REFERENCES `AP_INVOICE` (`AP_INVOICE_ID`),
  CONSTRAINT `FK_AP_LINE_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AP_LINE`
--

LOCK TABLES `AP_LINE` WRITE;
/*!40000 ALTER TABLE `AP_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `AP_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AP_LINE_SETUP`
--

DROP TABLE IF EXISTS `AP_LINE_SETUP`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AP_LINE_SETUP` (
  `AP_LINE_SETUP_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(100) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `ACCOUNT_COMBINATION_ID` int(10) unsigned NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`AP_LINE_SETUP_ID`),
  KEY `FK_AP_LINE_SETUP_ACCT_COMBI` (`ACCOUNT_COMBINATION_ID`),
  KEY `FK_AP_LINE_SETUP_CREATED_BY` (`CREATED_BY`),
  KEY `FK_AP_LINE_SETUP_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_AP_LINE_SETUP_ACCT_COMBI` FOREIGN KEY (`ACCOUNT_COMBINATION_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_AP_LINE_SETUP_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_AP_LINE_SETUP_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AP_LINE_SETUP`
--

LOCK TABLES `AP_LINE_SETUP` WRITE;
/*!40000 ALTER TABLE `AP_LINE_SETUP` DISABLE KEYS */;
/*!40000 ALTER TABLE `AP_LINE_SETUP` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AP_PAYMENT`
--

DROP TABLE IF EXISTS `AP_PAYMENT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AP_PAYMENT` (
  `AP_PAYMENT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `PAYMENT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `FORM_WORKFLOW_ID` int(10) unsigned DEFAULT NULL,
  `BANK_ACCOUNT_ID` int(10) unsigned DEFAULT NULL,
  `CHECKBOOK_ID` int(10) unsigned DEFAULT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `DIVISION_ID` int(10) unsigned NOT NULL,
  `SUPPLIER_ID` int(10) unsigned NOT NULL,
  `SUPPLIER_ACCOUNT_ID` int(10) unsigned NOT NULL,
  `PAYMENT_DATE` date NOT NULL,
  `CHECK_NUMBER` decimal(20,0) DEFAULT NULL,
  `CHECK_DATE` date DEFAULT NULL,
  `VOUCHER_NO` int(10) unsigned NOT NULL,
  `OFFICIAL_RECEIPT` varchar(30) DEFAULT NULL,
  `REMARKS` text,
  `AMOUNT` double NOT NULL,
  `CURRENCY_ID` int(10) unsigned DEFAULT NULL,
  `CURRENCY_RATE_ID` int(10) unsigned DEFAULT NULL,
  `CURRENCY_RATE_VALUE` double DEFAULT '0',
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `PAYEE` varchar(50) DEFAULT NULL,
  `SPECIFY_PAYEE` tinyint(1) DEFAULT '0',
  `DATE_CLEARED` date DEFAULT NULL,
  PRIMARY KEY (`AP_PAYMENT_ID`),
  KEY `FK_AP_PAYMENT_CREATED_BY` (`CREATED_BY`),
  KEY `FK_AP_PAYMENT_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_AP_PAYMENT_BANK_ACCOUNT_ID` (`BANK_ACCOUNT_ID`),
  KEY `FK_AP_PAYMENT_CHECKBOOK_ID` (`CHECKBOOK_ID`),
  KEY `FK_AP_PAYMENT_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_AP_PAYMENT_DIVISION_ID` (`DIVISION_ID`),
  KEY `FK_AP_PAYMENT_SUPPLIER_ID` (`SUPPLIER_ID`),
  KEY `FK_AP_PAYMENT_SUPPLIER_ACCOUNT_ID` (`SUPPLIER_ACCOUNT_ID`),
  KEY `FK_AP_PAYMENT_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_AP_PAYMENT_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_PAYMENT_TYPE_ID` (`PAYMENT_TYPE_ID`),
  KEY `FK_PAYMENT_CURRENCY_ID` (`CURRENCY_ID`),
  KEY `FK_PAYMENT_CURRENCY_RATE_ID` (`CURRENCY_RATE_ID`),
  CONSTRAINT `FK_AP_PAYMENT_BANK_ACCOUNT_ID` FOREIGN KEY (`BANK_ACCOUNT_ID`) REFERENCES `BANK_ACCOUNT` (`BANK_ACCOUNT_ID`),
  CONSTRAINT `FK_AP_PAYMENT_CHECKBOOK_ID` FOREIGN KEY (`CHECKBOOK_ID`) REFERENCES `CHECKBOOK` (`CHECKBOOK_ID`),
  CONSTRAINT `FK_AP_PAYMENT_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_AP_PAYMENT_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_AP_PAYMENT_DIVISION_ID` FOREIGN KEY (`DIVISION_ID`) REFERENCES `DIVISION` (`DIVISION_ID`),
  CONSTRAINT `FK_AP_PAYMENT_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_AP_PAYMENT_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_AP_PAYMENT_SUPPLIER_ACCOUNT_ID` FOREIGN KEY (`SUPPLIER_ACCOUNT_ID`) REFERENCES `SUPPLIER_ACCOUNT` (`SUPPLIER_ACCOUNT_ID`),
  CONSTRAINT `FK_AP_PAYMENT_SUPPLIER_ID` FOREIGN KEY (`SUPPLIER_ID`) REFERENCES `SUPPLIER` (`SUPPLIER_ID`),
  CONSTRAINT `FK_AP_PAYMENT_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_PAYMENT_CURRENCY_ID` FOREIGN KEY (`CURRENCY_ID`) REFERENCES `CURRENCY` (`CURRENCY_ID`),
  CONSTRAINT `FK_PAYMENT_CURRENCY_RATE_ID` FOREIGN KEY (`CURRENCY_RATE_ID`) REFERENCES `CURRENCY_RATE` (`CURRENCY_RATE_ID`),
  CONSTRAINT `FK_PAYMENT_TYPE_ID` FOREIGN KEY (`PAYMENT_TYPE_ID`) REFERENCES `PAYMENT_TYPE` (`PAYMENT_TYPE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AP_PAYMENT`
--

LOCK TABLES `AP_PAYMENT` WRITE;
/*!40000 ALTER TABLE `AP_PAYMENT` DISABLE KEYS */;
/*!40000 ALTER TABLE `AP_PAYMENT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AP_PAYMENT_INVOICE`
--

DROP TABLE IF EXISTS `AP_PAYMENT_INVOICE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AP_PAYMENT_INVOICE` (
  `AP_PAYMENT_INVOICE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `AP_PAYMENT_ID` int(10) unsigned NOT NULL,
  `AP_INVOICE_ID` int(10) unsigned NOT NULL,
  `PAID_AMOUNT` double DEFAULT '0',
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`AP_PAYMENT_INVOICE_ID`),
  KEY `FK_AP_PAYMENT_INVOICE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_AP_PAYMENT_INVOICE_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_AP_PAYMENT_INVOICE_INVOICE_ID` (`AP_INVOICE_ID`),
  KEY `AP_PAYMENT_ID` (`AP_PAYMENT_ID`),
  KEY `FK_AP_PAYMENT_INVOICE_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `AP_PAYMENT_INVOICE_ibfk_1` FOREIGN KEY (`AP_PAYMENT_ID`) REFERENCES `AP_PAYMENT` (`AP_PAYMENT_ID`),
  CONSTRAINT `FK_AP_PAYMENT_INVOICE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_AP_PAYMENT_INVOICE_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_AP_PAYMENT_INVOICE_INVOICE_ID` FOREIGN KEY (`AP_INVOICE_ID`) REFERENCES `AP_INVOICE` (`AP_INVOICE_ID`),
  CONSTRAINT `FK_AP_PAYMENT_INVOICE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AP_PAYMENT_INVOICE`
--

LOCK TABLES `AP_PAYMENT_INVOICE` WRITE;
/*!40000 ALTER TABLE `AP_PAYMENT_INVOICE` DISABLE KEYS */;
/*!40000 ALTER TABLE `AP_PAYMENT_INVOICE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AP_PAYMENT_LINE_TYPE`
--

DROP TABLE IF EXISTS `AP_PAYMENT_LINE_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AP_PAYMENT_LINE_TYPE` (
  `AP_PAYMENT_LINE_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(50) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`AP_PAYMENT_LINE_TYPE_ID`),
  KEY `FK_APLT_CREATED_BY` (`CREATED_BY`),
  KEY `FK_APLT_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_APLT_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_APLT_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AP_PAYMENT_LINE_TYPE`
--

LOCK TABLES `AP_PAYMENT_LINE_TYPE` WRITE;
/*!40000 ALTER TABLE `AP_PAYMENT_LINE_TYPE` DISABLE KEYS */;
INSERT INTO `AP_PAYMENT_LINE_TYPE` VALUES (1,'INVOICE',1,1,'2021-08-11 01:34:43',1,'2021-08-11 01:34:43'),(2,'SUPPLIER ADVANCE PAYMENT',1,1,'2021-08-11 01:34:43',1,'2021-08-11 01:34:43');
/*!40000 ALTER TABLE `AP_PAYMENT_LINE_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AR_CUSTOMER`
--

DROP TABLE IF EXISTS `AR_CUSTOMER`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AR_CUSTOMER` (
  `AR_CUSTOMER_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `BUSINESS_CLASSIFICATION_ID` int(10) unsigned DEFAULT NULL,
  `EB_SL_KEY_ID` int(10) unsigned NOT NULL,
  `NAME` varchar(50) NOT NULL,
  `FIRST_NAME` varchar(50) DEFAULT NULL,
  `LAST_NAME` varchar(50) DEFAULT NULL,
  `MIDDLE_NAME` varchar(50) DEFAULT NULL,
  `ADDRESS` varchar(150) DEFAULT NULL,
  `STREET_BRGY` varchar(150) DEFAULT NULL,
  `CITY_PROVINCE` varchar(150) DEFAULT NULL,
  `CONTACT_PERSON` varchar(50) DEFAULT NULL,
  `CONTACT_NUMBER` varchar(20) DEFAULT NULL,
  `EMAIL_ADDRESS` varchar(50) DEFAULT NULL,
  `TIN` varchar(20) DEFAULT NULL,
  `MAX_AMOUNT` decimal(12,2) DEFAULT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `CUSTOMER_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `PROJECT` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`AR_CUSTOMER_ID`),
  KEY `FK_CUSTOMER_EB_SL_KEY_ID` (`EB_SL_KEY_ID`),
  KEY `FK_CUSTOMER_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_CUSTOMER_CREATED_BY` (`CREATED_BY`),
  KEY `FK_CUSTOMER_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_CUSTOMER_BUSINESS_CLASSIFICATION_ID` (`BUSINESS_CLASSIFICATION_ID`),
  KEY `FK_CUSTOMER_CUSTOMER_TYPE_ID` (`CUSTOMER_TYPE_ID`),
  CONSTRAINT `FK_CUSTOMER_BUSINESS_CLASSIFICATION_ID` FOREIGN KEY (`BUSINESS_CLASSIFICATION_ID`) REFERENCES `BUSINESS_CLASSIFICATION` (`BUSINESS_CLASSIFICATION_ID`),
  CONSTRAINT `FK_CUSTOMER_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_CUSTOMER_CUSTOMER_TYPE_ID` FOREIGN KEY (`CUSTOMER_TYPE_ID`) REFERENCES `CUSTOMER_TYPE` (`CUSTOMER_TYPE_ID`),
  CONSTRAINT `FK_CUSTOMER_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_CUSTOMER_EB_SL_KEY_ID` FOREIGN KEY (`EB_SL_KEY_ID`) REFERENCES `EB_SL_KEY` (`EB_SL_KEY_ID`),
  CONSTRAINT `FK_CUSTOMER_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AR_CUSTOMER`
--

LOCK TABLES `AR_CUSTOMER` WRITE;
/*!40000 ALTER TABLE `AR_CUSTOMER` DISABLE KEYS */;
/*!40000 ALTER TABLE `AR_CUSTOMER` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AR_CUSTOMER_ACCOUNT`
--

DROP TABLE IF EXISTS `AR_CUSTOMER_ACCOUNT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AR_CUSTOMER_ACCOUNT` (
  `AR_CUSTOMER_ACCOUNT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `AR_CUSTOMER_ID` int(10) unsigned NOT NULL,
  `NAME` varchar(100) NOT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `DEFAULT_DEBIT_AC_ID` int(10) unsigned NOT NULL,
  `DEFAULT_AR_TRANSACTION_LINE_ID` int(10) unsigned DEFAULT NULL,
  `DEFAULT_WITHDRAWAL_SLIP_AC_ID` int(10) unsigned DEFAULT NULL,
  `DEFAULT_CUSTOMER_ADVANCES_AC_ID` int(10) unsigned DEFAULT NULL,
  `DEFAULT_RETENTION_AC_ID` int(10) unsigned DEFAULT NULL,
  `TERM_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`AR_CUSTOMER_ACCOUNT_ID`),
  KEY `FK_AR_CUST_ACCT_CUSTOMER` (`AR_CUSTOMER_ID`),
  KEY `FK_AR_CUST_ACCT_COMPANY` (`COMPANY_ID`),
  KEY `FK_AR_CUST_ACCT_DEFAULT_DEBIT_AC` (`DEFAULT_DEBIT_AC_ID`),
  KEY `FK_AR_CUST_ACCT_DEFAULT_AR_LINE` (`DEFAULT_AR_TRANSACTION_LINE_ID`),
  KEY `FK_AR_CUST_ACCT_TERM` (`TERM_ID`),
  KEY `FK_AR_CUST_ACCT_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_AR_CUST_ACCT_CREATED_BY` (`CREATED_BY`),
  KEY `FK_AR_CUST_ACCT_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_AR_CUST_ACCT_DEFAULT_WITHDRAWAL_SLIP_AC` (`DEFAULT_WITHDRAWAL_SLIP_AC_ID`),
  KEY `FK_AR_CUST_ACCT_DEFAULT_CUST_ADVANCES` (`DEFAULT_CUSTOMER_ADVANCES_AC_ID`),
  KEY `FK_AR_CUST_ACCT_DEFAULT_CUST_RETENTION` (`DEFAULT_RETENTION_AC_ID`),
  CONSTRAINT `FK_AR_CUST_ACCT_ACCOUNT_TERM` FOREIGN KEY (`TERM_ID`) REFERENCES `TERM` (`TERM_ID`),
  CONSTRAINT `FK_AR_CUST_ACCT_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_AR_CUST_ACCT_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_AR_CUST_ACCT_CUSTOMER` FOREIGN KEY (`AR_CUSTOMER_ID`) REFERENCES `AR_CUSTOMER` (`AR_CUSTOMER_ID`),
  CONSTRAINT `FK_AR_CUST_ACCT_DEFAULT_AR_LINE` FOREIGN KEY (`DEFAULT_AR_TRANSACTION_LINE_ID`) REFERENCES `AR_LINE_SETUP` (`AR_LINE_SETUP_ID`),
  CONSTRAINT `FK_AR_CUST_ACCT_DEFAULT_CUST_ADVANCES` FOREIGN KEY (`DEFAULT_CUSTOMER_ADVANCES_AC_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_AR_CUST_ACCT_DEFAULT_CUST_RETENTION` FOREIGN KEY (`DEFAULT_RETENTION_AC_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_AR_CUST_ACCT_DEFAULT_DEBIT_AC` FOREIGN KEY (`DEFAULT_DEBIT_AC_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_AR_CUST_ACCT_DEFAULT_WITHDRAWAL_SLIP_AC` FOREIGN KEY (`DEFAULT_WITHDRAWAL_SLIP_AC_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_AR_CUST_ACCT_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_AR_CUST_ACCT_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AR_CUSTOMER_ACCOUNT`
--

LOCK TABLES `AR_CUSTOMER_ACCOUNT` WRITE;
/*!40000 ALTER TABLE `AR_CUSTOMER_ACCOUNT` DISABLE KEYS */;
/*!40000 ALTER TABLE `AR_CUSTOMER_ACCOUNT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AR_INVOICE`
--

DROP TABLE IF EXISTS `AR_INVOICE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AR_INVOICE` (
  `AR_INVOICE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `DELIVERY_RECEIPT_ID` int(10) unsigned DEFAULT NULL,
  `SEQUENCE_NO` int(10) unsigned NOT NULL,
  `FORM_WORKFLOW_ID` int(10) unsigned NOT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `AR_CUSTOMER_ID` int(10) unsigned NOT NULL,
  `AR_CUSTOMER_ACCOUNT_ID` int(10) unsigned NOT NULL,
  `TERM_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `DIVISION_ID` int(10) unsigned DEFAULT NULL,
  `CURRENCY_ID` int(10) unsigned DEFAULT NULL,
  `CURRENCY_RATE_ID` int(10) unsigned DEFAULT NULL,
  `CURRENCY_RATE_VALUE` double DEFAULT '0',
  `DATE` date NOT NULL,
  `DUE_DATE` date NOT NULL,
  `REMARKS` text,
  `WT_ACCOUNT_SETTING_ID` int(10) unsigned DEFAULT NULL,
  `WT_AMOUNT` double DEFAULT '0',
  `WT_VAT_AMOUNT` double DEFAULT '0',
  `AMOUNT` double DEFAULT '0',
  `RETENTION` double DEFAULT '0',
  `RECOUPMENT` double DEFAULT '0',
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `AR_INVOICE_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `DR_REFERENCE_IDS` varchar(100) DEFAULT NULL,
  `DATE_RECEIVED` date DEFAULT NULL,
  `RECEIVER` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`AR_INVOICE_ID`),
  KEY `FK_ARI_DELIVERY_RECEIPT_ID` (`DELIVERY_RECEIPT_ID`),
  KEY `FK_ARI_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_ARI_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_ARI_CS_ID` (`AR_CUSTOMER_ID`),
  KEY `FK_ARI_CS_ACCT_ID` (`AR_CUSTOMER_ACCOUNT_ID`),
  KEY `FK_ARI_TERM_ID` (`TERM_ID`),
  KEY `FK_ARI_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_ARI_CREATED_BY` (`CREATED_BY`),
  KEY `FK_ARI_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_ARI_DIVISION_ID` (`DIVISION_ID`),
  KEY `FK_ARI_CURRENCY_ID` (`CURRENCY_ID`),
  KEY `FK_ARI_CURRENCY_RATE_ID` (`CURRENCY_RATE_ID`),
  KEY `FK_ARI_TYPE_ID` (`AR_INVOICE_TYPE_ID`),
  CONSTRAINT `FK_ARI_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_ARI_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_ARI_CS_ACCT_ID` FOREIGN KEY (`AR_CUSTOMER_ACCOUNT_ID`) REFERENCES `AR_CUSTOMER_ACCOUNT` (`AR_CUSTOMER_ACCOUNT_ID`),
  CONSTRAINT `FK_ARI_CS_ID` FOREIGN KEY (`AR_CUSTOMER_ID`) REFERENCES `AR_CUSTOMER` (`AR_CUSTOMER_ID`),
  CONSTRAINT `FK_ARI_CURRENCY_ID` FOREIGN KEY (`CURRENCY_ID`) REFERENCES `CURRENCY` (`CURRENCY_ID`),
  CONSTRAINT `FK_ARI_CURRENCY_RATE_ID` FOREIGN KEY (`CURRENCY_RATE_ID`) REFERENCES `CURRENCY_RATE` (`CURRENCY_RATE_ID`),
  CONSTRAINT `FK_ARI_DELIVERY_RECEIPT_ID` FOREIGN KEY (`DELIVERY_RECEIPT_ID`) REFERENCES `DELIVERY_RECEIPT` (`DELIVERY_RECEIPT_ID`),
  CONSTRAINT `FK_ARI_DIVISION_ID` FOREIGN KEY (`DIVISION_ID`) REFERENCES `DIVISION` (`DIVISION_ID`),
  CONSTRAINT `FK_ARI_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_ARI_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_ARI_TERM_ID` FOREIGN KEY (`TERM_ID`) REFERENCES `TERM` (`TERM_ID`),
  CONSTRAINT `FK_ARI_TYPE_ID` FOREIGN KEY (`AR_INVOICE_TYPE_ID`) REFERENCES `AR_INVOICE_TYPE` (`AR_INVOICE_TYPE_ID`),
  CONSTRAINT `FK_ARI_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AR_INVOICE`
--

LOCK TABLES `AR_INVOICE` WRITE;
/*!40000 ALTER TABLE `AR_INVOICE` DISABLE KEYS */;
/*!40000 ALTER TABLE `AR_INVOICE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AR_INVOICE_ACCOUNT`
--

DROP TABLE IF EXISTS `AR_INVOICE_ACCOUNT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AR_INVOICE_ACCOUNT` (
  `AR_INVOICE_ACCOUNT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `DIVISION_ID` int(10) unsigned DEFAULT NULL,
  `RETENTION_AC_ID` int(10) unsigned NOT NULL,
  `WT_VAT_AC_ID` int(10) unsigned NOT NULL,
  `DEFAULT_DISC_AC_ID` int(10) unsigned NOT NULL,
  `ACTIVE` tinyint(1) DEFAULT '1',
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`AR_INVOICE_ACCOUNT_ID`),
  KEY `FK_ARIA_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_ARIA_DIVISION_ID` (`DIVISION_ID`),
  KEY `FK_ARIA_RETENTION_AC_ID` (`RETENTION_AC_ID`),
  KEY `FK_ARIA_DISCOUNT_WT_VAT_AC_ID` (`WT_VAT_AC_ID`),
  KEY `FK_ARIA_DEFAULT_DISC_AC_ID` (`DEFAULT_DISC_AC_ID`),
  KEY `FK_ARIA_CREATED_BY` (`CREATED_BY`),
  KEY `FK_ARIA_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_ARIA_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_ARIA_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_ARIA_DEFAULT_DISC_AC_ID` FOREIGN KEY (`DEFAULT_DISC_AC_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_ARIA_DISCOUNT_WT_VAT_AC_ID` FOREIGN KEY (`WT_VAT_AC_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_ARIA_DIVISION_ID` FOREIGN KEY (`DIVISION_ID`) REFERENCES `DIVISION` (`DIVISION_ID`),
  CONSTRAINT `FK_ARIA_RETENTION_AC_ID` FOREIGN KEY (`RETENTION_AC_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_ARIA_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AR_INVOICE_ACCOUNT`
--

LOCK TABLES `AR_INVOICE_ACCOUNT` WRITE;
/*!40000 ALTER TABLE `AR_INVOICE_ACCOUNT` DISABLE KEYS */;
INSERT INTO `AR_INVOICE_ACCOUNT` VALUES (1,1,1,445,446,26,1,1,'2021-08-11 01:34:40',1,'2021-08-11 01:34:40');
/*!40000 ALTER TABLE `AR_INVOICE_ACCOUNT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AR_INVOICE_EQUIPMENT_LINE`
--

DROP TABLE IF EXISTS `AR_INVOICE_EQUIPMENT_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AR_INVOICE_EQUIPMENT_LINE` (
  `AR_INVOICE_EQUIPMENT_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `AR_INVOICE_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `AR_LINE_SETUP_ID` int(10) unsigned NOT NULL,
  `DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `DISCOUNT_VALUE` double DEFAULT '0',
  `DISCOUNT` double DEFAULT '0',
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `AMOUNT` double DEFAULT '0',
  `QUANTITY` double DEFAULT '0',
  `UP_AMOUNT` double DEFAULT '0',
  `UNITOFMEASUREMENT_ID` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`AR_INVOICE_EQUIPMENT_LINE_ID`),
  KEY `FK_AR_INVOICE_EQUIPMENT_LINE_AR_INVOICE_ID` (`AR_INVOICE_ID`),
  KEY `FK_AR_INVOICE_EQUIPMENT_LINE_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_AR_INVOICE_EQUIPMENT_LINE_AR_LINE_SETUP_ID` (`AR_LINE_SETUP_ID`),
  KEY `FK_AR_INVOICE_EQUIPMENT_LINE_DISCOUNT_TYPE_ID` (`DISCOUNT_TYPE_ID`),
  KEY `FK_AR_INVOICE_EQUIPMENT_LINE_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_AR_INVOICE_EQUIPMENT_LINE_AR_INVOICE_ID` FOREIGN KEY (`AR_INVOICE_ID`) REFERENCES `AR_INVOICE` (`AR_INVOICE_ID`),
  CONSTRAINT `FK_AR_INVOICE_EQUIPMENT_LINE_AR_LINE_SETUP_ID` FOREIGN KEY (`AR_LINE_SETUP_ID`) REFERENCES `AR_LINE_SETUP` (`AR_LINE_SETUP_ID`),
  CONSTRAINT `FK_AR_INVOICE_EQUIPMENT_LINE_DISCOUNT_TYPE_ID` FOREIGN KEY (`DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_AR_INVOICE_EQUIPMENT_LINE_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_AR_INVOICE_EQUIPMENT_LINE_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AR_INVOICE_EQUIPMENT_LINE`
--

LOCK TABLES `AR_INVOICE_EQUIPMENT_LINE` WRITE;
/*!40000 ALTER TABLE `AR_INVOICE_EQUIPMENT_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `AR_INVOICE_EQUIPMENT_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AR_INVOICE_ITEM`
--

DROP TABLE IF EXISTS `AR_INVOICE_ITEM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AR_INVOICE_ITEM` (
  `AR_INVOICE_ITEM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `AR_INVOICE_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `WAREHOUSE_ID` int(10) unsigned NOT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double NOT NULL,
  `ITEM_SRP_ID` int(10) unsigned DEFAULT NULL,
  `SRP` double DEFAULT '0',
  `UNIT_COST` double NOT NULL,
  `DISCOUNT` double DEFAULT '0',
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `AMOUNT` double DEFAULT '0',
  `ITEM_DISCOUNT_ID` int(10) unsigned DEFAULT NULL,
  `ITEM_ADD_ON_ID` int(10) unsigned DEFAULT NULL,
  `ITEM_DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `DISCOUNT_VALUE` double DEFAULT '0',
  PRIMARY KEY (`AR_INVOICE_ITEM_ID`),
  KEY `FK_ARII_AR_INVOICE_ID` (`AR_INVOICE_ID`),
  KEY `FK_ARII_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_ARII_WAREHOUSE_ID` (`WAREHOUSE_ID`),
  KEY `FK_ARII_ITEM_ID` (`ITEM_ID`),
  KEY `FK_ARII_ITEM_SRP_ID` (`ITEM_SRP_ID`),
  KEY `FK_ARII_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  KEY `FK_ARII_ITEM_DISCOUNT_ID` (`ITEM_DISCOUNT_ID`),
  KEY `FK_ARII_ITEM_ADD_ON_ID` (`ITEM_ADD_ON_ID`),
  KEY `FK_ARII_ITEM_DISCOUNT_TYPE_ID` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_ARII_AR_INVOICE_ID` FOREIGN KEY (`AR_INVOICE_ID`) REFERENCES `AR_INVOICE` (`AR_INVOICE_ID`),
  CONSTRAINT `FK_ARII_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_ARII_ITEM_ADD_ON_ID` FOREIGN KEY (`ITEM_ADD_ON_ID`) REFERENCES `ITEM_ADD_ON` (`ITEM_ADD_ON_ID`),
  CONSTRAINT `FK_ARII_ITEM_DISCOUNT_ID` FOREIGN KEY (`ITEM_DISCOUNT_ID`) REFERENCES `ITEM_DISCOUNT` (`ITEM_DISCOUNT_ID`),
  CONSTRAINT `FK_ARII_ITEM_DISCOUNT_TYPE_ID` FOREIGN KEY (`ITEM_DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_ARII_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_ARII_ITEM_SRP_ID` FOREIGN KEY (`ITEM_SRP_ID`) REFERENCES `ITEM_SRP` (`ITEM_SRP_ID`),
  CONSTRAINT `FK_ARII_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_ARII_WAREHOUSE_ID` FOREIGN KEY (`WAREHOUSE_ID`) REFERENCES `WAREHOUSE` (`WAREHOUSE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AR_INVOICE_ITEM`
--

LOCK TABLES `AR_INVOICE_ITEM` WRITE;
/*!40000 ALTER TABLE `AR_INVOICE_ITEM` DISABLE KEYS */;
/*!40000 ALTER TABLE `AR_INVOICE_ITEM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AR_INVOICE_LINE`
--

DROP TABLE IF EXISTS `AR_INVOICE_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AR_INVOICE_LINE` (
  `AR_INVOICE_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `AR_INVOICE_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `SERVICE_SETTING_ID` int(10) unsigned NOT NULL,
  `DESCRIPTION` text,
  `GROSS_AMOUNT` double DEFAULT '0',
  `DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `DISCOUNT_VALUE` double DEFAULT '0',
  `DISCOUNT` double DEFAULT '0',
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `AMOUNT` double DEFAULT '0',
  `QUANTITY` double DEFAULT '0',
  `PERCENTILE` double DEFAULT '0',
  `UP_AMOUNT` double DEFAULT '0',
  `UNITOFMEASUREMENT_ID` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`AR_INVOICE_LINE_ID`),
  KEY `FK_ARIL_AR_INVOICE_ID` (`AR_INVOICE_ID`),
  KEY `FK_ARIL_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_ARIL_SERVICE_SETTING_ID` (`SERVICE_SETTING_ID`),
  KEY `FK_ARIL_DISCOUNT_TYPE_ID` (`DISCOUNT_TYPE_ID`),
  KEY `FK_ARIL_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_ARIL_AR_INVOICE_ID` FOREIGN KEY (`AR_INVOICE_ID`) REFERENCES `AR_INVOICE` (`AR_INVOICE_ID`),
  CONSTRAINT `FK_ARIL_DISCOUNT_TYPE_ID` FOREIGN KEY (`DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_ARIL_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_ARIL_SERVICE_SETTING_ID` FOREIGN KEY (`SERVICE_SETTING_ID`) REFERENCES `SERVICE_SETTING` (`SERVICE_SETTING_ID`),
  CONSTRAINT `FK_ARIL_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AR_INVOICE_LINE`
--

LOCK TABLES `AR_INVOICE_LINE` WRITE;
/*!40000 ALTER TABLE `AR_INVOICE_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `AR_INVOICE_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AR_INVOICE_TRANSACTION`
--

DROP TABLE IF EXISTS `AR_INVOICE_TRANSACTION`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AR_INVOICE_TRANSACTION` (
  `AR_INVOICE_TRANSACTION_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `AR_INVOICE_ID` int(10) unsigned NOT NULL,
  `AR_TRANSACTION_ID` int(10) unsigned NOT NULL,
  PRIMARY KEY (`AR_INVOICE_TRANSACTION_ID`),
  KEY `FK_ARI_AR_INVOICE_ID` (`AR_INVOICE_ID`),
  KEY `FK_ARI_AR_TRANSACTION_ID` (`AR_TRANSACTION_ID`),
  CONSTRAINT `FK_ARI_AR_INVOICE_ID` FOREIGN KEY (`AR_INVOICE_ID`) REFERENCES `AR_INVOICE` (`AR_INVOICE_ID`),
  CONSTRAINT `FK_ARI_AR_TRANSACTION_ID` FOREIGN KEY (`AR_TRANSACTION_ID`) REFERENCES `AR_TRANSACTION` (`AR_TRANSACTION_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AR_INVOICE_TRANSACTION`
--

LOCK TABLES `AR_INVOICE_TRANSACTION` WRITE;
/*!40000 ALTER TABLE `AR_INVOICE_TRANSACTION` DISABLE KEYS */;
/*!40000 ALTER TABLE `AR_INVOICE_TRANSACTION` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AR_INVOICE_TRUCKING_LINE`
--

DROP TABLE IF EXISTS `AR_INVOICE_TRUCKING_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AR_INVOICE_TRUCKING_LINE` (
  `AR_INVOICE_TRUCKING_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `AR_INVOICE_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `AR_LINE_SETUP_ID` int(10) unsigned NOT NULL,
  `DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `DISCOUNT_VALUE` double DEFAULT '0',
  `DISCOUNT` double DEFAULT '0',
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `AMOUNT` double DEFAULT '0',
  `QUANTITY` double DEFAULT '0',
  `UP_AMOUNT` double DEFAULT '0',
  `UNITOFMEASUREMENT_ID` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`AR_INVOICE_TRUCKING_LINE_ID`),
  KEY `FK_AR_INVOICE_TRUCKING_LINE_AR_INVOICE_ID` (`AR_INVOICE_ID`),
  KEY `FK_AR_INVOICE_TRUCKING_LINE_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_AR_INVOICE_TRUCKING_LINE_AR_LINE_SETUP_ID` (`AR_LINE_SETUP_ID`),
  KEY `FK_AR_INVOICE_TRUCKING_LINE_DISCOUNT_TYPE_ID` (`DISCOUNT_TYPE_ID`),
  KEY `FK_AR_INVOICE_TRUCKING_LINE_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_AR_INVOICE_TRUCKING_LINE_AR_INVOICE_ID` FOREIGN KEY (`AR_INVOICE_ID`) REFERENCES `AR_INVOICE` (`AR_INVOICE_ID`),
  CONSTRAINT `FK_AR_INVOICE_TRUCKING_LINE_AR_LINE_SETUP_ID` FOREIGN KEY (`AR_LINE_SETUP_ID`) REFERENCES `AR_LINE_SETUP` (`AR_LINE_SETUP_ID`),
  CONSTRAINT `FK_AR_INVOICE_TRUCKING_LINE_DISCOUNT_TYPE_ID` FOREIGN KEY (`DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_AR_INVOICE_TRUCKING_LINE_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_AR_INVOICE_TRUCKING_LINE_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AR_INVOICE_TRUCKING_LINE`
--

LOCK TABLES `AR_INVOICE_TRUCKING_LINE` WRITE;
/*!40000 ALTER TABLE `AR_INVOICE_TRUCKING_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `AR_INVOICE_TRUCKING_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AR_INVOICE_TYPE`
--

DROP TABLE IF EXISTS `AR_INVOICE_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AR_INVOICE_TYPE` (
  `AR_INVOICE_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(50) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  PRIMARY KEY (`AR_INVOICE_TYPE_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AR_INVOICE_TYPE`
--

LOCK TABLES `AR_INVOICE_TYPE` WRITE;
/*!40000 ALTER TABLE `AR_INVOICE_TYPE` DISABLE KEYS */;
INSERT INTO `AR_INVOICE_TYPE` VALUES (1,'AR Invoice - Goods',1),(2,'AR Invoice - Service',1),(3,'AR Invoice - Central',1),(4,'AR Invoice - NSB 3',1),(5,'AR Invoice - NSB 4',1),(6,'AR Invoice - NSB 5',1),(7,'AR Invoice - NSB 8',1),(8,'AR Invoice - NSB 8A',1);
/*!40000 ALTER TABLE `AR_INVOICE_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AR_LINE`
--

DROP TABLE IF EXISTS `AR_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AR_LINE` (
  `AR_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `AR_TRANSACTION_ID` int(10) unsigned NOT NULL,
  `AR_LINE_SETUP_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `QUANTITY` double DEFAULT '0',
  `UNITOFMEASUREMENT_ID` int(10) unsigned DEFAULT NULL,
  `UP_AMOUNT` double DEFAULT '0',
  `AMOUNT` double DEFAULT '0',
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`AR_LINE_ID`),
  KEY `FK_AR_LINE_AR_TRANSACTION_ID` (`AR_TRANSACTION_ID`),
  KEY `FK_AR_LINE_AR_LINE_SETUP_ID` (`AR_LINE_SETUP_ID`),
  KEY `FK_AR_LINE_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_AR_LINE_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  KEY `FK_AR_LINE_DISCOUNT_TYPE_ID` (`DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_AR_LINE_AR_LINE_SETUP_ID` FOREIGN KEY (`AR_LINE_SETUP_ID`) REFERENCES `AR_LINE_SETUP` (`AR_LINE_SETUP_ID`),
  CONSTRAINT `FK_AR_LINE_DISCOUNT_TYPE_ID` FOREIGN KEY (`DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_AR_LINE_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_AR_LINE_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_AR_LINE_TRANSACTION_ID` FOREIGN KEY (`AR_TRANSACTION_ID`) REFERENCES `AR_TRANSACTION` (`AR_TRANSACTION_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AR_LINE`
--

LOCK TABLES `AR_LINE` WRITE;
/*!40000 ALTER TABLE `AR_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `AR_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AR_LINE_SETUP`
--

DROP TABLE IF EXISTS `AR_LINE_SETUP`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AR_LINE_SETUP` (
  `AR_LINE_SETUP_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(100) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `ACCOUNT_COMBINATION_ID` int(10) unsigned NOT NULL,
  `DISCOUNT_AC_ID` int(10) unsigned DEFAULT NULL,
  `AMOUNT` double DEFAULT '0',
  `EB_SL_KEY_ID` int(10) unsigned NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`AR_LINE_SETUP_ID`),
  KEY `FK_LINE_SETUP_ACCT_COMBI` (`ACCOUNT_COMBINATION_ID`),
  KEY `FK_LINE_SETUP_CREATED_BY` (`CREATED_BY`),
  KEY `FK_LINE_SETUP_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_AR_LINE_SETUP_DISCOUNT_AC_ID` (`DISCOUNT_AC_ID`),
  CONSTRAINT `FK_AR_LINE_SETUP_DISCOUNT_AC_ID` FOREIGN KEY (`DISCOUNT_AC_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_LINE_SETUP_ACCT_COMBI` FOREIGN KEY (`ACCOUNT_COMBINATION_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_LINE_SETUP_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_LINE_SETUP_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AR_LINE_SETUP`
--

LOCK TABLES `AR_LINE_SETUP` WRITE;
/*!40000 ALTER TABLE `AR_LINE_SETUP` DISABLE KEYS */;
/*!40000 ALTER TABLE `AR_LINE_SETUP` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AR_MISCELLANEOUS`
--

DROP TABLE IF EXISTS `AR_MISCELLANEOUS`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AR_MISCELLANEOUS` (
  `AR_MISCELLANEOUS_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `AR_MISCELLANEOUS_TYPE_ID` int(10) unsigned NOT NULL,
  `REF_NUMBER` varchar(20) DEFAULT NULL,
  `FORM_WORKFLOW_ID` int(10) unsigned DEFAULT NULL,
  `EB_SL_KEY_ID` int(10) unsigned NOT NULL,
  `SEQUENCE_NO` int(10) unsigned NOT NULL,
  `RECEIPT_METHOD_ID` int(10) DEFAULT NULL,
  `AR_CUSTOMER_ID` int(10) unsigned NOT NULL,
  `AR_CUSTOMER_ACCOUNT_ID` int(10) unsigned NOT NULL,
  `RECEIPT_NUMBER` varchar(100) NOT NULL,
  `RECEIPT_DATE` date NOT NULL,
  `MATURITY_DATE` date NOT NULL,
  `DESCRIPTION` text,
  `AMOUNT` double NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `WT_ACCOUNT_SETTING_ID` int(10) unsigned DEFAULT NULL,
  `WT_AMOUNT` double DEFAULT '0',
  PRIMARY KEY (`AR_MISCELLANEOUS_ID`),
  KEY `FK_AR_MISCELLANEOUS_TYPE_ID` (`AR_MISCELLANEOUS_TYPE_ID`),
  KEY `FK_AR_MISCELLANEOUS_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_AR_MISCELLANEOUS_EB_SL_KEY_ID` (`EB_SL_KEY_ID`),
  KEY `FK_AR_MISCELLANEOUS_CUSTOMER_ID` (`AR_CUSTOMER_ID`),
  KEY `FK_AR_MISCELLANEOUS_CUSTOMER_ACCOUNT_ID` (`AR_CUSTOMER_ACCOUNT_ID`),
  KEY `FK_AR_MISCELLANEOUS_CREATED_BY` (`CREATED_BY`),
  KEY `FK_AR_MISCELLANEOUS_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_AR_MISCELLANEOUS_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_AR_MISCELLANEOUS_WT_ACCOUNT_SETTING_ID` (`WT_ACCOUNT_SETTING_ID`),
  CONSTRAINT `FK_AR_MISCELLANEOUS_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_AR_MISCELLANEOUS_CUSTOMER_ACCOUNT_ID` FOREIGN KEY (`AR_CUSTOMER_ACCOUNT_ID`) REFERENCES `AR_CUSTOMER_ACCOUNT` (`AR_CUSTOMER_ACCOUNT_ID`),
  CONSTRAINT `FK_AR_MISCELLANEOUS_CUSTOMER_ID` FOREIGN KEY (`AR_CUSTOMER_ID`) REFERENCES `AR_CUSTOMER` (`AR_CUSTOMER_ID`),
  CONSTRAINT `FK_AR_MISCELLANEOUS_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_AR_MISCELLANEOUS_EB_SL_KEY_ID` FOREIGN KEY (`EB_SL_KEY_ID`) REFERENCES `EB_SL_KEY` (`EB_SL_KEY_ID`),
  CONSTRAINT `FK_AR_MISCELLANEOUS_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_AR_MISCELLANEOUS_TYPE_ID` FOREIGN KEY (`AR_MISCELLANEOUS_TYPE_ID`) REFERENCES `AR_MISCELLANEOUS_TYPE` (`AR_MISCELLANEOUS_TYPE_ID`),
  CONSTRAINT `FK_AR_MISCELLANEOUS_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_AR_MISCELLANEOUS_WT_ACCOUNT_SETTING_ID` FOREIGN KEY (`WT_ACCOUNT_SETTING_ID`) REFERENCES `WT_ACCOUNT_SETTING` (`WT_ACCOUNT_SETTING_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AR_MISCELLANEOUS`
--

LOCK TABLES `AR_MISCELLANEOUS` WRITE;
/*!40000 ALTER TABLE `AR_MISCELLANEOUS` DISABLE KEYS */;
/*!40000 ALTER TABLE `AR_MISCELLANEOUS` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AR_MISCELLANEOUS_LINE`
--

DROP TABLE IF EXISTS `AR_MISCELLANEOUS_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AR_MISCELLANEOUS_LINE` (
  `AR_MISCELLANEOUS_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `AR_MISCELLANEOUS_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `SERVICE_SETTING_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double DEFAULT '0',
  `UNITOFMEASUREMENT_ID` int(10) unsigned DEFAULT NULL,
  `UP_AMOUNT` double DEFAULT '0',
  `AMOUNT` double DEFAULT '0',
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`AR_MISCELLANEOUS_LINE_ID`),
  KEY `FK_AR_MISCELLANEOUS_LINE_AR_MISCELLANEOUS_ID` (`AR_MISCELLANEOUS_ID`),
  KEY `FK_AR_MISCELLANEOUS_LINE_SERVICE_SETTING_ID` (`SERVICE_SETTING_ID`),
  KEY `FK_AR_MISCELLANEOUS_LINE_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_AR_MISCELLANEOUS_LINE_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  KEY `FK_AR_MISCELLANEOUS_LINE_DISCOUNT_TYPE_ID` (`DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_AR_MISCELLANEOUS_LINE_AR_MISCELLANEOUS_ID` FOREIGN KEY (`AR_MISCELLANEOUS_ID`) REFERENCES `AR_MISCELLANEOUS` (`AR_MISCELLANEOUS_ID`),
  CONSTRAINT `FK_AR_MISCELLANEOUS_LINE_DISCOUNT_TYPE_ID` FOREIGN KEY (`DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_AR_MISCELLANEOUS_LINE_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_AR_MISCELLANEOUS_LINE_SERVICE_SETTING_ID` FOREIGN KEY (`SERVICE_SETTING_ID`) REFERENCES `SERVICE_SETTING` (`SERVICE_SETTING_ID`),
  CONSTRAINT `FK_AR_MISCELLANEOUS_LINE_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AR_MISCELLANEOUS_LINE`
--

LOCK TABLES `AR_MISCELLANEOUS_LINE` WRITE;
/*!40000 ALTER TABLE `AR_MISCELLANEOUS_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `AR_MISCELLANEOUS_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AR_MISCELLANEOUS_TYPE`
--

DROP TABLE IF EXISTS `AR_MISCELLANEOUS_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AR_MISCELLANEOUS_TYPE` (
  `AR_MISCELLANEOUS_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(20) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`AR_MISCELLANEOUS_TYPE_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AR_MISCELLANEOUS_TYPE`
--

LOCK TABLES `AR_MISCELLANEOUS_TYPE` WRITE;
/*!40000 ALTER TABLE `AR_MISCELLANEOUS_TYPE` DISABLE KEYS */;
INSERT INTO `AR_MISCELLANEOUS_TYPE` VALUES (1,'CASH',1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20'),(2,'CHECK',1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20');
/*!40000 ALTER TABLE `AR_MISCELLANEOUS_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AR_RECEIPT`
--

DROP TABLE IF EXISTS `AR_RECEIPT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AR_RECEIPT` (
  `AR_RECEIPT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `AR_RECEIPT_TYPE_ID` int(10) unsigned NOT NULL,
  `COMPANY_ID` int(10) unsigned DEFAULT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `REF_NUMBER` varchar(20) DEFAULT NULL,
  `FORM_WORKFLOW_ID` int(10) unsigned DEFAULT NULL,
  `EB_SL_KEY_ID` int(10) unsigned NOT NULL,
  `SEQUENCE_NO` int(10) unsigned NOT NULL,
  `RECEIPT_METHOD_ID` int(10) DEFAULT NULL,
  `AR_CUSTOMER_ID` int(10) unsigned NOT NULL,
  `AR_CUSTOMER_ACCOUNT_ID` int(10) unsigned NOT NULL,
  `RECEIPT_NUMBER` varchar(100) NOT NULL,
  `RECEIPT_DATE` date NOT NULL,
  `MATURITY_DATE` date NOT NULL,
  `AMOUNT` double NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `DIVISION_ID` int(10) unsigned DEFAULT NULL,
  `CURRENCY_ID` int(10) unsigned DEFAULT NULL,
  `CURRENCY_RATE_ID` int(10) unsigned DEFAULT NULL,
  `CURRENCY_RATE_VALUE` double DEFAULT '0',
  `RETENTION` double DEFAULT '0',
  `RECOUPMENT` double DEFAULT '0',
  PRIMARY KEY (`AR_RECEIPT_ID`),
  KEY `FK_AR_RECEIPT_TYPE_ID` (`AR_RECEIPT_TYPE_ID`),
  KEY `FK_AR_RECEIPT_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_AR_RECEIPT_EB_SL_KEY_ID` (`EB_SL_KEY_ID`),
  KEY `FK_AR_RECEIPT_CUSTOMER_ID` (`AR_CUSTOMER_ID`),
  KEY `FK_AR_RECEIPT_CUSTOMER_ACCOUNT_ID` (`AR_CUSTOMER_ACCOUNT_ID`),
  KEY `FK_AR_RECEIPT_CREATED_BY` (`CREATED_BY`),
  KEY `FK_AR_RECEIPT_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_AR_RECEIPT_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_AR_RECEIPT_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_AR_RECEIPT_DIVISION_ID` (`DIVISION_ID`),
  KEY `FK_AR_RECEIPT_CURRENCY_ID` (`CURRENCY_ID`),
  KEY `FK_AR_RECEIPT_PAYMENT_CURRENCY_RATE_ID` (`CURRENCY_RATE_ID`),
  CONSTRAINT `FK_AR_RECEIPT_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_AR_RECEIPT_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_AR_RECEIPT_CURRENCY_ID` FOREIGN KEY (`CURRENCY_ID`) REFERENCES `CURRENCY` (`CURRENCY_ID`),
  CONSTRAINT `FK_AR_RECEIPT_CUSTOMER_ACCOUNT_ID` FOREIGN KEY (`AR_CUSTOMER_ACCOUNT_ID`) REFERENCES `AR_CUSTOMER_ACCOUNT` (`AR_CUSTOMER_ACCOUNT_ID`),
  CONSTRAINT `FK_AR_RECEIPT_CUSTOMER_ID` FOREIGN KEY (`AR_CUSTOMER_ID`) REFERENCES `AR_CUSTOMER` (`AR_CUSTOMER_ID`),
  CONSTRAINT `FK_AR_RECEIPT_DIVISION_ID` FOREIGN KEY (`DIVISION_ID`) REFERENCES `DIVISION` (`DIVISION_ID`),
  CONSTRAINT `FK_AR_RECEIPT_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_AR_RECEIPT_EB_SL_KEY_ID` FOREIGN KEY (`EB_SL_KEY_ID`) REFERENCES `EB_SL_KEY` (`EB_SL_KEY_ID`),
  CONSTRAINT `FK_AR_RECEIPT_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_AR_RECEIPT_PAYMENT_CURRENCY_RATE_ID` FOREIGN KEY (`CURRENCY_RATE_ID`) REFERENCES `CURRENCY_RATE` (`CURRENCY_RATE_ID`),
  CONSTRAINT `FK_AR_RECEIPT_TYPE_ID` FOREIGN KEY (`AR_RECEIPT_TYPE_ID`) REFERENCES `AR_RECEIPT_TYPE` (`AR_RECEIPT_TYPE_ID`),
  CONSTRAINT `FK_AR_RECEIPT_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AR_RECEIPT`
--

LOCK TABLES `AR_RECEIPT` WRITE;
/*!40000 ALTER TABLE `AR_RECEIPT` DISABLE KEYS */;
/*!40000 ALTER TABLE `AR_RECEIPT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AR_RECEIPT_ADVANCE_PAYMENT`
--

DROP TABLE IF EXISTS `AR_RECEIPT_ADVANCE_PAYMENT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AR_RECEIPT_ADVANCE_PAYMENT` (
  `AR_RECEIPT_ADVANCE_PAYMENT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `AR_RECEIPT_ID` int(10) unsigned NOT NULL,
  `CUSTOMER_ADVANCE_PAYMENT_ID` int(10) unsigned NOT NULL,
  PRIMARY KEY (`AR_RECEIPT_ADVANCE_PAYMENT_ID`),
  KEY `FK_ARRAP_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_ARRAP_AR_RECEIPT_ID` (`AR_RECEIPT_ID`),
  KEY `FK_ARRAP_CAP_ID` (`CUSTOMER_ADVANCE_PAYMENT_ID`),
  CONSTRAINT `FK_ARRAP_AR_RECEIPT_ID` FOREIGN KEY (`AR_RECEIPT_ID`) REFERENCES `AR_RECEIPT` (`AR_RECEIPT_ID`),
  CONSTRAINT `FK_ARRAP_CAP_ID` FOREIGN KEY (`CUSTOMER_ADVANCE_PAYMENT_ID`) REFERENCES `CUSTOMER_ADVANCE_PAYMENT` (`CUSTOMER_ADVANCE_PAYMENT_ID`),
  CONSTRAINT `FK_ARRAP_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AR_RECEIPT_ADVANCE_PAYMENT`
--

LOCK TABLES `AR_RECEIPT_ADVANCE_PAYMENT` WRITE;
/*!40000 ALTER TABLE `AR_RECEIPT_ADVANCE_PAYMENT` DISABLE KEYS */;
/*!40000 ALTER TABLE `AR_RECEIPT_ADVANCE_PAYMENT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AR_RECEIPT_LINE`
--

DROP TABLE IF EXISTS `AR_RECEIPT_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AR_RECEIPT_LINE` (
  `AR_RECEIPT_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `AR_RECEIPT_ID` int(10) unsigned NOT NULL,
  `AR_RECEIPT_LINE_TYPE_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `AMOUNT` double DEFAULT '0',
  PRIMARY KEY (`AR_RECEIPT_LINE_ID`),
  KEY `FK_ARL_AR_RECEIPT_ID` (`AR_RECEIPT_ID`),
  KEY `FK_ARL_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_ARL_AR_RECEIPT_LINE_TYPE_ID` (`AR_RECEIPT_LINE_TYPE_ID`),
  CONSTRAINT `FK_ARL_AR_RECEIPT_ID` FOREIGN KEY (`AR_RECEIPT_ID`) REFERENCES `AR_RECEIPT` (`AR_RECEIPT_ID`),
  CONSTRAINT `FK_ARL_AR_RECEIPT_LINE_TYPE_ID` FOREIGN KEY (`AR_RECEIPT_LINE_TYPE_ID`) REFERENCES `AR_RECEIPT_LINE_TYPE` (`AR_RECEIPT_LINE_TYPE_ID`),
  CONSTRAINT `FK_ARL_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AR_RECEIPT_LINE`
--

LOCK TABLES `AR_RECEIPT_LINE` WRITE;
/*!40000 ALTER TABLE `AR_RECEIPT_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `AR_RECEIPT_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AR_RECEIPT_LINE_TYPE`
--

DROP TABLE IF EXISTS `AR_RECEIPT_LINE_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AR_RECEIPT_LINE_TYPE` (
  `AR_RECEIPT_LINE_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(50) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`AR_RECEIPT_LINE_TYPE_ID`),
  KEY `FK_ARLT_CREATED_BY` (`CREATED_BY`),
  KEY `FK_ARLT_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_ARLT_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_ARLT_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AR_RECEIPT_LINE_TYPE`
--

LOCK TABLES `AR_RECEIPT_LINE_TYPE` WRITE;
/*!40000 ALTER TABLE `AR_RECEIPT_LINE_TYPE` DISABLE KEYS */;
INSERT INTO `AR_RECEIPT_LINE_TYPE` VALUES (1,'AR INVOICE',1,1,'2021-08-11 01:34:37',1,'2021-08-11 01:34:37'),(2,'AR TRANSACTION',1,1,'2021-08-11 01:34:37',1,'2021-08-11 01:34:37'),(3,'CUSTOMER ADVANCE PAYMENT',1,1,'2021-08-11 01:34:37',1,'2021-08-11 01:34:37');
/*!40000 ALTER TABLE `AR_RECEIPT_LINE_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AR_RECEIPT_TRANSACTION`
--

DROP TABLE IF EXISTS `AR_RECEIPT_TRANSACTION`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AR_RECEIPT_TRANSACTION` (
  `AR_RECEIPT_TRANSACTION_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `AR_RECEIPT_ID` int(10) unsigned NOT NULL,
  `AR_TRANSACTION_ID` int(10) unsigned NOT NULL,
  `AMOUNT` double NOT NULL,
  PRIMARY KEY (`AR_RECEIPT_TRANSACTION_ID`),
  KEY `FK_AR_RECEIPT_TRANSACTION_RECEIPT_ID` (`AR_RECEIPT_ID`),
  KEY `FK_AR_RECEIPT_TRANSACTION_TRANSACTION_ID` (`AR_TRANSACTION_ID`),
  CONSTRAINT `FK_AR_RECEIPT_TRANSACTION_RECEIPT_ID` FOREIGN KEY (`AR_RECEIPT_ID`) REFERENCES `AR_RECEIPT` (`AR_RECEIPT_ID`),
  CONSTRAINT `FK_AR_RECEIPT_TRANSACTION_TRANSACTION_ID` FOREIGN KEY (`AR_TRANSACTION_ID`) REFERENCES `AR_TRANSACTION` (`AR_TRANSACTION_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AR_RECEIPT_TRANSACTION`
--

LOCK TABLES `AR_RECEIPT_TRANSACTION` WRITE;
/*!40000 ALTER TABLE `AR_RECEIPT_TRANSACTION` DISABLE KEYS */;
/*!40000 ALTER TABLE `AR_RECEIPT_TRANSACTION` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AR_RECEIPT_TYPE`
--

DROP TABLE IF EXISTS `AR_RECEIPT_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AR_RECEIPT_TYPE` (
  `AR_RECEIPT_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(20) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`AR_RECEIPT_TYPE_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AR_RECEIPT_TYPE`
--

LOCK TABLES `AR_RECEIPT_TYPE` WRITE;
/*!40000 ALTER TABLE `AR_RECEIPT_TYPE` DISABLE KEYS */;
INSERT INTO `AR_RECEIPT_TYPE` VALUES (1,'CASH',1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20'),(2,'CHECK',1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20'),(3,'BANK TRANSFER',1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20');
/*!40000 ALTER TABLE `AR_RECEIPT_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AR_TRANSACTION`
--

DROP TABLE IF EXISTS `AR_TRANSACTION`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AR_TRANSACTION` (
  `AR_TRANSACTION_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `FORM_WORKFLOW_ID` int(10) unsigned DEFAULT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `EB_SL_KEY_ID` int(10) unsigned NOT NULL,
  `SEQUENCE_NO` int(10) unsigned NOT NULL,
  `AR_TRANSACTION_TYPE_ID` int(10) unsigned NOT NULL,
  `ACCOUNT_SALE_ID` int(10) unsigned DEFAULT NULL,
  `COMPANY_ID` int(10) unsigned DEFAULT NULL,
  `CUSTOMER_ID` int(10) unsigned NOT NULL,
  `CUSTOMER_ACCOUNT_ID` int(10) unsigned NOT NULL,
  `TERM_ID` int(10) unsigned NOT NULL,
  `TRANSACTION_NUMBER` varchar(100) NOT NULL DEFAULT '',
  `TRANSACTION_DATE` date NOT NULL,
  `GL_DATE` date DEFAULT NULL,
  `DUE_DATE` date DEFAULT NULL,
  `DESCRIPTION` text,
  `AMOUNT` double DEFAULT '0',
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `WT_ACCOUNT_SETTING_ID` int(10) unsigned DEFAULT NULL,
  `WT_AMOUNT` double DEFAULT '0',
  PRIMARY KEY (`AR_TRANSACTION_ID`),
  KEY `FK_AR_TRANSACTION_EB_SL_KEY_ID` (`EB_SL_KEY_ID`),
  KEY `FK_AR_TRANSACTION_AR_TRANSACTION_TYPE_ID` (`AR_TRANSACTION_TYPE_ID`),
  KEY `FK_AR_TRANSACTION_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_AR_TRANSACTION_CUSTOMER_ID` (`CUSTOMER_ID`),
  KEY `FK_AR_TRANSACTION_CUSTOMER_ACCOUNT_ID` (`CUSTOMER_ACCOUNT_ID`),
  KEY `FK_AR_TRANSACTION_TERM_ID` (`TERM_ID`),
  KEY `FK_AR_TRANSACTION_CREATED_BY` (`CREATED_BY`),
  KEY `FK_AR_TRANSACTION_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_AR_TRANSACTION_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_AR_TRANSACTION_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_AR_TRANSACTION_WT_ACCOUNT_SETTING_ID` (`WT_ACCOUNT_SETTING_ID`),
  CONSTRAINT `FK_AR_TRANSACTION_AR_TRANSACTION_TYPE_ID` FOREIGN KEY (`AR_TRANSACTION_TYPE_ID`) REFERENCES `AR_TRANSACTION_TYPE` (`AR_TRANSACTION_TYPE_ID`),
  CONSTRAINT `FK_AR_TRANSACTION_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_AR_TRANSACTION_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_AR_TRANSACTION_CUSTOMER_ACCOUNT_ID` FOREIGN KEY (`CUSTOMER_ACCOUNT_ID`) REFERENCES `AR_CUSTOMER_ACCOUNT` (`AR_CUSTOMER_ACCOUNT_ID`),
  CONSTRAINT `FK_AR_TRANSACTION_CUSTOMER_ID` FOREIGN KEY (`CUSTOMER_ID`) REFERENCES `AR_CUSTOMER` (`AR_CUSTOMER_ID`),
  CONSTRAINT `FK_AR_TRANSACTION_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_AR_TRANSACTION_EB_SL_KEY_ID` FOREIGN KEY (`EB_SL_KEY_ID`) REFERENCES `EB_SL_KEY` (`EB_SL_KEY_ID`),
  CONSTRAINT `FK_AR_TRANSACTION_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_AR_TRANSACTION_TERM_ID` FOREIGN KEY (`TERM_ID`) REFERENCES `TERM` (`TERM_ID`),
  CONSTRAINT `FK_AR_TRANSACTION_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_AR_TRANSACTION_WT_ACCOUNT_SETTING_ID` FOREIGN KEY (`WT_ACCOUNT_SETTING_ID`) REFERENCES `WT_ACCOUNT_SETTING` (`WT_ACCOUNT_SETTING_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AR_TRANSACTION`
--

LOCK TABLES `AR_TRANSACTION` WRITE;
/*!40000 ALTER TABLE `AR_TRANSACTION` DISABLE KEYS */;
/*!40000 ALTER TABLE `AR_TRANSACTION` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AR_TRANSACTION_TYPE`
--

DROP TABLE IF EXISTS `AR_TRANSACTION_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AR_TRANSACTION_TYPE` (
  `AR_TRANSACTION_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_SL_KEY_ID` int(10) unsigned NOT NULL,
  `NAME` varchar(50) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`AR_TRANSACTION_TYPE_ID`),
  KEY `FK_TRANSACTION_TYPE_EB_SL_KEY_ID` (`EB_SL_KEY_ID`),
  KEY `FK_TRANSACTION_TYPE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_TRANSACTION_TYPE_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_TRANSACTION_TYPE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_TRANSACTION_TYPE_EB_SL_KEY_ID` FOREIGN KEY (`EB_SL_KEY_ID`) REFERENCES `EB_SL_KEY` (`EB_SL_KEY_ID`),
  CONSTRAINT `FK_TRANSACTION_TYPE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AR_TRANSACTION_TYPE`
--

LOCK TABLES `AR_TRANSACTION_TYPE` WRITE;
/*!40000 ALTER TABLE `AR_TRANSACTION_TYPE` DISABLE KEYS */;
INSERT INTO `AR_TRANSACTION_TYPE` VALUES (1,1,'Regular Transaction',1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20'),(2,1,'Debit Memo',1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20'),(3,1,'Credit Memo',1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20'),(4,1,'Account Sale',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(5,1,'Sales Return',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(10,1,'Account Sale - IS',0,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(11,1,'Account Sale Return - IS',0,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(15,1,'Sales Order',0,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(16,1,'AR Invoice',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35');
/*!40000 ALTER TABLE `AR_TRANSACTION_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AUTHORITY_TO_WITHDRAW`
--

DROP TABLE IF EXISTS `AUTHORITY_TO_WITHDRAW`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AUTHORITY_TO_WITHDRAW` (
  `AUTHORITY_TO_WITHDRAW_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `FORM_WORKFLOW_ID` int(10) unsigned DEFAULT NULL,
  `SEQUENCE_NO` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `SALES_ORDER_ID` int(10) unsigned NOT NULL,
  `AR_CUSTOMER_ID` int(10) unsigned NOT NULL,
  `AR_CUSTOMER_ACCOUNT_ID` int(10) unsigned NOT NULL,
  `DRIVER_ID` int(10) unsigned DEFAULT NULL,
  `FLEET_PROFILE_ID` int(10) unsigned DEFAULT NULL,
  `SHIP_TO` text,
  `REMARKS` text,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `DATE` date DEFAULT NULL,
  PRIMARY KEY (`AUTHORITY_TO_WITHDRAW_ID`),
  KEY `FK_ATW_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_ATW_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_ATW_SALES_ORDER_ID` (`SALES_ORDER_ID`),
  KEY `FK_ATW_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_ATW_AR_CUSTOMER_ID` (`AR_CUSTOMER_ID`),
  KEY `FK_ATW_AR_CUSTOMER_ACCOUNT_ID` (`AR_CUSTOMER_ACCOUNT_ID`),
  KEY `FK_ATW_CREATED_BY` (`CREATED_BY`),
  KEY `FK_ATW_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_AUTHORITY_TO_WITHDRAW_DRIVER_ID` (`DRIVER_ID`),
  KEY `FK_AUTHORITY_TO_WITHDRAW_FLEET_PROFILE_ID` (`FLEET_PROFILE_ID`),
  CONSTRAINT `FK_ATW_AR_CUSTOMER_ACCOUNT_ID` FOREIGN KEY (`AR_CUSTOMER_ACCOUNT_ID`) REFERENCES `AR_CUSTOMER_ACCOUNT` (`AR_CUSTOMER_ACCOUNT_ID`),
  CONSTRAINT `FK_ATW_AR_CUSTOMER_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_ATW_COMPANY_ID` FOREIGN KEY (`AR_CUSTOMER_ID`) REFERENCES `AR_CUSTOMER` (`AR_CUSTOMER_ID`),
  CONSTRAINT `FK_ATW_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_ATW_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_ATW_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_ATW_SALES_ORDER_ID` FOREIGN KEY (`SALES_ORDER_ID`) REFERENCES `SALES_ORDER` (`SALES_ORDER_ID`),
  CONSTRAINT `FK_ATW_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_AUTHORITY_TO_WITHDRAW_DRIVER_ID` FOREIGN KEY (`DRIVER_ID`) REFERENCES `DRIVER` (`DRIVER_ID`),
  CONSTRAINT `FK_AUTHORITY_TO_WITHDRAW_FLEET_PROFILE_ID` FOREIGN KEY (`FLEET_PROFILE_ID`) REFERENCES `FLEET_PROFILE` (`FLEET_PROFILE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AUTHORITY_TO_WITHDRAW`
--

LOCK TABLES `AUTHORITY_TO_WITHDRAW` WRITE;
/*!40000 ALTER TABLE `AUTHORITY_TO_WITHDRAW` DISABLE KEYS */;
/*!40000 ALTER TABLE `AUTHORITY_TO_WITHDRAW` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AUTHORITY_TO_WITHDRAW_ITEM`
--

DROP TABLE IF EXISTS `AUTHORITY_TO_WITHDRAW_ITEM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AUTHORITY_TO_WITHDRAW_ITEM` (
  `AUTHORITY_TO_WITHDRAW_ITEM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `AUTHORITY_TO_WITHDRAW_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `WAREHOUSE_ID` int(10) unsigned NOT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double DEFAULT '0',
  PRIMARY KEY (`AUTHORITY_TO_WITHDRAW_ITEM_ID`),
  KEY `FK_ATWI_AUTHORITY_TO_WITHDRAW_ID` (`AUTHORITY_TO_WITHDRAW_ID`),
  KEY `FK_ATWI_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_ATWI_WAREHOUSE_ID` (`WAREHOUSE_ID`),
  KEY `FK_ATWI_ITEM_ID` (`ITEM_ID`),
  CONSTRAINT `FK_ATWI_AUTHORITY_TO_WITHDRAW_ID` FOREIGN KEY (`AUTHORITY_TO_WITHDRAW_ID`) REFERENCES `AUTHORITY_TO_WITHDRAW` (`AUTHORITY_TO_WITHDRAW_ID`),
  CONSTRAINT `FK_ATWI_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_ATWI_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_ATWI_WAREHOUSE_ID` FOREIGN KEY (`WAREHOUSE_ID`) REFERENCES `WAREHOUSE` (`WAREHOUSE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AUTHORITY_TO_WITHDRAW_ITEM`
--

LOCK TABLES `AUTHORITY_TO_WITHDRAW_ITEM` WRITE;
/*!40000 ALTER TABLE `AUTHORITY_TO_WITHDRAW_ITEM` DISABLE KEYS */;
/*!40000 ALTER TABLE `AUTHORITY_TO_WITHDRAW_ITEM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `AUTHORITY_TO_WITHDRAW_LINE`
--

DROP TABLE IF EXISTS `AUTHORITY_TO_WITHDRAW_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AUTHORITY_TO_WITHDRAW_LINE` (
  `AUTHORITY_TO_WITHDRAW_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `AUTHORITY_TO_WITHDRAW_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `AR_LINE_SETUP_ID` int(10) unsigned NOT NULL,
  `DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `DISCOUNT_VALUE` double DEFAULT '0',
  `DISCOUNT` double DEFAULT '0',
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `AMOUNT` double DEFAULT '0',
  `QUANTITY` double DEFAULT '0',
  `UP_AMOUNT` double DEFAULT '0',
  `UNITOFMEASUREMENT_ID` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`AUTHORITY_TO_WITHDRAW_LINE_ID`),
  KEY `FK_ATW_LINE_DELIVERY_AUTHORITY_TO_WITHDRAW_ID` (`AUTHORITY_TO_WITHDRAW_ID`),
  KEY `FK_ATW_LINE_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_ATW_LINE_AR_LINE_SETUP_ID` (`AR_LINE_SETUP_ID`),
  KEY `FK_ATW_LINE_DISCOUNT_TYPE_ID` (`DISCOUNT_TYPE_ID`),
  KEY `FK_ATW_LINE_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_ATW_LINE_AR_LINE_SETUP_ID` FOREIGN KEY (`AR_LINE_SETUP_ID`) REFERENCES `AR_LINE_SETUP` (`AR_LINE_SETUP_ID`),
  CONSTRAINT `FK_ATW_LINE_DELIVERY_AUTHORITY_TO_WITHDRAW_ID` FOREIGN KEY (`AUTHORITY_TO_WITHDRAW_ID`) REFERENCES `AUTHORITY_TO_WITHDRAW` (`AUTHORITY_TO_WITHDRAW_ID`),
  CONSTRAINT `FK_ATW_LINE_DISCOUNT_TYPE_ID` FOREIGN KEY (`DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_ATW_LINE_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_ATW_LINE_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AUTHORITY_TO_WITHDRAW_LINE`
--

LOCK TABLES `AUTHORITY_TO_WITHDRAW_LINE` WRITE;
/*!40000 ALTER TABLE `AUTHORITY_TO_WITHDRAW_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `AUTHORITY_TO_WITHDRAW_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `BANK`
--

DROP TABLE IF EXISTS `BANK`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `BANK` (
  `BANK_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(100) NOT NULL,
  `ACTIVE` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`BANK_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `BANK`
--

LOCK TABLES `BANK` WRITE;
/*!40000 ALTER TABLE `BANK` DISABLE KEYS */;
INSERT INTO `BANK` VALUES (1,'Asia United Bank Corporation',1),(2,'BDO Unibank, Inc',1),(3,'Bank of the Philippine Islands',1),(4,'China Banking Corporation',1),(5,'Citibank Philippines',1),(6,'Development Bank of the Philippines',1),(7,'East West Banking Corporation',1),(8,'Land Bank of the Philippines',1),(9,'Metropolitan Bank and Trust Company ',1),(10,'Philippine Bank of Communications',1),(11,'Philippine National Bank',1),(12,'Rizal Commercial Banking Corporation',1),(13,'Security Bank Corporation',1),(14,'UnionBank of the Philippines',1);
/*!40000 ALTER TABLE `BANK` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `BANK_ACCOUNT`
--

DROP TABLE IF EXISTS `BANK_ACCOUNT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `BANK_ACCOUNT` (
  `BANK_ACCOUNT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(100) NOT NULL,
  `EB_SL_KEY_ID` int(10) unsigned NOT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `CASH_IN_BANK_ACCT_ID` int(10) unsigned NOT NULL,
  `CASH_RECEIPTS_CLEARING_ACCT_ID` int(10) unsigned NOT NULL,
  `CASH_PAYMENTS_CLEARING_ACCT_ID` int(10) unsigned NOT NULL,
  `CASH_RECEIPTS_PDC_ACCT_ID` int(10) unsigned DEFAULT NULL,
  `CASH_PAYMENTS_PDC_ACCT_ID` int(10) unsigned DEFAULT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `BANK_ID` int(10) unsigned DEFAULT NULL,
  `ACCOUNT_NUMBER` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`BANK_ACCOUNT_ID`),
  KEY `FK_BA_CREATED_BY` (`CREATED_BY`),
  KEY `FK_BA_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_BA_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_BA_CASH_IN` (`CASH_IN_BANK_ACCT_ID`),
  KEY `FK_BA_CASH_RECEIPTS` (`CASH_RECEIPTS_CLEARING_ACCT_ID`),
  KEY `FK_BA_CASH_PAYMENTS` (`CASH_PAYMENTS_CLEARING_ACCT_ID`),
  KEY `FK_BA_EB_SL_KEY_ID` (`EB_SL_KEY_ID`),
  KEY `FK_BA_CASH_RECEIPTS_PDC` (`CASH_RECEIPTS_PDC_ACCT_ID`),
  KEY `FK_BA_CASH_PAYMENTS_PDC` (`CASH_PAYMENTS_PDC_ACCT_ID`),
  CONSTRAINT `FK_BA_CASH_IN` FOREIGN KEY (`CASH_IN_BANK_ACCT_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_BA_CASH_PAYMENTS` FOREIGN KEY (`CASH_PAYMENTS_CLEARING_ACCT_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_BA_CASH_PAYMENTS_PDC` FOREIGN KEY (`CASH_PAYMENTS_PDC_ACCT_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_BA_CASH_RECEIPTS` FOREIGN KEY (`CASH_RECEIPTS_CLEARING_ACCT_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_BA_CASH_RECEIPTS_PDC` FOREIGN KEY (`CASH_RECEIPTS_PDC_ACCT_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_BA_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_BA_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_BA_EB_SL_KEY_ID` FOREIGN KEY (`EB_SL_KEY_ID`) REFERENCES `EB_SL_KEY` (`EB_SL_KEY_ID`),
  CONSTRAINT `FK_BA_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `BANK_ACCOUNT`
--

LOCK TABLES `BANK_ACCOUNT` WRITE;
/*!40000 ALTER TABLE `BANK_ACCOUNT` DISABLE KEYS */;
/*!40000 ALTER TABLE `BANK_ACCOUNT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `BIOMETRIC_MODEL`
--

DROP TABLE IF EXISTS `BIOMETRIC_MODEL`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `BIOMETRIC_MODEL` (
  `BIOMETRIC_MODEL_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `MODEL_NAME` varchar(40) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`BIOMETRIC_MODEL_ID`),
  KEY `FK_BIOMETRIC_MODEL_CREATED_BY` (`CREATED_BY`),
  KEY `FK_EMPLOYEE_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_BIOMETRIC_MODEL_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_BIOMETRIC_MODEL_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `BIOMETRIC_MODEL`
--

LOCK TABLES `BIOMETRIC_MODEL` WRITE;
/*!40000 ALTER TABLE `BIOMETRIC_MODEL` DISABLE KEYS */;
INSERT INTO `BIOMETRIC_MODEL` VALUES (1,'Amax',0,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(2,'JSR',0,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(3,'FORTRESS',0,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(4,'Generic',0,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(6,'YOKO E3 BIOMETRIC',0,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(7,'ZKTeco IN01-A',0,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(8,'REALAND',0,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(9,'ZKTeco C28-C',0,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(10,'IRON VALLEY',0,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(11,'EULAP',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(13,'SSC',0,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(14,'ZKTeco IN01-A-CN',0,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(15,'ZKTeco IN01-A-SUENO',0,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10');
/*!40000 ALTER TABLE `BIOMETRIC_MODEL` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `BUSINESS_CLASSIFICATION`
--

DROP TABLE IF EXISTS `BUSINESS_CLASSIFICATION`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `BUSINESS_CLASSIFICATION` (
  `BUSINESS_CLASSIFICATION_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(20) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`BUSINESS_CLASSIFICATION_ID`),
  KEY `FK_BC_CREATED_BY` (`CREATED_BY`),
  KEY `FK_BC_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_BC_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_BC_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `BUSINESS_CLASSIFICATION`
--

LOCK TABLES `BUSINESS_CLASSIFICATION` WRITE;
/*!40000 ALTER TABLE `BUSINESS_CLASSIFICATION` DISABLE KEYS */;
INSERT INTO `BUSINESS_CLASSIFICATION` VALUES (1,'INDIVIDUAL',1,1,'2021-08-11 01:33:07',1,'2021-08-11 01:33:07'),(2,'CORPORATE',1,1,'2021-08-11 01:33:07',1,'2021-08-11 01:33:07');
/*!40000 ALTER TABLE `BUSINESS_CLASSIFICATION` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `BUS_REG_TYPE`
--

DROP TABLE IF EXISTS `BUS_REG_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `BUS_REG_TYPE` (
  `BUS_REG_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(20) NOT NULL,
  PRIMARY KEY (`BUS_REG_TYPE_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `BUS_REG_TYPE`
--

LOCK TABLES `BUS_REG_TYPE` WRITE;
/*!40000 ALTER TABLE `BUS_REG_TYPE` DISABLE KEYS */;
INSERT INTO `BUS_REG_TYPE` VALUES (1,'NON-VAT'),(2,'VAT');
/*!40000 ALTER TABLE `BUS_REG_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `CAP_AR_LINE`
--

DROP TABLE IF EXISTS `CAP_AR_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `CAP_AR_LINE` (
  `CAP_AR_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `CUSTOMER_ADVANCE_PAYMENT_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `AR_LINE_SETUP_ID` int(10) unsigned NOT NULL,
  `DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `DISCOUNT_VALUE` double DEFAULT '0',
  `DISCOUNT` double DEFAULT '0',
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `QUANTITY` double DEFAULT '0',
  `UNITOFMEASUREMENT_ID` int(10) unsigned DEFAULT NULL,
  `UP_AMOUNT` double DEFAULT '0',
  `AMOUNT` double DEFAULT '0',
  PRIMARY KEY (`CAP_AR_LINE_ID`),
  KEY `FK_CAP_AL_CAP_ID` (`CUSTOMER_ADVANCE_PAYMENT_ID`),
  KEY `FK_CAP_AL_AR_LINE_SETUP_ID` (`AR_LINE_SETUP_ID`),
  KEY `FK_CAP_AR_LINE_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_CAP_AL_AR_LINE_SETUP_ID` FOREIGN KEY (`AR_LINE_SETUP_ID`) REFERENCES `AR_LINE_SETUP` (`AR_LINE_SETUP_ID`),
  CONSTRAINT `FK_CAP_AL_CAP_ID` FOREIGN KEY (`CUSTOMER_ADVANCE_PAYMENT_ID`) REFERENCES `CUSTOMER_ADVANCE_PAYMENT` (`CUSTOMER_ADVANCE_PAYMENT_ID`),
  CONSTRAINT `FK_CAP_AL_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `CAP_AR_LINE`
--

LOCK TABLES `CAP_AR_LINE` WRITE;
/*!40000 ALTER TABLE `CAP_AR_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `CAP_AR_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `CAP_DELIVERY`
--

DROP TABLE IF EXISTS `CAP_DELIVERY`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `CAP_DELIVERY` (
  `CAP_DELIVERY_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `CUSTOMER_ADVANCE_PAYMENT_ID` int(10) unsigned DEFAULT NULL,
  `CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` int(10) unsigned DEFAULT '1',
  `FORM_WORKFLOW_ID` int(10) unsigned DEFAULT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `AR_CUSTOMER_ID` int(10) unsigned NOT NULL,
  `AR_CUSTOMER_ACCOUNT_ID` int(10) unsigned NOT NULL,
  `CAPD_NUMBER` int(20) unsigned NOT NULL,
  `SALES_INVOICE_NO` varchar(100) DEFAULT NULL,
  `DELIVERY_DATE` date NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `WT_ACCOUNT_SETTING_ID` int(10) unsigned DEFAULT NULL,
  `WT_AMOUNT` double DEFAULT '0',
  PRIMARY KEY (`CAP_DELIVERY_ID`),
  KEY `FK_CAPD_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_CAPD_CUSTOMER_ID` (`AR_CUSTOMER_ID`),
  KEY `FK_CAPD_CUSTOMER_ACCOUNT_ID` (`AR_CUSTOMER_ACCOUNT_ID`),
  KEY `FK_CAPD_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_CAPD_CUSTOMER_ADVANCE_PAYMENT_ID` (`CUSTOMER_ADVANCE_PAYMENT_ID`),
  KEY `FK_CAPD_CREATED_BY` (`CREATED_BY`),
  KEY `FK_CAPD_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_CAPD_CAP_TYPE_ID` (`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID`),
  KEY `FK_CAPD_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_CAPD_WT_ACCOUNT_SETTING_ID` (`WT_ACCOUNT_SETTING_ID`),
  CONSTRAINT `FK_CAPD_CAP_TYPE_ID` FOREIGN KEY (`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID`) REFERENCES `CUSTOMER_ADVANCE_PAYMENT_TYPE` (`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID`),
  CONSTRAINT `FK_CAPD_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_CAPD_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_CAPD_CUSTOMER_ACCOUNT_ID` FOREIGN KEY (`AR_CUSTOMER_ACCOUNT_ID`) REFERENCES `AR_CUSTOMER_ACCOUNT` (`AR_CUSTOMER_ACCOUNT_ID`),
  CONSTRAINT `FK_CAPD_CUSTOMER_ID` FOREIGN KEY (`AR_CUSTOMER_ID`) REFERENCES `AR_CUSTOMER` (`AR_CUSTOMER_ID`),
  CONSTRAINT `FK_CAPD_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_CAPD_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_CAPD_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_CAPD_WT_ACCOUNT_SETTING_ID` FOREIGN KEY (`WT_ACCOUNT_SETTING_ID`) REFERENCES `WT_ACCOUNT_SETTING` (`WT_ACCOUNT_SETTING_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `CAP_DELIVERY`
--

LOCK TABLES `CAP_DELIVERY` WRITE;
/*!40000 ALTER TABLE `CAP_DELIVERY` DISABLE KEYS */;
/*!40000 ALTER TABLE `CAP_DELIVERY` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `CAP_DELIVERY_AR_LINE`
--

DROP TABLE IF EXISTS `CAP_DELIVERY_AR_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `CAP_DELIVERY_AR_LINE` (
  `CAP_DELIVERY_AR_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `CAP_DELIVERY_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `AR_LINE_SETUP_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double DEFAULT '0',
  `UNITOFMEASUREMENT_ID` int(10) unsigned DEFAULT NULL,
  `UP_AMOUNT` double DEFAULT '0',
  `AMOUNT` double DEFAULT '0',
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  PRIMARY KEY (`CAP_DELIVERY_AR_LINE_ID`),
  KEY `FK_CAPD_AL_CAPD_ID` (`CAP_DELIVERY_ID`),
  KEY `FK_CAPD_AL_AR_LINE_SETUP_ID` (`AR_LINE_SETUP_ID`),
  KEY `FK_CAPD_AL_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_CAP_DELIVERY_AR_LINE_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_CADP_AL_CAPD_ID` FOREIGN KEY (`CAP_DELIVERY_ID`) REFERENCES `CAP_DELIVERY` (`CAP_DELIVERY_ID`),
  CONSTRAINT `FK_CAPD_AL_AR_LINE_SETUP_ID` FOREIGN KEY (`AR_LINE_SETUP_ID`) REFERENCES `AR_LINE_SETUP` (`AR_LINE_SETUP_ID`),
  CONSTRAINT `FK_CAPD_AL_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_CAP_DELIVERY_AR_LINE_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `CAP_DELIVERY_AR_LINE`
--

LOCK TABLES `CAP_DELIVERY_AR_LINE` WRITE;
/*!40000 ALTER TABLE `CAP_DELIVERY_AR_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `CAP_DELIVERY_AR_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `CAP_DELIVERY_ITEM`
--

DROP TABLE IF EXISTS `CAP_DELIVERY_ITEM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `CAP_DELIVERY_ITEM` (
  `CAP_DELIVERY_ITEM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `CAP_DELIVERY_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `WAREHOUSE_ID` int(10) unsigned NOT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double NOT NULL,
  `ITEM_SRP_ID` int(10) unsigned DEFAULT NULL,
  `SRP` double NOT NULL,
  `ITEM_DISCOUNT_ID` int(10) unsigned DEFAULT NULL,
  `UNIT_COST` double DEFAULT NULL,
  `DISCOUNT` double DEFAULT NULL,
  `ITEM_ADD_ON_ID` int(10) unsigned DEFAULT NULL,
  `AMOUNT` double NOT NULL,
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  PRIMARY KEY (`CAP_DELIVERY_ITEM_ID`),
  KEY `FK_CAPDI_CAP_DELIVERY_ID` (`CAP_DELIVERY_ID`),
  KEY `FK_CAPDI_WAREHOUSE_ID` (`WAREHOUSE_ID`),
  KEY `FK_CAPDI_ITEM_ID` (`ITEM_ID`),
  KEY `FK_CAPDI_ITEM_SRP_ID` (`ITEM_SRP_ID`),
  KEY `FK_CAPDI_ITEM_DISCOUNT_ID` (`ITEM_DISCOUNT_ID`),
  KEY `FK_CAPDI_ITEM_ADD_ON_ID` (`ITEM_ADD_ON_ID`),
  KEY `FK_CAPDI_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_CAPDI_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_CAPDI_CAP_DELIVERY_ID` FOREIGN KEY (`CAP_DELIVERY_ID`) REFERENCES `CAP_DELIVERY` (`CAP_DELIVERY_ID`),
  CONSTRAINT `FK_CAPDI_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_CAPDI_ITEM_ADD_ON_ID` FOREIGN KEY (`ITEM_ADD_ON_ID`) REFERENCES `ITEM_ADD_ON` (`ITEM_ADD_ON_ID`),
  CONSTRAINT `FK_CAPDI_ITEM_DISCOUNT_ID` FOREIGN KEY (`ITEM_DISCOUNT_ID`) REFERENCES `ITEM_DISCOUNT` (`ITEM_DISCOUNT_ID`),
  CONSTRAINT `FK_CAPDI_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_CAPDI_ITEM_SRP_ID` FOREIGN KEY (`ITEM_SRP_ID`) REFERENCES `ITEM_SRP` (`ITEM_SRP_ID`),
  CONSTRAINT `FK_CAPDI_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_CAPDI_WAREHOUSE_ID` FOREIGN KEY (`WAREHOUSE_ID`) REFERENCES `WAREHOUSE` (`WAREHOUSE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `CAP_DELIVERY_ITEM`
--

LOCK TABLES `CAP_DELIVERY_ITEM` WRITE;
/*!40000 ALTER TABLE `CAP_DELIVERY_ITEM` DISABLE KEYS */;
/*!40000 ALTER TABLE `CAP_DELIVERY_ITEM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `CAP_DELIVERY_TRANSACTION`
--

DROP TABLE IF EXISTS `CAP_DELIVERY_TRANSACTION`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `CAP_DELIVERY_TRANSACTION` (
  `CAP_DELIVERY_TRANSACTION_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `CAP_DELIVERY_ID` int(10) unsigned NOT NULL,
  `AR_TRANSACTION_ID` int(10) unsigned NOT NULL,
  PRIMARY KEY (`CAP_DELIVERY_TRANSACTION_ID`),
  KEY `FK_CAPDT_CAPD_ID` (`CAP_DELIVERY_ID`),
  KEY `FK_CAPDT_ART_ID` (`AR_TRANSACTION_ID`),
  CONSTRAINT `FK_CAPDT_ART_ID` FOREIGN KEY (`AR_TRANSACTION_ID`) REFERENCES `AR_TRANSACTION` (`AR_TRANSACTION_ID`),
  CONSTRAINT `FK_CAPDT_CAPD_ID` FOREIGN KEY (`CAP_DELIVERY_ID`) REFERENCES `CAP_DELIVERY` (`CAP_DELIVERY_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `CAP_DELIVERY_TRANSACTION`
--

LOCK TABLES `CAP_DELIVERY_TRANSACTION` WRITE;
/*!40000 ALTER TABLE `CAP_DELIVERY_TRANSACTION` DISABLE KEYS */;
/*!40000 ALTER TABLE `CAP_DELIVERY_TRANSACTION` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `CASH_SALE`
--

DROP TABLE IF EXISTS `CASH_SALE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `CASH_SALE` (
  `CASH_SALE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `CASH_SALE_TYPE_ID` int(10) unsigned DEFAULT '1',
  `CS_NUMBER` int(20) unsigned NOT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `AR_RECEIPT_TYPE_ID` int(10) unsigned NOT NULL,
  `REF_NUMBER` varchar(20) DEFAULT NULL,
  `AR_CUSTOMER_ID` int(10) unsigned NOT NULL,
  `AR_CUSTOMER_ACCOUNT_ID` int(10) unsigned NOT NULL,
  `SALE_INVOICE_NO` varchar(100) DEFAULT NULL,
  `RECEIPT_DATE` date NOT NULL,
  `MATURITY_DATE` date NOT NULL,
  `CASH` double NOT NULL,
  `FORM_WORKFLOW_ID` int(10) unsigned DEFAULT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `WT_ACCOUNT_SETTING_ID` int(10) unsigned DEFAULT NULL,
  `WT_AMOUNT` double DEFAULT '0',
  PRIMARY KEY (`CASH_SALE_ID`),
  KEY `FK_CASH_SALE_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_CASH_SALE_TYPE_ID` (`AR_RECEIPT_TYPE_ID`),
  KEY `FK_CASH_SALE_CUSTOMER_ID` (`AR_CUSTOMER_ID`),
  KEY `FK_CASH_SALE_CUSTOMER_ACCOUNT_ID` (`AR_CUSTOMER_ACCOUNT_ID`),
  KEY `FK_CASH_SALE_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_CASH_SALE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_CASH_SALE_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_CASH_SALE_CS_TYPE_ID` (`CASH_SALE_TYPE_ID`),
  KEY `FK_CASH_SALE_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_CASH_SALE_WT_ACCOUNT_SETTING_ID` (`WT_ACCOUNT_SETTING_ID`),
  CONSTRAINT `FK_CASH_SALE_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_CASH_SALE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_CASH_SALE_CS_TYPE_ID` FOREIGN KEY (`CASH_SALE_TYPE_ID`) REFERENCES `CASH_SALE_TYPE` (`CASH_SALE_TYPE_ID`),
  CONSTRAINT `FK_CASH_SALE_CUSTOMER_ACCOUNT_ID` FOREIGN KEY (`AR_CUSTOMER_ACCOUNT_ID`) REFERENCES `AR_CUSTOMER_ACCOUNT` (`AR_CUSTOMER_ACCOUNT_ID`),
  CONSTRAINT `FK_CASH_SALE_CUSTOMER_ID` FOREIGN KEY (`AR_CUSTOMER_ID`) REFERENCES `AR_CUSTOMER` (`AR_CUSTOMER_ID`),
  CONSTRAINT `FK_CASH_SALE_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_CASH_SALE_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_CASH_SALE_TYPE_ID` FOREIGN KEY (`AR_RECEIPT_TYPE_ID`) REFERENCES `AR_RECEIPT_TYPE` (`AR_RECEIPT_TYPE_ID`),
  CONSTRAINT `FK_CASH_SALE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_CASH_SALE_WT_ACCOUNT_SETTING_ID` FOREIGN KEY (`WT_ACCOUNT_SETTING_ID`) REFERENCES `WT_ACCOUNT_SETTING` (`WT_ACCOUNT_SETTING_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `CASH_SALE`
--

LOCK TABLES `CASH_SALE` WRITE;
/*!40000 ALTER TABLE `CASH_SALE` DISABLE KEYS */;
/*!40000 ALTER TABLE `CASH_SALE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `CASH_SALE_AR_LINE`
--

DROP TABLE IF EXISTS `CASH_SALE_AR_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `CASH_SALE_AR_LINE` (
  `CASH_SALE_AR_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `CASH_SALE_ID` int(10) unsigned NOT NULL,
  `AR_LINE_SETUP_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `QUANTITY` double DEFAULT '0',
  `UNITOFMEASUREMENT_ID` int(10) unsigned DEFAULT NULL,
  `UP_AMOUNT` double DEFAULT '0',
  `AMOUNT` double DEFAULT '0',
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`CASH_SALE_AR_LINE_ID`),
  KEY `FK_CS_AL_CASH_SALE_ID` (`CASH_SALE_ID`),
  KEY `FK_CS_AL_AR_LINE_SETUP_ID` (`AR_LINE_SETUP_ID`),
  KEY `FK_CS_AL_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_CS_AL_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  KEY `FK_CS_AL_DISCOUNT_TYPE_ID` (`DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_CS_AL_AR_LINE_SETUP_ID` FOREIGN KEY (`AR_LINE_SETUP_ID`) REFERENCES `AR_LINE_SETUP` (`AR_LINE_SETUP_ID`),
  CONSTRAINT `FK_CS_AL_CASH_SALE_ID` FOREIGN KEY (`CASH_SALE_ID`) REFERENCES `CASH_SALE` (`CASH_SALE_ID`),
  CONSTRAINT `FK_CS_AL_DISCOUNT_TYPE_ID` FOREIGN KEY (`DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_CS_AL_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_CS_AL_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `CASH_SALE_AR_LINE`
--

LOCK TABLES `CASH_SALE_AR_LINE` WRITE;
/*!40000 ALTER TABLE `CASH_SALE_AR_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `CASH_SALE_AR_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `CASH_SALE_ITEM`
--

DROP TABLE IF EXISTS `CASH_SALE_ITEM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `CASH_SALE_ITEM` (
  `CASH_SALE_ITEM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `CASH_SALE_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `WAREHOUSE_ID` int(10) unsigned NOT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double NOT NULL,
  `ITEM_SRP_ID` int(10) unsigned NOT NULL,
  `SRP` double NOT NULL,
  `ITEM_DISCOUNT_ID` int(10) unsigned DEFAULT NULL,
  `UNIT_COST` double NOT NULL DEFAULT '0',
  `DISCOUNT` double DEFAULT '0',
  `ITEM_ADD_ON_ID` int(10) unsigned DEFAULT NULL,
  `AMOUNT` double NOT NULL,
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  PRIMARY KEY (`CASH_SALE_ITEM_ID`),
  KEY `FK_CSI_CASH_SALE_ID` (`CASH_SALE_ID`),
  KEY `FK_CSI_WAREHOUSE_ID` (`WAREHOUSE_ID`),
  KEY `FK_CSI_ITEM_ID` (`ITEM_ID`),
  KEY `FK_CSI_ITEM_SRP_ID` (`ITEM_SRP_ID`),
  KEY `FK_CSI_ITEM_DISCOUNT_ID` (`ITEM_DISCOUNT_ID`),
  KEY `FK_CSI_ITEM_ADD_ON_ID` (`ITEM_ADD_ON_ID`),
  KEY `FK_CSI_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_CSI_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_CSI_CASH_SALE_ID` FOREIGN KEY (`CASH_SALE_ID`) REFERENCES `CASH_SALE` (`CASH_SALE_ID`),
  CONSTRAINT `FK_CSI_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_CSI_ITEM_ADD_ON_ID` FOREIGN KEY (`ITEM_ADD_ON_ID`) REFERENCES `ITEM_ADD_ON` (`ITEM_ADD_ON_ID`),
  CONSTRAINT `FK_CSI_ITEM_DISCOUNT_ID` FOREIGN KEY (`ITEM_DISCOUNT_ID`) REFERENCES `ITEM_DISCOUNT` (`ITEM_DISCOUNT_ID`),
  CONSTRAINT `FK_CSI_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_CSI_ITEM_SRP_ID` FOREIGN KEY (`ITEM_SRP_ID`) REFERENCES `ITEM_SRP` (`ITEM_SRP_ID`),
  CONSTRAINT `FK_CSI_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_CSI_WAREHOUSE_ID` FOREIGN KEY (`WAREHOUSE_ID`) REFERENCES `WAREHOUSE` (`WAREHOUSE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `CASH_SALE_ITEM`
--

LOCK TABLES `CASH_SALE_ITEM` WRITE;
/*!40000 ALTER TABLE `CASH_SALE_ITEM` DISABLE KEYS */;
/*!40000 ALTER TABLE `CASH_SALE_ITEM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `CASH_SALE_RETURN`
--

DROP TABLE IF EXISTS `CASH_SALE_RETURN`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `CASH_SALE_RETURN` (
  `CASH_SALE_RETURN_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `CASH_SALE_TYPE_ID` int(10) unsigned DEFAULT '1',
  `CASH_SALE_ID` int(10) unsigned DEFAULT NULL,
  `REF_CASH_SALE_RETURN_ID` int(10) unsigned DEFAULT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `CSR_NUMBER` int(20) unsigned NOT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `REF_NUMBER` varchar(20) DEFAULT NULL,
  `AR_CUSTOMER_ID` int(10) unsigned NOT NULL,
  `AR_CUSTOMER_ACCOUNT_ID` int(10) unsigned NOT NULL,
  `SALE_INVOICE_NO` varchar(100) DEFAULT NULL,
  `DATE` date NOT NULL,
  `FORM_WORKFLOW_ID` int(10) unsigned DEFAULT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `WT_ACCOUNT_SETTING_ID` int(10) unsigned DEFAULT NULL,
  `WT_AMOUNT` double DEFAULT '0',
  PRIMARY KEY (`CASH_SALE_RETURN_ID`),
  KEY `FK_CSR_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_CSR_CUSTOMER_ID` (`AR_CUSTOMER_ID`),
  KEY `FK_CSR_CUSTOMER_ACCOUNT_ID` (`AR_CUSTOMER_ACCOUNT_ID`),
  KEY `FK_CSR_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_CSR_CREATED_BY` (`CREATED_BY`),
  KEY `FK_CSR_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_CSR_CASH_SALE_ID` (`CASH_SALE_ID`),
  KEY `FK_CSR_CS_TYPE_ID` (`CASH_SALE_TYPE_ID`),
  KEY `FK_CSR_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_CSR_REF_CASH_SALE_RETURN_ID` (`REF_CASH_SALE_RETURN_ID`),
  KEY `FK_CSR_WT_ACCOUNT_SETTING_ID` (`WT_ACCOUNT_SETTING_ID`),
  CONSTRAINT `FK_CSR_CASH_SALE_ID` FOREIGN KEY (`CASH_SALE_ID`) REFERENCES `CASH_SALE` (`CASH_SALE_ID`),
  CONSTRAINT `FK_CSR_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_CSR_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_CSR_CS_TYPE_ID` FOREIGN KEY (`CASH_SALE_TYPE_ID`) REFERENCES `CASH_SALE_TYPE` (`CASH_SALE_TYPE_ID`),
  CONSTRAINT `FK_CSR_CUSTOMER_ACCOUNT_ID` FOREIGN KEY (`AR_CUSTOMER_ACCOUNT_ID`) REFERENCES `AR_CUSTOMER_ACCOUNT` (`AR_CUSTOMER_ACCOUNT_ID`),
  CONSTRAINT `FK_CSR_CUSTOMER_ID` FOREIGN KEY (`AR_CUSTOMER_ID`) REFERENCES `AR_CUSTOMER` (`AR_CUSTOMER_ID`),
  CONSTRAINT `FK_CSR_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_CSR_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_CSR_REF_CASH_SALE_RETURN_ID` FOREIGN KEY (`REF_CASH_SALE_RETURN_ID`) REFERENCES `CASH_SALE_RETURN` (`CASH_SALE_RETURN_ID`),
  CONSTRAINT `FK_CSR_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_CSR_WT_ACCOUNT_SETTING_ID` FOREIGN KEY (`WT_ACCOUNT_SETTING_ID`) REFERENCES `WT_ACCOUNT_SETTING` (`WT_ACCOUNT_SETTING_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `CASH_SALE_RETURN`
--

LOCK TABLES `CASH_SALE_RETURN` WRITE;
/*!40000 ALTER TABLE `CASH_SALE_RETURN` DISABLE KEYS */;
/*!40000 ALTER TABLE `CASH_SALE_RETURN` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `CASH_SALE_RETURN_AR_LINE`
--

DROP TABLE IF EXISTS `CASH_SALE_RETURN_AR_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `CASH_SALE_RETURN_AR_LINE` (
  `CASH_SALE_RETURN_AR_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `CASH_SALE_RETURN_ID` int(10) unsigned DEFAULT NULL,
  `CASH_SALE_AR_LINE_REF_ID` int(10) unsigned DEFAULT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `CASH_SALE_RETURN_AR_LINE_REF_ID` int(10) unsigned DEFAULT NULL,
  `AR_LINE_SETUP_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double DEFAULT '0',
  `UNITOFMEASUREMENT_ID` int(10) unsigned DEFAULT NULL,
  `UP_AMOUNT` double DEFAULT '0',
  `AMOUNT` double DEFAULT '0',
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`CASH_SALE_RETURN_AR_LINE_ID`),
  KEY `FK_CSR_AL_CASH_SALE_AR_LINE_REF_ID` (`CASH_SALE_AR_LINE_REF_ID`),
  KEY `FK_CSR_AL_CASH_SALE_RETURN_AR_LINE_REF_ID` (`CASH_SALE_RETURN_AR_LINE_REF_ID`),
  KEY `FK_CSR_AL_AR_LINE_SETUP_ID` (`AR_LINE_SETUP_ID`),
  KEY `FK_CSR_AL_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_CSR_AL_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  KEY `FK_CSR_AL_DISCOUNT_TYPE_ID` (`DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_CSR_AL_AR_LINE_SETUP_ID` FOREIGN KEY (`AR_LINE_SETUP_ID`) REFERENCES `AR_LINE_SETUP` (`AR_LINE_SETUP_ID`),
  CONSTRAINT `FK_CSR_AL_CASH_SALE_AR_LINE_REF_ID` FOREIGN KEY (`CASH_SALE_AR_LINE_REF_ID`) REFERENCES `CASH_SALE_AR_LINE` (`CASH_SALE_AR_LINE_ID`),
  CONSTRAINT `FK_CSR_AL_CASH_SALE_RETURN_AR_LINE_REF_ID` FOREIGN KEY (`CASH_SALE_RETURN_AR_LINE_REF_ID`) REFERENCES `CASH_SALE_RETURN_AR_LINE` (`CASH_SALE_RETURN_AR_LINE_ID`),
  CONSTRAINT `FK_CSR_AL_DISCOUNT_TYPE_ID` FOREIGN KEY (`DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_CSR_AL_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_CSR_AL_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `CASH_SALE_RETURN_AR_LINE`
--

LOCK TABLES `CASH_SALE_RETURN_AR_LINE` WRITE;
/*!40000 ALTER TABLE `CASH_SALE_RETURN_AR_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `CASH_SALE_RETURN_AR_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `CASH_SALE_RETURN_ITEM`
--

DROP TABLE IF EXISTS `CASH_SALE_RETURN_ITEM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `CASH_SALE_RETURN_ITEM` (
  `CASH_SALE_RETURN_ITEM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `CASH_SALE_ITEM_ID` int(10) unsigned DEFAULT NULL,
  `REF_CASH_SALE_RETURN_ITEM_ID` int(10) unsigned DEFAULT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `CASH_SALE_RETURN_ID` int(10) unsigned NOT NULL,
  `WAREHOUSE_ID` int(10) unsigned NOT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double NOT NULL,
  `ITEM_SRP_ID` int(10) unsigned NOT NULL,
  `SRP` double NOT NULL,
  `ITEM_DISCOUNT_ID` int(10) unsigned DEFAULT NULL,
  `UNIT_COST` double DEFAULT '0',
  `DISCOUNT` double DEFAULT '0',
  `ITEM_ADD_ON_ID` int(10) unsigned DEFAULT NULL,
  `AMOUNT` double NOT NULL,
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  PRIMARY KEY (`CASH_SALE_RETURN_ITEM_ID`),
  KEY `FK_CSRI_CASH_SALE_RETURN_ID` (`CASH_SALE_RETURN_ID`),
  KEY `FK_CSRI_WAREHOUSE_ID` (`WAREHOUSE_ID`),
  KEY `FK_CSRI_ITEM_ID` (`ITEM_ID`),
  KEY `FK_CSRI_ITEM_SRP_ID` (`ITEM_SRP_ID`),
  KEY `FK_CSRI_ITEM_DISCOUNT_ID` (`ITEM_DISCOUNT_ID`),
  KEY `FK_CSRI_CASH_SALE_ITEM_ID` (`CASH_SALE_ITEM_ID`),
  KEY `FK_CSRI_ITEM_ADD_ON_ID` (`ITEM_ADD_ON_ID`),
  KEY `FK_CSRI_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_CSRI_REF_CASH_SALE_RETURN_ITEM_ID` (`REF_CASH_SALE_RETURN_ITEM_ID`),
  KEY `FK_CSRI_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_CSRI_CASH_SALE_ITEM_ID` FOREIGN KEY (`CASH_SALE_ITEM_ID`) REFERENCES `CASH_SALE_ITEM` (`CASH_SALE_ITEM_ID`),
  CONSTRAINT `FK_CSRI_CASH_SALE_RETURN_ID` FOREIGN KEY (`CASH_SALE_RETURN_ID`) REFERENCES `CASH_SALE_RETURN` (`CASH_SALE_RETURN_ID`),
  CONSTRAINT `FK_CSRI_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_CSRI_ITEM_ADD_ON_ID` FOREIGN KEY (`ITEM_ADD_ON_ID`) REFERENCES `ITEM_ADD_ON` (`ITEM_ADD_ON_ID`),
  CONSTRAINT `FK_CSRI_ITEM_DISCOUNT_ID` FOREIGN KEY (`ITEM_DISCOUNT_ID`) REFERENCES `ITEM_DISCOUNT` (`ITEM_DISCOUNT_ID`),
  CONSTRAINT `FK_CSRI_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_CSRI_ITEM_SRP_ID` FOREIGN KEY (`ITEM_SRP_ID`) REFERENCES `ITEM_SRP` (`ITEM_SRP_ID`),
  CONSTRAINT `FK_CSRI_REF_CASH_SALE_RETURN_ITEM_ID` FOREIGN KEY (`REF_CASH_SALE_RETURN_ITEM_ID`) REFERENCES `CASH_SALE_RETURN_ITEM` (`CASH_SALE_RETURN_ITEM_ID`),
  CONSTRAINT `FK_CSRI_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_CSRI_WAREHOUSE_ID` FOREIGN KEY (`WAREHOUSE_ID`) REFERENCES `WAREHOUSE` (`WAREHOUSE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `CASH_SALE_RETURN_ITEM`
--

LOCK TABLES `CASH_SALE_RETURN_ITEM` WRITE;
/*!40000 ALTER TABLE `CASH_SALE_RETURN_ITEM` DISABLE KEYS */;
/*!40000 ALTER TABLE `CASH_SALE_RETURN_ITEM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `CASH_SALE_TYPE`
--

DROP TABLE IF EXISTS `CASH_SALE_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `CASH_SALE_TYPE` (
  `CASH_SALE_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(100) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`CASH_SALE_TYPE_ID`),
  KEY `FK_CS_TYPE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_CS_TYPE_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_CS_TYPE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_CS_TYPE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `CASH_SALE_TYPE`
--

LOCK TABLES `CASH_SALE_TYPE` WRITE;
/*!40000 ALTER TABLE `CASH_SALE_TYPE` DISABLE KEYS */;
INSERT INTO `CASH_SALE_TYPE` VALUES (1,'Retail',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(3,'Individual Selection',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(6,'Cash Sales - Processing',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55');
/*!40000 ALTER TABLE `CASH_SALE_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `CHECKBOOK`
--

DROP TABLE IF EXISTS `CHECKBOOK`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `CHECKBOOK` (
  `CHECKBOOK_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `BANK_ACCOUNT_ID` int(10) unsigned NOT NULL,
  `NAME` varchar(100) DEFAULT NULL,
  `CHECKBOOK_NO_FROM` decimal(20,0) DEFAULT NULL,
  `CHECKBOOK_NO_TO` decimal(20,0) DEFAULT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `CHECKBOOK_TEMPLATE_ID` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`CHECKBOOK_ID`),
  KEY `FK_CHECKBOOK_CREATED_BY` (`CREATED_BY`),
  KEY `FK_CHECKBOOK_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_CHECKBOOK_BANK_ACCOUNT_ID` (`BANK_ACCOUNT_ID`),
  KEY `FK_CHECKBOOK_TEMPLATE_ID` (`CHECKBOOK_TEMPLATE_ID`),
  CONSTRAINT `FK_CHECKBOOK_BANK_ACCOUNT_ID` FOREIGN KEY (`BANK_ACCOUNT_ID`) REFERENCES `BANK_ACCOUNT` (`BANK_ACCOUNT_ID`),
  CONSTRAINT `FK_CHECKBOOK_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_CHECKBOOK_TEMPLATE_ID` FOREIGN KEY (`CHECKBOOK_TEMPLATE_ID`) REFERENCES `CHECKBOOK_TEMPLATE` (`CHECKBOOK_TEMPLATE_ID`),
  CONSTRAINT `FK_CHECKBOOK_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `CHECKBOOK`
--

LOCK TABLES `CHECKBOOK` WRITE;
/*!40000 ALTER TABLE `CHECKBOOK` DISABLE KEYS */;
/*!40000 ALTER TABLE `CHECKBOOK` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `CHECKBOOK_TEMPLATE`
--

DROP TABLE IF EXISTS `CHECKBOOK_TEMPLATE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `CHECKBOOK_TEMPLATE` (
  `CHECKBOOK_TEMPLATE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(50) NOT NULL,
  `VIEWS_PROP_NAME` varchar(50) NOT NULL,
  `MAX_CHAR_AMOUNT_IN_WORDS` int(3) NOT NULL,
  `MAX_CHAR_NAME` int(3) NOT NULL,
  PRIMARY KEY (`CHECKBOOK_TEMPLATE_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `CHECKBOOK_TEMPLATE`
--

LOCK TABLES `CHECKBOOK_TEMPLATE` WRITE;
/*!40000 ALTER TABLE `CHECKBOOK_TEMPLATE` DISABLE KEYS */;
INSERT INTO `CHECKBOOK_TEMPLATE` VALUES (1,'EASTWEST BANK - LONG','EastWestCheckLong.jasper',78,42),(2,'RCBC - SHORT','RCBCCheckShort.jasper',71,36),(5,'LAND BANK - LONG','LandBankLong.jasper',78,42),(6,'SECURITY BANK - LONG','SecurityBankCheckLong.jasper',78,42),(7,'SECURITY BANK - SHORT','SecurityBankCheckShort.jasper',75,36),(8,'BDO - LONG','BDOCheckLong.jasper',78,42),(9,'METRO BANK - SHORT','MetroBankCheckShort.jasper',71,39),(11,'EASTWEST BANK - SHORT','EastWestCheckShort.jasper',71,39),(12,'DBP - SHORT','DBPCheckShort.jasper',71,36),(13,'RCBC - LONG','RCBCCheckLong.jasper',78,39),(14,'METRO BANK PERSONAL - LONG','MetroBankCheckLong.jasper',78,42),(15,'EASTWEST BANK LONG - JUNE 2016','EastWestLongJune2016.jasper',78,42),(16,'LAND BANK LONG - JUNE 2016','LandBankLongJune2016.jasper',78,42),(17,'METRO BANK - LONG','MetroBankCheckLongJuly2016.jasper',83,42),(18,'BDO - LONG AUGUST 2016','BDOCheckLongAugust2016.jasper',78,42),(19,'METROBANK - LONG AUGUST 2016','MetBankCheckLongAug2016.jasper',78,42),(22,'BPI - LONG 2019','BPILong2019.jasper',78,42),(23,'CHINABANK - LONG','ChinabankLong.jasper',78,42),(24,'AUB - LONG','AubCheckLong.jasper',78,42),(25,'AUB - LONG 2020','AubCheckLong2020.jasper',78,42);
/*!40000 ALTER TABLE `CHECKBOOK_TEMPLATE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `CIVIL_STATUS`
--

DROP TABLE IF EXISTS `CIVIL_STATUS`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `CIVIL_STATUS` (
  `CIVIL_STATUS_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(10) DEFAULT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`CIVIL_STATUS_ID`),
  KEY `FK_CIVIL_STATUS_CREATED_BY` (`CREATED_BY`),
  KEY `FK_CIVIL_STATUS_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_CIVIL_STATUS_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_CIVIL_STATUS_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `CIVIL_STATUS`
--

LOCK TABLES `CIVIL_STATUS` WRITE;
/*!40000 ALTER TABLE `CIVIL_STATUS` DISABLE KEYS */;
INSERT INTO `CIVIL_STATUS` VALUES (1,'Single',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(2,'Married',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10');
/*!40000 ALTER TABLE `CIVIL_STATUS` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `COMPANY`
--

DROP TABLE IF EXISTS `COMPANY`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `COMPANY` (
  `COMPANY_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `NUMBER` varchar(5) NOT NULL,
  `NAME` varchar(100) NOT NULL,
  `ADDRESS` varchar(200) NOT NULL,
  `TIN` varchar(15) DEFAULT NULL,
  `CONTACT_NUMBER` varchar(20) DEFAULT NULL,
  `EMAIL_ADDRESS` varchar(50) DEFAULT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `LOGO` varchar(50) DEFAULT NULL,
  `CREATED_BY` int(10) unsigned DEFAULT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned DEFAULT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `EB_SL_KEY_ID` int(10) unsigned NOT NULL DEFAULT '1',
  `COMPANY_CODE` varchar(10) DEFAULT NULL,
  PRIMARY KEY (`COMPANY_ID`),
  KEY `EB_SL_KEY_ID` (`EB_SL_KEY_ID`),
  KEY `FK_COMPANY_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `COMPANY_ibfk_1` FOREIGN KEY (`EB_SL_KEY_ID`) REFERENCES `EB_SL_KEY` (`EB_SL_KEY_ID`),
  CONSTRAINT `FK_COMPANY_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `COMPANY`
--

LOCK TABLES `COMPANY` WRITE;
/*!40000 ALTER TABLE `COMPANY` DISABLE KEYS */;
INSERT INTO `COMPANY` VALUES (1,1,'111','EULAP','Koronadal City',NULL,NULL,NULL,1,NULL,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05',1,'DS');
/*!40000 ALTER TABLE `COMPANY` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `COMPANY_PRODUCT`
--

DROP TABLE IF EXISTS `COMPANY_PRODUCT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `COMPANY_PRODUCT` (
  `COMPANY_PRODUCT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `CODE` int(10) unsigned NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`COMPANY_PRODUCT_ID`),
  KEY `FK_COMPANY_ID` (`COMPANY_ID`),
  CONSTRAINT `FK_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `COMPANY_PRODUCT`
--

LOCK TABLES `COMPANY_PRODUCT` WRITE;
/*!40000 ALTER TABLE `COMPANY_PRODUCT` DISABLE KEYS */;
INSERT INTO `COMPANY_PRODUCT` VALUES (1,1,15,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05');
/*!40000 ALTER TABLE `COMPANY_PRODUCT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `CSI_FINISHED_PRODUCT`
--

DROP TABLE IF EXISTS `CSI_FINISHED_PRODUCT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `CSI_FINISHED_PRODUCT` (
  `CSI_FINISHED_PRODUCT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `CASH_SALE_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `WAREHOUSE_ID` int(10) unsigned NOT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double NOT NULL,
  `UNIT_COST` double NOT NULL DEFAULT '0',
  PRIMARY KEY (`CSI_FINISHED_PRODUCT_ID`),
  KEY `FK_CSI_FD_CASH_SALE_ID` (`CASH_SALE_ID`),
  KEY `FK_CSI_FD_WAREHOUSE_ID` (`WAREHOUSE_ID`),
  KEY `FK_CSI_FD_ITEM_ID` (`ITEM_ID`),
  KEY `FK_CSI_FD_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_CSI_FD_CASH_SALE_ID` FOREIGN KEY (`CASH_SALE_ID`) REFERENCES `CASH_SALE` (`CASH_SALE_ID`),
  CONSTRAINT `FK_CSI_FD_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_CSI_FD_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_CSI_FD_WAREHOUSE_ID` FOREIGN KEY (`WAREHOUSE_ID`) REFERENCES `WAREHOUSE` (`WAREHOUSE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `CSI_FINISHED_PRODUCT`
--

LOCK TABLES `CSI_FINISHED_PRODUCT` WRITE;
/*!40000 ALTER TABLE `CSI_FINISHED_PRODUCT` DISABLE KEYS */;
/*!40000 ALTER TABLE `CSI_FINISHED_PRODUCT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `CSI_RAW_MATERIAL`
--

DROP TABLE IF EXISTS `CSI_RAW_MATERIAL`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `CSI_RAW_MATERIAL` (
  `CSI_RAW_MATERIAL_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `CSI_FINISHED_PRODUCT_ID` int(10) unsigned NOT NULL,
  `CASH_SALE_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `WAREHOUSE_ID` int(10) unsigned NOT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double NOT NULL,
  `UNIT_COST` double NOT NULL DEFAULT '0',
  PRIMARY KEY (`CSI_RAW_MATERIAL_ID`),
  KEY `FK_CSI_RM_CASH_SALE_ID` (`CASH_SALE_ID`),
  KEY `FK_CSI_RM_WAREHOUSE_ID` (`WAREHOUSE_ID`),
  KEY `FK_CSI_RM_ITEM_ID` (`ITEM_ID`),
  KEY `FK_CSI_RM_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_CSI_RM_CSI_FINISHED_PRODUCT_ID` (`CSI_FINISHED_PRODUCT_ID`),
  CONSTRAINT `CSI_FINISHED_PRODUCT_ID` FOREIGN KEY (`CSI_FINISHED_PRODUCT_ID`) REFERENCES `CSI_FINISHED_PRODUCT` (`CSI_FINISHED_PRODUCT_ID`),
  CONSTRAINT `FK_CSI_RM_CASH_SALE_ID` FOREIGN KEY (`CASH_SALE_ID`) REFERENCES `CASH_SALE` (`CASH_SALE_ID`),
  CONSTRAINT `FK_CSI_RM_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_CSI_RM_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_CSI_RM_WAREHOUSE_ID` FOREIGN KEY (`WAREHOUSE_ID`) REFERENCES `WAREHOUSE` (`WAREHOUSE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `CSI_RAW_MATERIAL`
--

LOCK TABLES `CSI_RAW_MATERIAL` WRITE;
/*!40000 ALTER TABLE `CSI_RAW_MATERIAL` DISABLE KEYS */;
/*!40000 ALTER TABLE `CSI_RAW_MATERIAL` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `CURRENCY`
--

DROP TABLE IF EXISTS `CURRENCY`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `CURRENCY` (
  `CURRENCY_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(50) NOT NULL,
  `DESCRIPTION` varchar(200) NOT NULL,
  `SIGN` varchar(5) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`CURRENCY_ID`),
  KEY `FK_CURRENCY_CREATED_BY` (`CREATED_BY`),
  KEY `FK_CURRENCY_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_CURRENCY_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_CURRENCY_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `CURRENCY`
--

LOCK TABLES `CURRENCY` WRITE;
/*!40000 ALTER TABLE `CURRENCY` DISABLE KEYS */;
INSERT INTO `CURRENCY` VALUES (1,'PHP','Philippine Peso','₱',1,1,'2021-08-11 01:33:13',1,'2021-08-11 01:33:13'),(2,'USD','US Dollar','$',1,1,'2021-08-11 01:33:13',1,'2021-08-11 01:33:13');
/*!40000 ALTER TABLE `CURRENCY` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `CURRENCY_RATE`
--

DROP TABLE IF EXISTS `CURRENCY_RATE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `CURRENCY_RATE` (
  `CURRENCY_RATE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `CURRENCY_ID` int(10) unsigned NOT NULL,
  `DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `RATE` double NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`CURRENCY_RATE_ID`),
  KEY `FK_CURRENCY_RATE_CURRENCY_ID` (`CURRENCY_ID`),
  KEY `FK_CURRENCY_RATE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_CURRENCY_RATE_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_CURRENCY_RATE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_CURRENCY_RATE_CURRENCY_ID` FOREIGN KEY (`CURRENCY_ID`) REFERENCES `CURRENCY` (`CURRENCY_ID`),
  CONSTRAINT `FK_CURRENCY_RATE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `CURRENCY_RATE`
--

LOCK TABLES `CURRENCY_RATE` WRITE;
/*!40000 ALTER TABLE `CURRENCY_RATE` DISABLE KEYS */;
/*!40000 ALTER TABLE `CURRENCY_RATE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `CUSTODIAN_ACCOUNT`
--

DROP TABLE IF EXISTS `CUSTODIAN_ACCOUNT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `CUSTODIAN_ACCOUNT` (
  `CUSTODIAN_ACCOUNT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `CUSTODIAN_NAME` varchar(100) NOT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `CUSTODIAN_ACCOUNT_NAME` varchar(100) NOT NULL,
  `TERM_ID` int(10) unsigned NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CD_ACCOUNT_COMBINATION_ID` int(10) unsigned NOT NULL,
  `FD_ACCOUNT_COMBINATION_ID` int(10) unsigned NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`CUSTODIAN_ACCOUNT_ID`),
  KEY `FK_CUSTODIAN_ACCOUNT_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_CUSTODIAN_ACCOUNT_TERM_ID` (`TERM_ID`),
  KEY `FK_CUSTODIAN_ACCOUNT_CD_AC_ID` (`CD_ACCOUNT_COMBINATION_ID`),
  KEY `FK_CUSTODIAN_ACCOUNT_FD_AC_ID` (`FD_ACCOUNT_COMBINATION_ID`),
  KEY `FK_CUSTODIAN_ACCOUNT_CREATED_BY` (`CREATED_BY`),
  KEY `FK_CUSTODIAN_ACCOUNT_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_CUSTODIAN_ACCOUNT_CD_AC_ID` FOREIGN KEY (`CD_ACCOUNT_COMBINATION_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_CUSTODIAN_ACCOUNT_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_CUSTODIAN_ACCOUNT_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_CUSTODIAN_ACCOUNT_FD_AC_ID` FOREIGN KEY (`FD_ACCOUNT_COMBINATION_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_CUSTODIAN_ACCOUNT_TERM_ID` FOREIGN KEY (`TERM_ID`) REFERENCES `TERM` (`TERM_ID`),
  CONSTRAINT `FK_CUSTODIAN_ACCOUNT_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `CUSTODIAN_ACCOUNT`
--

LOCK TABLES `CUSTODIAN_ACCOUNT` WRITE;
/*!40000 ALTER TABLE `CUSTODIAN_ACCOUNT` DISABLE KEYS */;
/*!40000 ALTER TABLE `CUSTODIAN_ACCOUNT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `CUSTOMER_ADVANCE_PAYMENT`
--

DROP TABLE IF EXISTS `CUSTOMER_ADVANCE_PAYMENT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `CUSTOMER_ADVANCE_PAYMENT` (
  `CUSTOMER_ADVANCE_PAYMENT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` int(10) unsigned DEFAULT '1',
  `CAP_NUMBER` int(20) unsigned NOT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `RECEIPT_METHOD_ID` int(10) DEFAULT NULL,
  `SALES_ORDER_ID` int(10) unsigned DEFAULT NULL,
  `AR_RECEIPT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `REF_NUMBER` varchar(20) DEFAULT NULL,
  `AR_CUSTOMER_ID` int(10) unsigned NOT NULL,
  `AR_CUSTOMER_ACCOUNT_ID` int(10) unsigned NOT NULL,
  `SALE_INVOICE_NO` varchar(100) DEFAULT NULL,
  `REFERENCE_NO` varchar(100) DEFAULT NULL,
  `RECEIPT_DATE` date NOT NULL,
  `MATURITY_DATE` date NOT NULL,
  `WT_ACCOUNT_SETTING_ID` int(10) unsigned DEFAULT NULL,
  `WT_AMOUNT` double DEFAULT '0',
  `CASH` double DEFAULT NULL,
  `FORM_WORKFLOW_ID` int(10) unsigned DEFAULT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `DIVISION_ID` int(10) unsigned DEFAULT NULL,
  `CURRENCY_ID` int(10) unsigned DEFAULT NULL,
  `CURRENCY_RATE_ID` int(10) unsigned DEFAULT NULL,
  `CURRENCY_RATE_VALUE` double DEFAULT '0',
  `PO_NUMBER` varchar(50) DEFAULT NULL,
  `AMOUNT` double DEFAULT '0',
  PRIMARY KEY (`CUSTOMER_ADVANCE_PAYMENT_ID`),
  KEY `FK_CUSTOMER_ADVANCE_PAYMENT_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_CUSTOMER_ADVANCE_PAYMENT_RECEIPT_METHOD_ID` (`RECEIPT_METHOD_ID`),
  KEY `FK_CUSTOMER_ADVANCE_PAYMENT_SALES_ORDER_ID` (`SALES_ORDER_ID`),
  KEY `FK_CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` (`AR_RECEIPT_TYPE_ID`),
  KEY `FK_CUSTOMER_ADVANCE_PAYMENT_CUSTOMER_ID` (`AR_CUSTOMER_ID`),
  KEY `FK_CUSTOMER_ADVANCE_PAYMENT_CUSTOMER_ACCOUNT_ID` (`AR_CUSTOMER_ACCOUNT_ID`),
  KEY `FK_CUSTOMER_ADVANCE_PAYMENT_WT_ACCOUNT_SETTING_ID` (`WT_ACCOUNT_SETTING_ID`),
  KEY `FK_CUSTOMER_ADVANCE_PAYMENT_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_CUSTOMER_ADVANCE_PAYMENT_CREATED_BY` (`CREATED_BY`),
  KEY `FK_CUSTOMER_ADVANCE_PAYMENT_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_CUSTOMER_ADVANCE_PAYMENT_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_CUSTOMER_ADVANCE_PAYMENT_CAP_TYPE_ID` (`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID`),
  KEY `FK_CUSTOMER_ADVANCE_PAYMENT_DIVISION_ID` (`DIVISION_ID`),
  KEY `FK_CUSTOMER_ADVANCE_PAYMENT_CURRENCY_ID` (`CURRENCY_ID`),
  KEY `FK_CUSTOMER_ADVANCE_PAYMENT_CURRENCY_RATE_ID` (`CURRENCY_RATE_ID`),
  CONSTRAINT `FK_CUSTOMER_ADVANCE_PAYMENT_CAP_TYPE_ID` FOREIGN KEY (`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID`) REFERENCES `CUSTOMER_ADVANCE_PAYMENT_TYPE` (`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID`),
  CONSTRAINT `FK_CUSTOMER_ADVANCE_PAYMENT_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_CUSTOMER_ADVANCE_PAYMENT_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_CUSTOMER_ADVANCE_PAYMENT_CURRENCY_ID` FOREIGN KEY (`CURRENCY_ID`) REFERENCES `CURRENCY` (`CURRENCY_ID`),
  CONSTRAINT `FK_CUSTOMER_ADVANCE_PAYMENT_CURRENCY_RATE_ID` FOREIGN KEY (`CURRENCY_RATE_ID`) REFERENCES `CURRENCY_RATE` (`CURRENCY_RATE_ID`),
  CONSTRAINT `FK_CUSTOMER_ADVANCE_PAYMENT_CUSTOMER_ACCOUNT_ID` FOREIGN KEY (`AR_CUSTOMER_ACCOUNT_ID`) REFERENCES `AR_CUSTOMER_ACCOUNT` (`AR_CUSTOMER_ACCOUNT_ID`),
  CONSTRAINT `FK_CUSTOMER_ADVANCE_PAYMENT_CUSTOMER_ID` FOREIGN KEY (`AR_CUSTOMER_ID`) REFERENCES `AR_CUSTOMER` (`AR_CUSTOMER_ID`),
  CONSTRAINT `FK_CUSTOMER_ADVANCE_PAYMENT_DIVISION_ID` FOREIGN KEY (`DIVISION_ID`) REFERENCES `DIVISION` (`DIVISION_ID`),
  CONSTRAINT `FK_CUSTOMER_ADVANCE_PAYMENT_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_CUSTOMER_ADVANCE_PAYMENT_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_CUSTOMER_ADVANCE_PAYMENT_RECEIPT_METHOD_ID` FOREIGN KEY (`RECEIPT_METHOD_ID`) REFERENCES `RECEIPT_METHOD` (`RECEIPT_METHOD_ID`),
  CONSTRAINT `FK_CUSTOMER_ADVANCE_PAYMENT_SALES_ORDER_ID` FOREIGN KEY (`SALES_ORDER_ID`) REFERENCES `SALES_ORDER` (`SALES_ORDER_ID`),
  CONSTRAINT `FK_CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` FOREIGN KEY (`AR_RECEIPT_TYPE_ID`) REFERENCES `AR_RECEIPT_TYPE` (`AR_RECEIPT_TYPE_ID`),
  CONSTRAINT `FK_CUSTOMER_ADVANCE_PAYMENT_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_CUSTOMER_ADVANCE_PAYMENT_WT_ACCOUNT_SETTING_ID` FOREIGN KEY (`WT_ACCOUNT_SETTING_ID`) REFERENCES `WT_ACCOUNT_SETTING` (`WT_ACCOUNT_SETTING_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `CUSTOMER_ADVANCE_PAYMENT`
--

LOCK TABLES `CUSTOMER_ADVANCE_PAYMENT` WRITE;
/*!40000 ALTER TABLE `CUSTOMER_ADVANCE_PAYMENT` DISABLE KEYS */;
/*!40000 ALTER TABLE `CUSTOMER_ADVANCE_PAYMENT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `CUSTOMER_ADVANCE_PAYMENT_ACCOUNT`
--

DROP TABLE IF EXISTS `CUSTOMER_ADVANCE_PAYMENT_ACCOUNT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `CUSTOMER_ADVANCE_PAYMENT_ACCOUNT` (
  `CUSTOMER_ADVANCE_PAYMENT_ACCOUNT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `DIVISION_ID` int(10) unsigned DEFAULT NULL,
  `DEFAULT_CREDIT_AC_ID` int(10) unsigned NOT NULL,
  `ACTIVE` tinyint(1) DEFAULT '1',
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`CUSTOMER_ADVANCE_PAYMENT_ACCOUNT_ID`),
  KEY `FK_CAPA_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_CAPA_DIVISION_ID` (`DIVISION_ID`),
  KEY `FK_CAPA_DEFAULT_CREDIT_AC_ID` (`DEFAULT_CREDIT_AC_ID`),
  KEY `FK_CAPA_CREATED_BY` (`CREATED_BY`),
  KEY `FK_CAPA_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_CAPA_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_CAPA_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_CAPA_DEFAULT_CREDIT_AC_ID` FOREIGN KEY (`DEFAULT_CREDIT_AC_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_CAPA_DIVISION_ID` FOREIGN KEY (`DIVISION_ID`) REFERENCES `DIVISION` (`DIVISION_ID`),
  CONSTRAINT `FK_CAPA_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `CUSTOMER_ADVANCE_PAYMENT_ACCOUNT`
--

LOCK TABLES `CUSTOMER_ADVANCE_PAYMENT_ACCOUNT` WRITE;
/*!40000 ALTER TABLE `CUSTOMER_ADVANCE_PAYMENT_ACCOUNT` DISABLE KEYS */;
INSERT INTO `CUSTOMER_ADVANCE_PAYMENT_ACCOUNT` VALUES (1,1,1,444,1,1,'2021-08-11 01:34:39',1,'2021-08-11 01:34:39');
/*!40000 ALTER TABLE `CUSTOMER_ADVANCE_PAYMENT_ACCOUNT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `CUSTOMER_ADVANCE_PAYMENT_ITEM`
--

DROP TABLE IF EXISTS `CUSTOMER_ADVANCE_PAYMENT_ITEM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `CUSTOMER_ADVANCE_PAYMENT_ITEM` (
  `CUSTOMER_ADVANCE_PAYMENT_ITEM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `CUSTOMER_ADVANCE_PAYMENT_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `WAREHOUSE_ID` int(10) unsigned DEFAULT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double NOT NULL,
  `ITEM_SRP_ID` int(10) unsigned DEFAULT NULL,
  `SRP` double DEFAULT NULL,
  `ITEM_DISCOUNT_ID` int(10) unsigned DEFAULT NULL,
  `UNIT_COST` double DEFAULT '0',
  `DISCOUNT` double DEFAULT '0',
  `ITEM_ADD_ON_ID` int(10) unsigned DEFAULT NULL,
  `GROSS_AMOUNT` double DEFAULT '0',
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `AMOUNT` double NOT NULL,
  `ITEM_DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `DISCOUNT_VALUE` double DEFAULT '0',
  PRIMARY KEY (`CUSTOMER_ADVANCE_PAYMENT_ITEM_ID`),
  KEY `FK_CAPI_CUSTOMER_ADVANCE_PAYMENT_ID` (`CUSTOMER_ADVANCE_PAYMENT_ID`),
  KEY `FK_CAPI_WAREHOUSE_ID` (`WAREHOUSE_ID`),
  KEY `FK_CAPI_ITEM_ID` (`ITEM_ID`),
  KEY `FK_CAPI_ITEM_SRP_ID` (`ITEM_SRP_ID`),
  KEY `FK_CAPI_ITEM_DISCOUNT_ID` (`ITEM_DISCOUNT_ID`),
  KEY `FK_CAPI_ITEM_ADD_ON_ID` (`ITEM_ADD_ON_ID`),
  KEY `FK_CAPI_ITEM_DISCOUNT_TYPE_ID` (`ITEM_DISCOUNT_TYPE_ID`),
  KEY `FK_CAPI_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_CAPI_CUSTOMER_ADVANCE_PAYMENT_ID` FOREIGN KEY (`CUSTOMER_ADVANCE_PAYMENT_ID`) REFERENCES `CUSTOMER_ADVANCE_PAYMENT` (`CUSTOMER_ADVANCE_PAYMENT_ID`),
  CONSTRAINT `FK_CAPI_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_CAPI_ITEM_ADD_ON_ID` FOREIGN KEY (`ITEM_ADD_ON_ID`) REFERENCES `ITEM_ADD_ON` (`ITEM_ADD_ON_ID`),
  CONSTRAINT `FK_CAPI_ITEM_DISCOUNT_ID` FOREIGN KEY (`ITEM_DISCOUNT_ID`) REFERENCES `ITEM_DISCOUNT` (`ITEM_DISCOUNT_ID`),
  CONSTRAINT `FK_CAPI_ITEM_DISCOUNT_TYPE_ID` FOREIGN KEY (`ITEM_DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_CAPI_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_CAPI_ITEM_SRP_ID` FOREIGN KEY (`ITEM_SRP_ID`) REFERENCES `ITEM_SRP` (`ITEM_SRP_ID`),
  CONSTRAINT `FK_CAPI_WAREHOUSE_ID` FOREIGN KEY (`WAREHOUSE_ID`) REFERENCES `WAREHOUSE` (`WAREHOUSE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `CUSTOMER_ADVANCE_PAYMENT_ITEM`
--

LOCK TABLES `CUSTOMER_ADVANCE_PAYMENT_ITEM` WRITE;
/*!40000 ALTER TABLE `CUSTOMER_ADVANCE_PAYMENT_ITEM` DISABLE KEYS */;
/*!40000 ALTER TABLE `CUSTOMER_ADVANCE_PAYMENT_ITEM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `CUSTOMER_ADVANCE_PAYMENT_LINE`
--

DROP TABLE IF EXISTS `CUSTOMER_ADVANCE_PAYMENT_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `CUSTOMER_ADVANCE_PAYMENT_LINE` (
  `CUSTOMER_ADVANCE_PAYMENT_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `CUSTOMER_ADVANCE_PAYMENT_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `AMOUNT` double DEFAULT '0',
  PRIMARY KEY (`CUSTOMER_ADVANCE_PAYMENT_LINE_ID`),
  KEY `FK_CAPL_CAP_ID` (`CUSTOMER_ADVANCE_PAYMENT_ID`),
  KEY `FK_CAPL_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_CAPL_CAP_ID` FOREIGN KEY (`CUSTOMER_ADVANCE_PAYMENT_ID`) REFERENCES `CUSTOMER_ADVANCE_PAYMENT` (`CUSTOMER_ADVANCE_PAYMENT_ID`),
  CONSTRAINT `FK_CAPL_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `CUSTOMER_ADVANCE_PAYMENT_LINE`
--

LOCK TABLES `CUSTOMER_ADVANCE_PAYMENT_LINE` WRITE;
/*!40000 ALTER TABLE `CUSTOMER_ADVANCE_PAYMENT_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `CUSTOMER_ADVANCE_PAYMENT_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `CUSTOMER_ADVANCE_PAYMENT_TYPE`
--

DROP TABLE IF EXISTS `CUSTOMER_ADVANCE_PAYMENT_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `CUSTOMER_ADVANCE_PAYMENT_TYPE` (
  `CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(20) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID`),
  KEY `FK_CAP_TYPE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_CAP_TYPE_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_CAP_TYPE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_CAP_TYPE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `CUSTOMER_ADVANCE_PAYMENT_TYPE`
--

LOCK TABLES `CUSTOMER_ADVANCE_PAYMENT_TYPE` WRITE;
/*!40000 ALTER TABLE `CUSTOMER_ADVANCE_PAYMENT_TYPE` DISABLE KEYS */;
INSERT INTO `CUSTOMER_ADVANCE_PAYMENT_TYPE` VALUES (1,'Retail',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(3,'Individual Selection',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(5,'WIPSO',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(6,'CAP - Central',1,1,'2021-08-11 01:34:39',1,'2021-08-11 01:34:39'),(7,'CAP - NSB 3',1,1,'2021-08-11 01:34:39',1,'2021-08-11 01:34:39'),(8,'CAP - NSB 4',1,1,'2021-08-11 01:34:39',1,'2021-08-11 01:34:39'),(9,'CAP - NSB 5',1,1,'2021-08-11 01:34:39',1,'2021-08-11 01:34:39'),(10,'CAP - NSB 8',1,1,'2021-08-11 01:34:39',1,'2021-08-11 01:34:39'),(11,'CAP - NSB 8A',1,1,'2021-08-11 01:34:39',1,'2021-08-11 01:34:39');
/*!40000 ALTER TABLE `CUSTOMER_ADVANCE_PAYMENT_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `CUSTOMER_TYPE`
--

DROP TABLE IF EXISTS `CUSTOMER_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `CUSTOMER_TYPE` (
  `CUSTOMER_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(50) NOT NULL,
  `DESCRIPTION` varchar(200) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`CUSTOMER_TYPE_ID`),
  KEY `FK_CUSTOMER_TYPE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_CUSTOMER_TYPE_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_CUSTOMER_TYPE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_CUSTOMER_TYPE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `CUSTOMER_TYPE`
--

LOCK TABLES `CUSTOMER_TYPE` WRITE;
/*!40000 ALTER TABLE `CUSTOMER_TYPE` DISABLE KEYS */;
/*!40000 ALTER TABLE `CUSTOMER_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `DAILY_SHIFT_SCHEDULE`
--

DROP TABLE IF EXISTS `DAILY_SHIFT_SCHEDULE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `DAILY_SHIFT_SCHEDULE` (
  `DAILY_SHIFT_SCHEDULE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `PAYROLL_TIME_PERIOD_ID` int(10) unsigned NOT NULL,
  `DIVISION_ID` int(10) unsigned DEFAULT NULL,
  `PAYROLL_TIME_PERIOD_SCHEDULE_ID` int(2) unsigned NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`DAILY_SHIFT_SCHEDULE_ID`),
  KEY `FK_DAILY_SHIFT_SCHEDULE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_DAILY_SHIFT_SCHEDULE_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_DAILY_SHIFT_SCHEDULE_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_DAILY_SHIFT_SCHEDULE_DIVISION_ID` (`DIVISION_ID`),
  KEY `FK_DAILY_SHIFT_SCHEDULE_PAYROLL_TIME_PERIOD_ID` (`PAYROLL_TIME_PERIOD_ID`),
  KEY `FK_DAILY_SHIFT_SCHEDULE_PAYROLL_TIME_PERIOD_SCHEDULE_ID` (`PAYROLL_TIME_PERIOD_SCHEDULE_ID`),
  CONSTRAINT `FK_DAILY_SHIFT_SCHEDULE_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_DAILY_SHIFT_SCHEDULE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_DAILY_SHIFT_SCHEDULE_DIVISION_ID` FOREIGN KEY (`DIVISION_ID`) REFERENCES `DIVISION` (`DIVISION_ID`),
  CONSTRAINT `FK_DAILY_SHIFT_SCHEDULE_PAYROLL_TIME_PERIOD_ID` FOREIGN KEY (`PAYROLL_TIME_PERIOD_ID`) REFERENCES `PAYROLL_TIME_PERIOD` (`PAYROLL_TIME_PERIOD_ID`),
  CONSTRAINT `FK_DAILY_SHIFT_SCHEDULE_PAYROLL_TIME_PERIOD_SCHEDULE_ID` FOREIGN KEY (`PAYROLL_TIME_PERIOD_SCHEDULE_ID`) REFERENCES `PAYROLL_TIME_PERIOD_SCHEDULE` (`PAYROLL_TIME_PERIOD_SCHEDULE_ID`),
  CONSTRAINT `FK_DAILY_SHIFT_SCHEDULE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `DAILY_SHIFT_SCHEDULE`
--

LOCK TABLES `DAILY_SHIFT_SCHEDULE` WRITE;
/*!40000 ALTER TABLE `DAILY_SHIFT_SCHEDULE` DISABLE KEYS */;
/*!40000 ALTER TABLE `DAILY_SHIFT_SCHEDULE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `DAILY_SHIFT_SCHEDULE_LINE`
--

DROP TABLE IF EXISTS `DAILY_SHIFT_SCHEDULE_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `DAILY_SHIFT_SCHEDULE_LINE` (
  `DAILY_SHIFT_SCHEDULE_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `DAILY_SHIFT_SCHEDULE_ID` int(10) unsigned NOT NULL,
  `EMPLOYEE_ID` int(10) unsigned NOT NULL,
  `EMPLOYEE_SHIFT_ID` int(10) unsigned NOT NULL,
  `DATE` date NOT NULL,
  PRIMARY KEY (`DAILY_SHIFT_SCHEDULE_LINE_ID`),
  KEY `FK_DSSL_DAILY_SHIFT_SCHEDULE_ID` (`DAILY_SHIFT_SCHEDULE_ID`),
  KEY `FK_DSSL_EMPLOYEE_ID` (`EMPLOYEE_ID`),
  KEY `FK_DSSL_EMPLOYEE_SHIFT_ID` (`EMPLOYEE_SHIFT_ID`),
  CONSTRAINT `FK_DSSL_DAILY_SHIFT_SCHEDULE_ID` FOREIGN KEY (`DAILY_SHIFT_SCHEDULE_ID`) REFERENCES `DAILY_SHIFT_SCHEDULE` (`DAILY_SHIFT_SCHEDULE_ID`),
  CONSTRAINT `FK_DSSL_EMPLOYEE_ID` FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES `EMPLOYEE` (`EMPLOYEE_ID`),
  CONSTRAINT `FK_DSSL_EMPLOYEE_SHIFT_ID` FOREIGN KEY (`EMPLOYEE_SHIFT_ID`) REFERENCES `EMPLOYEE_SHIFT` (`EMPLOYEE_SHIFT_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `DAILY_SHIFT_SCHEDULE_LINE`
--

LOCK TABLES `DAILY_SHIFT_SCHEDULE_LINE` WRITE;
/*!40000 ALTER TABLE `DAILY_SHIFT_SCHEDULE_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `DAILY_SHIFT_SCHEDULE_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `DEDUCTION_TYPE`
--

DROP TABLE IF EXISTS `DEDUCTION_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `DEDUCTION_TYPE` (
  `DEDUCTION_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(25) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`DEDUCTION_TYPE_ID`),
  KEY `FK_DEDUCTION_TYPE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_DEDUCTION_TYPE_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_DEDUCTION_TYPE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_DEDUCTION_TYPE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `DEDUCTION_TYPE`
--

LOCK TABLES `DEDUCTION_TYPE` WRITE;
/*!40000 ALTER TABLE `DEDUCTION_TYPE` DISABLE KEYS */;
/*!40000 ALTER TABLE `DEDUCTION_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `DELIVERY_RECEIPT`
--

DROP TABLE IF EXISTS `DELIVERY_RECEIPT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `DELIVERY_RECEIPT` (
  `DELIVERY_RECEIPT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `SEQUENCE_NO` int(10) unsigned NOT NULL,
  `FORM_WORKFLOW_ID` int(10) unsigned NOT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `AR_CUSTOMER_ID` int(10) unsigned NOT NULL,
  `AR_CUSTOMER_ACCOUNT_ID` int(10) unsigned NOT NULL,
  `TERM_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `AUTHORITY_TO_WITHDRAW_ID` int(10) unsigned DEFAULT NULL,
  `DIVISION_ID` int(10) unsigned DEFAULT NULL,
  `CURRENCY_ID` int(10) unsigned DEFAULT NULL,
  `CURRENCY_RATE_ID` int(10) unsigned DEFAULT NULL,
  `SALES_PERSONNEL_ID` int(10) unsigned DEFAULT NULL,
  `CURRENCY_RATE_VALUE` double DEFAULT '0',
  `DATE` date NOT NULL,
  `DUE_DATE` date NOT NULL,
  `REMARKS` text,
  `PO_NUMBER` varchar(50) DEFAULT NULL,
  `DR_REF_NUMBER` varchar(50) DEFAULT NULL,
  `WT_ACCOUNT_SETTING_ID` int(10) unsigned DEFAULT NULL,
  `WT_AMOUNT` double DEFAULT '0',
  `WT_VAT_AMOUNT` double DEFAULT '0',
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `DELIVERY_RECEIPT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `SALES_ORDER_ID` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`DELIVERY_RECEIPT_ID`),
  KEY `FK_DR_ATW_ID` (`AUTHORITY_TO_WITHDRAW_ID`),
  KEY `FK_DR_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_DR_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_DR_CS_ID` (`AR_CUSTOMER_ID`),
  KEY `FK_DR_CS_ACCT_ID` (`AR_CUSTOMER_ACCOUNT_ID`),
  KEY `FK_DR_TERM_ID` (`TERM_ID`),
  KEY `FK_DR_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_DR_CREATED_BY` (`CREATED_BY`),
  KEY `FK_DR_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_DR_DIVISION_ID` (`DIVISION_ID`),
  KEY `FK_DR_CURRENCY_ID` (`CURRENCY_ID`),
  KEY `FK_DR_CURRENCY_RATE_ID` (`CURRENCY_RATE_ID`),
  KEY `FK_DR_SALES_PERSONNEL_ID` (`SALES_PERSONNEL_ID`),
  KEY `FK_DR_WT_ACCOUNT_SETTING_ID` (`WT_ACCOUNT_SETTING_ID`),
  KEY `FK_DR_TYPE_ID` (`DELIVERY_RECEIPT_TYPE_ID`),
  KEY `FK_DELIVERY_RECEIPT_SALES_ORDER_ID` (`SALES_ORDER_ID`),
  CONSTRAINT `FK_DELIVERY_RECEIPT_SALES_ORDER_ID` FOREIGN KEY (`SALES_ORDER_ID`) REFERENCES `SALES_ORDER` (`SALES_ORDER_ID`),
  CONSTRAINT `FK_DR_ATW_ID` FOREIGN KEY (`AUTHORITY_TO_WITHDRAW_ID`) REFERENCES `AUTHORITY_TO_WITHDRAW` (`AUTHORITY_TO_WITHDRAW_ID`),
  CONSTRAINT `FK_DR_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_DR_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_DR_CS_ACCT_ID` FOREIGN KEY (`AR_CUSTOMER_ACCOUNT_ID`) REFERENCES `AR_CUSTOMER_ACCOUNT` (`AR_CUSTOMER_ACCOUNT_ID`),
  CONSTRAINT `FK_DR_CS_ID` FOREIGN KEY (`AR_CUSTOMER_ID`) REFERENCES `AR_CUSTOMER` (`AR_CUSTOMER_ID`),
  CONSTRAINT `FK_DR_CURRENCY_ID` FOREIGN KEY (`CURRENCY_ID`) REFERENCES `CURRENCY` (`CURRENCY_ID`),
  CONSTRAINT `FK_DR_CURRENCY_RATE_ID` FOREIGN KEY (`CURRENCY_RATE_ID`) REFERENCES `CURRENCY_RATE` (`CURRENCY_RATE_ID`),
  CONSTRAINT `FK_DR_DIVISION_ID` FOREIGN KEY (`DIVISION_ID`) REFERENCES `DIVISION` (`DIVISION_ID`),
  CONSTRAINT `FK_DR_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_DR_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_DR_SALES_PERSONNEL_ID` FOREIGN KEY (`SALES_PERSONNEL_ID`) REFERENCES `SALES_PERSONNEL` (`SALES_PERSONNEL_ID`),
  CONSTRAINT `FK_DR_TERM_ID` FOREIGN KEY (`TERM_ID`) REFERENCES `TERM` (`TERM_ID`),
  CONSTRAINT `FK_DR_TYPE_ID` FOREIGN KEY (`DELIVERY_RECEIPT_TYPE_ID`) REFERENCES `DELIVERY_RECEIPT_TYPE` (`DELIVERY_RECEIPT_TYPE_ID`),
  CONSTRAINT `FK_DR_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_DR_WT_ACCOUNT_SETTING_ID` FOREIGN KEY (`WT_ACCOUNT_SETTING_ID`) REFERENCES `WT_ACCOUNT_SETTING` (`WT_ACCOUNT_SETTING_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `DELIVERY_RECEIPT`
--

LOCK TABLES `DELIVERY_RECEIPT` WRITE;
/*!40000 ALTER TABLE `DELIVERY_RECEIPT` DISABLE KEYS */;
/*!40000 ALTER TABLE `DELIVERY_RECEIPT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `DELIVERY_RECEIPT_ITEM`
--

DROP TABLE IF EXISTS `DELIVERY_RECEIPT_ITEM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `DELIVERY_RECEIPT_ITEM` (
  `DELIVERY_RECEIPT_ITEM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `DELIVERY_RECEIPT_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `WAREHOUSE_ID` int(10) unsigned NOT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double NOT NULL,
  `ITEM_SRP_ID` int(10) unsigned DEFAULT NULL,
  `SRP` double DEFAULT '0',
  `UNIT_COST` double NOT NULL,
  `DISCOUNT` double DEFAULT '0',
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `AMOUNT` double DEFAULT '0',
  `ITEM_DISCOUNT_ID` int(10) unsigned DEFAULT NULL,
  `ITEM_ADD_ON_ID` int(10) unsigned DEFAULT NULL,
  `ITEM_DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `DISCOUNT_VALUE` double DEFAULT '0',
  PRIMARY KEY (`DELIVERY_RECEIPT_ITEM_ID`),
  KEY `FK_DRI_DELIVERY_RECEIPT_ID` (`DELIVERY_RECEIPT_ID`),
  KEY `FK_DRI_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_DRI_WAREHOUSE_ID` (`WAREHOUSE_ID`),
  KEY `FK_DRI_ITEM_ID` (`ITEM_ID`),
  KEY `FK_DRI_ITEM_SRP_ID` (`ITEM_SRP_ID`),
  KEY `FK_DRI_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  KEY `FK_DRI_ITEM_DISCOUNT_ID` (`ITEM_DISCOUNT_ID`),
  KEY `FK_DRI_ITEM_ADD_ON_ID` (`ITEM_ADD_ON_ID`),
  KEY `FK_DRI_ITEM_DISCOUNT_TYPE_ID` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_DRI_DELIVERY_RECEIPT_ID` FOREIGN KEY (`DELIVERY_RECEIPT_ID`) REFERENCES `DELIVERY_RECEIPT` (`DELIVERY_RECEIPT_ID`),
  CONSTRAINT `FK_DRI_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_DRI_ITEM_ADD_ON_ID` FOREIGN KEY (`ITEM_ADD_ON_ID`) REFERENCES `ITEM_ADD_ON` (`ITEM_ADD_ON_ID`),
  CONSTRAINT `FK_DRI_ITEM_DISCOUNT_ID` FOREIGN KEY (`ITEM_DISCOUNT_ID`) REFERENCES `ITEM_DISCOUNT` (`ITEM_DISCOUNT_ID`),
  CONSTRAINT `FK_DRI_ITEM_DISCOUNT_TYPE_ID` FOREIGN KEY (`ITEM_DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_DRI_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_DRI_ITEM_SRP_ID` FOREIGN KEY (`ITEM_SRP_ID`) REFERENCES `ITEM_SRP` (`ITEM_SRP_ID`),
  CONSTRAINT `FK_DRI_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_DRI_WAREHOUSE_ID` FOREIGN KEY (`WAREHOUSE_ID`) REFERENCES `WAREHOUSE` (`WAREHOUSE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `DELIVERY_RECEIPT_ITEM`
--

LOCK TABLES `DELIVERY_RECEIPT_ITEM` WRITE;
/*!40000 ALTER TABLE `DELIVERY_RECEIPT_ITEM` DISABLE KEYS */;
/*!40000 ALTER TABLE `DELIVERY_RECEIPT_ITEM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `DELIVERY_RECEIPT_LINE`
--

DROP TABLE IF EXISTS `DELIVERY_RECEIPT_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `DELIVERY_RECEIPT_LINE` (
  `DELIVERY_RECEIPT_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `DELIVERY_RECEIPT_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `SERVICE_SETTING_ID` int(10) unsigned NOT NULL,
  `DESCRIPTION` text,
  `GROSS_AMOUNT` double DEFAULT '0',
  `DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `DISCOUNT_VALUE` double DEFAULT '0',
  `DISCOUNT` double DEFAULT '0',
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `AMOUNT` double DEFAULT '0',
  `QUANTITY` double DEFAULT '0',
  `PERCENTILE` double DEFAULT '0',
  `UP_AMOUNT` double DEFAULT '0',
  `UNITOFMEASUREMENT_ID` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`DELIVERY_RECEIPT_LINE_ID`),
  KEY `FK_DRL_DELIVERY_RECEIPT_ID` (`DELIVERY_RECEIPT_ID`),
  KEY `FK_DRL_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_DRL_SERVICE_SETTING_ID` (`SERVICE_SETTING_ID`),
  KEY `FK_DRL_DISCOUNT_TYPE_ID` (`DISCOUNT_TYPE_ID`),
  KEY `FK_DRL_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_DRL_DELIVERY_RECEIPT_ID` FOREIGN KEY (`DELIVERY_RECEIPT_ID`) REFERENCES `DELIVERY_RECEIPT` (`DELIVERY_RECEIPT_ID`),
  CONSTRAINT `FK_DRL_DISCOUNT_TYPE_ID` FOREIGN KEY (`DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_DRL_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_DRL_SERVICE_SETTING_ID` FOREIGN KEY (`SERVICE_SETTING_ID`) REFERENCES `SERVICE_SETTING` (`SERVICE_SETTING_ID`),
  CONSTRAINT `FK_DRL_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `DELIVERY_RECEIPT_LINE`
--

LOCK TABLES `DELIVERY_RECEIPT_LINE` WRITE;
/*!40000 ALTER TABLE `DELIVERY_RECEIPT_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `DELIVERY_RECEIPT_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `DELIVERY_RECEIPT_TYPE`
--

DROP TABLE IF EXISTS `DELIVERY_RECEIPT_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `DELIVERY_RECEIPT_TYPE` (
  `DELIVERY_RECEIPT_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(50) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  PRIMARY KEY (`DELIVERY_RECEIPT_TYPE_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `DELIVERY_RECEIPT_TYPE`
--

LOCK TABLES `DELIVERY_RECEIPT_TYPE` WRITE;
/*!40000 ALTER TABLE `DELIVERY_RECEIPT_TYPE` DISABLE KEYS */;
INSERT INTO `DELIVERY_RECEIPT_TYPE` VALUES (1,'Delivery Receipt - Goods',1),(2,'Waybill',1),(3,'Equipment Utilization',1),(4,'Delivery Receipt - Service',1);
/*!40000 ALTER TABLE `DELIVERY_RECEIPT_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `DIRECT_PAYMENT`
--

DROP TABLE IF EXISTS `DIRECT_PAYMENT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `DIRECT_PAYMENT` (
  `DIRECT_PAYMENT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `INVOICE_NUMBER` varchar(100) DEFAULT NULL,
  `TERM_ID` int(10) unsigned DEFAULT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `AP_PAYMENT_ID` int(10) unsigned DEFAULT NULL,
  `DIRECT_PAYMENT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `DESCRIPTION` text,
  PRIMARY KEY (`DIRECT_PAYMENT_ID`),
  KEY `FK_DIRECT_PAYMENT_TERM_ID` (`TERM_ID`),
  KEY `FK_DIRECT_PAYMENT_AP_PAYMENT_ID` (`AP_PAYMENT_ID`),
  KEY `FK_DIRECT_PAYMENT_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_DIRECT_PAYMENT_TYPE_ID` (`DIRECT_PAYMENT_TYPE_ID`),
  CONSTRAINT `FK_DIRECT_PAYMENT_AP_PAYMENT_ID` FOREIGN KEY (`AP_PAYMENT_ID`) REFERENCES `AP_PAYMENT` (`AP_PAYMENT_ID`),
  CONSTRAINT `FK_DIRECT_PAYMENT_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_DIRECT_PAYMENT_TERM_ID` FOREIGN KEY (`TERM_ID`) REFERENCES `TERM` (`TERM_ID`),
  CONSTRAINT `FK_DIRECT_PAYMENT_TYPE_ID` FOREIGN KEY (`DIRECT_PAYMENT_TYPE_ID`) REFERENCES `DIRECT_PAYMENT_TYPE` (`DIRECT_PAYMENT_TYPE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `DIRECT_PAYMENT`
--

LOCK TABLES `DIRECT_PAYMENT` WRITE;
/*!40000 ALTER TABLE `DIRECT_PAYMENT` DISABLE KEYS */;
/*!40000 ALTER TABLE `DIRECT_PAYMENT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `DIRECT_PAYMENT_LINE`
--

DROP TABLE IF EXISTS `DIRECT_PAYMENT_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `DIRECT_PAYMENT_LINE` (
  `DIRECT_PAYMENT_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `DIRECT_PAYMENT_ID` int(10) unsigned NOT NULL,
  `ACCOUNT_COMBINATION_ID` int(10) unsigned NOT NULL,
  `AMOUNT` double NOT NULL,
  `DESCRIPTION` text,
  `ACTIVE` tinyint(1) NOT NULL,
  PRIMARY KEY (`DIRECT_PAYMENT_LINE_ID`),
  KEY `FK_DIRECT_PAYMENT_LINE_DIRECT_PAYMENT_ID` (`DIRECT_PAYMENT_ID`),
  KEY `FK_DIRECT_PAYMENT_LINE_ACCOUNT_COMBINATION_ID` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_DIRECT_PAYMENT_LINE_ACCOUNT_COMBINATION` FOREIGN KEY (`ACCOUNT_COMBINATION_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_DIRECT_PAYMENT_LINE_DIRECT_PAYMENT_ID` FOREIGN KEY (`DIRECT_PAYMENT_ID`) REFERENCES `DIRECT_PAYMENT` (`DIRECT_PAYMENT_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `DIRECT_PAYMENT_LINE`
--

LOCK TABLES `DIRECT_PAYMENT_LINE` WRITE;
/*!40000 ALTER TABLE `DIRECT_PAYMENT_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `DIRECT_PAYMENT_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `DIRECT_PAYMENT_TYPE`
--

DROP TABLE IF EXISTS `DIRECT_PAYMENT_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `DIRECT_PAYMENT_TYPE` (
  `DIRECT_PAYMENT_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(20) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`DIRECT_PAYMENT_TYPE_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `DIRECT_PAYMENT_TYPE`
--

LOCK TABLES `DIRECT_PAYMENT_TYPE` WRITE;
/*!40000 ALTER TABLE `DIRECT_PAYMENT_TYPE` DISABLE KEYS */;
INSERT INTO `DIRECT_PAYMENT_TYPE` VALUES (1,'CASH',1,'2021-08-11 01:34:20',1,'2021-08-11 01:34:20'),(2,'CHECK',1,'2021-08-11 01:34:20',1,'2021-08-11 01:34:20');
/*!40000 ALTER TABLE `DIRECT_PAYMENT_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `DIVISION`
--

DROP TABLE IF EXISTS `DIVISION`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `DIVISION` (
  `DIVISION_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `PARENT_DIVISION_ID` int(10) unsigned DEFAULT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `NUMBER` varchar(5) NOT NULL,
  `NAME` varchar(100) NOT NULL,
  `DESCRIPTION` varchar(200) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `EB_SL_KEY_ID` int(10) unsigned NOT NULL DEFAULT '1',
  PRIMARY KEY (`DIVISION_ID`),
  KEY `FK_DIVISION_CREATED_BY` (`CREATED_BY`),
  KEY `FK_DIVISION_UPDATED_BY` (`UPDATED_BY`),
  KEY `EB_SL_KEY_ID` (`EB_SL_KEY_ID`),
  KEY `FK_DIVISION_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `DIVISION_ibfk_1` FOREIGN KEY (`EB_SL_KEY_ID`) REFERENCES `EB_SL_KEY` (`EB_SL_KEY_ID`),
  CONSTRAINT `FK_DIVISION_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_DIVISION_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_DIVISION_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `DIVISION`
--

LOCK TABLES `DIVISION` WRITE;
/*!40000 ALTER TABLE `DIVISION` DISABLE KEYS */;
INSERT INTO `DIVISION` VALUES (1,NULL,3,'001','CENTRAL','CENTRAL',1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05',1),(2,NULL,42,'002','NSB 3','NSB 3',1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(3,NULL,43,'003','NSB 4','NSB 4',1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(4,NULL,44,'004','NSB 5','NSB 5',1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(5,NULL,45,'005','NSB 8','NSB 8',1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1),(6,NULL,46,'006','NSB 8A','NSB 8A',1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20',1);
/*!40000 ALTER TABLE `DIVISION` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `DIVISION_PROJECT`
--

DROP TABLE IF EXISTS `DIVISION_PROJECT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `DIVISION_PROJECT` (
  `DIVISION_PROJECT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `DIVISION_ID` int(10) unsigned NOT NULL,
  `PROJECT_ID` int(10) unsigned NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`DIVISION_PROJECT_ID`),
  KEY `FK_DIVISION_PROJECT_DIV_ID` (`DIVISION_ID`),
  KEY `FK_DIVISION_PROJECT_PROJ_ID` (`PROJECT_ID`),
  KEY `FK_DIVISION_PROJECT_CREATED_BY` (`CREATED_BY`),
  KEY `FK_DIVISION_PROJECT_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_DIVISION_PROJECT_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_DIVISION_PROJECT_DIV_ID` FOREIGN KEY (`DIVISION_ID`) REFERENCES `DIVISION` (`DIVISION_ID`),
  CONSTRAINT `FK_DIVISION_PROJECT_PROJ_ID` FOREIGN KEY (`PROJECT_ID`) REFERENCES `AR_CUSTOMER` (`AR_CUSTOMER_ID`),
  CONSTRAINT `FK_DIVISION_PROJECT_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `DIVISION_PROJECT`
--

LOCK TABLES `DIVISION_PROJECT` WRITE;
/*!40000 ALTER TABLE `DIVISION_PROJECT` DISABLE KEYS */;
/*!40000 ALTER TABLE `DIVISION_PROJECT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `DOCUMENT_TYPE`
--

DROP TABLE IF EXISTS `DOCUMENT_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `DOCUMENT_TYPE` (
  `DOCUMENT_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(25) NOT NULL,
  `ACTIVE` tinyint(1) DEFAULT '1',
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`DOCUMENT_TYPE_ID`),
  KEY `FK_DOCUMENT_TYPE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_DOCUMENT_TYPE_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_DOCUMENT_TYPE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_DOCUMENT_TYPE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `DOCUMENT_TYPE`
--

LOCK TABLES `DOCUMENT_TYPE` WRITE;
/*!40000 ALTER TABLE `DOCUMENT_TYPE` DISABLE KEYS */;
/*!40000 ALTER TABLE `DOCUMENT_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `DRIVER`
--

DROP TABLE IF EXISTS `DRIVER`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `DRIVER` (
  `DRIVER_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `GENDER_ID` int(10) unsigned NOT NULL,
  `CIVIL_STATUS_ID` int(10) unsigned NOT NULL,
  `FIRST_NAME` varchar(40) NOT NULL,
  `MIDDLE_NAME` varchar(40) DEFAULT NULL,
  `LAST_NAME` varchar(40) NOT NULL,
  `BIRTH_DATE` date NOT NULL,
  `CONTACT_NO` varchar(20) DEFAULT NULL,
  `ADDRESS` varchar(150) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`DRIVER_ID`),
  KEY `FK_DRIVER_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_DRIVER_GENDER_ID` (`GENDER_ID`),
  KEY `FK_DRIVER_CIVIL_STATUS_ID` (`CIVIL_STATUS_ID`),
  KEY `FK_DRIVER_CREATED_BY` (`CREATED_BY`),
  KEY `FK_DRIVER_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_DRIVER_CIVIL_STATUS_ID` FOREIGN KEY (`CIVIL_STATUS_ID`) REFERENCES `CIVIL_STATUS` (`CIVIL_STATUS_ID`),
  CONSTRAINT `FK_DRIVER_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_DRIVER_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_DRIVER_GENDER_ID` FOREIGN KEY (`GENDER_ID`) REFERENCES `GENDER` (`GENDER_ID`),
  CONSTRAINT `FK_DRIVER_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `DRIVER`
--

LOCK TABLES `DRIVER` WRITE;
/*!40000 ALTER TABLE `DRIVER` DISABLE KEYS */;
/*!40000 ALTER TABLE `DRIVER` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EB_CLIENT_INFO`
--

DROP TABLE IF EXISTS `EB_CLIENT_INFO`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EB_CLIENT_INFO` (
  `EB_CLIENT_INFO_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(100) NOT NULL,
  `ADDRESS` varchar(150) NOT NULL,
  `CONTACT_INFO` varchar(15) NOT NULL,
  `EMAIL_ADDRESS` varchar(100) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`EB_CLIENT_INFO_ID`),
  KEY `FK_EB_CLIENT_INFO_CREATED_BY` (`CREATED_BY`),
  KEY `FK_EB_CLIENT_INFO_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_EB_CLIENT_INFO_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_EB_CLIENT_INFO_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EB_CLIENT_INFO`
--

LOCK TABLES `EB_CLIENT_INFO` WRITE;
/*!40000 ALTER TABLE `EB_CLIENT_INFO` DISABLE KEYS */;
INSERT INTO `EB_CLIENT_INFO` VALUES (1,'','','','',1,'2021-08-11 01:33:04',1,'2021-08-11 01:33:04');
/*!40000 ALTER TABLE `EB_CLIENT_INFO` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EB_OBJECT`
--

DROP TABLE IF EXISTS `EB_OBJECT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EB_OBJECT` (
  `EB_OBJECT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `OBJECT_TYPE_ID` int(10) unsigned NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`EB_OBJECT_ID`),
  KEY `FK_EB_OBJECT_CREATED_BY` (`CREATED_BY`),
  KEY `FK_EB_OBJECT_OBJECT_TYPE_ID` (`OBJECT_TYPE_ID`),
  CONSTRAINT `FK_EB_OBJECT_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_EB_OBJECT_OBJECT_TYPE_ID` FOREIGN KEY (`OBJECT_TYPE_ID`) REFERENCES `OBJECT_TYPE` (`OBJECT_TYPE_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=73 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EB_OBJECT`
--

LOCK TABLES `EB_OBJECT` WRITE;
/*!40000 ALTER TABLE `EB_OBJECT` DISABLE KEYS */;
INSERT INTO `EB_OBJECT` VALUES (1,81,1,'2021-08-11 01:33:05'),(2,80,1,'2021-08-11 01:33:05'),(3,101,1,'2021-08-11 01:33:05'),(4,100,1,'2021-08-11 01:33:20'),(5,100,1,'2021-08-11 01:33:20'),(6,100,1,'2021-08-11 01:33:20'),(7,100,1,'2021-08-11 01:33:20'),(8,100,1,'2021-08-11 01:33:20'),(9,100,1,'2021-08-11 01:33:20'),(10,100,1,'2021-08-11 01:33:20'),(11,100,1,'2021-08-11 01:33:20'),(12,100,1,'2021-08-11 01:33:20'),(13,100,1,'2021-08-11 01:33:20'),(14,100,1,'2021-08-11 01:33:20'),(15,100,1,'2021-08-11 01:33:20'),(16,100,1,'2021-08-11 01:33:20'),(17,100,1,'2021-08-11 01:33:20'),(18,100,1,'2021-08-11 01:33:20'),(19,100,1,'2021-08-11 01:33:20'),(20,100,1,'2021-08-11 01:33:20'),(21,100,1,'2021-08-11 01:33:20'),(22,100,1,'2021-08-11 01:33:20'),(23,100,1,'2021-08-11 01:33:20'),(24,100,1,'2021-08-11 01:33:20'),(25,100,1,'2021-08-11 01:33:20'),(26,100,1,'2021-08-11 01:33:20'),(27,100,1,'2021-08-11 01:33:20'),(28,100,1,'2021-08-11 01:33:20'),(29,100,1,'2021-08-11 01:33:20'),(30,100,1,'2021-08-11 01:33:20'),(31,100,1,'2021-08-11 01:33:20'),(32,100,1,'2021-08-11 01:33:20'),(33,100,1,'2021-08-11 01:33:20'),(34,100,1,'2021-08-11 01:33:20'),(35,100,1,'2021-08-11 01:33:20'),(36,100,1,'2021-08-11 01:33:20'),(37,100,1,'2021-08-11 01:33:20'),(38,100,1,'2021-08-11 01:33:20'),(39,100,1,'2021-08-11 01:33:20'),(40,100,1,'2021-08-11 01:33:20'),(41,100,1,'2021-08-11 01:33:20'),(42,101,1,'2021-08-11 01:33:20'),(43,101,1,'2021-08-11 01:33:20'),(44,101,1,'2021-08-11 01:33:20'),(45,101,1,'2021-08-11 01:33:20'),(46,101,1,'2021-08-11 01:33:20'),(47,132,1,'2021-08-11 01:33:20'),(48,132,1,'2021-08-11 01:33:20'),(49,132,1,'2021-08-11 01:33:20'),(50,132,1,'2021-08-11 01:33:20'),(51,132,1,'2021-08-11 01:33:20'),(52,132,1,'2021-08-11 01:33:20'),(53,132,1,'2021-08-11 01:33:20'),(54,132,1,'2021-08-11 01:33:20'),(55,132,1,'2021-08-11 01:33:20'),(56,132,1,'2021-08-11 01:33:20'),(57,132,1,'2021-08-11 01:33:20'),(58,132,1,'2021-08-11 01:33:20'),(59,132,1,'2021-08-11 01:33:20'),(60,132,1,'2021-08-11 01:33:20'),(61,100,1,'2021-08-11 01:33:20'),(62,100,1,'2021-08-11 01:33:20'),(63,128,1,'2021-08-11 01:34:10'),(64,128,1,'2021-08-11 01:34:10'),(65,128,1,'2021-08-11 01:34:10'),(66,133,1,'2021-08-11 01:34:23'),(67,133,1,'2021-08-11 01:34:23'),(68,100,1,'2021-08-11 01:34:26'),(69,100,1,'2021-08-11 01:34:26'),(70,100,1,'2021-08-11 01:34:39'),(71,100,1,'2021-08-11 01:34:40'),(72,100,1,'2021-08-11 01:34:40');
/*!40000 ALTER TABLE `EB_OBJECT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EB_SL_KEY`
--

DROP TABLE IF EXISTS `EB_SL_KEY`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EB_SL_KEY` (
  `EB_SL_KEY_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `START_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `END_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `EB_CLIENT_INFO_ID` int(10) unsigned NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `ACTIVE` tinyint(1) NOT NULL,
  PRIMARY KEY (`EB_SL_KEY_ID`),
  KEY `FK_EB_CLIENT_INFO_ID_EL_SL_KEY_ID` (`EB_CLIENT_INFO_ID`),
  KEY `FK_EB_SL_KEY_CREATED_BY` (`CREATED_BY`),
  KEY `FK_EB_SL_KEY_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_EB_CLIENT_INFO_ID_EL_SL_KEY_ID` FOREIGN KEY (`EB_CLIENT_INFO_ID`) REFERENCES `EB_CLIENT_INFO` (`EB_CLIENT_INFO_ID`),
  CONSTRAINT `FK_EB_SL_KEY_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_EB_SL_KEY_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EB_SL_KEY`
--

LOCK TABLES `EB_SL_KEY` WRITE;
/*!40000 ALTER TABLE `EB_SL_KEY` DISABLE KEYS */;
INSERT INTO `EB_SL_KEY` VALUES (1,'2021-08-11 01:33:04','2021-08-11 01:33:04',1,1,'2021-08-11 01:33:04',1,'2021-08-11 01:33:04',1);
/*!40000 ALTER TABLE `EB_SL_KEY` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EDUCATIONAL_ATTAINMENT_TYPE`
--

DROP TABLE IF EXISTS `EDUCATIONAL_ATTAINMENT_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EDUCATIONAL_ATTAINMENT_TYPE` (
  `EDUCATIONAL_ATTAINMENT_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(100) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`EDUCATIONAL_ATTAINMENT_TYPE_ID`),
  KEY `FK_EDUC_ATTAINMENT_TYPE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_EDUC_ATTAINMENT_TYPE_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_EDUC_ATTAINMENT_TYPE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_EDUC_ATTAINMENT_TYPE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EDUCATIONAL_ATTAINMENT_TYPE`
--

LOCK TABLES `EDUCATIONAL_ATTAINMENT_TYPE` WRITE;
/*!40000 ALTER TABLE `EDUCATIONAL_ATTAINMENT_TYPE` DISABLE KEYS */;
INSERT INTO `EDUCATIONAL_ATTAINMENT_TYPE` VALUES (1,'UNDERGRADUATE',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(2,'COLLEGE GRADUATE',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(3,'POST STUDY',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(4,'MASTER',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(5,'DOCTORAL',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10');
/*!40000 ALTER TABLE `EDUCATIONAL_ATTAINMENT_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ELC_LINE`
--

DROP TABLE IF EXISTS `ELC_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ELC_LINE` (
  `ELC_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `EMPLOYEE_ID` int(10) unsigned NOT NULL,
  `AVAILABLE_LEAVES` double(4,2) unsigned DEFAULT NULL,
  `DEDUCT_DEBIT` double(4,2) unsigned DEFAULT NULL,
  `ADD_CREDIT` double(4,2) unsigned DEFAULT NULL,
  PRIMARY KEY (`ELC_LINE_ID`),
  KEY `FK_ELC_LINE_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_ELC_LINE_EMPLOYEE_ID` (`EMPLOYEE_ID`),
  CONSTRAINT `FK_ELC_LINE_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_ELC_LINE_EMPLOYEE_ID` FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES `EMPLOYEE` (`EMPLOYEE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ELC_LINE`
--

LOCK TABLES `ELC_LINE` WRITE;
/*!40000 ALTER TABLE `ELC_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `ELC_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EMPLOYEE`
--

DROP TABLE IF EXISTS `EMPLOYEE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EMPLOYEE` (
  `EMPLOYEE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `DIVISION_ID` int(10) unsigned NOT NULL,
  `EMPLOYEE_SHIFT_ID` int(10) unsigned DEFAULT NULL,
  `EMPLOYEE_TYPE_ID` int(10) unsigned NOT NULL,
  `EMPLOYEE_STATUS_ID` int(10) unsigned NOT NULL,
  `EMPLOYEE_NO` varchar(10) NOT NULL,
  `BIOMETRIC_ID` int(10) NOT NULL,
  `FIRST_NAME` varchar(40) NOT NULL,
  `MIDDLE_NAME` varchar(40) DEFAULT NULL,
  `LAST_NAME` varchar(40) NOT NULL,
  `POSITION_ID` int(10) unsigned NOT NULL,
  `GENDER` int(2) NOT NULL,
  `BIRTH_DATE` date NOT NULL,
  `CIVIL_STATUS` int(2) NOT NULL,
  `CONTACT_NO` varchar(20) DEFAULT NULL,
  `ADDRESS` varchar(150) NOT NULL,
  `EMAIL_ADDRESS` varchar(40) DEFAULT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`EMPLOYEE_ID`),
  KEY `FK_EMPLOYEE_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_EMPLOYEE_SHIFT_ID` (`EMPLOYEE_SHIFT_ID`),
  KEY `FK_EMPLOYEE_TYPE_ID` (`EMPLOYEE_TYPE_ID`),
  KEY `FK_EMPLOYEE_STATUS_ID` (`EMPLOYEE_STATUS_ID`),
  KEY `FK_EMPLOYEE_POSITION_ID` (`POSITION_ID`),
  KEY `FK_EMPLOYEE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_EMPLOYEE_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_EMPLOYEE_DIVISION_ID` (`DIVISION_ID`),
  CONSTRAINT `FK_EMPLOYEE_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_EMPLOYEE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_EMPLOYEE_DIVISION_ID` FOREIGN KEY (`DIVISION_ID`) REFERENCES `DIVISION` (`DIVISION_ID`),
  CONSTRAINT `FK_EMPLOYEE_POSITION_ID` FOREIGN KEY (`POSITION_ID`) REFERENCES `POSITION` (`POSITION_ID`),
  CONSTRAINT `FK_EMPLOYEE_STATUS_ID` FOREIGN KEY (`EMPLOYEE_STATUS_ID`) REFERENCES `EMPLOYEE_STATUS` (`EMPLOYEE_STATUS_ID`),
  CONSTRAINT `FK_EMPLOYEE_TYPE_ID` FOREIGN KEY (`EMPLOYEE_TYPE_ID`) REFERENCES `EMPLOYEE_TYPE` (`EMPLOYEE_TYPE_ID`),
  CONSTRAINT `FK_EMPLOYEE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EMPLOYEE`
--

LOCK TABLES `EMPLOYEE` WRITE;
/*!40000 ALTER TABLE `EMPLOYEE` DISABLE KEYS */;
/*!40000 ALTER TABLE `EMPLOYEE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EMPLOYEE_CHILDREN`
--

DROP TABLE IF EXISTS `EMPLOYEE_CHILDREN`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EMPLOYEE_CHILDREN` (
  `EMPLOYEE_CHILDREN_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EMPLOYEE_ID` int(10) unsigned NOT NULL,
  `NAME` varchar(100) NOT NULL,
  `BIRTH_DATE` date NOT NULL,
  PRIMARY KEY (`EMPLOYEE_CHILDREN_ID`),
  KEY `FK_EMPLOYEE_CHILDREN_EMPLOYEE_ID` (`EMPLOYEE_ID`),
  CONSTRAINT `FK_EMPLOYEE_CHILDREN_EMPLOYEE_ID` FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES `EMPLOYEE` (`EMPLOYEE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EMPLOYEE_CHILDREN`
--

LOCK TABLES `EMPLOYEE_CHILDREN` WRITE;
/*!40000 ALTER TABLE `EMPLOYEE_CHILDREN` DISABLE KEYS */;
/*!40000 ALTER TABLE `EMPLOYEE_CHILDREN` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EMPLOYEE_CIVIL_QUERY`
--

DROP TABLE IF EXISTS `EMPLOYEE_CIVIL_QUERY`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EMPLOYEE_CIVIL_QUERY` (
  `EMPLOYEE_CIVIL_QUERY_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EMPLOYEE_ID` int(10) unsigned NOT NULL,
  `ADMINISTRATIVE_INVESTIGATION` tinyint(1) DEFAULT '0',
  `ADMIN_INVES_DETAIL` varchar(250) DEFAULT NULL,
  `CRIME_CONVICTED` tinyint(1) DEFAULT '0',
  `CRIME_CONVICTED_DETAIL` varchar(250) DEFAULT NULL,
  `USED_PROHIBITED_DRUG` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`EMPLOYEE_CIVIL_QUERY_ID`),
  KEY `FK_ECQ_EMPLOYEE_ID` (`EMPLOYEE_ID`),
  CONSTRAINT `FK_ECQ_EMPLOYEE_ID` FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES `EMPLOYEE` (`EMPLOYEE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EMPLOYEE_CIVIL_QUERY`
--

LOCK TABLES `EMPLOYEE_CIVIL_QUERY` WRITE;
/*!40000 ALTER TABLE `EMPLOYEE_CIVIL_QUERY` DISABLE KEYS */;
/*!40000 ALTER TABLE `EMPLOYEE_CIVIL_QUERY` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EMPLOYEE_DEDUCTION`
--

DROP TABLE IF EXISTS `EMPLOYEE_DEDUCTION`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EMPLOYEE_DEDUCTION` (
  `EMPLOYEE_DEDUCTION_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `PAYROLL_ID` int(10) unsigned NOT NULL,
  `EMPLOYEE_ID` int(10) unsigned NOT NULL,
  `DEDUCTION_TYPE_ID` int(10) unsigned NOT NULL,
  `AMOUNT` double DEFAULT NULL,
  `PAID_AMOUNT` double DEFAULT NULL,
  `FROM_DEDUCTION_FORM` tinyint(1) DEFAULT NULL,
  `ACTIVE` tinyint(1) DEFAULT '1',
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`EMPLOYEE_DEDUCTION_ID`),
  KEY `FK_EED_PAYROLL_ID` (`PAYROLL_ID`),
  KEY `FK_EED_EMPLOYEE_ID` (`EMPLOYEE_ID`),
  KEY `FK_EED_DEDUCTION_TYPE_ID` (`DEDUCTION_TYPE_ID`),
  KEY `FK_EMPLOYEE_DEDUCTION_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_EED_DEDUCTION_TYPE_ID` FOREIGN KEY (`DEDUCTION_TYPE_ID`) REFERENCES `DEDUCTION_TYPE` (`DEDUCTION_TYPE_ID`),
  CONSTRAINT `FK_EED_EMPLOYEE_ID` FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES `EMPLOYEE` (`EMPLOYEE_ID`),
  CONSTRAINT `FK_EED_PAYROLL_ID` FOREIGN KEY (`PAYROLL_ID`) REFERENCES `PAYROLL` (`PAYROLL_ID`),
  CONSTRAINT `FK_EMPLOYEE_DEDUCTION_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EMPLOYEE_DEDUCTION`
--

LOCK TABLES `EMPLOYEE_DEDUCTION` WRITE;
/*!40000 ALTER TABLE `EMPLOYEE_DEDUCTION` DISABLE KEYS */;
/*!40000 ALTER TABLE `EMPLOYEE_DEDUCTION` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EMPLOYEE_DOCUMENT`
--

DROP TABLE IF EXISTS `EMPLOYEE_DOCUMENT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EMPLOYEE_DOCUMENT` (
  `EMPLOYEE_DOCUMENT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `SEQUENCE_NO` int(10) unsigned NOT NULL,
  `COMPANY_ID` int(10) unsigned DEFAULT '1',
  `EMPLOYEE_ID` int(10) unsigned NOT NULL,
  `DOCUMENT_TYPE_ID` int(10) unsigned NOT NULL,
  `DATE` date NOT NULL,
  `REMARKS` text NOT NULL,
  `FORM_WORKFLOW_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`EMPLOYEE_DOCUMENT_ID`),
  KEY `FK_EMPLOYEE_DOCUMENT_EMPLOYEE_ID` (`EMPLOYEE_ID`),
  KEY `FK_EMPLOYEE_DOCUMENT_TYPE_ID` (`DOCUMENT_TYPE_ID`),
  KEY `FK_EMPLOYEE_DOCUMENT_FW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_EMPLOYEE_DOCUMENT_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_EMPLOYEE_DOCUMENT_CREATED_BY` (`CREATED_BY`),
  KEY `FK_EMPLOYEE_DOCUMENT_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_EMPLOYEE_DOCUMENT_COMPANY_ID` (`COMPANY_ID`),
  CONSTRAINT `FK_EMPLOYEE_DOCUMENT_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_EMPLOYEE_DOCUMENT_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_EMPLOYEE_DOCUMENT_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_EMPLOYEE_DOCUMENT_EMPLOYEE_ID` FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES `EMPLOYEE` (`EMPLOYEE_ID`),
  CONSTRAINT `FK_EMPLOYEE_DOCUMENT_FW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_EMPLOYEE_DOCUMENT_TYPE_ID` FOREIGN KEY (`DOCUMENT_TYPE_ID`) REFERENCES `DOCUMENT_TYPE` (`DOCUMENT_TYPE_ID`),
  CONSTRAINT `FK_EMPLOYEE_DOCUMENT_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EMPLOYEE_DOCUMENT`
--

LOCK TABLES `EMPLOYEE_DOCUMENT` WRITE;
/*!40000 ALTER TABLE `EMPLOYEE_DOCUMENT` DISABLE KEYS */;
/*!40000 ALTER TABLE `EMPLOYEE_DOCUMENT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EMPLOYEE_DTR`
--

DROP TABLE IF EXISTS `EMPLOYEE_DTR`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EMPLOYEE_DTR` (
  `EMPLOYEE_DTR_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EMPLOYEE_ID` int(10) unsigned NOT NULL,
  `LOG_TIME` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `LOCATION_ID` int(10) unsigned DEFAULT NULL,
  `PAYROLL_EMPLOYEE_TIMESHEET_ID` int(10) unsigned DEFAULT NULL,
  `IS_SYNCHRONIZE` tinyint(1) DEFAULT NULL,
  `ACTIVE` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`EMPLOYEE_DTR_ID`),
  KEY `FK_EDRT_EMPLOYEE_ID` (`EMPLOYEE_ID`),
  KEY `FK_EDRT_LOCATION_ID` (`LOCATION_ID`),
  KEY `FK_EDRT_PAYROLL_EMPLOYEE_TIMESHEET_ID` (`PAYROLL_EMPLOYEE_TIMESHEET_ID`),
  CONSTRAINT `FK_EDRT_EMPLOYEE_ID` FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES `EMPLOYEE` (`EMPLOYEE_ID`),
  CONSTRAINT `FK_EDRT_LOCATION_ID` FOREIGN KEY (`LOCATION_ID`) REFERENCES `LOCATION` (`LOCATION_ID`),
  CONSTRAINT `FK_EDRT_PAYROLL_EMPLOYEE_TIMESHEET_ID` FOREIGN KEY (`PAYROLL_EMPLOYEE_TIMESHEET_ID`) REFERENCES `PAYROLL_EMPLOYEE_TIMESHEET` (`PAYROLL_EMPLOYEE_TIMESHEET_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EMPLOYEE_DTR`
--

LOCK TABLES `EMPLOYEE_DTR` WRITE;
/*!40000 ALTER TABLE `EMPLOYEE_DTR` DISABLE KEYS */;
/*!40000 ALTER TABLE `EMPLOYEE_DTR` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EMPLOYEE_EDUCATIONAL_ATTAINMENT`
--

DROP TABLE IF EXISTS `EMPLOYEE_EDUCATIONAL_ATTAINMENT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EMPLOYEE_EDUCATIONAL_ATTAINMENT` (
  `EMPLOYEE_EDUCATIONAL_ATTAINMENT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EDUCATIONAL_ATTAINMENT_TYPE_ID` int(10) unsigned NOT NULL,
  `EMPLOYEE_ID` int(10) unsigned NOT NULL,
  `ELEMENTARY_SCHOOL` varchar(100) DEFAULT NULL,
  `ELEMENTARY_YEAR` int(4) DEFAULT NULL,
  `ELEMENTARY_COURSE` varchar(100) DEFAULT NULL,
  `HS_SCHOOL` varchar(100) DEFAULT NULL,
  `HS_YEAR` int(4) DEFAULT NULL,
  `HS_COURSE` varchar(100) DEFAULT NULL,
  `COLLEGE_SCHOOL` varchar(100) DEFAULT NULL,
  `COLLEGE_YEAR` int(4) DEFAULT NULL,
  `COLLEGE_COURSE` varchar(100) DEFAULT NULL,
  `POST_GRAD_SCHOOL` varchar(100) DEFAULT NULL,
  `POST_GRAD_YEAR` int(4) DEFAULT NULL,
  `POST_GRAD_COURSE` varchar(100) DEFAULT NULL,
  `VOCATIONAL_SCHOOL` varchar(100) DEFAULT NULL,
  `VOCATIONAL_YEAR` int(4) DEFAULT NULL,
  `VOCATIONAL_COURSE` varchar(100) DEFAULT NULL,
  `VOCATIONAL_ADDRESS` varchar(200) DEFAULT NULL,
  `ELEMENTARY_ADDRESS` varchar(200) DEFAULT NULL,
  `HS_ADDRESS` varchar(200) DEFAULT NULL,
  `COLLEGE_ADDRESS` varchar(200) DEFAULT NULL,
  `POST_GRAD_ADDRESS` varchar(200) DEFAULT NULL,
  `EMPLOYEE_SKILLS` varchar(250) DEFAULT NULL,
  PRIMARY KEY (`EMPLOYEE_EDUCATIONAL_ATTAINMENT_ID`),
  KEY `FK_EEA_EMPLOYEE_ID` (`EMPLOYEE_ID`),
  KEY `FK_EEA_EDUCATIONAL_ATTAINMENT_TYPE_ID` (`EDUCATIONAL_ATTAINMENT_TYPE_ID`),
  CONSTRAINT `FK_EEA_EDUCATIONAL_ATTAINMENT_TYPE_ID` FOREIGN KEY (`EDUCATIONAL_ATTAINMENT_TYPE_ID`) REFERENCES `EDUCATIONAL_ATTAINMENT_TYPE` (`EDUCATIONAL_ATTAINMENT_TYPE_ID`),
  CONSTRAINT `FK_EEA_EMPLOYEE_ID` FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES `EMPLOYEE` (`EMPLOYEE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EMPLOYEE_EDUCATIONAL_ATTAINMENT`
--

LOCK TABLES `EMPLOYEE_EDUCATIONAL_ATTAINMENT` WRITE;
/*!40000 ALTER TABLE `EMPLOYEE_EDUCATIONAL_ATTAINMENT` DISABLE KEYS */;
/*!40000 ALTER TABLE `EMPLOYEE_EDUCATIONAL_ATTAINMENT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EMPLOYEE_EMERGENCY_CONTACT`
--

DROP TABLE IF EXISTS `EMPLOYEE_EMERGENCY_CONTACT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EMPLOYEE_EMERGENCY_CONTACT` (
  `EMPLOYEE_EMERGENCY_CONTACT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `NAME` varchar(100) NOT NULL,
  `ADDRESS` varchar(150) NOT NULL,
  `CONTACT_NO` varchar(20) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  PRIMARY KEY (`EMPLOYEE_EMERGENCY_CONTACT_ID`),
  KEY `FK_EEC_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_EEC_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EMPLOYEE_EMERGENCY_CONTACT`
--

LOCK TABLES `EMPLOYEE_EMERGENCY_CONTACT` WRITE;
/*!40000 ALTER TABLE `EMPLOYEE_EMERGENCY_CONTACT` DISABLE KEYS */;
/*!40000 ALTER TABLE `EMPLOYEE_EMERGENCY_CONTACT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EMPLOYEE_EMPLOYEMENT_QUERY`
--

DROP TABLE IF EXISTS `EMPLOYEE_EMPLOYEMENT_QUERY`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EMPLOYEE_EMPLOYEMENT_QUERY` (
  `EMPLOYEE_EMPLOYEMENT_QUERY_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EMPLOYEE_ID` int(10) unsigned NOT NULL,
  `PREV_EMPLOYED` tinyint(1) DEFAULT '0',
  `SEPARATION_REASON` varchar(250) DEFAULT NULL,
  `DIAGNOSED_WITH_DISEASE` tinyint(1) DEFAULT '0',
  `DISEASE_DETAIL` varchar(250) DEFAULT NULL,
  `IDENTIFYING_MARK` varchar(250) DEFAULT NULL,
  `EMERGENCY_CONTACT` varchar(250) NOT NULL,
  PRIMARY KEY (`EMPLOYEE_EMPLOYEMENT_QUERY_ID`),
  KEY `FK_EEQ_EMPLOYEE_ID` (`EMPLOYEE_ID`),
  CONSTRAINT `FK_EEQ_EMPLOYEE_ID` FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES `EMPLOYEE` (`EMPLOYEE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EMPLOYEE_EMPLOYEMENT_QUERY`
--

LOCK TABLES `EMPLOYEE_EMPLOYEMENT_QUERY` WRITE;
/*!40000 ALTER TABLE `EMPLOYEE_EMPLOYEMENT_QUERY` DISABLE KEYS */;
/*!40000 ALTER TABLE `EMPLOYEE_EMPLOYEMENT_QUERY` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EMPLOYEE_EMPLOYMENT`
--

DROP TABLE IF EXISTS `EMPLOYEE_EMPLOYMENT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EMPLOYEE_EMPLOYMENT` (
  `EMPLOYEE_EMPLOYMENT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EMPLOYEE_ID` int(10) unsigned NOT NULL,
  `COMPANY_NAME` varchar(100) NOT NULL,
  `YEAR` int(4) unsigned NOT NULL,
  `POSITION` varchar(50) DEFAULT NULL,
  `SEPARATION_REASON` varchar(150) DEFAULT NULL,
  PRIMARY KEY (`EMPLOYEE_EMPLOYMENT_ID`),
  KEY `FK_EMPLOYEE_EMPLOYMENT_EMPLOYEE_ID` (`EMPLOYEE_ID`),
  CONSTRAINT `FK_EMPLOYEE_EMPLOYMENT_EMPLOYEE_ID` FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES `EMPLOYEE` (`EMPLOYEE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EMPLOYEE_EMPLOYMENT`
--

LOCK TABLES `EMPLOYEE_EMPLOYMENT` WRITE;
/*!40000 ALTER TABLE `EMPLOYEE_EMPLOYMENT` DISABLE KEYS */;
/*!40000 ALTER TABLE `EMPLOYEE_EMPLOYMENT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EMPLOYEE_FAMILY`
--

DROP TABLE IF EXISTS `EMPLOYEE_FAMILY`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EMPLOYEE_FAMILY` (
  `EMPLOYEE_FAMILY_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EMPLOYEE_ID` int(10) unsigned NOT NULL,
  `FATHER_NAME` varchar(100) NOT NULL,
  `MOTHER_NAME` varchar(100) NOT NULL,
  `SPOUSE_NAME` varchar(100) DEFAULT NULL,
  `FATHER_OCCUPATION` varchar(100) DEFAULT NULL,
  `MOTHER_OCCUPATION` varchar(100) DEFAULT NULL,
  `SPOUSE_OCCUPATION` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`EMPLOYEE_FAMILY_ID`),
  KEY `FK_EMPLOYEE_FAMILY_EMPLOYEE_ID` (`EMPLOYEE_ID`),
  CONSTRAINT `FK_EMPLOYEE_FAMILY_EMPLOYEE_ID` FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES `EMPLOYEE` (`EMPLOYEE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EMPLOYEE_FAMILY`
--

LOCK TABLES `EMPLOYEE_FAMILY` WRITE;
/*!40000 ALTER TABLE `EMPLOYEE_FAMILY` DISABLE KEYS */;
/*!40000 ALTER TABLE `EMPLOYEE_FAMILY` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EMPLOYEE_LEAVE_CREDIT`
--

DROP TABLE IF EXISTS `EMPLOYEE_LEAVE_CREDIT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EMPLOYEE_LEAVE_CREDIT` (
  `EMPLOYEE_LEAVE_CREDIT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `FORM_WORKFLOW_ID` int(10) unsigned NOT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `DIVISION_ID` int(10) unsigned NOT NULL,
  `TYPE_OF_LEAVE_ID` int(10) unsigned NOT NULL,
  `SEQUENCE_NO` int(10) unsigned NOT NULL,
  `DATE` date NOT NULL,
  `REMARKS` text,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`EMPLOYEE_LEAVE_CREDIT_ID`),
  KEY `FK_EMPLOYEE_LEAVE_CREDIT_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_EMPLOYEE_LEAVE_CREDIT_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_EMPLOYEE_LEAVE_CREDIT_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_EMPLOYEE_LEAVE_CREDIT_TYPE_OF_LEAVE_ID` (`TYPE_OF_LEAVE_ID`),
  KEY `FK_EMPLOYEE_LEAVE_CREDIT_CREATED_BY` (`CREATED_BY`),
  KEY `FK_EMPLOYEE_LEAVE_CREDIT_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_ELC_DIVISION_ID` (`DIVISION_ID`),
  CONSTRAINT `FK_ELC_DIVISION_ID` FOREIGN KEY (`DIVISION_ID`) REFERENCES `DIVISION` (`DIVISION_ID`),
  CONSTRAINT `FK_EMPLOYEE_LEAVE_CREDIT_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_EMPLOYEE_LEAVE_CREDIT_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_EMPLOYEE_LEAVE_CREDIT_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_EMPLOYEE_LEAVE_CREDIT_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_EMPLOYEE_LEAVE_CREDIT_TYPE_OF_LEAVE_ID` FOREIGN KEY (`TYPE_OF_LEAVE_ID`) REFERENCES `TYPE_OF_LEAVE` (`TYPE_OF_LEAVE_ID`),
  CONSTRAINT `FK_EMPLOYEE_LEAVE_CREDIT_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EMPLOYEE_LEAVE_CREDIT`
--

LOCK TABLES `EMPLOYEE_LEAVE_CREDIT` WRITE;
/*!40000 ALTER TABLE `EMPLOYEE_LEAVE_CREDIT` DISABLE KEYS */;
/*!40000 ALTER TABLE `EMPLOYEE_LEAVE_CREDIT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EMPLOYEE_LICENSE_CERTIFICATE`
--

DROP TABLE IF EXISTS `EMPLOYEE_LICENSE_CERTIFICATE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EMPLOYEE_LICENSE_CERTIFICATE` (
  `EMPLOYEE_LICENSE_CERTIFICATE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `ACCREDITATION_TYPE` varchar(100) NOT NULL,
  `DATE_ISSUED` date DEFAULT NULL,
  `RATING` varchar(5) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  PRIMARY KEY (`EMPLOYEE_LICENSE_CERTIFICATE_ID`),
  KEY `FK_ELC_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_ELC_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EMPLOYEE_LICENSE_CERTIFICATE`
--

LOCK TABLES `EMPLOYEE_LICENSE_CERTIFICATE` WRITE;
/*!40000 ALTER TABLE `EMPLOYEE_LICENSE_CERTIFICATE` DISABLE KEYS */;
/*!40000 ALTER TABLE `EMPLOYEE_LICENSE_CERTIFICATE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EMPLOYEE_NATIONAL_COMPETENCY`
--

DROP TABLE IF EXISTS `EMPLOYEE_NATIONAL_COMPETENCY`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EMPLOYEE_NATIONAL_COMPETENCY` (
  `EMPLOYEE_NATIONAL_COMPETENCY_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `DESCRIPTION` varchar(100) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  PRIMARY KEY (`EMPLOYEE_NATIONAL_COMPETENCY_ID`),
  KEY `FK_ENC_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_ENC_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EMPLOYEE_NATIONAL_COMPETENCY`
--

LOCK TABLES `EMPLOYEE_NATIONAL_COMPETENCY` WRITE;
/*!40000 ALTER TABLE `EMPLOYEE_NATIONAL_COMPETENCY` DISABLE KEYS */;
/*!40000 ALTER TABLE `EMPLOYEE_NATIONAL_COMPETENCY` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EMPLOYEE_PROFILE`
--

DROP TABLE IF EXISTS `EMPLOYEE_PROFILE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EMPLOYEE_PROFILE` (
  `EMPLOYEE_PROFILE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EMPLOYEE_ID` int(10) unsigned NOT NULL,
  `EMPLOYEE_NUMBER` int(10) unsigned NOT NULL,
  `RFID` varchar(10) DEFAULT NULL,
  `BLOOD_TYPE` varchar(15) DEFAULT NULL,
  `TIN` varchar(15) DEFAULT NULL,
  `PHILHEALTH_NO` varchar(15) DEFAULT NULL,
  `SSS_NO` varchar(15) DEFAULT NULL,
  `HDMF_NO` varchar(15) DEFAULT NULL,
  `HIRED_DATE` date NOT NULL,
  `EMPLOYMENT_PERIOD_FROM` date DEFAULT NULL,
  `EMPLOYMENT_PERIOD_TO` date DEFAULT NULL,
  `PERMANENT_ADDRESS` varchar(150) DEFAULT NULL,
  `BIRTH_PLACE` varchar(150) DEFAULT NULL,
  `CITIZENSHIP` varchar(25) DEFAULT NULL,
  `HEIGHT` varchar(10) DEFAULT NULL,
  `WEIGHT` varchar(10) DEFAULT NULL,
  `EYE_COLOR` varchar(15) DEFAULT NULL,
  `HAIR_COLOR` varchar(15) DEFAULT NULL,
  `TELEPHONE_NUMBER` varchar(15) DEFAULT NULL,
  `GENDER_ID` int(10) unsigned NOT NULL,
  `CIVIL_STATUS_ID` int(10) unsigned NOT NULL,
  `RELIGION` varchar(25) DEFAULT NULL,
  `LANGUAGE_DIALECT` varchar(250) DEFAULT NULL,
  `EB_OBJECT_ID` int(10) unsigned NOT NULL,
  `EMPLOYEE_SHIFT_ID` int(10) unsigned DEFAULT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`EMPLOYEE_PROFILE_ID`),
  KEY `FK_EMPLOYEE_PROFILE_EMPLOYEE_ID` (`EMPLOYEE_ID`),
  KEY `FK_EMPLOYEE_PROFILE_GENDER_ID` (`GENDER_ID`),
  KEY `FK_EMPLOYEE_PROFILE_CIVIL_STATUS_ID` (`CIVIL_STATUS_ID`),
  KEY `FK_EMPLOYEE_PROFILE_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_EMPLOYEE_PROFILE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_EMPLOYEE_PROFILE_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_EMPLOYEE_PROFILE_EMPLOYEE_SHIFT_ID` (`EMPLOYEE_SHIFT_ID`),
  CONSTRAINT `FK_EMPLOYEE_PROFILE_CIVIL_STATUS_ID` FOREIGN KEY (`CIVIL_STATUS_ID`) REFERENCES `CIVIL_STATUS` (`CIVIL_STATUS_ID`),
  CONSTRAINT `FK_EMPLOYEE_PROFILE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_EMPLOYEE_PROFILE_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_EMPLOYEE_PROFILE_EMPLOYEE_ID` FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES `EMPLOYEE` (`EMPLOYEE_ID`),
  CONSTRAINT `FK_EMPLOYEE_PROFILE_EMPLOYEE_SHIFT_ID` FOREIGN KEY (`EMPLOYEE_SHIFT_ID`) REFERENCES `EMPLOYEE_SHIFT` (`EMPLOYEE_SHIFT_ID`),
  CONSTRAINT `FK_EMPLOYEE_PROFILE_GENDER_ID` FOREIGN KEY (`GENDER_ID`) REFERENCES `GENDER` (`GENDER_ID`),
  CONSTRAINT `FK_EMPLOYEE_PROFILE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EMPLOYEE_PROFILE`
--

LOCK TABLES `EMPLOYEE_PROFILE` WRITE;
/*!40000 ALTER TABLE `EMPLOYEE_PROFILE` DISABLE KEYS */;
/*!40000 ALTER TABLE `EMPLOYEE_PROFILE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EMPLOYEE_RELATIVE`
--

DROP TABLE IF EXISTS `EMPLOYEE_RELATIVE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EMPLOYEE_RELATIVE` (
  `EMPLOYEE_RELATIVE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EMPLOYEE_ID` int(10) unsigned NOT NULL,
  `NAME` varchar(100) NOT NULL,
  `POSITION` varchar(50) DEFAULT NULL,
  `RELATIONSHIP` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`EMPLOYEE_RELATIVE_ID`),
  KEY `FK_EMPLOYEE_RELATIVE_EMPLOYEE_ID` (`EMPLOYEE_ID`),
  CONSTRAINT `FK_EMPLOYEE_RELATIVE_EMPLOYEE_ID` FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES `EMPLOYEE` (`EMPLOYEE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EMPLOYEE_RELATIVE`
--

LOCK TABLES `EMPLOYEE_RELATIVE` WRITE;
/*!40000 ALTER TABLE `EMPLOYEE_RELATIVE` DISABLE KEYS */;
/*!40000 ALTER TABLE `EMPLOYEE_RELATIVE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EMPLOYEE_REQUEST`
--

DROP TABLE IF EXISTS `EMPLOYEE_REQUEST`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EMPLOYEE_REQUEST` (
  `EMPLOYEE_REQUEST_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `SEQUENCE_NO` int(10) unsigned NOT NULL,
  `FORM_WORKFLOW_ID` int(10) unsigned DEFAULT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `REQUEST_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `EMPLOYEE_ID` int(10) unsigned NOT NULL,
  `DATE` date NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`EMPLOYEE_REQUEST_ID`),
  KEY `FK_ER_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_ER_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_ER_REQUEST_TYPE_ID` (`REQUEST_TYPE_ID`),
  KEY `FK_ER_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_ER_EMPLOYEE_ID` (`EMPLOYEE_ID`),
  KEY `FK_ER_CREATED_BY` (`CREATED_BY`),
  KEY `FK_ER_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_ER_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_ER_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_ER_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_ER_EMPLOYEE_ID` FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES `EMPLOYEE` (`EMPLOYEE_ID`),
  CONSTRAINT `FK_ER_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_ER_REQUEST_TYPE_ID` FOREIGN KEY (`REQUEST_TYPE_ID`) REFERENCES `REQUEST_TYPE` (`REQUEST_TYPE_ID`),
  CONSTRAINT `FK_ER_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EMPLOYEE_REQUEST`
--

LOCK TABLES `EMPLOYEE_REQUEST` WRITE;
/*!40000 ALTER TABLE `EMPLOYEE_REQUEST` DISABLE KEYS */;
/*!40000 ALTER TABLE `EMPLOYEE_REQUEST` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EMPLOYEE_SALARY_DETAILS`
--

DROP TABLE IF EXISTS `EMPLOYEE_SALARY_DETAILS`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EMPLOYEE_SALARY_DETAILS` (
  `EMPLOYEE_SALARY_DETAIL_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EMPLOYEE_ID` int(10) unsigned NOT NULL,
  `SALARY_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `ECOLA` double(12,2) DEFAULT '0.00',
  `BASIC_SALARY` double(12,2) NOT NULL,
  `DAILY_SALARY` double(12,2) NOT NULL,
  `DE_MINIMIS` double(12,2) DEFAULT '0.00',
  `EXCLUDE_SSS` tinyint(1) DEFAULT '0',
  `EXCLUDE_PHIC` tinyint(1) DEFAULT '0',
  `EXCLUDE_WT` tinyint(1) DEFAULT '0',
  `EXCLUDE_HDMF` tinyint(1) DEFAULT '0',
  `SSS` double(12,2) DEFAULT '0.00',
  `SSS_ADDITIONAL` double(12,2) DEFAULT '0.00',
  `PHILHEALTH` double(12,2) DEFAULT '0.00',
  `PAG_IBIG` double(12,2) DEFAULT '0.00',
  `PAG_IBIG_ADDITIONAL` double(12,2) DEFAULT '0.00',
  `OTHER_DEDUCTION` double(12,2) DEFAULT '0.00',
  `BONUS` double(12,2) DEFAULT '0.00',
  PRIMARY KEY (`EMPLOYEE_SALARY_DETAIL_ID`),
  KEY `FK_ESD_EMPLOYEE_ID` (`EMPLOYEE_ID`),
  KEY `FK_ESD_SALARY_DETAIL_ID` (`SALARY_TYPE_ID`),
  CONSTRAINT `FK_ESD_EMPLOYEE_ID` FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES `EMPLOYEE` (`EMPLOYEE_ID`),
  CONSTRAINT `FK_ESD_SALARY_DETAIL_ID` FOREIGN KEY (`SALARY_TYPE_ID`) REFERENCES `SALARY_TYPE` (`SALARY_TYPE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EMPLOYEE_SALARY_DETAILS`
--

LOCK TABLES `EMPLOYEE_SALARY_DETAILS` WRITE;
/*!40000 ALTER TABLE `EMPLOYEE_SALARY_DETAILS` DISABLE KEYS */;
/*!40000 ALTER TABLE `EMPLOYEE_SALARY_DETAILS` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EMPLOYEE_SEMINAR_ATTENDED`
--

DROP TABLE IF EXISTS `EMPLOYEE_SEMINAR_ATTENDED`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EMPLOYEE_SEMINAR_ATTENDED` (
  `EMPLOYEE_SEMINAR_ATTENDED_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `COURSE_TITLE` varchar(150) NOT NULL,
  `COMPANY_AGENCY` varchar(150) NOT NULL,
  `INCLUSIVE_DATE` varchar(50) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  PRIMARY KEY (`EMPLOYEE_SEMINAR_ATTENDED_ID`),
  KEY `FK_ESA_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_ESA_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EMPLOYEE_SEMINAR_ATTENDED`
--

LOCK TABLES `EMPLOYEE_SEMINAR_ATTENDED` WRITE;
/*!40000 ALTER TABLE `EMPLOYEE_SEMINAR_ATTENDED` DISABLE KEYS */;
/*!40000 ALTER TABLE `EMPLOYEE_SEMINAR_ATTENDED` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EMPLOYEE_SHIFT`
--

DROP TABLE IF EXISTS `EMPLOYEE_SHIFT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EMPLOYEE_SHIFT` (
  `EMPLOYEE_SHIFT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(50) NOT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `FIRST_HALF_SHIFT_START` varchar(5) NOT NULL,
  `FIRST_HALF_SHIFT_END` varchar(5) DEFAULT NULL,
  `SECOND_HALF_SHIFT_START` varchar(5) DEFAULT NULL,
  `SECOND_HALF_SHIFT_END` varchar(5) NOT NULL,
  `ALLOWABLE_BREAK` double DEFAULT NULL,
  `LATE_MULTIPLIER` double DEFAULT NULL,
  `NIGHT_SHIFT` tinyint(1) NOT NULL,
  `DAY_OFF` tinyint(1) DEFAULT '0',
  `DAILY_WORKING_HOURS` double(4,2) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `ACTIVE` tinyint(1) NOT NULL,
  PRIMARY KEY (`EMPLOYEE_SHIFT_ID`),
  KEY `FK_ES_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_ES_CREATED_BY` (`CREATED_BY`),
  KEY `FK_ES_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_ES_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_ES_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_ES_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EMPLOYEE_SHIFT`
--

LOCK TABLES `EMPLOYEE_SHIFT` WRITE;
/*!40000 ALTER TABLE `EMPLOYEE_SHIFT` DISABLE KEYS */;
/*!40000 ALTER TABLE `EMPLOYEE_SHIFT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EMPLOYEE_SHIFT_ADDITIONAL_PAY`
--

DROP TABLE IF EXISTS `EMPLOYEE_SHIFT_ADDITIONAL_PAY`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EMPLOYEE_SHIFT_ADDITIONAL_PAY` (
  `EMPLOYEE_SHIFT_ADDITIONAL_PAY_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EMPLOYEE_SHIFT_ID` int(10) unsigned NOT NULL,
  `WEEKEND_MULTIPLIER` double DEFAULT NULL,
  `HOLIDAY_MULTIPLIER` double DEFAULT NULL,
  PRIMARY KEY (`EMPLOYEE_SHIFT_ADDITIONAL_PAY_ID`),
  KEY `FK_ES_ID` (`EMPLOYEE_SHIFT_ID`),
  CONSTRAINT `FK_ES_ID` FOREIGN KEY (`EMPLOYEE_SHIFT_ID`) REFERENCES `EMPLOYEE_SHIFT` (`EMPLOYEE_SHIFT_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EMPLOYEE_SHIFT_ADDITIONAL_PAY`
--

LOCK TABLES `EMPLOYEE_SHIFT_ADDITIONAL_PAY` WRITE;
/*!40000 ALTER TABLE `EMPLOYEE_SHIFT_ADDITIONAL_PAY` DISABLE KEYS */;
/*!40000 ALTER TABLE `EMPLOYEE_SHIFT_ADDITIONAL_PAY` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EMPLOYEE_SHIFT_DAY_OFF`
--

DROP TABLE IF EXISTS `EMPLOYEE_SHIFT_DAY_OFF`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EMPLOYEE_SHIFT_DAY_OFF` (
  `EMPLOYEE_SHIFT_DAY_OFF_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EMPLOYEE_SHIFT_ID` int(10) unsigned NOT NULL,
  `DAY_OF_THE_WEEK` tinyint(1) NOT NULL,
  PRIMARY KEY (`EMPLOYEE_SHIFT_DAY_OFF_ID`),
  KEY `FK_ESDO_EMPLOYEE_SHIFT_ID` (`EMPLOYEE_SHIFT_ID`),
  CONSTRAINT `FK_ESDO_EMPLOYEE_SHIFT_ID` FOREIGN KEY (`EMPLOYEE_SHIFT_ID`) REFERENCES `EMPLOYEE_SHIFT` (`EMPLOYEE_SHIFT_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EMPLOYEE_SHIFT_DAY_OFF`
--

LOCK TABLES `EMPLOYEE_SHIFT_DAY_OFF` WRITE;
/*!40000 ALTER TABLE `EMPLOYEE_SHIFT_DAY_OFF` DISABLE KEYS */;
/*!40000 ALTER TABLE `EMPLOYEE_SHIFT_DAY_OFF` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EMPLOYEE_SHIFT_WORKING_DAY`
--

DROP TABLE IF EXISTS `EMPLOYEE_SHIFT_WORKING_DAY`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EMPLOYEE_SHIFT_WORKING_DAY` (
  `EMPLOYEE_SHIFT_WORKING_DAY_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EMPLOYEE_SHIFT_ID` int(10) unsigned NOT NULL,
  `DAY_OF_THE_WEEK` tinyint(1) NOT NULL,
  PRIMARY KEY (`EMPLOYEE_SHIFT_WORKING_DAY_ID`),
  KEY `FK_ESWD_EMPLOYEE_SHIFT_ID` (`EMPLOYEE_SHIFT_ID`),
  CONSTRAINT `FK_ESWD_EMPLOYEE_SHIFT_ID` FOREIGN KEY (`EMPLOYEE_SHIFT_ID`) REFERENCES `EMPLOYEE_SHIFT` (`EMPLOYEE_SHIFT_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EMPLOYEE_SHIFT_WORKING_DAY`
--

LOCK TABLES `EMPLOYEE_SHIFT_WORKING_DAY` WRITE;
/*!40000 ALTER TABLE `EMPLOYEE_SHIFT_WORKING_DAY` DISABLE KEYS */;
/*!40000 ALTER TABLE `EMPLOYEE_SHIFT_WORKING_DAY` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EMPLOYEE_SIBLING`
--

DROP TABLE IF EXISTS `EMPLOYEE_SIBLING`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EMPLOYEE_SIBLING` (
  `EMPLOYEE_SIBLING_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EMPLOYEE_ID` int(10) unsigned NOT NULL,
  `NAME` varchar(100) NOT NULL,
  `AGE` int(2) unsigned NOT NULL,
  `CIVIL_STATUS_ID` int(10) unsigned NOT NULL,
  `OCCUPATION` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`EMPLOYEE_SIBLING_ID`),
  KEY `FK_EMPLOYEE_SIBLING_EMPLOYEE_ID` (`EMPLOYEE_ID`),
  KEY `FK_EMPLOYEE_SIBLING_CS_ID` (`CIVIL_STATUS_ID`),
  CONSTRAINT `FK_EMPLOYEE_SIBLING_CS_ID` FOREIGN KEY (`CIVIL_STATUS_ID`) REFERENCES `CIVIL_STATUS` (`CIVIL_STATUS_ID`),
  CONSTRAINT `FK_EMPLOYEE_SIBLING_EMPLOYEE_ID` FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES `EMPLOYEE` (`EMPLOYEE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EMPLOYEE_SIBLING`
--

LOCK TABLES `EMPLOYEE_SIBLING` WRITE;
/*!40000 ALTER TABLE `EMPLOYEE_SIBLING` DISABLE KEYS */;
/*!40000 ALTER TABLE `EMPLOYEE_SIBLING` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EMPLOYEE_STATUS`
--

DROP TABLE IF EXISTS `EMPLOYEE_STATUS`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EMPLOYEE_STATUS` (
  `EMPLOYEE_STATUS_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(25) NOT NULL,
  `DESCRIPTION` varchar(150) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`EMPLOYEE_STATUS_ID`),
  KEY `FK_EMP_STAT_CREATED_BY` (`CREATED_BY`),
  KEY `FK_EMP_STAT_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_EMP_STAT_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_EMP_STAT_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EMPLOYEE_STATUS`
--

LOCK TABLES `EMPLOYEE_STATUS` WRITE;
/*!40000 ALTER TABLE `EMPLOYEE_STATUS` DISABLE KEYS */;
INSERT INTO `EMPLOYEE_STATUS` VALUES (1,'Z','Zero Exemption without qualified dependent',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(2,'S/ME','Single/Married Employee w/o qualified dependent',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(3,'ME1/S1','Single/Married Employee with 1 qualified dependent',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(4,'ME2/S2','Single/Married Employee with 2 qualified dependent',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(5,'ME3/S3','Single/Married Employee with 3 qualified dependent',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(6,'ME4/S4','Single/Married Employee with 4 qualified dependent',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10');
/*!40000 ALTER TABLE `EMPLOYEE_STATUS` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EMPLOYEE_TYPE`
--

DROP TABLE IF EXISTS `EMPLOYEE_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EMPLOYEE_TYPE` (
  `EMPLOYEE_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(25) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`EMPLOYEE_TYPE_ID`),
  KEY `FK_EMPLOYEE_TYPE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_EMPLOYEE_TYPE_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_EMPLOYEE_TYPE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_EMPLOYEE_TYPE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EMPLOYEE_TYPE`
--

LOCK TABLES `EMPLOYEE_TYPE` WRITE;
/*!40000 ALTER TABLE `EMPLOYEE_TYPE` DISABLE KEYS */;
INSERT INTO `EMPLOYEE_TYPE` VALUES (1,'REGULAR',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(2,'CONTRACTUAL',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10');
/*!40000 ALTER TABLE `EMPLOYEE_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `EQUIPMENT_UTILIZATION_LINE`
--

DROP TABLE IF EXISTS `EQUIPMENT_UTILIZATION_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `EQUIPMENT_UTILIZATION_LINE` (
  `EQUIPMENT_UTILIZATION_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `DELIVERY_RECEIPT_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `AR_LINE_SETUP_ID` int(10) unsigned NOT NULL,
  `DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `DISCOUNT_VALUE` double DEFAULT '0',
  `DISCOUNT` double DEFAULT '0',
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `AMOUNT` double DEFAULT '0',
  `QUANTITY` double DEFAULT '0',
  `UP_AMOUNT` double DEFAULT '0',
  `UNITOFMEASUREMENT_ID` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`EQUIPMENT_UTILIZATION_LINE_ID`),
  KEY `FK_EQUIPMENT_UTILIZATION_LINE_DELIVERY_RECEIPT_ID` (`DELIVERY_RECEIPT_ID`),
  KEY `FK_EQUIPMENT_UTILIZATION_LINE_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_EQUIPMENT_UTILIZATION_LINE_AR_LINE_SETUP_ID` (`AR_LINE_SETUP_ID`),
  KEY `FK_EQUIPMENT_UTILIZATION_LINE_DISCOUNT_TYPE_ID` (`DISCOUNT_TYPE_ID`),
  KEY `FK_EQUIPMENT_UTILIZATION_LINE_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_EQUIPMENT_UTILIZATION_LINE_AR_LINE_SETUP_ID` FOREIGN KEY (`AR_LINE_SETUP_ID`) REFERENCES `AR_LINE_SETUP` (`AR_LINE_SETUP_ID`),
  CONSTRAINT `FK_EQUIPMENT_UTILIZATION_LINE_DELIVERY_RECEIPT_ID` FOREIGN KEY (`DELIVERY_RECEIPT_ID`) REFERENCES `DELIVERY_RECEIPT` (`DELIVERY_RECEIPT_ID`),
  CONSTRAINT `FK_EQUIPMENT_UTILIZATION_LINE_DISCOUNT_TYPE_ID` FOREIGN KEY (`DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_EQUIPMENT_UTILIZATION_LINE_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_EQUIPMENT_UTILIZATION_LINE_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `EQUIPMENT_UTILIZATION_LINE`
--

LOCK TABLES `EQUIPMENT_UTILIZATION_LINE` WRITE;
/*!40000 ALTER TABLE `EQUIPMENT_UTILIZATION_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `EQUIPMENT_UTILIZATION_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `FLEET_CAPTAIN_MDM`
--

DROP TABLE IF EXISTS `FLEET_CAPTAIN_MDM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `FLEET_CAPTAIN_MDM` (
  `FLEET_CAPTAIN_MDM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned NOT NULL,
  `DATE` date NOT NULL,
  `NAME` varchar(100) NOT NULL,
  `POSITION` varchar(100) NOT NULL,
  `LICENSE_NO` varchar(100) DEFAULT NULL,
  `LN_EXPIRATION_DATE` date DEFAULT NULL,
  `SEAMANS_BOOK` varchar(100) DEFAULT NULL,
  `SB_EXPIRATION_DATE` date DEFAULT NULL,
  `FISHERIES` varchar(100) DEFAULT NULL,
  `FL_EXPIRATION_DATE` date DEFAULT NULL,
  `PASSPORT` varchar(100) DEFAULT NULL,
  `P_EXPIRATION_DATE` date DEFAULT NULL,
  `REMARKS` text,
  `ACTIVE` tinyint(1) DEFAULT '1',
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`FLEET_CAPTAIN_MDM_ID`),
  KEY `FK_FLEET_CAPTAIN_MDM_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_FLEET_CAPTAIN_MDM_CREATED_BY` (`CREATED_BY`),
  KEY `FK_FLEET_CAPTAIN_MDM_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_FLEET_CAPTAIN_MDM_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_FLEET_CAPTAIN_MDM_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_FLEET_CAPTAIN_MDM_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `FLEET_CAPTAIN_MDM`
--

LOCK TABLES `FLEET_CAPTAIN_MDM` WRITE;
/*!40000 ALTER TABLE `FLEET_CAPTAIN_MDM` DISABLE KEYS */;
/*!40000 ALTER TABLE `FLEET_CAPTAIN_MDM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `FLEET_CATEGORY`
--

DROP TABLE IF EXISTS `FLEET_CATEGORY`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `FLEET_CATEGORY` (
  `FLEET_CATEGORY_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(20) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`FLEET_CATEGORY_ID`),
  KEY `FK_FLEET_CATEGORY_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_FLEET_CATEGORY_CREATED_BY` (`CREATED_BY`),
  KEY `FK_FLEET_CATEGORY_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_FLEET_CATEGORY_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_FLEET_CATEGORY_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_FLEET_CATEGORY_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `FLEET_CATEGORY`
--

LOCK TABLES `FLEET_CATEGORY` WRITE;
/*!40000 ALTER TABLE `FLEET_CATEGORY` DISABLE KEYS */;
INSERT INTO `FLEET_CATEGORY` VALUES (1,'TRUCKING',1,66,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(2,'FISHING',0,67,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23');
/*!40000 ALTER TABLE `FLEET_CATEGORY` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `FLEET_DEFAULT_ACCOUNT`
--

DROP TABLE IF EXISTS `FLEET_DEFAULT_ACCOUNT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `FLEET_DEFAULT_ACCOUNT` (
  `FLEET_DEFAULT_ACCOUNT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `ACCOUNT_ID` int(10) unsigned NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`FLEET_DEFAULT_ACCOUNT_ID`),
  KEY `FK_FDA_ACCOUNT` (`ACCOUNT_ID`),
  KEY `FK_FDA_CREATED_BY` (`CREATED_BY`),
  KEY `FK_FDA_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_FDA_ACCOUNT` FOREIGN KEY (`ACCOUNT_ID`) REFERENCES `ACCOUNT` (`ACCOUNT_ID`),
  CONSTRAINT `FK_FDA_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_FDA_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=64 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `FLEET_DEFAULT_ACCOUNT`
--

LOCK TABLES `FLEET_DEFAULT_ACCOUNT` WRITE;
/*!40000 ALTER TABLE `FLEET_DEFAULT_ACCOUNT` DISABLE KEYS */;
INSERT INTO `FLEET_DEFAULT_ACCOUNT` VALUES (1,1,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(2,2,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(3,3,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(4,4,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(5,5,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(6,6,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(7,7,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(8,8,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(9,9,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(10,10,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(11,11,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(12,12,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(13,13,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(14,14,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(15,15,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(16,19,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(17,20,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(18,21,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(19,22,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(20,23,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(21,24,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(22,25,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(23,26,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(24,27,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(25,28,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(26,29,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(27,30,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(28,33,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(29,34,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(30,35,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(31,36,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(32,38,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(33,46,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(34,47,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(35,48,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(36,49,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(37,50,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(38,51,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(39,52,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(40,53,1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23');
/*!40000 ALTER TABLE `FLEET_DEFAULT_ACCOUNT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `FLEET_DRIVER`
--

DROP TABLE IF EXISTS `FLEET_DRIVER`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `FLEET_DRIVER` (
  `FLEET_DRIVER_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned NOT NULL,
  `DATE` date DEFAULT NULL,
  `NAME` varchar(100) NOT NULL,
  `LICENSE_NO` varchar(100) NOT NULL,
  `EXPIRATION_DATE` date DEFAULT NULL,
  `REMARKS` text,
  `ACTIVE` tinyint(1) DEFAULT '1',
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`FLEET_DRIVER_ID`),
  KEY `FK_FP_DRIVER_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_FP_CREATED_BY` (`CREATED_BY`),
  KEY `FK_FP_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_FP_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_FP_DRIVER_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_FP_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `FLEET_DRIVER`
--

LOCK TABLES `FLEET_DRIVER` WRITE;
/*!40000 ALTER TABLE `FLEET_DRIVER` DISABLE KEYS */;
/*!40000 ALTER TABLE `FLEET_DRIVER` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `FLEET_DRY_DOCK`
--

DROP TABLE IF EXISTS `FLEET_DRY_DOCK`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `FLEET_DRY_DOCK` (
  `FLEET_DRY_DOCK_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `DATE` date DEFAULT NULL,
  `CONTRACTOR` varchar(50) DEFAULT NULL,
  `IS_ACTUAL` tinyint(1) DEFAULT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`FLEET_DRY_DOCK_ID`),
  KEY `FK_FLEET_DRY_DOCK_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_FLEET_DRY_DOCK_CREATED_BY` (`CREATED_BY`),
  KEY `FK_FLEET_DRY_DOCK_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_FLEET_DRY_DOCK_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_FLEET_DRY_DOCK_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_FLEET_DRY_DOCK_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `FLEET_DRY_DOCK`
--

LOCK TABLES `FLEET_DRY_DOCK` WRITE;
/*!40000 ALTER TABLE `FLEET_DRY_DOCK` DISABLE KEYS */;
/*!40000 ALTER TABLE `FLEET_DRY_DOCK` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `FLEET_INCIDENT`
--

DROP TABLE IF EXISTS `FLEET_INCIDENT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `FLEET_INCIDENT` (
  `FLEET_INCIDENT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned NOT NULL,
  `DATE` date NOT NULL,
  `EMPLOYEE_NAME` varchar(100) NOT NULL,
  `LOCATION` varchar(100) NOT NULL,
  `CAUSE` varchar(100) NOT NULL,
  `INSURANCE_CLAIMS` varchar(100) DEFAULT NULL,
  `REMARKS` text,
  `ACTIVE` tinyint(1) DEFAULT '1',
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`FLEET_INCIDENT_ID`),
  KEY `FK_FLEET_INCIDENT_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_FLEET_INCIDENT_CREATED_BY` (`CREATED_BY`),
  KEY `FK_FLEET_INCIDENT_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_FLEET_INCIDENT_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_FLEET_INCIDENT_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_FLEET_INCIDENT_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `FLEET_INCIDENT`
--

LOCK TABLES `FLEET_INCIDENT` WRITE;
/*!40000 ALTER TABLE `FLEET_INCIDENT` DISABLE KEYS */;
/*!40000 ALTER TABLE `FLEET_INCIDENT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `FLEET_INSURANCE_PERMIT_RENEWAL`
--

DROP TABLE IF EXISTS `FLEET_INSURANCE_PERMIT_RENEWAL`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `FLEET_INSURANCE_PERMIT_RENEWAL` (
  `FLEET_INSURANCE_PERMIT_RENEWAL_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `REF_NO` varchar(20) DEFAULT NULL,
  `DESCRIPTION` varchar(100) DEFAULT NULL,
  `ISSUANCE_DATE` date DEFAULT NULL,
  `EXPIRATION_DATE` date DEFAULT NULL,
  `REMARKS` text,
  `ACTIVE` tinyint(1) NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`FLEET_INSURANCE_PERMIT_RENEWAL_ID`),
  KEY `FK_FLEET_IPR_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_FLEET_IPR_CREATED_BY` (`CREATED_BY`),
  KEY `FK_FLEET_IPR_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_FLEET_IPR_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_FLEET_IPR_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_FLEET_IPR_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `FLEET_INSURANCE_PERMIT_RENEWAL`
--

LOCK TABLES `FLEET_INSURANCE_PERMIT_RENEWAL` WRITE;
/*!40000 ALTER TABLE `FLEET_INSURANCE_PERMIT_RENEWAL` DISABLE KEYS */;
/*!40000 ALTER TABLE `FLEET_INSURANCE_PERMIT_RENEWAL` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `FLEET_MANNING_REQUIREMENT`
--

DROP TABLE IF EXISTS `FLEET_MANNING_REQUIREMENT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `FLEET_MANNING_REQUIREMENT` (
  `FLEET_MANNING_REQUIREMENT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `POSITION` varchar(50) DEFAULT NULL,
  `LICENSE` varchar(50) DEFAULT NULL,
  `NUMBER` varchar(50) DEFAULT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `REMARKS` text,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`FLEET_MANNING_REQUIREMENT_ID`),
  KEY `FK_FLEET_MR_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_FLEET_MR__CREATED_BY` (`CREATED_BY`),
  KEY `FK_FLEET_MR__UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_FLEET_MR_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_FLEET_MR__CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_FLEET_MR__UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `FLEET_MANNING_REQUIREMENT`
--

LOCK TABLES `FLEET_MANNING_REQUIREMENT` WRITE;
/*!40000 ALTER TABLE `FLEET_MANNING_REQUIREMENT` DISABLE KEYS */;
/*!40000 ALTER TABLE `FLEET_MANNING_REQUIREMENT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `FLEET_PROFILE`
--

DROP TABLE IF EXISTS `FLEET_PROFILE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `FLEET_PROFILE` (
  `FLEET_PROFILE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `CODE_VESSEL_NAME` varchar(100) NOT NULL,
  `ACQUITISION_DATE` date DEFAULT NULL,
  `MAKE` varchar(100) DEFAULT NULL,
  `MODEL` varchar(100) DEFAULT NULL,
  `CHASSIS_NO` varchar(100) DEFAULT NULL,
  `OFFICIAL_NO` varchar(100) DEFAULT NULL,
  `BODY_NO` varchar(100) DEFAULT NULL,
  `PLATE_NO` varchar(100) DEFAULT NULL,
  `ENGINE_NO` varchar(100) NOT NULL,
  `DESCRIPTION` varchar(250) DEFAULT NULL,
  `TONNAGE_WEIGHT` varchar(100) DEFAULT NULL,
  `CALL_SIGN` varchar(100) DEFAULT NULL,
  `VMS` varchar(100) DEFAULT NULL,
  `PROPELLER` varchar(100) DEFAULT NULL,
  `WINCH` varchar(100) DEFAULT NULL,
  `DRIVER` varchar(100) DEFAULT NULL,
  `DRIVER_ID` int(10) unsigned DEFAULT NULL,
  `CAPTAIN` varchar(100) DEFAULT NULL,
  `SUPPLIER` varchar(100) DEFAULT NULL,
  `EB_OBJECT_ID` int(10) unsigned NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`FLEET_PROFILE_ID`),
  KEY `FK_FLEET_PROFILE_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_FLEET_PROFILE_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_FLEET_PROFILE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_FLEET_PROFILE_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_FLEET_PROFILE_DRIVER_ID` (`DRIVER_ID`),
  CONSTRAINT `FK_FLEET_PROFILE_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_FLEET_PROFILE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_FLEET_PROFILE_DRIVER_ID` FOREIGN KEY (`DRIVER_ID`) REFERENCES `DRIVER` (`DRIVER_ID`),
  CONSTRAINT `FK_FLEET_PROFILE_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_FLEET_PROFILE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `FLEET_PROFILE`
--

LOCK TABLES `FLEET_PROFILE` WRITE;
/*!40000 ALTER TABLE `FLEET_PROFILE` DISABLE KEYS */;
/*!40000 ALTER TABLE `FLEET_PROFILE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `FLEET_TOOL`
--

DROP TABLE IF EXISTS `FLEET_TOOL`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `FLEET_TOOL` (
  `FLEET_TOOL_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned NOT NULL,
  `DATE_PURCHASED` date NOT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `COST` double NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`FLEET_TOOL_ID`),
  KEY `FK_FLEET_TOOL_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_FLEET_TOOL_ITEM_ID` (`ITEM_ID`),
  KEY `FK_FLEET_TOOL_CREATED_BY` (`CREATED_BY`),
  KEY `FK_FLEET_TOOL_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_FLEET_TOOL_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_FLEET_TOOL_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_FLEET_TOOL_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_FLEET_TOOL_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `FLEET_TOOL`
--

LOCK TABLES `FLEET_TOOL` WRITE;
/*!40000 ALTER TABLE `FLEET_TOOL` DISABLE KEYS */;
/*!40000 ALTER TABLE `FLEET_TOOL` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `FLEET_TOOL_CONDITION`
--

DROP TABLE IF EXISTS `FLEET_TOOL_CONDITION`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `FLEET_TOOL_CONDITION` (
  `FLEET_TOOL_CONDITION_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned NOT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `TOOL_CONDITION` text,
  `STATUS` tinyint(1) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`FLEET_TOOL_CONDITION_ID`),
  KEY `FK_FLEET_TOOL_CONDITION_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_FLEET_TOOL_CONDITION_ITEM_ID` (`ITEM_ID`),
  KEY `FK_FLEET_TOOL_CONDITION_CREATED_BY` (`CREATED_BY`),
  KEY `FK_FLEET_TOOL_CONDITION_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_FLEET_TOOL_CONDITION_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_FLEET_TOOL_CONDITION_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_FLEET_TOOL_CONDITION_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_FLEET_TOOL_CONDITION_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `FLEET_TOOL_CONDITION`
--

LOCK TABLES `FLEET_TOOL_CONDITION` WRITE;
/*!40000 ALTER TABLE `FLEET_TOOL_CONDITION` DISABLE KEYS */;
/*!40000 ALTER TABLE `FLEET_TOOL_CONDITION` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `FLEET_TYPE`
--

DROP TABLE IF EXISTS `FLEET_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `FLEET_TYPE` (
  `FLEET_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `FLEET_CATEGORY_ID` int(10) unsigned DEFAULT NULL,
  `NAME` varchar(20) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`FLEET_TYPE_ID`),
  KEY `FK_FLEET_TYPE_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_FLEET_TYPE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_FLEET_TYPE_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_FLEET_TYPE_CATEGORY_ID` (`FLEET_CATEGORY_ID`),
  CONSTRAINT `FK_FLEET_TYPE_CATEGORY_ID` FOREIGN KEY (`FLEET_CATEGORY_ID`) REFERENCES `FLEET_CATEGORY` (`FLEET_CATEGORY_ID`),
  CONSTRAINT `FK_FLEET_TYPE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_FLEET_TYPE_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_FLEET_TYPE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `FLEET_TYPE`
--

LOCK TABLES `FLEET_TYPE` WRITE;
/*!40000 ALTER TABLE `FLEET_TYPE` DISABLE KEYS */;
/*!40000 ALTER TABLE `FLEET_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `FLEET_VOYAGE`
--

DROP TABLE IF EXISTS `FLEET_VOYAGE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `FLEET_VOYAGE` (
  `FLEET_VOYAGE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `DATE_OF_DEPARTURE` date DEFAULT NULL,
  `DATE_OF_UNLOADING` date DEFAULT NULL,
  `CATCHER` varchar(50) DEFAULT NULL,
  `VOLUME` varchar(50) DEFAULT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`FLEET_VOYAGE_ID`),
  KEY `FK_FLEET_VOYAGE_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_FLEET_VOYAGE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_FLEET_VOYAGE_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_FLEET_VOYAGE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_FLEET_VOYAGE_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_FLEET_VOYAGE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `FLEET_VOYAGE`
--

LOCK TABLES `FLEET_VOYAGE` WRITE;
/*!40000 ALTER TABLE `FLEET_VOYAGE` DISABLE KEYS */;
/*!40000 ALTER TABLE `FLEET_VOYAGE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `FORM_DEDUCTION`
--

DROP TABLE IF EXISTS `FORM_DEDUCTION`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `FORM_DEDUCTION` (
  `FORM_DEDUCTION_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `FORM_WORKFLOW_ID` int(10) unsigned NOT NULL,
  `FORM_DEDUCTION_TYPE_ID` int(10) unsigned NOT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `EMPLOYEE_ID` int(10) unsigned NOT NULL,
  `DIVISION_ID` int(10) unsigned NOT NULL,
  `DEDUCTION_TYPE_ID` int(10) unsigned NOT NULL,
  `SEQUENCE_NO` int(10) unsigned NOT NULL,
  `FORM_DATE` date NOT NULL,
  `START_DATE` date NOT NULL,
  `REMARKS` text,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`FORM_DEDUCTION_ID`),
  KEY `FK_FORM_DEDUCTION_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_FORM_DEDUCTION_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_FORM_DEDUCTION_FORM_DEDUCTION_TYPE_ID` (`FORM_DEDUCTION_TYPE_ID`),
  KEY `FK_FORM_DEDUCTION_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_FORM_DEDUCTION_EMPLOYEE_ID` (`EMPLOYEE_ID`),
  KEY `FK_FORM_DEDUCTION_DIVISION_ID` (`DIVISION_ID`),
  KEY `FK_FORM_DEDUCTION_DEDUCTION_TYPE_ID` (`DEDUCTION_TYPE_ID`),
  KEY `FK_FORM_DEDUCTION_CREATED_BY` (`CREATED_BY`),
  KEY `FK_FORM_DEDUCTION_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_FORM_DEDUCTION_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_FORM_DEDUCTION_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_FORM_DEDUCTION_DEDUCTION_TYPE_ID` FOREIGN KEY (`DEDUCTION_TYPE_ID`) REFERENCES `DEDUCTION_TYPE` (`DEDUCTION_TYPE_ID`),
  CONSTRAINT `FK_FORM_DEDUCTION_DIVISION_ID` FOREIGN KEY (`DIVISION_ID`) REFERENCES `DIVISION` (`DIVISION_ID`),
  CONSTRAINT `FK_FORM_DEDUCTION_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_FORM_DEDUCTION_EMPLOYEE_ID` FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES `EMPLOYEE` (`EMPLOYEE_ID`),
  CONSTRAINT `FK_FORM_DEDUCTION_FORM_DEDUCTION_TYPE_ID` FOREIGN KEY (`FORM_DEDUCTION_TYPE_ID`) REFERENCES `FORM_DEDUCTION_TYPE` (`FORM_DEDUCTION_TYPE_ID`),
  CONSTRAINT `FK_FORM_DEDUCTION_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_FORM_DEDUCTION_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `FORM_DEDUCTION`
--

LOCK TABLES `FORM_DEDUCTION` WRITE;
/*!40000 ALTER TABLE `FORM_DEDUCTION` DISABLE KEYS */;
/*!40000 ALTER TABLE `FORM_DEDUCTION` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `FORM_DEDUCTION_LINE`
--

DROP TABLE IF EXISTS `FORM_DEDUCTION_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `FORM_DEDUCTION_LINE` (
  `FORM_DEDUCTION_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned NOT NULL,
  `DATE` date NOT NULL,
  `AMOUNT` double NOT NULL,
  PRIMARY KEY (`FORM_DEDUCTION_LINE_ID`),
  KEY `FK_FORM_DEDUCTION_LINE_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_FORM_DEDUCTION_LINE_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `FORM_DEDUCTION_LINE`
--

LOCK TABLES `FORM_DEDUCTION_LINE` WRITE;
/*!40000 ALTER TABLE `FORM_DEDUCTION_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `FORM_DEDUCTION_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `FORM_DEDUCTION_TYPE`
--

DROP TABLE IF EXISTS `FORM_DEDUCTION_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `FORM_DEDUCTION_TYPE` (
  `FORM_DEDUCTION_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(20) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`FORM_DEDUCTION_TYPE_ID`),
  KEY `FK_FORM_DEDUCTION_TYPE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_FORM_DEDUCTION_TYPE_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_FORM_DEDUCTION_TYPE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_FORM_DEDUCTION_TYPE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `FORM_DEDUCTION_TYPE`
--

LOCK TABLES `FORM_DEDUCTION_TYPE` WRITE;
/*!40000 ALTER TABLE `FORM_DEDUCTION_TYPE` DISABLE KEYS */;
INSERT INTO `FORM_DEDUCTION_TYPE` VALUES (1,'Authority to Deduct',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(2,'Cash Bond Contract',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10');
/*!40000 ALTER TABLE `FORM_DEDUCTION_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `FORM_STATUS`
--

DROP TABLE IF EXISTS `FORM_STATUS`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `FORM_STATUS` (
  `FORM_STATUS_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `DESCRIPTION` varchar(30) NOT NULL,
  PRIMARY KEY (`FORM_STATUS_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=32 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `FORM_STATUS`
--

LOCK TABLES `FORM_STATUS` WRITE;
/*!40000 ALTER TABLE `FORM_STATUS` DISABLE KEYS */;
INSERT INTO `FORM_STATUS` VALUES (1,'CREATED'),(2,'NOTED'),(3,'APPROVED'),(4,'CANCELLED'),(5,'REQUESTED'),(6,'POSTED'),(7,'RECEIVED'),(8,'CHECKED'),(9,'PREPARED'),(10,'ISSUED'),(11,'RELEASED'),(12,'RETURNED'),(13,'UNDELIVERED'),(14,'NEW'),(15,'NEGOTIABLE'),(16,'CLEARED'),(17,'VALIDATED'),(18,'REMITTED'),(19,'PAID'),(20,'PARTIALLY SERVED'),(21,'FULLY SERVED'),(22,'ENCODED'),(23,'REPLENISHED'),(24,'VERIFIED'),(28,'ACCEPTED'),(29,'COMPLETED'),(30,'REVIEWED'),(31,'DRAFTED');
/*!40000 ALTER TABLE `FORM_STATUS` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `FORM_WORKFLOW`
--

DROP TABLE IF EXISTS `FORM_WORKFLOW`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `FORM_WORKFLOW` (
  `FORM_WORKFLOW_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `IS_COMPLETE` tinyint(1) DEFAULT NULL,
  `CURRENT_STATUS_ID` int(10) unsigned NOT NULL,
  PRIMARY KEY (`FORM_WORKFLOW_ID`),
  KEY `FK_FORM_WORKFLOQ_FORM_STATUS` (`CURRENT_STATUS_ID`),
  CONSTRAINT `FK_FORM_WORKFLOQ_FORM_STATUS` FOREIGN KEY (`CURRENT_STATUS_ID`) REFERENCES `FORM_STATUS` (`FORM_STATUS_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `FORM_WORKFLOW`
--

LOCK TABLES `FORM_WORKFLOW` WRITE;
/*!40000 ALTER TABLE `FORM_WORKFLOW` DISABLE KEYS */;
/*!40000 ALTER TABLE `FORM_WORKFLOW` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `FORM_WORKFLOW_LOG`
--

DROP TABLE IF EXISTS `FORM_WORKFLOW_LOG`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `FORM_WORKFLOW_LOG` (
  `FORM_WORKFLOW_LOG_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `FORM_WORKFLOW_ID` int(10) unsigned NOT NULL,
  `FORM_STATUS_ID` int(10) unsigned NOT NULL,
  `COMMENT` text,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`FORM_WORKFLOW_LOG_ID`),
  KEY `FK_FORM_WORKFLOW_LOG_CREATED_BY` (`CREATED_BY`),
  KEY `FK_FORM_STATUS_FORM_STATUS_ID` (`FORM_STATUS_ID`),
  CONSTRAINT `FK_FORM_STATUS_FORM_STATUS_ID` FOREIGN KEY (`FORM_STATUS_ID`) REFERENCES `FORM_STATUS` (`FORM_STATUS_ID`),
  CONSTRAINT `FK_FORM_WORKFLOW_LOG_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `FORM_WORKFLOW_LOG`
--

LOCK TABLES `FORM_WORKFLOW_LOG` WRITE;
/*!40000 ALTER TABLE `FORM_WORKFLOW_LOG` DISABLE KEYS */;
/*!40000 ALTER TABLE `FORM_WORKFLOW_LOG` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `GENDER`
--

DROP TABLE IF EXISTS `GENDER`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `GENDER` (
  `GENDER_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(15) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`GENDER_ID`),
  KEY `FK_GENDER_CREATED_BY` (`CREATED_BY`),
  KEY `FK_GENDER_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_GENDER_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_GENDER_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `GENDER`
--

LOCK TABLES `GENDER` WRITE;
/*!40000 ALTER TABLE `GENDER` DISABLE KEYS */;
INSERT INTO `GENDER` VALUES (1,'Male',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(2,'Female',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10');
/*!40000 ALTER TABLE `GENDER` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `GENERAL_LEDGER`
--

DROP TABLE IF EXISTS `GENERAL_LEDGER`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `GENERAL_LEDGER` (
  `GENERAL_LEDGER_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `FORM_WORKFLOW_ID` int(10) unsigned DEFAULT NULL,
  `SEQUENCE_NO` int(10) unsigned NOT NULL,
  `GL_STATUS_ID` int(10) unsigned NOT NULL,
  `GL_ENTRY_SOURCE_ID` int(10) unsigned NOT NULL,
  `GL_DATE` date NOT NULL,
  `COMMENT` text,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`GENERAL_LEDGER_ID`),
  KEY `FK_GENERAL_LEDGER_STATUS` (`GL_STATUS_ID`),
  KEY `FK_GENERAL_LEDGER_ENTRY_SOURCE` (`GL_ENTRY_SOURCE_ID`),
  KEY `FK_GENERAL_LEDGER_CREATED_BY` (`CREATED_BY`),
  KEY `FK_GENERAL_LEDGER_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_AP_GENERAL_LEDGER_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_GENERAL_LEDGER_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_AP_GENERAL_LEDGER_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_GENERAL_LEDGER_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_GENERAL_LEDGER_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_GENERAL_LEDGER_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `GENERAL_LEDGER`
--

LOCK TABLES `GENERAL_LEDGER` WRITE;
/*!40000 ALTER TABLE `GENERAL_LEDGER` DISABLE KEYS */;
/*!40000 ALTER TABLE `GENERAL_LEDGER` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `GL_ENTRY`
--

DROP TABLE IF EXISTS `GL_ENTRY`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `GL_ENTRY` (
  `GL_ENTRY_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `GENERAL_LEDGER_ID` int(10) unsigned NOT NULL,
  `ACCOUNT_COMBINATION_ID` int(10) unsigned NOT NULL,
  `AMOUNT` double NOT NULL,
  `DESCRIPTION` text,
  `IS_DEBIT` tinyint(1) NOT NULL,
  PRIMARY KEY (`GL_ENTRY_ID`),
  KEY `FK_GL_ENTRY_GENERAL_LEDGER` (`GENERAL_LEDGER_ID`),
  KEY `FK_GL_ENTRY_ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  KEY `FK_GL_ENTRY_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_GL_ENTRY_ACCOUNT_COMBINATION` FOREIGN KEY (`ACCOUNT_COMBINATION_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_GL_ENTRY_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_GL_ENTRY_GENERAL_LEDGER` FOREIGN KEY (`GENERAL_LEDGER_ID`) REFERENCES `GENERAL_LEDGER` (`GENERAL_LEDGER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `GL_ENTRY`
--

LOCK TABLES `GL_ENTRY` WRITE;
/*!40000 ALTER TABLE `GL_ENTRY` DISABLE KEYS */;
/*!40000 ALTER TABLE `GL_ENTRY` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `GL_ENTRY_SOURCE`
--

DROP TABLE IF EXISTS `GL_ENTRY_SOURCE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `GL_ENTRY_SOURCE` (
  `GL_ENTRY_SOURCE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `DESCRIPTION` varchar(100) NOT NULL,
  PRIMARY KEY (`GL_ENTRY_SOURCE_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `GL_ENTRY_SOURCE`
--

LOCK TABLES `GL_ENTRY_SOURCE` WRITE;
/*!40000 ALTER TABLE `GL_ENTRY_SOURCE` DISABLE KEYS */;
INSERT INTO `GL_ENTRY_SOURCE` VALUES (1,'General Ledger');
/*!40000 ALTER TABLE `GL_ENTRY_SOURCE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `GL_STATUS`
--

DROP TABLE IF EXISTS `GL_STATUS`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `GL_STATUS` (
  `GL_STATUS_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `DESCRIPTION` varchar(100) NOT NULL,
  PRIMARY KEY (`GL_STATUS_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `GL_STATUS`
--

LOCK TABLES `GL_STATUS` WRITE;
/*!40000 ALTER TABLE `GL_STATUS` DISABLE KEYS */;
INSERT INTO `GL_STATUS` VALUES (1,'New'),(2,'Posted');
/*!40000 ALTER TABLE `GL_STATUS` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `HOLIDAY_SETTING`
--

DROP TABLE IF EXISTS `HOLIDAY_SETTING`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `HOLIDAY_SETTING` (
  `HOLIDAY_SETTING_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `HOLIDAY_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `NAME` varchar(50) NOT NULL,
  `DATE` date NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`HOLIDAY_SETTING_ID`),
  KEY `FK_HS_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_HS_HOLIDAY_TYPE_ID` (`HOLIDAY_TYPE_ID`),
  KEY `FK_HS_CREATED_BY` (`CREATED_BY`),
  KEY `FK_HS_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_HS_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_HS_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_HS_HOLIDAY_TYPE_ID` FOREIGN KEY (`HOLIDAY_TYPE_ID`) REFERENCES `HOLIDAY_TYPE` (`HOLIDAY_TYPE_ID`),
  CONSTRAINT `FK_HS_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `HOLIDAY_SETTING`
--

LOCK TABLES `HOLIDAY_SETTING` WRITE;
/*!40000 ALTER TABLE `HOLIDAY_SETTING` DISABLE KEYS */;
/*!40000 ALTER TABLE `HOLIDAY_SETTING` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `HOLIDAY_TYPE`
--

DROP TABLE IF EXISTS `HOLIDAY_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `HOLIDAY_TYPE` (
  `HOLIDAY_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(25) NOT NULL,
  `DESCRIPTION` varchar(100) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`HOLIDAY_TYPE_ID`),
  KEY `FK_HT_CREATED_BY` (`CREATED_BY`),
  KEY `FK_HT_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_HT_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_HT_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `HOLIDAY_TYPE`
--

LOCK TABLES `HOLIDAY_TYPE` WRITE;
/*!40000 ALTER TABLE `HOLIDAY_TYPE` DISABLE KEYS */;
INSERT INTO `HOLIDAY_TYPE` VALUES (1,'REGULAR','REGULAR',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(2,'SPECIAL NON-WORKING','SPECIAL NON-WORKING',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10');
/*!40000 ALTER TABLE `HOLIDAY_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `INVENTORY_ACCOUNT`
--

DROP TABLE IF EXISTS `INVENTORY_ACCOUNT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `INVENTORY_ACCOUNT` (
  `INVENTORY_ACCOUNT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `CASH_SALES_RM_ID` int(10) NOT NULL,
  `CUSTOMER_ADV_PAYMENT_RM_ID` int(10) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`INVENTORY_ACCOUNT_ID`),
  KEY `FK_IA_CREATED_BY` (`CREATED_BY`),
  KEY `FK_IA_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_IA_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_IA_CASH_SALES_RM_ID` (`CASH_SALES_RM_ID`),
  KEY `FK_IA_CUSTOMER_ADV_PAYMENT_RM_ID` (`CUSTOMER_ADV_PAYMENT_RM_ID`),
  CONSTRAINT `FK_IA_CASH_SALES_RM_ID` FOREIGN KEY (`CASH_SALES_RM_ID`) REFERENCES `RECEIPT_METHOD` (`RECEIPT_METHOD_ID`),
  CONSTRAINT `FK_IA_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_IA_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_IA_CUSTOMER_ADV_PAYMENT_RM_ID` FOREIGN KEY (`CUSTOMER_ADV_PAYMENT_RM_ID`) REFERENCES `RECEIPT_METHOD` (`RECEIPT_METHOD_ID`),
  CONSTRAINT `FK_IA_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `INVENTORY_ACCOUNT`
--

LOCK TABLES `INVENTORY_ACCOUNT` WRITE;
/*!40000 ALTER TABLE `INVENTORY_ACCOUNT` DISABLE KEYS */;
INSERT INTO `INVENTORY_ACCOUNT` VALUES (1,1,1,1,1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52');
/*!40000 ALTER TABLE `INVENTORY_ACCOUNT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `INVOICE_CLASSIFICATION`
--

DROP TABLE IF EXISTS `INVOICE_CLASSIFICATION`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `INVOICE_CLASSIFICATION` (
  `INVOICE_CLASSIFICATION_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_SL_KEY_ID` int(10) unsigned NOT NULL,
  `NAME` varchar(50) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`INVOICE_CLASSIFICATION_ID`),
  KEY `FK_INVOICE_CLASSIFICATION_EB_SL_KEY_ID` (`EB_SL_KEY_ID`),
  KEY `FK_INVOICE_CLASSIFICATION_CREATED_BY` (`CREATED_BY`),
  KEY `FK_INVOICE_CLASSIFICATION_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_INVOICE_CLASSIFICATION_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_INVOICE_CLASSIFICATION_EB_SL_KEY_ID` FOREIGN KEY (`EB_SL_KEY_ID`) REFERENCES `EB_SL_KEY` (`EB_SL_KEY_ID`),
  CONSTRAINT `FK_INVOICE_CLASSIFICATION_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `INVOICE_CLASSIFICATION`
--

LOCK TABLES `INVOICE_CLASSIFICATION` WRITE;
/*!40000 ALTER TABLE `INVOICE_CLASSIFICATION` DISABLE KEYS */;
INSERT INTO `INVOICE_CLASSIFICATION` VALUES (1,1,'Regular Invoice',1,1,'2021-08-11 01:33:13',1,'2021-08-11 01:33:13'),(2,1,'Prepaid Invoice',1,1,'2021-08-11 01:33:13',1,'2021-08-11 01:33:13'),(3,1,'Debit Memo',1,1,'2021-08-11 01:33:13',1,'2021-08-11 01:33:13'),(4,1,'Credit Memo',1,1,'2021-08-11 01:33:13',1,'2021-08-11 01:33:13');
/*!40000 ALTER TABLE `INVOICE_CLASSIFICATION` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `INVOICE_TYPE`
--

DROP TABLE IF EXISTS `INVOICE_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `INVOICE_TYPE` (
  `INVOICE_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_SL_KEY_ID` int(10) unsigned NOT NULL,
  `NAME` varchar(50) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`INVOICE_TYPE_ID`),
  KEY `FK_INVOICE_TYPE_EB_SL_KEY_ID` (`EB_SL_KEY_ID`),
  KEY `FK_INVOICE_TYPE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_INVOICE_TYPE_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_INVOICE_TYPE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_INVOICE_TYPE_EB_SL_KEY_ID` FOREIGN KEY (`EB_SL_KEY_ID`) REFERENCES `EB_SL_KEY` (`EB_SL_KEY_ID`),
  CONSTRAINT `FK_INVOICE_TYPE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=37 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `INVOICE_TYPE`
--

LOCK TABLES `INVOICE_TYPE` WRITE;
/*!40000 ALTER TABLE `INVOICE_TYPE` DISABLE KEYS */;
INSERT INTO `INVOICE_TYPE` VALUES (1,1,'Regular Invoice',1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20'),(2,1,'Prepaid Invoice',1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20'),(3,1,'Debit Memo',1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20'),(4,1,'Credit Memo',1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20'),(5,1,'Receiving Report',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(6,1,'Return To Supplier',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(8,1,'Receiving Report - Raw Materials',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(9,1,'Receiving Report - RM Palay',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(13,1,'Receiving Report - Central',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(14,1,'Receiving Report - NSB 3',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(15,1,'Receiving Report - NSB 4',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(16,1,'Receiving Report - NSB 5',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(17,1,'Receiving Report - NSB 8',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(18,1,'Receiving Report - NSB 8A',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(19,1,'AP Invoice Non PO - Central',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(20,1,'AP Invoice Non PO - NSB 3',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(21,1,'AP Invoice Non PO - NSB 4',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(22,1,'AP Invoice Non PO - NSB 5',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(23,1,'AP Invoice Non PO - NSB 8',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(24,1,'AP Invoice Non PO - NSB 8A',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(25,1,'AP Invoice Goods/Services - Central',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(26,1,'AP Invoice Goods/Services - NSB 3',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(27,1,'AP Invoice Goods/Services - NSB 4',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(28,1,'AP Invoice Goods/Services - NSB 5',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(29,1,'AP Invoice Goods/Services - NSB 8',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(30,1,'AP Invoice Goods/Services - NSB 8A',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(31,1,'Return To Supplier - Central',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(32,1,'Return To Supplier - NSB 3',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(33,1,'Return To Supplier - NSB 4',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(34,1,'Return To Supplier - NSB 5',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(35,1,'Return To Supplier - NSB 8',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(36,1,'Return To Supplier - NSB 8A',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52');
/*!40000 ALTER TABLE `INVOICE_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ITEM`
--

DROP TABLE IF EXISTS `ITEM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ITEM` (
  `ITEM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `ITEM_CATEGORY_ID` int(10) unsigned NOT NULL,
  `UNIT_MEASUREMENT_ID` int(10) unsigned NOT NULL,
  `STOCK_CODE` varchar(50) NOT NULL,
  `DESCRIPTION` varchar(100) NOT NULL,
  `REORDERING_POINT` int(20) DEFAULT NULL,
  `INITIAL_UNIT_COST` double DEFAULT '0',
  `INITIAL_QUANTITY` double DEFAULT '0',
  `MANUFACTURER_PART_NO` varchar(50) DEFAULT NULL,
  `PURCHASE_DESC` varchar(100) DEFAULT NULL,
  `SALE_DESC` varchar(100) DEFAULT NULL,
  `MAX_ORDERING_POINT` int(10) DEFAULT NULL,
  `ACTIVE` tinyint(1) DEFAULT '1',
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `BARCODE` varchar(15) DEFAULT NULL,
  `WAREHOUSE_ID` int(10) unsigned DEFAULT NULL,
  `ITEM_VAT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`ITEM_ID`),
  KEY `FK_ITEM_CATEGORY` (`ITEM_CATEGORY_ID`),
  KEY `FK_ITEM_CREATED_BY` (`CREATED_BY`),
  KEY `FK_ITEM__UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_UNIT_OF_MEASURE` (`UNIT_MEASUREMENT_ID`),
  KEY `INDEX_ITEM` (`STOCK_CODE`,`DESCRIPTION`,`UNIT_MEASUREMENT_ID`,`ITEM_CATEGORY_ID`,`ACTIVE`),
  KEY `FK_ITEM_WAREHOUSE_ID` (`WAREHOUSE_ID`),
  KEY `FK_ITEM_VAT_TYPE_ID` (`ITEM_VAT_TYPE_ID`),
  CONSTRAINT `FK_ITEM_CATEGORY` FOREIGN KEY (`ITEM_CATEGORY_ID`) REFERENCES `ITEM_CATEGORY` (`ITEM_CATEGORY_ID`),
  CONSTRAINT `FK_ITEM_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_ITEM_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_ITEM_VAT_TYPE_ID` FOREIGN KEY (`ITEM_VAT_TYPE_ID`) REFERENCES `ITEM_VAT_TYPE` (`ITEM_VAT_TYPE_ID`),
  CONSTRAINT `FK_ITEM_WAREHOUSE_ID` FOREIGN KEY (`WAREHOUSE_ID`) REFERENCES `WAREHOUSE` (`WAREHOUSE_ID`),
  CONSTRAINT `FK_UNIT_OF_MEASURE` FOREIGN KEY (`UNIT_MEASUREMENT_ID`) REFERENCES `UNIT_MEASUREMENT` (`UNITOFMEASUREMENT_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ITEM`
--

LOCK TABLES `ITEM` WRITE;
/*!40000 ALTER TABLE `ITEM` DISABLE KEYS */;
/*!40000 ALTER TABLE `ITEM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ITEM_ADD_ON`
--

DROP TABLE IF EXISTS `ITEM_ADD_ON`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ITEM_ADD_ON` (
  `ITEM_ADD_ON_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `ITEM_ADD_ON_TYPE_ID` int(10) unsigned DEFAULT '3',
  `ITEM_ID` int(10) unsigned NOT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `NAME` varchar(50) NOT NULL,
  `VALUE` double NOT NULL,
  `ACTIVE` tinyint(1) DEFAULT '1',
  PRIMARY KEY (`ITEM_ADD_ON_ID`),
  KEY `FK_AO_ITEM` (`ITEM_ID`),
  KEY `FK_AO_COMPANY` (`COMPANY_ID`),
  KEY `FK_AO_ADD_ON_TYPE_ID` (`ITEM_ADD_ON_TYPE_ID`),
  CONSTRAINT `FK_AO_ADD_ON_TYPE_ID` FOREIGN KEY (`ITEM_ADD_ON_TYPE_ID`) REFERENCES `ITEM_ADD_ON_TYPE` (`ITEM_ADD_ON_TYPE_ID`),
  CONSTRAINT `FK_AO_COMPANY` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_AO_ITEM` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ITEM_ADD_ON`
--

LOCK TABLES `ITEM_ADD_ON` WRITE;
/*!40000 ALTER TABLE `ITEM_ADD_ON` DISABLE KEYS */;
/*!40000 ALTER TABLE `ITEM_ADD_ON` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ITEM_ADD_ON_TYPE`
--

DROP TABLE IF EXISTS `ITEM_ADD_ON_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ITEM_ADD_ON_TYPE` (
  `ITEM_ADD_ON_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(20) NOT NULL,
  PRIMARY KEY (`ITEM_ADD_ON_TYPE_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ITEM_ADD_ON_TYPE`
--

LOCK TABLES `ITEM_ADD_ON_TYPE` WRITE;
/*!40000 ALTER TABLE `ITEM_ADD_ON_TYPE` DISABLE KEYS */;
INSERT INTO `ITEM_ADD_ON_TYPE` VALUES (1,'Percentage'),(2,'Amount'),(3,'Quantity');
/*!40000 ALTER TABLE `ITEM_ADD_ON_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ITEM_BAG_QUANTITY`
--

DROP TABLE IF EXISTS `ITEM_BAG_QUANTITY`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ITEM_BAG_QUANTITY` (
  `ITEM_BAG_QUANTITY_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double DEFAULT '0',
  `ACTIVE` tinyint(1) DEFAULT '1',
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`ITEM_BAG_QUANTITY_ID`),
  KEY `FK_IBQ_ITEM_ID` (`ITEM_ID`),
  KEY `FK_IBQ_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_IBQ_CREATED_BY` (`CREATED_BY`),
  KEY `FK_IBQ_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_IBQ_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_IBQ_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_IBQ_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_IBQ_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ITEM_BAG_QUANTITY`
--

LOCK TABLES `ITEM_BAG_QUANTITY` WRITE;
/*!40000 ALTER TABLE `ITEM_BAG_QUANTITY` DISABLE KEYS */;
/*!40000 ALTER TABLE `ITEM_BAG_QUANTITY` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ITEM_BUYING_ADD_ON`
--

DROP TABLE IF EXISTS `ITEM_BUYING_ADD_ON`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ITEM_BUYING_ADD_ON` (
  `ITEM_BUYING_ADD_ON_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `NAME` varchar(50) NOT NULL,
  `VALUE` double NOT NULL,
  `ACTIVE` tinyint(1) DEFAULT '1',
  PRIMARY KEY (`ITEM_BUYING_ADD_ON_ID`),
  KEY `FK_IBAO_ITEM` (`ITEM_ID`),
  KEY `FK_IBAO_COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_IBAO_COMPANY` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_IBAO_ITEM` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ITEM_BUYING_ADD_ON`
--

LOCK TABLES `ITEM_BUYING_ADD_ON` WRITE;
/*!40000 ALTER TABLE `ITEM_BUYING_ADD_ON` DISABLE KEYS */;
/*!40000 ALTER TABLE `ITEM_BUYING_ADD_ON` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ITEM_BUYING_DISCOUNT`
--

DROP TABLE IF EXISTS `ITEM_BUYING_DISCOUNT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ITEM_BUYING_DISCOUNT` (
  `ITEM_BUYING_DISCOUNT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `ITEM_DISCOUNT_TYPE_ID` int(10) unsigned NOT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `NAME` varchar(50) NOT NULL,
  `VALUE` double NOT NULL,
  `ACTIVE` tinyint(1) DEFAULT '1',
  PRIMARY KEY (`ITEM_BUYING_DISCOUNT_ID`),
  KEY `FK_IBD_ITEM` (`ITEM_ID`),
  KEY `FK_IBD_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  KEY `FK_IBD_COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_IBD_COMPANY` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_IBD_DISCOUNT_TYPE` FOREIGN KEY (`ITEM_DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_IBD_ITEM` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ITEM_BUYING_DISCOUNT`
--

LOCK TABLES `ITEM_BUYING_DISCOUNT` WRITE;
/*!40000 ALTER TABLE `ITEM_BUYING_DISCOUNT` DISABLE KEYS */;
/*!40000 ALTER TABLE `ITEM_BUYING_DISCOUNT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ITEM_BUYING_PRICE`
--

DROP TABLE IF EXISTS `ITEM_BUYING_PRICE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ITEM_BUYING_PRICE` (
  `ITEM_BUYING_PRICE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `BUYING_PRICE` double NOT NULL,
  `ACTIVE` tinyint(1) DEFAULT '1',
  PRIMARY KEY (`ITEM_BUYING_PRICE_ID`),
  KEY `FK_IBP_ITEM` (`ITEM_ID`),
  KEY `FK_IBP_COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_IBP_COMPANY` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_IBP_ITEM` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ITEM_BUYING_PRICE`
--

LOCK TABLES `ITEM_BUYING_PRICE` WRITE;
/*!40000 ALTER TABLE `ITEM_BUYING_PRICE` DISABLE KEYS */;
/*!40000 ALTER TABLE `ITEM_BUYING_PRICE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ITEM_CATEGORY`
--

DROP TABLE IF EXISTS `ITEM_CATEGORY`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ITEM_CATEGORY` (
  `ITEM_CATEGORY_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(50) NOT NULL,
  `ACTIVE` tinyint(1) DEFAULT '1',
  PRIMARY KEY (`ITEM_CATEGORY_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ITEM_CATEGORY`
--

LOCK TABLES `ITEM_CATEGORY` WRITE;
/*!40000 ALTER TABLE `ITEM_CATEGORY` DISABLE KEYS */;
/*!40000 ALTER TABLE `ITEM_CATEGORY` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ITEM_CATEGORY_ACCOUNT_SETUP`
--

DROP TABLE IF EXISTS `ITEM_CATEGORY_ACCOUNT_SETUP`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ITEM_CATEGORY_ACCOUNT_SETUP` (
  `ITEM_CATEGORY_ACCOUNT_SETUP_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `ITEM_CATEGORY_ID` int(10) unsigned NOT NULL,
  `COST_ACCOUNT` int(10) unsigned NOT NULL,
  `INVENTORY_ACCOUNT` int(10) unsigned NOT NULL,
  `SALES_ACCOUNT` int(10) unsigned NOT NULL,
  `SALES_DISCOUNT_ACCOUNT` int(10) unsigned NOT NULL,
  `SALES_RETURN_ACCOUNT` int(10) unsigned NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`ITEM_CATEGORY_ACCOUNT_SETUP_ID`),
  KEY `FK_ICAS_COMPANY` (`COMPANY_ID`),
  KEY `FK_ICAS_COST_ACCOUNT` (`COST_ACCOUNT`),
  KEY `FK_ICAS_INVENTORY_ACCOUNT` (`INVENTORY_ACCOUNT`),
  KEY `FK_ICAS_SALES_ACCOUNT` (`SALES_ACCOUNT`),
  KEY `FK_ICAS_SALES_DISCOUNT_ACCOUNT` (`SALES_DISCOUNT_ACCOUNT`),
  KEY `FK_ICAS_SALES_RETURN_ACCOUNT` (`SALES_RETURN_ACCOUNT`),
  KEY `FK_ICAS_ITEM_CATEGORY_ID` (`ITEM_CATEGORY_ID`),
  KEY `FK_ICAS_CREATED_BY` (`CREATED_BY`),
  KEY `FK_ICAS_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_ICAS_COMPANY` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_ICAS_COST_ACCOUNT` FOREIGN KEY (`COST_ACCOUNT`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_ICAS_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_ICAS_INVENTORY_ACCOUNT` FOREIGN KEY (`INVENTORY_ACCOUNT`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_ICAS_ITEM_CATEGORY_ID` FOREIGN KEY (`ITEM_CATEGORY_ID`) REFERENCES `ITEM_CATEGORY` (`ITEM_CATEGORY_ID`),
  CONSTRAINT `FK_ICAS_SALES_ACCOUNT` FOREIGN KEY (`SALES_ACCOUNT`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_ICAS_SALES_DISCOUNT_ACCOUNT` FOREIGN KEY (`SALES_DISCOUNT_ACCOUNT`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_ICAS_SALES_RETURN_ACCOUNT` FOREIGN KEY (`SALES_RETURN_ACCOUNT`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_ICAS_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ITEM_CATEGORY_ACCOUNT_SETUP`
--

LOCK TABLES `ITEM_CATEGORY_ACCOUNT_SETUP` WRITE;
/*!40000 ALTER TABLE `ITEM_CATEGORY_ACCOUNT_SETUP` DISABLE KEYS */;
/*!40000 ALTER TABLE `ITEM_CATEGORY_ACCOUNT_SETUP` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ITEM_CONVERSION`
--

DROP TABLE IF EXISTS `ITEM_CONVERSION`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ITEM_CONVERSION` (
  `ITEM_CONVERSION_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `FORM_WORKFLOW_ID` int(10) unsigned DEFAULT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `WAREHOUSE_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `DATE` date NOT NULL,
  `ITEM_CONVERSION_NUMBER` int(20) NOT NULL,
  `REMARKS` varchar(100) DEFAULT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`ITEM_CONVERSION_ID`),
  KEY `FK_IC_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_IC_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_IC_WAREHOUSE_ID` (`WAREHOUSE_ID`),
  KEY `FK_IC_CREATED_BY` (`CREATED_BY`),
  KEY `FK_IC_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_IC_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_IC_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_IC_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_IC_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_IC_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_IC_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_IC_WAREHOUSE_ID` FOREIGN KEY (`WAREHOUSE_ID`) REFERENCES `WAREHOUSE` (`WAREHOUSE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ITEM_CONVERSION`
--

LOCK TABLES `ITEM_CONVERSION` WRITE;
/*!40000 ALTER TABLE `ITEM_CONVERSION` DISABLE KEYS */;
/*!40000 ALTER TABLE `ITEM_CONVERSION` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ITEM_CONVERSION_LINE`
--

DROP TABLE IF EXISTS `ITEM_CONVERSION_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ITEM_CONVERSION_LINE` (
  `ITEM_CONVERSION_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `ITEM_CONVERSION_ID` int(10) unsigned NOT NULL,
  `FROM_ITEM_ID` int(10) unsigned NOT NULL,
  `TO_ITEM_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `QUANTITY` double NOT NULL,
  `UNIT_COST` double NOT NULL DEFAULT '0',
  `CONVERTED_QUANTITY` double NOT NULL,
  `CONVERTED_UNIT_COST` double NOT NULL DEFAULT '0',
  PRIMARY KEY (`ITEM_CONVERSION_LINE_ID`),
  KEY `FK_ICL_ITEM_CONVERSION_ID` (`ITEM_CONVERSION_ID`),
  KEY `FK_ICL_FROM_ITEM_ID` (`FROM_ITEM_ID`),
  KEY `FK_ICL_TO_ITEM_ID` (`TO_ITEM_ID`),
  KEY `FK_ICL_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_ICL_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_ICL_FROM_ITEM_ID` FOREIGN KEY (`FROM_ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_ICL_ITEM_CONVERSION_ID` FOREIGN KEY (`ITEM_CONVERSION_ID`) REFERENCES `ITEM_CONVERSION` (`ITEM_CONVERSION_ID`),
  CONSTRAINT `FK_ICL_TO_ITEM_ID` FOREIGN KEY (`TO_ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ITEM_CONVERSION_LINE`
--

LOCK TABLES `ITEM_CONVERSION_LINE` WRITE;
/*!40000 ALTER TABLE `ITEM_CONVERSION_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `ITEM_CONVERSION_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ITEM_DISCOUNT`
--

DROP TABLE IF EXISTS `ITEM_DISCOUNT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ITEM_DISCOUNT` (
  `ITEM_DISCOUNT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `ITEM_DISCOUNT_TYPE_ID` int(10) unsigned NOT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `NAME` varchar(50) NOT NULL,
  `VALUE` double NOT NULL,
  `ACTIVE` tinyint(1) DEFAULT '1',
  PRIMARY KEY (`ITEM_DISCOUNT_ID`),
  KEY `FK_ID_ITEM` (`ITEM_ID`),
  KEY `FK_ID_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  KEY `FK_ID_COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_ID_COMPANY` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_ID_DISCOUNT_TYPE` FOREIGN KEY (`ITEM_DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_ID_ITEM` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ITEM_DISCOUNT`
--

LOCK TABLES `ITEM_DISCOUNT` WRITE;
/*!40000 ALTER TABLE `ITEM_DISCOUNT` DISABLE KEYS */;
/*!40000 ALTER TABLE `ITEM_DISCOUNT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ITEM_DISCOUNT_TYPE`
--

DROP TABLE IF EXISTS `ITEM_DISCOUNT_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ITEM_DISCOUNT_TYPE` (
  `ITEM_DISCOUNT_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(20) NOT NULL,
  PRIMARY KEY (`ITEM_DISCOUNT_TYPE_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ITEM_DISCOUNT_TYPE`
--

LOCK TABLES `ITEM_DISCOUNT_TYPE` WRITE;
/*!40000 ALTER TABLE `ITEM_DISCOUNT_TYPE` DISABLE KEYS */;
INSERT INTO `ITEM_DISCOUNT_TYPE` VALUES (1,'%'),(2,'Amt'),(3,'Qty');
/*!40000 ALTER TABLE `ITEM_DISCOUNT_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ITEM_SRP`
--

DROP TABLE IF EXISTS `ITEM_SRP`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ITEM_SRP` (
  `ITEM_SRP_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `DIVISION_ID` int(10) unsigned NOT NULL,
  `SRP` double NOT NULL,
  `ACTIVE` tinyint(1) DEFAULT '1',
  PRIMARY KEY (`ITEM_SRP_ID`),
  KEY `FK_SRP_ITEM` (`ITEM_ID`),
  KEY `FK_SRP_COMPANY` (`COMPANY_ID`),
  KEY `FK_SRP_DIVISION` (`DIVISION_ID`),
  CONSTRAINT `FK_SRP_COMPANY` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_SRP_DIVISION` FOREIGN KEY (`DIVISION_ID`) REFERENCES `DIVISION` (`DIVISION_ID`),
  CONSTRAINT `FK_SRP_ITEM` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ITEM_SRP`
--

LOCK TABLES `ITEM_SRP` WRITE;
/*!40000 ALTER TABLE `ITEM_SRP` DISABLE KEYS */;
/*!40000 ALTER TABLE `ITEM_SRP` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ITEM_VAT_TYPE`
--

DROP TABLE IF EXISTS `ITEM_VAT_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ITEM_VAT_TYPE` (
  `ITEM_VAT_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(20) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`ITEM_VAT_TYPE_ID`),
  KEY `FK_IVT_CREATED_BY` (`CREATED_BY`),
  KEY `FK_IVT_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_IVT_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_IVT_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ITEM_VAT_TYPE`
--

LOCK TABLES `ITEM_VAT_TYPE` WRITE;
/*!40000 ALTER TABLE `ITEM_VAT_TYPE` DISABLE KEYS */;
INSERT INTO `ITEM_VAT_TYPE` VALUES (1,'VAT',1,1,'2021-08-11 01:33:22',1,'2021-08-11 01:33:22'),(2,'NON-VAT',1,1,'2021-08-11 01:33:22',1,'2021-08-11 01:33:22'),(3,'ZERO-RATED',1,1,'2021-08-11 01:33:22',1,'2021-08-11 01:33:22'),(4,'EXEMPT',1,1,'2021-08-11 01:33:22',1,'2021-08-11 01:33:22');
/*!40000 ALTER TABLE `ITEM_VAT_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `JYEI_WITHDRAWAL_SLIP`
--

DROP TABLE IF EXISTS `JYEI_WITHDRAWAL_SLIP`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `JYEI_WITHDRAWAL_SLIP` (
  `JYEI_WITHDRAWAL_SLIP_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `WITHDRAWAL_SLIP_ID` int(10) unsigned NOT NULL,
  `REQUISITION_TYPE_ID` int(10) unsigned NOT NULL,
  `WITHDRAWN_BY` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`JYEI_WITHDRAWAL_SLIP_ID`),
  KEY `FK_JWS_WITHDRAWAL_SLIP_ID` (`WITHDRAWAL_SLIP_ID`),
  KEY `FK_JWS_REQUISITION_TYPE_ID` (`REQUISITION_TYPE_ID`),
  CONSTRAINT `FK_JWS_REQUISITION_TYPE_ID` FOREIGN KEY (`REQUISITION_TYPE_ID`) REFERENCES `REQUISITION_TYPE` (`REQUISITION_TYPE_ID`),
  CONSTRAINT `FK_JWS_WITHDRAWAL_SLIP_ID` FOREIGN KEY (`WITHDRAWAL_SLIP_ID`) REFERENCES `WITHDRAWAL_SLIP` (`WITHDRAWAL_SLIP_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `JYEI_WITHDRAWAL_SLIP`
--

LOCK TABLES `JYEI_WITHDRAWAL_SLIP` WRITE;
/*!40000 ALTER TABLE `JYEI_WITHDRAWAL_SLIP` DISABLE KEYS */;
/*!40000 ALTER TABLE `JYEI_WITHDRAWAL_SLIP` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `KEY_CODE`
--

DROP TABLE IF EXISTS `KEY_CODE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `KEY_CODE` (
  `KEY_CODE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `KEY_CODE` varchar(25) NOT NULL,
  `USER_ID` int(10) unsigned DEFAULT NULL,
  `IS_USED` tinyint(1) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`KEY_CODE_ID`),
  KEY `FK_KEY_CODE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_KEY_CODE_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_KEY_CODE_USER_ID` (`USER_ID`),
  CONSTRAINT `FK_KEY_CODE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_KEY_CODE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_KEY_CODE_USER_ID` FOREIGN KEY (`USER_ID`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `KEY_CODE`
--

LOCK TABLES `KEY_CODE` WRITE;
/*!40000 ALTER TABLE `KEY_CODE` DISABLE KEYS */;
/*!40000 ALTER TABLE `KEY_CODE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `LEAVE_DETAIL`
--

DROP TABLE IF EXISTS `LEAVE_DETAIL`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `LEAVE_DETAIL` (
  `LEAVE_DETAIL_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EMPLOYEE_REQUEST_ID` int(10) unsigned NOT NULL,
  `TYPE_OF_LEAVE_ID` int(10) unsigned NOT NULL,
  `DATE_FROM` date NOT NULL,
  `DATE_TO` date NOT NULL,
  `LEAVE_DAYS` double(4,2) NOT NULL,
  `REMARKS` text,
  `HALF_DAY` tinyint(1) unsigned DEFAULT '0',
  `PERIOD` int(11) unsigned DEFAULT '0',
  PRIMARY KEY (`LEAVE_DETAIL_ID`),
  KEY `FK_LD_EMPLOYEE_REQUEST_ID` (`EMPLOYEE_REQUEST_ID`),
  KEY `FK_LD_TYPE_OF_LEAVE_ID` (`TYPE_OF_LEAVE_ID`),
  CONSTRAINT `FK_LD_EMPLOYEE_REQUEST_ID` FOREIGN KEY (`EMPLOYEE_REQUEST_ID`) REFERENCES `EMPLOYEE_REQUEST` (`EMPLOYEE_REQUEST_ID`),
  CONSTRAINT `FK_LD_TYPE_OF_LEAVE_ID` FOREIGN KEY (`TYPE_OF_LEAVE_ID`) REFERENCES `TYPE_OF_LEAVE` (`TYPE_OF_LEAVE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `LEAVE_DETAIL`
--

LOCK TABLES `LEAVE_DETAIL` WRITE;
/*!40000 ALTER TABLE `LEAVE_DETAIL` DISABLE KEYS */;
/*!40000 ALTER TABLE `LEAVE_DETAIL` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `LOCATION`
--

DROP TABLE IF EXISTS `LOCATION`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `LOCATION` (
  `LOCATION_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(25) NOT NULL,
  `ACTIVE` tinyint(1) DEFAULT '1',
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`LOCATION_ID`),
  KEY `FK_LOCATION_CREATED_BY` (`CREATED_BY`),
  KEY `FK_LOCATION_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_LOCATION_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_LOCATION_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `LOCATION`
--

LOCK TABLES `LOCATION` WRITE;
/*!40000 ALTER TABLE `LOCATION` DISABLE KEYS */;
/*!40000 ALTER TABLE `LOCATION` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `MODULE_CODE`
--

DROP TABLE IF EXISTS `MODULE_CODE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `MODULE_CODE` (
  `MODULE_CODE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `PRODUCT_CODE_ID` int(10) unsigned NOT NULL DEFAULT '1',
  `DESCRIPTION` varchar(250) NOT NULL,
  `CODE` int(10) unsigned NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`MODULE_CODE_ID`),
  KEY `FK_MODULE_CODE_PRODUCT_CODE_ID` (`PRODUCT_CODE_ID`),
  CONSTRAINT `FK_MODULE_CODE_PRODUCT_CODE_ID` FOREIGN KEY (`PRODUCT_CODE_ID`) REFERENCES `PRODUCT_CODE` (`PRODUCT_CODE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `MODULE_CODE`
--

LOCK TABLES `MODULE_CODE` WRITE;
/*!40000 ALTER TABLE `MODULE_CODE` DISABLE KEYS */;
/*!40000 ALTER TABLE `MODULE_CODE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `MONTHLY_SHIFT_SCHEDULE`
--

DROP TABLE IF EXISTS `MONTHLY_SHIFT_SCHEDULE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `MONTHLY_SHIFT_SCHEDULE` (
  `MONTHLY_SHIFT_SCHEDULE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `PAYROLL_TIME_PERIOD_ID` int(10) unsigned NOT NULL,
  `PAYROLL_TIME_PERIOD_SCHEDULE_ID` int(2) unsigned NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL DEFAULT '1',
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`MONTHLY_SHIFT_SCHEDULE_ID`),
  KEY `FK_MONTHLY_SHIFT_SCHEDULE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_MONTHLY_SHIFT_SCHEDULE_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_MONTHLY_SHIFT_SCHEDULE_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_MONTHLY_SHIFT_SCHEDULE_PAYROLL_TIME_PERIOD_ID` (`PAYROLL_TIME_PERIOD_ID`),
  KEY `FK_MONTHLY_SHIFT_SCHEDULE_PAYROLL_TIME_PERIOD_SCHEDULE_ID` (`PAYROLL_TIME_PERIOD_SCHEDULE_ID`),
  CONSTRAINT `FK_MONTHLY_SHIFT_SCHEDULE_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_MONTHLY_SHIFT_SCHEDULE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_MONTHLY_SHIFT_SCHEDULE_PAYROLL_TIME_PERIOD_ID` FOREIGN KEY (`PAYROLL_TIME_PERIOD_ID`) REFERENCES `PAYROLL_TIME_PERIOD` (`PAYROLL_TIME_PERIOD_ID`),
  CONSTRAINT `FK_MONTHLY_SHIFT_SCHEDULE_PAYROLL_TIME_PERIOD_SCHEDULE_ID` FOREIGN KEY (`PAYROLL_TIME_PERIOD_SCHEDULE_ID`) REFERENCES `PAYROLL_TIME_PERIOD_SCHEDULE` (`PAYROLL_TIME_PERIOD_SCHEDULE_ID`),
  CONSTRAINT `FK_MONTHLY_SHIFT_SCHEDULE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `MONTHLY_SHIFT_SCHEDULE`
--

LOCK TABLES `MONTHLY_SHIFT_SCHEDULE` WRITE;
/*!40000 ALTER TABLE `MONTHLY_SHIFT_SCHEDULE` DISABLE KEYS */;
/*!40000 ALTER TABLE `MONTHLY_SHIFT_SCHEDULE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `MONTHLY_SHIFT_SCHEDULE_LINE`
--

DROP TABLE IF EXISTS `MONTHLY_SHIFT_SCHEDULE_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `MONTHLY_SHIFT_SCHEDULE_LINE` (
  `MONTHLY_SHIFT_SCHEDULE_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `MONTHLY_SHIFT_SCHEDULE_ID` int(10) unsigned NOT NULL,
  `EMPLOYEE_ID` int(10) unsigned NOT NULL,
  `EMPLOYEE_SHIFT_ID` int(10) unsigned NOT NULL,
  PRIMARY KEY (`MONTHLY_SHIFT_SCHEDULE_LINE_ID`),
  KEY `FK_MSSL_MONTHLY_SHIFT_SCHEDULE_ID` (`MONTHLY_SHIFT_SCHEDULE_ID`),
  KEY `FK_MSSL_EMPLOYEE_ID` (`EMPLOYEE_ID`),
  KEY `FK_MSSL_EMPLOYEE_SHIFT_ID` (`EMPLOYEE_SHIFT_ID`),
  CONSTRAINT `FK_MSSL_EMPLOYEE_ID` FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES `EMPLOYEE` (`EMPLOYEE_ID`),
  CONSTRAINT `FK_MSSL_EMPLOYEE_SHIFT_ID` FOREIGN KEY (`EMPLOYEE_SHIFT_ID`) REFERENCES `EMPLOYEE_SHIFT` (`EMPLOYEE_SHIFT_ID`),
  CONSTRAINT `FK_MSSL_MONTHLY_SHIFT_SCHEDULE_ID` FOREIGN KEY (`MONTHLY_SHIFT_SCHEDULE_ID`) REFERENCES `MONTHLY_SHIFT_SCHEDULE` (`MONTHLY_SHIFT_SCHEDULE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `MONTHLY_SHIFT_SCHEDULE_LINE`
--

LOCK TABLES `MONTHLY_SHIFT_SCHEDULE_LINE` WRITE;
/*!40000 ALTER TABLE `MONTHLY_SHIFT_SCHEDULE_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `MONTHLY_SHIFT_SCHEDULE_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `NORMAL_BALANCE`
--

DROP TABLE IF EXISTS `NORMAL_BALANCE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `NORMAL_BALANCE` (
  `NORMAL_BALANCE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(15) NOT NULL,
  PRIMARY KEY (`NORMAL_BALANCE_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `NORMAL_BALANCE`
--

LOCK TABLES `NORMAL_BALANCE` WRITE;
/*!40000 ALTER TABLE `NORMAL_BALANCE` DISABLE KEYS */;
INSERT INTO `NORMAL_BALANCE` VALUES (1,'Debit'),(2,'Credit');
/*!40000 ALTER TABLE `NORMAL_BALANCE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `OBJECT_TO_OBJECT`
--

DROP TABLE IF EXISTS `OBJECT_TO_OBJECT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `OBJECT_TO_OBJECT` (
  `OBJECT_TO_OBJECT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `FROM_OBJECT_ID` int(10) unsigned NOT NULL,
  `TO_OBJECT_ID` int(10) unsigned NOT NULL,
  `OR_TYPE_ID` int(10) unsigned NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`OBJECT_TO_OBJECT_ID`),
  KEY `FK_OBJECT_TO_OBJECT_FROM_OBJECT_ID` (`FROM_OBJECT_ID`),
  KEY `FK_OBJECT_TO_OBJECT_TO_OBJECT_ID` (`TO_OBJECT_ID`),
  KEY `FK_OBJECT_TO_OBJECT_OR_TYPE_ID` (`OR_TYPE_ID`),
  KEY `FK_OBJECT_TO_OBJECT_CREATED_BY` (`CREATED_BY`),
  CONSTRAINT `FK_OBJECT_TO_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_OBJECT_TO_OBJECT_FROM_OBJECT_ID` FOREIGN KEY (`FROM_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_OBJECT_TO_OBJECT_OR_TYPE_ID` FOREIGN KEY (`OR_TYPE_ID`) REFERENCES `OR_TYPE` (`OR_TYPE_ID`),
  CONSTRAINT `FK_OBJECT_TO_OBJECT_TO_OBJECT_ID` FOREIGN KEY (`TO_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `OBJECT_TO_OBJECT`
--

LOCK TABLES `OBJECT_TO_OBJECT` WRITE;
/*!40000 ALTER TABLE `OBJECT_TO_OBJECT` DISABLE KEYS */;
/*!40000 ALTER TABLE `OBJECT_TO_OBJECT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `OBJECT_TYPE`
--

DROP TABLE IF EXISTS `OBJECT_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `OBJECT_TYPE` (
  `OBJECT_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(50) NOT NULL,
  `REFERENCE_TABLE` varchar(50) NOT NULL,
  `SERVICE_CLASS` varchar(100) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`OBJECT_TYPE_ID`),
  KEY `FK_OBJECT_TYPE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_OBJECT_TYPE_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_OBJECT_TYPE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_OBJECT_TYPE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=24007 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `OBJECT_TYPE`
--

LOCK TABLES `OBJECT_TYPE` WRITE;
/*!40000 ALTER TABLE `OBJECT_TYPE` DISABLE KEYS */;
INSERT INTO `OBJECT_TYPE` VALUES (1,'AP_INVOICE','AP_INVOICE','eulap.eb.service.APInvoiceService',1,1,'2021-08-11 01:33:19',1,'2021-08-11 01:33:19'),(2,'AP INVOICE LINE','AP_INVOICE_LINE','eulap.eb.service.APInvoiceService',1,1,'2021-08-11 01:33:19',1,'2021-08-11 01:33:19'),(3,'R_RECEIVING_REPORT_RM_ITEM','R_RECEIVING_REPORT_RM_ITEM','eulap.eb.service.RrRawMaterialService',1,1,'2021-08-11 01:33:54',1,'2021-08-11 01:33:54'),(4,'PROCESSING_REPORT','PROCESSING_REPORT','eulap.eb.service.processing.ProcessingReportService',1,1,'2021-08-11 01:33:54',1,'2021-08-11 01:33:54'),(5,'PR_RAW_MATERIALS_ITEM','PR_RAW_MATERIALS_ITEM','eulap.eb.service.processing.ProcessingReportService',1,1,'2021-08-11 01:33:54',1,'2021-08-11 01:33:54'),(6,'PR_OTHER_MATERIALS_ITEM','PR_OTHER_MATERIALS_ITEM','eulap.eb.service.processing.ProcessingReportService',1,1,'2021-08-11 01:33:54',1,'2021-08-11 01:33:54'),(7,'PR_OTHER_CHARGE','PR_OTHER_CHARGE','eulap.eb.service.processing.ProcessingReportService',1,1,'2021-08-11 01:33:54',1,'2021-08-11 01:33:54'),(8,'PR_MAIN_PRODUCT','PR_MAIN_PRODUCT','eulap.eb.service.processing.ProcessingReportService',1,1,'2021-08-11 01:33:54',1,'2021-08-11 01:33:54'),(9,'PR_BY_PRODUCT','PR_BY_PRODUCT','eulap.eb.service.processing.ProcessingReportService',1,1,'2021-08-11 01:33:54',1,'2021-08-11 01:33:54'),(10,'STOCK_ADJUSTMENT','STOCK_ADJUSTMENT','eulap.eb.service.StockAdjustmentService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(11,'STOCK_ADJUSTMENT_OUT','STOCK_ADJUSTMENT_ITEM','eulap.eb.service.StockAdjustmentService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(12,'CASH_SALE_ITEM','CASH_SALE_ITEM','eulap.eb.service.CashSaleService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(13,'CASH_SALE','CASH_SALE','eulap.eb.service.CashSaleService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(14,'AR_TRANSACTION','AR_TRANSACTION','eulap.eb.service.ArTransactionService',1,1,'2021-08-11 01:33:19',1,'2021-08-11 01:33:19'),(15,'ACCOUNT_SALE_ITEM','ACCOUNT_SALE_ITEM','eulap.eb.service.ArTransactionService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(16,'STOCK_ADJUSTMENT_IN','STOCK_ADJUSTMENT_ITEM','eulap.eb.service.StockAdjustmentService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(17,'CASH_SALE_AR_LINE','CASH_SALE_AR_LINE','eulap.eb.service.CashSaleService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(18,'AR_LINE','AR_LINE','eulap.eb.service.ArTransactionService',1,1,'2021-08-11 01:33:19',1,'2021-08-11 01:33:19'),(19,'CASH_SALE_RETURN','CASH_SALE_RETURN','eulap.eb.service.CashSaleReturnService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(20,'CASH_SALE_RETURN_ITEM','CASH_SALE_RETURN_ITEM','eulap.eb.service.CashSaleReturnService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(21,'CASH_SALE_EXCHANGE_ITEM','CASH_SALE_RETURN_ITEM','eulap.eb.service.CashSaleReturnService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(22,'ACCOUNT_SALE_RETURN','AR_TRANSACTION','eulap.eb.service.AccountSalesService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(23,'ACCOUNT_SALE_RETURN_ITEM','ACCOUNT_SALE_ITEM','eulap.eb.service.AccountSalesService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(24,'ACCOUNT_SALE_EXCHANGE_ITEM','ACCOUNT_SALE_ITEM','eulap.eb.service.AccountSalesService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(25,'R_TRANSFER_RECEIPT','R_TRANSFER_RECEIPT','eulap.eb.service.RTransferReceiptService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(26,'R_TRANSFER_RECEIPT_ITEM','R_TRANSFER_RECEIPT_ITEM','eulap.eb.service.RTransferReceiptService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(27,'PR_MILLING_ORDER','PROCESSING_REPORT','eulap.eb.service.processing.ProcessingReportService',1,1,'2021-08-11 01:33:54',1,'2021-08-11 01:33:54'),(28,'PR_PASS_IN','PROCESSING_REPORT','eulap.eb.service.processing.ProcessingReportService',1,1,'2021-08-11 01:33:54',1,'2021-08-11 01:33:54'),(29,'PR_PASS_OUT','PROCESSING_REPORT','eulap.eb.service.processing.ProcessingReportService',1,1,'2021-08-11 01:33:54',1,'2021-08-11 01:33:54'),(30,'REFERENCE_DOCUMENT','REFERENCE_DOCUMENT','eulap.eb.service.ReferenceDocumentService',1,1,'2021-08-11 01:33:04',1,'2021-08-11 01:33:04'),(31,'PAYROLL','PAYROLL','eulap.eb.service.payroll.PayrollService',1,1,'2021-08-11 01:34:09',1,'2021-08-11 01:34:09'),(32,'CUSTOMER_ADVANCE_PAYMENT','CUSTOMER_ADVANCE_PAYMENT','eulap.eb.service.CustomerAdvancePaymentService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(33,'CUSTOMER_ADVANCE_PAYMENT_ITEM','CUSTOMER_ADVANCE_PAYMENT_ITEM','eulap.eb.service.CustomerAdvancePaymentService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(34,'CAP_AR_LINE','CAP_AR_LINE','eulap.eb.service.CustomerAdvancePaymentService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(38,'R_PURCHASE_ORDER','R_PURCHASE_ORDER','eulap.eb.service.RPurchaseOrderService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(39,'R_PURCHASE_ORDER_ITEM','R_PURCHASE_ORDER_ITEM','eulap.eb.service.RPurchaseOrderService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(40,'R_RECEIVING_REPORT_ITEM','R_RECEIVING_REPORT_ITEM','eulap.eb.service.RReceivingReportService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(41,'ITEM_CONVERSION','ITEM_CONVERSION','eulap.eb.service.ItemConversionService',1,1,'2021-08-11 01:33:54',1,'2021-08-11 01:33:54'),(42,'ITEM_CONVERSION_LINE','ITEM_CONVERSION_LINE','eulap.eb.service.ItemConversionService',1,1,'2021-08-11 01:33:54',1,'2021-08-11 01:33:54'),(43,'SALES_ORDER','SALES_ORDER','eulap.eb.service.SalesOrderService',1,1,'2021-08-11 01:33:54',1,'2021-08-11 01:33:54'),(44,'CSI_RAW_MATERIAL','CSI_RAW_MATERIAL','eulap.eb.service.CashSaleProcessingService',1,1,'2021-08-11 01:33:54',1,'2021-08-11 01:33:54'),(45,'CSI_FINISHED_PRODUCT','CSI_FINISHED_PRODUCT','eulap.eb.service.CashSaleProcessingService',1,1,'2021-08-11 01:33:54',1,'2021-08-11 01:33:54'),(46,'WIP_SPECIAL_ORDER','WIP_SPECIAL_ORDER','eulap.eb.service.WipSpecialOrderService',1,1,'2021-08-11 01:33:54',1,'2021-08-11 01:33:54'),(47,'WIPSO_MATERIAL','WIPSO_MATERIAL','eulap.eb.service.WipSpecialOrderService',1,1,'2021-08-11 01:33:54',1,'2021-08-11 01:33:54'),(48,'WIPSO_FINISHED_PRODUCT','WIPSO_FINISHED_PRODUCT','eulap.eb.service.WipSpecialOrderService',1,1,'2021-08-11 01:33:54',1,'2021-08-11 01:33:54'),(49,'WIPSO_OTHER_CHARGE','WIPSO_OTHER_CHARGE','eulap.eb.service.WipSpecialOrderService',1,1,'2021-08-11 01:33:54',1,'2021-08-11 01:33:54'),(53,'PAID_IN_ADVANCE_DELIVERY','CAP_DELIVERY','eulap.eb.service.CAPDeliveryService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(54,'PAID_IN_ADVANCE_DELIVERY_ITEM','CAP_DELIVERY_ITEM','eulap.eb.service.CAPDeliveryService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(55,'PAID_IN_ADVANCE_DELIVERY_AR_LINE','CAP_DELIVERY_AR_LINE','eulap.eb.service.CAPDeliveryService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(56,'WIP_BAKING','PROCESSING_REPORT','eulap.eb.service.processing.ProductionReportService',1,1,'2021-08-11 01:33:54',1,'2021-08-11 01:33:54'),(57,'PRODUCTION_REPORT','PROCESSING_REPORT','eulap.eb.service.processing.ProductionReportService',1,1,'2021-08-11 01:33:54',1,'2021-08-11 01:33:54'),(58,'R_RETURN_TO_SUPPLIER_ITEM','R_RETURN_TO_SUPPLIER_ITEM','eulap.eb.service.RReturnToSupplierService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(59,'REPACKING','REPACKING','eulap.eb.service.RepackingService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(60,'REPACKING_ITEM','REPACKING_ITEM','eulap.eb.service.RepackingService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(66,'REQUEST_FOR_LEAVE','REQUEST_FOR_LEAVE','eulap.eb.service.EmployeeRequestService',1,1,'2021-08-11 01:34:09',1,'2021-08-11 01:34:09'),(67,'EMPLOYEE_LEAVE_CREDIT','EMPLOYEE_LEAVE_CREDIT','eulap.eb.service.EmployeeLeaveCreditService',1,1,'2021-08-11 01:34:09',1,'2021-08-11 01:34:09'),(68,'LEAVES','LEAVES','eulap.eb.service.EmployeeLeaveCreditService',1,1,'2021-08-11 01:34:09',1,'2021-08-11 01:34:09'),(69,'FORM_DEDUCTION','FORM_DEDUCTION','eulap.eb.service.FormDeductionService',1,1,'2021-08-11 01:34:09',1,'2021-08-11 01:34:09'),(70,'FORM_DEDUCTION_LINE','FORM_DEDUCTION_LINE','eulap.eb.service.FormDeductionService',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(71,'REQUEST_FOR_OVERTIME','REQUEST_FOR_OVERTIME','eulap.eb.service.EmployeeRequestService',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(72,'PERSONNEL_ACTION_NOTICE','PERSONNEL_ACTION_NOTICE','eulap.eb.service.PersonnelActionNoticeService',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(73,'TIME_SHEET','TIME_SHEET','eulap.eb.service.TimeSheetService',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(80,'USER','USER','eulap.eb.service.UserService',1,1,'2021-08-11 01:33:04',1,'2021-08-11 01:33:04'),(81,'COMPANY','COMPANY','eulap.eb.service.CompanyService',1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(82,'FLEET_TYPE','FLEET_TYPE','eulap.eb.service.FleetTypeService',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(83,'FLEET_PROFILE','FLEET_PROFILE','eulap.eb.service.FleetProfileService',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(85,'EMPLOYEE_EMERGENCY_CONTACT','EMPLOYEE_EMERGENCY_CONTACT','eulap.eb.service.EmployeeProfileService',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(86,'EMPLOYEE_LICENSE_CERTIFICATE','EMPLOYEE_LICENSE_CERTIFICATE','eulap.eb.service.EmployeeProfileService',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(87,'EMPLOYEE_SEMINAR_ATTENDED','EMPLOYEE_SEMINAR_ATTENDED','eulap.eb.service.EmployeeProfileService',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(89,'FLEET_DRIVER','FLEET_DRIVER','eulap.eb.service.FleetDriverService',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(90,'FLEET_INCIDENT','FLEET_INCIDENT','eulap.eb.service.FleetIncidentService',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(91,'FLEET_INSURANCE_PERMIT_RENEWAL','FLEET_INSURANCE_PERMIT_RENEWAL','eulap.eb.service.FleetTypeService',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(93,'FLEET_CAPTAIN_MDM','FLEET_CAPTAIN_MDM','eulap.eb.service.FleetCaptainMdmService',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(94,'FLEET_MANNING_REQUIREMENT','FLEET_MANNING_REQUIREMENT','eulap.eb.service.FleetManningRequirementService',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(95,'FLEET_PMS','FLEET_PMS','eulap.eb.service.FleetPmsService',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(96,'WITHDRAWAL_SLIP','WITHDRAWAL_SLIP','eulap.eb.service.JyeiWithdrawalSlipService',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(97,'WITHDRAWAL_SLIP_ITEM','WITHDRAWAL_SLIP_ITEM','eulap.eb.service.WithdrawalSlipService',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(98,'WAREHOUSE','WAREHOUSE','eulap.eb.service.WarehouseService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(99,'AR_CUSTOMER','AR_CUSTOMER','eulap.eb.service.ArCustomerService',1,1,'2021-08-11 01:33:19',1,'2021-08-11 01:33:19'),(100,'ACCOUNT','ACCOUNT','eulap.eb.service.AccountService',1,1,'2021-08-11 01:33:19',1,'2021-08-11 01:33:19'),(101,'DIVISION','DIVISION','eulap.eb.service.DivisionService',1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(102,'EMPLOYEE_DEDUCTION','EMPLOYEE_DEDUCTION','eulap.eb.service.PayrollService',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(103,'AR_CUSTOMER_ACCOUNT','AR_CUSTOMER_ACCOUNT','eulap.eb.service.ArCustomerAcctService',1,1,'2021-08-11 01:33:19',1,'2021-08-11 01:33:19'),(104,'FLEET_TOOL_CONDITION','FLEET_TOOL_CONDITION','eulap.eb.service.FleetToolService',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(105,'SERIAL_ITEM','SERIAL_ITEM','eulap.eb.service.SerialItemService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(110,'DELIVERY_RECEIPT','DELIVERY_RECEIPT','eulap.eb.service.DeliveryReceiptService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(111,'DELIVERY_RECEIPT_ITEM','DELIVERY_RECEIPT_ITEM','eulap.eb.service.DeliveryReceiptService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(113,'EMPLOYEE_NATIONAL_COMPETENCY','EMPLOYEE_NATIONAL_COMPETENCY','eulap.eb.service.EmployeeProfileService',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(115,'FLEET_DRY_DOCK','FLEET_DRY_DOCK','eulap.eb.service.FleetDryDockService',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(116,'FLEET_VOYAGE','FLEET_VOYAGE','eulap.eb.service.FleetVoyageService',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(119,'AR_RECEIPT','AR_RECEIPT','eulap.eb.service.ArReceiptService',1,1,'2021-08-11 01:33:19',1,'2021-08-11 01:33:19'),(126,'EMPLOYEE_DOCUMENT','EMPLOYEE_DOCUMENT','eulap.eb.service.EmployeeDocumentService',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(127,'ACCOUNT_SALES_ORDER','AR_TRANSACTION','eulap.eb.service.AccountSalesService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(128,'SALARY_TYPE','SALARY_TYPE','eulap.eb.service.SalaryTypeService',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(129,'AP_PAYMENT','AP_PAYMENT','eulap.eb.service.ApPaymentService',1,1,'2021-08-11 01:33:19',1,'2021-08-11 01:33:19'),(130,'GeneralLedger','GENERAL_LEDGER','eulap.eb.service.GeneralLedgerService',1,1,'2021-08-11 01:33:19',1,'2021-08-11 01:33:19'),(131,'AR_MISCELLANEOUS','AR_MISCELLANEOUS','eulap.eb.service.ArMiscellaneousService',1,1,'2021-08-11 01:33:19',1,'2021-08-11 01:33:19'),(132,'WT_ACCOUNT_SETTING','WT_ACCOUNT_SETTING','eulap.eb.service.WTAccountSettingService',1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20'),(133,'FLEET_CATEGORY','FLEET_CATEGORY','eulap.eb.service.FleetTypeService',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(134,'STOCK_ADJUSTMENT_ITEM','STOCK_ADJUSTMENT_ITEM','eulap.eb.service.StockAdjustmentService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(135,'ITEM_BAG_QUANTITY','ITEM_BAG_QUANTITY','N/A',1,1,'2021-08-11 01:33:54',1,'2021-08-11 01:33:54'),(136,'RRI_BAG_QUANTITY','RRI_BAG_QUANTITY','eulap.eb.service.RrRawMaterialService',1,1,'2021-08-11 01:33:54',1,'2021-08-11 01:33:54'),(137,'RRI_BAG_DISCOUNT','RRI_BAG_DISCOUNT','eulap.eb.service.RrRawMaterialService',1,1,'2021-08-11 01:33:54',1,'2021-08-11 01:33:54'),(138,'DIRECT_PAYMENT','DIRECT_PAYMENT','eulap.eb.service.DirectPaymentService',1,1,'2021-08-11 01:34:20',1,'2021-08-11 01:34:20'),(139,'EMPLOYEE_PROFILE','EMPLOYEE_PROFILE','eulap.eb.service.EmployeeProfileService',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(140,'GL_ENTRY','GL_ENTRY','eulap.eb.service.GeneralLedgerService',1,1,'2021-08-11 01:33:19',1,'2021-08-11 01:33:19'),(141,'AR_MISCELLANEOUS_LINE','AR_MISCELLANEOUS_LINE','eulap.eb.service.ArMiscellaneousService',1,1,'2021-08-11 01:33:19',1,'2021-08-11 01:33:19'),(142,'AP_PAYMENT_INVOICE','AP_PAYMENT_INVOICE','eulap.eb.service.ApPaymentService',1,1,'2021-08-11 01:33:19',1,'2021-08-11 01:33:19'),(143,'AC_AR_LINE','AC_AR_LINE','eulap.eb.service.ArReceiptService',1,1,'2021-08-11 01:33:19',1,'2021-08-11 01:33:19'),(144,'CASH_SALE_RETURN_AR_LINE','CASH_SALE_RETURN_AR_LINE','eulap.eb.service.CashSaleService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(145,'CASH_SALE_RETURN_IS','CASH_SALE_RETURN','eulap.eb.service.CashSaleReturnIsService',1,1,'2021-08-11 01:33:54',1,'2021-08-11 01:33:54'),(146,'CUSTOMER_ADVANCE_PAYMENT_IS','CUSTOMER_ADVANCE_PAYMENT','eulap.eb.service.CustomerAdvancePaymentService',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(147,'CUSTOMER_ADVANCE_PAYMENT_WIP_SO','CUSTOMER_ADVANCE_PAYMENT','eulap.eb.service.CustomerAdvancePaymentService',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(148,'R_TRANSFER_RECEIPT_IS','R_TRANSFER_RECEIPT','eulap.eb.service.TransferReceiptISService',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(149,'CASH_SALE_IS','CASH_SALE','eulap.eb.service.CashSaleISService',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(150,'PAID_IN_ADVANCE_DELIVERY_IS','CAP_DELIVERY','eulap.eb.service.CAPDeliveryService',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(151,'PAID_IN_ADVANCE_DELIVERY_WIPSO','CAP_DELIVERY','eulap.eb.service.CAPDeliveryService',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(152,'PAYROLL_EMPLOYEE_TIMESHEET','PAYROLL_EMPLOYEE_TIMESHEET','eulap.eb.service.TimeSheetService',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(153,'PAYROLL_EMPLOYEE_SALARY','PAYROLL_EMPLOYEE_SALARY','eulap.eb.service.PayrollService',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(154,'ACCOUNT_SALE_IS','AR_TRANSACTION','eulap.eb.service.AccountSaleISService',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(155,'ACCOUNT_SALE_RETURN_IS','AR_TRANSACTION','eulap.eb.service.AccountSaleISService',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(156,'AP_LINE','AP_LINE','eulap.eb.service.APInvoiceService',1,1,'2021-08-11 01:33:19',1,'2021-08-11 01:33:19'),(157,'ACCOUNT_SALE_RETURN_ITEM_IS','ACCOUNT_SALE_ITEM','eulap.eb.service.AccountSaleISService',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(158,'ACCOUNT_SALE_EXCHANGE_ITEM_IS','ACCOUNT_SALE_ITEM','eulap.eb.service.AccountSaleISService',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(159,'ACCOUNT_SALE_ITEM_IS','ACCOUNT_SALE_ITEM','eulap.eb.service.AccountSaleISService',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(160,'RECEIVING_REPORT','AP_INVOICE','eulap.eb.service.RReceivingReportService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(161,'RETURN_TO_SUPPLIER','AP_INVOICE','eulap.eb.service.RReturnToSupplierService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(162,'RR_RAW_MATERIAL','AP_INVOICE','eulap.eb.service.RrRawMaterialService',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(163,'RR_NET_WEIGHT','AP_INVOICE','eulap.eb.service.RrRawMaterialService',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(164,'REPACKING_RAW_MATERIAL','REPACKING_RAW_MATERIAL','eulap.eb.service.RpItemConversionService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(165,'REPACKING_FINISHED_GOOD','REPACKING_FINISHED_GOOD','eulap.eb.service.RpItemConversionService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(166,'ACCOUNT_SALES','ACCOUNT_SALES','eulap.eb.service.AccountSalePoService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(167,'ACCOUNT_SALES_PO_ITEM','ACCOUNT_SALES_PO_ITEM','eulap.eb.service.AccountSalePoService',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(3003,'REQUISITION_FORM_ITEM','REQUISITION_FORM_ITEM','eulap.eb.service.RequisitionFormService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(3026,'REQUISITION_FORM','REQUISITION_FORM','eulap.eb.service.RequisitionFormService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(3036,'PURCHASE_REQUISITION_ITEM','PURCHASE_REQUISITION_ITEM','eulap.eb.service.RequisitionFormService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(7000,'DAILY_SHIFT_SCHEDULE','DAILY_SHIFT_SCHEDULE','',1,1,'2021-08-11 01:34:12',1,'2021-08-11 01:34:12'),(12000,'SALES_QUOTATION','SALES_QUOTATION','eulap.eb.service.SalesQuotationService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12001,'SALES_QUOTATION_ITEM','SALES_QUOTATION_ITEM','eulap.eb.service.SalesQuotationService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12002,'SALES_QUOTATION_LINE','SALES_QUOTATION_LINE','eulap.eb.service.SalesQuotationService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12003,'SALES_ORDER','SALES_ORDER','eulap.eb.service.SalesOrderService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12004,'SALES_ORDER_ITEM','SALES_ORDER_ITEM','eulap.eb.service.SalesOrderService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12005,'SALES_ORDER_LINE','SALES_ORDER_LINE','eulap.eb.service.SalesOrderService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12006,'AUTHORITY_TO_WITHDRAW','AUTHORITY_TO_WITHDRAW','eulap.eb.service.AuthorityToWithdrawService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12007,'AUTHORITY_TO_WITHDRAW_ITEM','AUTHORITY_TO_WITHDRAW_ITEM','eulap.eb.service.AuthorityToWithdrawService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12008,'DELIVERY_RECEIPT_LINE','DELIVERY_RECEIPT_LINE','eulap.eb.service.DeliveryReceiptService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12009,'AR_INVOICE','AR_INVOICE','eulap.eb.service.ArInvoiceService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12010,'AR_INVOICE_ITEM','AR_INVOICE_ITEM','eulap.eb.service.ArInvoiceService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12011,'AR_INVOICE_LINE','AR_INVOICE_LINE','eulap.eb.service.ArInvoiceService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12012,'AR_RECEIPT_ADVANCE_PAYMENT','AR_RECEIPT_ADVANCE_PAYMENT','eulap.eb.service.ArReceiptService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12013,'WORK_ORDER','WORK_ORDER','eulap.eb.service.WorkOrderService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12014,'WORK_ORDER_INSTRUCTION','WORK_ORDER_INSTRUCTION','eulap.eb.service.WorkOrderService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12015,'WORK_ORDER_ITEM','WORK_ORDER_ITEM','eulap.eb.service.WorkOrderService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12016,'WORK_ORDER_LINE','WORK_ORDER_LINE','eulap.eb.service.WorkOrderService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12017,'WAYBILL_LINE','WAYBILL_LINE','eulap.eb.service.DeliveryReceiptService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12018,'SALES_QUOTATION_TRUCKING_LINE','SALES_QUOTATION_TRUCKING_LINE','eulap.eb.service.SalesQuotationService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12019,'SALES_QUOTATION_EQUIPMENT_LINE','SALES_QUOTATION_EQUIPMENT_LINE','eulap.eb.service.SalesQuotationService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12020,'SALES_ORDER_TRUCKING_LINE','SALES_ORDER_TRUCKING_LINE','eulap.eb.service.SalesOrderService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12021,'SALES_ORDER_EQUIPMENT_LINE','SALES_ORDER_EQUIPMENT_LINE','eulap.eb.service.SalesOrderService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12022,'EQUIPMENT_UTILIZATION_LINE','EQUIPMENT_UTILIZATION_LINE','eulap.eb.service.DeliveryReceiptService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12023,'AR_INVOICE_TRUCKING_LINE','AR_INVOICE_TRUCKING_LINE','eulap.eb.service.ArInvoiceService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12024,'AUTHORITY_TO_WITHDRAW_LINE','AUTHORITY_TO_WITHDRAW_LINE','eulap.eb.service.AuthorityToWithdrawService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12025,'AP_INVOICE_ITEM','AP_INVOICE','eulap.eb.service.ApInvoiceItemService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12026,'AP_INVOICE_SERVICE','AP_INVOICE','eulap.eb.service.ApInvoiceItemService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12027,'AP_INVOICE_ITEM_LINE','AP_INVOICE_ITEM','eulap.eb.service.ApInvoiceItemService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12028,'WORK_ORDER_PURCHASED_ITEM','WORK_ORDER_PURCHASED_ITEM','eulap.eb.service.WorkOrderService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12029,'AR_INVOICE_EQUIPMENT_LINE','AR_INVOICE_EQUIPMENT_LINE','eulap.eb.service.ArInvoiceService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(21000,'PURCHASE_ORDER_LINE','PURCHASE_ORDER_LINE','eulap.eb.service.RPurchaseOrderService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(24000,'SUPPLIER_ADVANCE_PAYMENT','SUPPLIER_ADVANCE_PAYMENT','eulap.eb.service.SupplierAdvPaymentService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(24001,'SUPPLIER_ADVANCE_PAYMENT_LINE','SUPPLIER_ADVANCE_PAYMENT_LINE','eulap.eb.service.SupplierAdvPaymentService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(24002,'AP_INVOICE_GS','AP_INVOICE','eulap.eb.service.ApInvoiceGsService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(24003,'AP_INVOICE_GOODS','AP_INVOICE_GOODS','eulap.eb.service.ApInvoiceGsService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(24004,'AP_PAYMENT_LINE','AP_PAYMENT_LINE','eulap.eb.service.ApPaymentService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(24005,'CUSTOMER_ADVANCE_PAYMENT_LINE','CUSTOMER_ADVANCE_PAYMENT_LINE','eulap.eb.service.CustomerAdvancePaymentService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(24006,'AR_RECEIPT_LINE','AR_RECEIPT_LINE','eulap.eb.service.ArReceiptService',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35');
/*!40000 ALTER TABLE `OBJECT_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `OR_TYPE`
--

DROP TABLE IF EXISTS `OR_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `OR_TYPE` (
  `OR_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(50) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`OR_TYPE_ID`),
  KEY `FK_OR_TYPE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_OR_TYPE_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_OR_TYPE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_OR_TYPE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=24007 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `OR_TYPE`
--

LOCK TABLES `OR_TYPE` WRITE;
/*!40000 ALTER TABLE `OR_TYPE` DISABLE KEYS */;
INSERT INTO `OR_TYPE` VALUES (1,'Parent-to-Child-Relationship',1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(2,'Raw-to-Processed-Relationship',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(3,'Stock-Adjustment-Relationship',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(4,'Cash-Sales-Relationship',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(5,'Account-Sales-Relationship',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(6,'Cash-Sales-Return-Relationship',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(7,'Account-Sales-Return-Relationship',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(8,'Transfer-Receipt-Relationship',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(9,'Reference-Document-Relationship',1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(10,'Return-To-Supplier-Relationship',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(11,'Customer-Advance-Payment-Relationship',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(12,'Paid-in-Advance-Delivery-Relationship',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(13,'Receiving-Report-Relationship',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(14,'Purchase-Order-Relationship',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(15,'Item-Conversion-Relationship',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(16,'CS-Processing-Relationship',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(17,'WIP-Special-Order-Relationship',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(24,'Fleet-Driver-Ref-Doc-Relationship',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(25,'Fleet-Incident-Ref-Doc-Relationship',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(26,'Fleet-Insurance-Ref-Doc-Relationship',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(29,'Employee-License-Cert-Relationship',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(30,'Employee-Seminar-Relationship',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(31,'Employee-Emergency-Contact-Relationship',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(33,'Fleet-Captain-Mdm-Ref-Doc-Relationship',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(34,'Fleet-Manning-Requirement-Ref-Doc-Relationship',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(35,'Fleet-Manning-Requirement-Deck-Relationship',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(36,'Fleet-Manning-Requirement-Engine-Relationship',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(37,'Fleet-Captain-Relationship',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(38,'Fleet-Mdm-Relationship',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(39,'Fleet-Type-Company-Relationship',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(40,'Fleet-Profile-Company-Relationship',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(41,'Fleet-Profile-Type-Relationship',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(42,'Fleet-PMS-Ref-Doc-Relationship',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(43,'Withdrawal-Slip-Relationship',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(44,'Withdrawal-Slip-Company-Relationship',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(45,'Withdrawal-Slip-Warehouse-Relationship',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(46,'Withdrawal-Slip-Account-Relationship',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(47,'Withdrawal-Slip-Fleet-Profile-Relationship',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(48,'Withdrawal-Slip-ArCustomer-Relationship',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(49,'Employee-Deduction-Relationship',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(50,'Withdrawal-Slip-Employee-Profile-Relationship',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(51,'Fleet-Profile-Division-Relationship',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(52,'Withdrawal-Slip-Ar-Customer-Account-Relationship',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(53,'Fleet-Tool-Ref-Doc-Relationship',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(54,'Fleet-Tool-Condition-Item-Relationship',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(55,'Transfer-Receipt-Serial-Item-Relationship',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(56,'Stock-Adjustment-In-Serial-Item-Relationship',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(63,'Stock-Adjustment-Out-Serial-Item-Relationship',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(64,'Receiving-Report-Serial-Item-Relationship',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(65,'Employee-Nat-Comp-Relationship',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(67,'Cash-Sale-Serial-Item-Relationship',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(68,'Cash-Sale-Return-Serial-Item-Relationship',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(69,'Fleet-Dry-Dock-Ref-Doc-Relationship',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(70,'Fleet-Voyage-Ref-Doc-Relationship',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(72,'Withdrawal-Slip-Purchase-Order-Relationship',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(73,'PO-Item-Withdrawal-Slip-Item-Relationship',1,1,'2021-08-11 01:34:23',1,'2021-08-11 01:34:23'),(74,'Purchase-Order-Receiving-Report-Relationship',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(75,'PR-Serial-Item-Main-Material-RelationShip',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(76,'PR-Serial-Item-Main-Product-RelationShip',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(84,'SAI-Bag-Qty-Relationship',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(85,'CSR-IS-Bag-Qty-Relationship',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(86,'CS-IS-Bag-Qty-Relationship',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(87,'AS-IS-Bag-Qty-Relationship',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(88,'ASR-IS-Bag-Qty-Relationship',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(89,'TR-IS-Bag-Qty-Relationship',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(90,'CAP-IS-Bag-Qty-Relationship',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(91,'PIAD-IS-Bag-Qty-Relationship',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(92,'SAO-Bag-Qty-Relationship',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(95,'PR-MAIN-RAW-MAT-Bag-Relationship',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(96,'PR-OTHER-MAT-Bag-Relationship',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(97,'PR-MAIN-PRODUCT-Bag-Relationship',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(98,'PR-BY-PRODUCT-Bag-Relationship',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(99,'Direct-Payment-Relationship',1,1,'2021-08-11 01:33:19',1,'2021-08-11 01:33:19'),(100,'RR-Raw-Materials-Relationship',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(101,'General-Ledger-AR-Line-Relationship',1,1,'2021-08-11 01:33:19',1,'2021-08-11 01:33:19'),(102,'Account-Sale-Serial-Item-Relationship',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(103,'Account-Sale-Return-Serial-Item-Relationship',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(104,'Transfer-Receipt-Serial-Item-Relationship',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(105,'Return-To-Supplier-Serial-Item-Relationship',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(3000,'Withdrawal-Slip-Serial-Item-Relationship',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(3001,'Withdrawal-Slip-Requisition-Form-Relationship',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(3003,'PR-PO-Relationship',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(3010,'PRI-POI-Relationship',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(3011,'PRI-POI-2-Relationship',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(3012,'RFI-PRI-Relationship',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12000,'ATW-Serial-Item-Relationship',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12001,'SO-Item-ATW-Item-Relationship',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12002,'SQ-Item-SO-Item-Relationship',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12003,'SO-Item-CAP-Item-Relationship',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12004,'DR-Serial-Item-Relationship',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12005,'ATW-Item-DR-Item-Relationship',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12006,'ARI-Serial-Item-Relationship',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12007,'DR-Item-ARI-Item-Relationship',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12008,'SO-Line-WO-Line-Relationship',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12009,'SO-Line-WB-Line-Relationship',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12010,'EU-Child-Object-Relationship',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12011,'WO-Serial-Item-Object-Relationship',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12012,'DR-Service-Child-Object-Relationship',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(12013,'ARI-Service-Child-Object-Relationship',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(24000,'Adv-Payment-Object-Relationship',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(24001,'AP-Invoice-GS-Serial-Item-Relationship',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(24002,'AP-Invoice-GS-Receiving-Report-Relationship',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(24003,'AP-Invoice-GS-Child-Obj-Relationship',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(24004,'AP-Payment-Line-Relationship',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(24005,'AP-Invoice-GS-RTS-Obj-Relationship',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35'),(24006,'AR-Receipt-Line-ARI-CAP-Obj-Relationship',1,1,'2021-08-11 01:34:35',1,'2021-08-11 01:34:35');
/*!40000 ALTER TABLE `OR_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `OTHER_CHARGES_LINE`
--

DROP TABLE IF EXISTS `OTHER_CHARGES_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `OTHER_CHARGES_LINE` (
  `OTHER_CHARGES_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `AP_LINE_SETUP_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned NOT NULL,
  `UNITOFMEASUREMENT_ID` int(10) DEFAULT NULL,
  `QUANTITY` double DEFAULT NULL,
  `UP_AMOUNT` double DEFAULT NULL,
  `AMOUNT` double NOT NULL,
  PRIMARY KEY (`OTHER_CHARGES_LINE_ID`),
  KEY `FK_OCL_AP_LINE_SETUP_ID` (`AP_LINE_SETUP_ID`),
  KEY `FK_OCL_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_OCL_AP_LINE_SETUP_ID` FOREIGN KEY (`AP_LINE_SETUP_ID`) REFERENCES `AP_LINE_SETUP` (`AP_LINE_SETUP_ID`),
  CONSTRAINT `FK_OCL_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `OTHER_CHARGES_LINE`
--

LOCK TABLES `OTHER_CHARGES_LINE` WRITE;
/*!40000 ALTER TABLE `OTHER_CHARGES_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `OTHER_CHARGES_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `OVERTIME_DETAIL`
--

DROP TABLE IF EXISTS `OVERTIME_DETAIL`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `OVERTIME_DETAIL` (
  `OVERTIME_DETAIL_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EMPLOYEE_REQUEST_ID` int(10) unsigned NOT NULL,
  `OVERTIME_DATE` date NOT NULL,
  `START_TIME` varchar(5) NOT NULL,
  `END_TIME` varchar(5) NOT NULL,
  `OVERTIME_HOURS` double(4,2) NOT NULL,
  `PURPOSE` text,
  PRIMARY KEY (`OVERTIME_DETAIL_ID`),
  KEY `FK_OD_EMPLOYEE_REQUEST_ID` (`EMPLOYEE_REQUEST_ID`),
  CONSTRAINT `FK_OD_EMPLOYEE_REQUEST_ID` FOREIGN KEY (`EMPLOYEE_REQUEST_ID`) REFERENCES `EMPLOYEE_REQUEST` (`EMPLOYEE_REQUEST_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `OVERTIME_DETAIL`
--

LOCK TABLES `OVERTIME_DETAIL` WRITE;
/*!40000 ALTER TABLE `OVERTIME_DETAIL` DISABLE KEYS */;
/*!40000 ALTER TABLE `OVERTIME_DETAIL` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `PAYMENT_TYPE`
--

DROP TABLE IF EXISTS `PAYMENT_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `PAYMENT_TYPE` (
  `PAYMENT_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(20) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`PAYMENT_TYPE_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `PAYMENT_TYPE`
--

LOCK TABLES `PAYMENT_TYPE` WRITE;
/*!40000 ALTER TABLE `PAYMENT_TYPE` DISABLE KEYS */;
INSERT INTO `PAYMENT_TYPE` VALUES (1,'AP PAYMENT',1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20'),(2,'DIRECT PAYMENT',1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20');
/*!40000 ALTER TABLE `PAYMENT_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `PAYROLL`
--

DROP TABLE IF EXISTS `PAYROLL`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `PAYROLL` (
  `PAYROLL_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `PAYROLL_TIME_PERIOD_ID` int(10) unsigned DEFAULT NULL,
  `PAYROLL_TIME_PERIOD_SCHEDULE_ID` int(10) unsigned DEFAULT NULL,
  `FORM_WORKFLOW_ID` int(10) unsigned NOT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `DIVISION_ID` int(10) unsigned DEFAULT NULL,
  `EMPLOYEE_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `TIME_SHEET_ID` int(10) unsigned DEFAULT NULL,
  `SEQUENCE_NO` int(10) NOT NULL,
  `DATE` date NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned NOT NULL,
  `BIOMETRIC_MODEL_ID` int(10) unsigned DEFAULT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`PAYROLL_ID`),
  KEY `FK_PAYROLL_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_PAYROLL_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_PAYROLL_EMPLOYEE_TYPE_ID` (`EMPLOYEE_TYPE_ID`),
  KEY `FK_PAYROLL_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_PAYROLL_CREATED_BY` (`CREATED_BY`),
  KEY `FK_PAYROLL_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_PTP_PAYROLL` (`PAYROLL_TIME_PERIOD_ID`),
  KEY `FK_PTPS_PAYROLL` (`PAYROLL_TIME_PERIOD_SCHEDULE_ID`),
  KEY `FK_PAYROLL_DIVISION_ID` (`DIVISION_ID`),
  KEY `FK_PAYROLL_TIME_SHEET_ID` (`TIME_SHEET_ID`),
  CONSTRAINT `FK_PAYROLL_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_PAYROLL_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_PAYROLL_DIVISION_ID` FOREIGN KEY (`DIVISION_ID`) REFERENCES `DIVISION` (`DIVISION_ID`),
  CONSTRAINT `FK_PAYROLL_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_PAYROLL_EMPLOYEE_TYPE_ID` FOREIGN KEY (`EMPLOYEE_TYPE_ID`) REFERENCES `EMPLOYEE_TYPE` (`EMPLOYEE_TYPE_ID`),
  CONSTRAINT `FK_PAYROLL_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_PAYROLL_TIME_SHEET_ID` FOREIGN KEY (`TIME_SHEET_ID`) REFERENCES `TIME_SHEET` (`TIME_SHEET_ID`),
  CONSTRAINT `FK_PAYROLL_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_PTPS_PAYROLL` FOREIGN KEY (`PAYROLL_TIME_PERIOD_SCHEDULE_ID`) REFERENCES `PAYROLL_TIME_PERIOD_SCHEDULE` (`PAYROLL_TIME_PERIOD_SCHEDULE_ID`),
  CONSTRAINT `FK_PTP_PAYROLL` FOREIGN KEY (`PAYROLL_TIME_PERIOD_ID`) REFERENCES `PAYROLL_TIME_PERIOD` (`PAYROLL_TIME_PERIOD_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `PAYROLL`
--

LOCK TABLES `PAYROLL` WRITE;
/*!40000 ALTER TABLE `PAYROLL` DISABLE KEYS */;
/*!40000 ALTER TABLE `PAYROLL` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `PAYROLL_EMPLOYEE_SALARY`
--

DROP TABLE IF EXISTS `PAYROLL_EMPLOYEE_SALARY`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `PAYROLL_EMPLOYEE_SALARY` (
  `PAYROLL_EMPLOYEE_SALARY_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `PAYROLL_ID` int(10) unsigned NOT NULL,
  `EMPLOYEE_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `BASIC_PAY` double(12,2) NOT NULL,
  `OVERTIME` double(12,2) NOT NULL,
  `PAID_LEAVE` double(12,2) NOT NULL,
  `DE_MINIMIS` double(12,2) DEFAULT '0.00',
  `COLA` double(12,2) DEFAULT '0.00',
  `BONUS` double(12,2) DEFAULT '0.00',
  `DEDUCTION` double(12,2) DEFAULT '0.00',
  `SSS` double(12,2) DEFAULT '0.00',
  `SSS_LOAN` double(12,2) DEFAULT '0.00',
  `SSS_ER` double(12,2) DEFAULT '0.00',
  `SSS_EC` double(12,2) DEFAULT '0.00',
  `PHILHEALTH` double(12,2) DEFAULT '0.00',
  `PHILHEALTH_ER` double(12,2) DEFAULT '0.00',
  `PAGIBIG` double(12,2) DEFAULT '0.00',
  `PAGIBIG_LOAN` double(12,2) DEFAULT '0.00',
  `PAGIBIG_ER` double(12,2) DEFAULT '0.00',
  `WITHHOLDING_TAX` double(12,2) DEFAULT '0.00',
  `LATE_ABSENT` double(12,2) DEFAULT '0.00',
  `BREAKAGE_WASTAGE` double(12,2) DEFAULT '0.00',
  `CASH_ADVANCE` double(12,2) DEFAULT '0.00',
  `SUNDAY_HOLIDAY_PAY` double(12,2) DEFAULT NULL,
  `NIGHT_DIFFERENTIAL` double(12,2) DEFAULT NULL,
  `NET_PAY` double(12,2) DEFAULT NULL,
  `NON_WORKING_HOLIDAY` double(12,2) DEFAULT NULL,
  `OTHER_DEDUCTION` double(12,2) DEFAULT '0.00',
  `CA_BALANCE` double(12,2) DEFAULT '0.00',
  `OTHER_BALANCE` double(12,2) DEFAULT '0.00',
  `ADJUSTMENT` double(12,2) DEFAULT NULL,
  `DAYS` double(12,2) DEFAULT NULL,
  `DAILY_SALARY` double(12,2) DEFAULT NULL,
  `REGULAR_HOLIDAY_PAY` double(12,2) DEFAULT NULL,
  PRIMARY KEY (`PAYROLL_EMPLOYEE_SALARY_ID`),
  KEY `FK_PES_EMPLOYEE_ID` (`EMPLOYEE_ID`),
  KEY `FK_PES_PAYROLL_ID` (`PAYROLL_ID`),
  KEY `FK_PES_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_PES_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_PES_EMPLOYEE_ID` FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES `EMPLOYEE` (`EMPLOYEE_ID`),
  CONSTRAINT `FK_PES_PAYROLL_ID` FOREIGN KEY (`PAYROLL_ID`) REFERENCES `PAYROLL` (`PAYROLL_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `PAYROLL_EMPLOYEE_SALARY`
--

LOCK TABLES `PAYROLL_EMPLOYEE_SALARY` WRITE;
/*!40000 ALTER TABLE `PAYROLL_EMPLOYEE_SALARY` DISABLE KEYS */;
/*!40000 ALTER TABLE `PAYROLL_EMPLOYEE_SALARY` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `PAYROLL_EMPLOYEE_TIMESHEET`
--

DROP TABLE IF EXISTS `PAYROLL_EMPLOYEE_TIMESHEET`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `PAYROLL_EMPLOYEE_TIMESHEET` (
  `PAYROLL_EMPLOYEE_TIMESHEET_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `PAYROLL_ID` int(10) unsigned DEFAULT NULL,
  `TIME_SHEET_ID` int(10) unsigned DEFAULT NULL,
  `EMPLOYEE_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `DATE` date NOT NULL,
  `HOURS_WORKED` double(19,4) NOT NULL,
  `LATE` double(19,4) DEFAULT '0.0000',
  `ADJUSTMENT` double(19,4) DEFAULT '0.0000',
  `OVERTIME` double(19,4) DEFAULT '0.0000',
  `STATUS` double(1,0) DEFAULT NULL,
  `UNDERTIME` double(19,4) DEFAULT '0.0000',
  `STATUS_LABEL` varchar(5) DEFAULT NULL,
  `DAYS_WORKED` double(4,2) DEFAULT '0.00',
  PRIMARY KEY (`PAYROLL_EMPLOYEE_TIMESHEET_ID`),
  KEY `FK_PET_EMPLOYEE_ID` (`EMPLOYEE_ID`),
  KEY `FK_PET_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_PET_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_PET_EMPLOYEE_ID` FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES `EMPLOYEE` (`EMPLOYEE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `PAYROLL_EMPLOYEE_TIMESHEET`
--

LOCK TABLES `PAYROLL_EMPLOYEE_TIMESHEET` WRITE;
/*!40000 ALTER TABLE `PAYROLL_EMPLOYEE_TIMESHEET` DISABLE KEYS */;
/*!40000 ALTER TABLE `PAYROLL_EMPLOYEE_TIMESHEET` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `PAYROLL_TIME_PERIOD`
--

DROP TABLE IF EXISTS `PAYROLL_TIME_PERIOD`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `PAYROLL_TIME_PERIOD` (
  `PAYROLL_TIME_PERIOD_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(50) NOT NULL,
  `MONTH` int(2) unsigned NOT NULL,
  `YEAR` int(4) unsigned NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`PAYROLL_TIME_PERIOD_ID`),
  KEY `FK_PAYROLL_TIME_PERIOD_CREATED_BY` (`CREATED_BY`),
  KEY `FK_PAYROLL_TIME_PERIOD_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_PAYROLL_TIME_PERIOD_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_PAYROLL_TIME_PERIOD_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `PAYROLL_TIME_PERIOD`
--

LOCK TABLES `PAYROLL_TIME_PERIOD` WRITE;
/*!40000 ALTER TABLE `PAYROLL_TIME_PERIOD` DISABLE KEYS */;
/*!40000 ALTER TABLE `PAYROLL_TIME_PERIOD` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `PAYROLL_TIME_PERIOD_SCHEDULE`
--

DROP TABLE IF EXISTS `PAYROLL_TIME_PERIOD_SCHEDULE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `PAYROLL_TIME_PERIOD_SCHEDULE` (
  `PAYROLL_TIME_PERIOD_SCHEDULE_ID` int(10) unsigned NOT NULL,
  `PAYROLL_TIME_PERIOD_ID` int(10) unsigned NOT NULL,
  `NAME` varchar(25) NOT NULL,
  `DATE_FROM` date NOT NULL,
  `DATE_TO` date NOT NULL,
  `COMPUTE_CONTRIBUTIONS` tinyint(1) NOT NULL,
  PRIMARY KEY (`PAYROLL_TIME_PERIOD_SCHEDULE_ID`),
  KEY `FK_PAYROLL_TIME_PERIOD_ID_` (`PAYROLL_TIME_PERIOD_ID`),
  CONSTRAINT `FK_PAYROLL_TIME_PERIOD_ID` FOREIGN KEY (`PAYROLL_TIME_PERIOD_ID`) REFERENCES `PAYROLL_TIME_PERIOD` (`PAYROLL_TIME_PERIOD_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `PAYROLL_TIME_PERIOD_SCHEDULE`
--

LOCK TABLES `PAYROLL_TIME_PERIOD_SCHEDULE` WRITE;
/*!40000 ALTER TABLE `PAYROLL_TIME_PERIOD_SCHEDULE` DISABLE KEYS */;
/*!40000 ALTER TABLE `PAYROLL_TIME_PERIOD_SCHEDULE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `PERSONNEL_ACTION_NOTICE`
--

DROP TABLE IF EXISTS `PERSONNEL_ACTION_NOTICE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `PERSONNEL_ACTION_NOTICE` (
  `PERSONNEL_ACTION_NOTICE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `SEQUENCE_NO` int(10) unsigned NOT NULL,
  `FORM_WORKFLOW_ID` int(10) unsigned DEFAULT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `EMPLOYEE_ID` int(10) unsigned NOT NULL,
  `ACTION_NOTICE_ID` int(10) unsigned NOT NULL,
  `DATE` date NOT NULL,
  `JUSTIFICATION` text,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`PERSONNEL_ACTION_NOTICE_ID`),
  KEY `FK_PAN_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_PAN_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_PAN_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_PAN_EMPLOYEE_ID` (`EMPLOYEE_ID`),
  KEY `FK_PAN_ACTION_NOTICE_ID` (`ACTION_NOTICE_ID`),
  KEY `FK_PAN_CREATED_BY` (`CREATED_BY`),
  KEY `FK_PAN_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_PAN_ACTION_NOTICE_ID` FOREIGN KEY (`ACTION_NOTICE_ID`) REFERENCES `ACTION_NOTICE` (`ACTION_NOTICE_ID`),
  CONSTRAINT `FK_PAN_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_PAN_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_PAN_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_PAN_EMPLOYEE_ID` FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES `EMPLOYEE` (`EMPLOYEE_ID`),
  CONSTRAINT `FK_PAN_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_PAN_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `PERSONNEL_ACTION_NOTICE`
--

LOCK TABLES `PERSONNEL_ACTION_NOTICE` WRITE;
/*!40000 ALTER TABLE `PERSONNEL_ACTION_NOTICE` DISABLE KEYS */;
/*!40000 ALTER TABLE `PERSONNEL_ACTION_NOTICE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `POSITION`
--

DROP TABLE IF EXISTS `POSITION`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `POSITION` (
  `POSITION_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(40) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `ACTIVE` tinyint(1) NOT NULL,
  PRIMARY KEY (`POSITION_ID`),
  KEY `FK_POSITION_CREATED_BY` (`CREATED_BY`),
  KEY `FK_POSITION_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_POSITION_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_POSITION_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `POSITION`
--

LOCK TABLES `POSITION` WRITE;
/*!40000 ALTER TABLE `POSITION` DISABLE KEYS */;
INSERT INTO `POSITION` VALUES (1,'Admin',1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05',1);
/*!40000 ALTER TABLE `POSITION` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `POS_MIDDLEWARE_SETTING`
--

DROP TABLE IF EXISTS `POS_MIDDLEWARE_SETTING`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `POS_MIDDLEWARE_SETTING` (
  `POS_MIDDLEWARE_SETTING_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `WAREHOUSE_ID` int(10) unsigned NOT NULL,
  `AR_CUSTOMER_ID` int(10) unsigned NOT NULL,
  `AR_CUSTOMER_ACCOUNT_ID` int(10) unsigned NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`POS_MIDDLEWARE_SETTING_ID`),
  KEY `FK_POMS_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_POMS_WAREHOUSE_ID` (`WAREHOUSE_ID`),
  KEY `FK_POMS_AR_CUSTOMER_ID` (`AR_CUSTOMER_ID`),
  KEY `FK_POMS_AR_CUSTOMER_ACCOUNT_ID` (`AR_CUSTOMER_ACCOUNT_ID`),
  KEY `FK_POMS_CREATED_BY` (`CREATED_BY`),
  KEY `FK_POMS_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_POMS_AR_CUSTOMER_ACCOUNT_ID` FOREIGN KEY (`AR_CUSTOMER_ACCOUNT_ID`) REFERENCES `AR_CUSTOMER_ACCOUNT` (`AR_CUSTOMER_ACCOUNT_ID`),
  CONSTRAINT `FK_POMS_AR_CUSTOMER_ID` FOREIGN KEY (`AR_CUSTOMER_ID`) REFERENCES `AR_CUSTOMER` (`AR_CUSTOMER_ID`),
  CONSTRAINT `FK_POMS_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_POMS_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_POMS_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_POMS_WAREHOUSE_ID` FOREIGN KEY (`WAREHOUSE_ID`) REFERENCES `WAREHOUSE` (`WAREHOUSE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `POS_MIDDLEWARE_SETTING`
--

LOCK TABLES `POS_MIDDLEWARE_SETTING` WRITE;
/*!40000 ALTER TABLE `POS_MIDDLEWARE_SETTING` DISABLE KEYS */;
/*!40000 ALTER TABLE `POS_MIDDLEWARE_SETTING` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `PREVENTIVE_MAINTENANCE_SCHEDULE`
--

DROP TABLE IF EXISTS `PREVENTIVE_MAINTENANCE_SCHEDULE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `PREVENTIVE_MAINTENANCE_SCHEDULE` (
  `PREVENTIVE_MAINTENANCE_SCHEDULE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `CHANGE_OIL_ENGINE` varchar(50) DEFAULT NULL,
  `OVERHAUL_ENGINE_MAIN` varchar(50) DEFAULT NULL,
  `OVERHAUL_ENGINE_AUXILIARY` varchar(50) DEFAULT NULL,
  `CHANGE_OIL_TRANSMISSION` varchar(50) DEFAULT NULL,
  `FILTER_FUEL` varchar(50) DEFAULT NULL,
  `FILTER_OIL` varchar(50) DEFAULT NULL,
  `FILTER_AIR` varchar(50) DEFAULT NULL,
  `FILTER_FANBELT` varchar(50) DEFAULT NULL,
  `NET` varchar(50) DEFAULT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `IS_SCHEDULE` tinyint(1) NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`PREVENTIVE_MAINTENANCE_SCHEDULE_ID`),
  KEY `FK_FLEET_PMS_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_FLEET_PMS_CREATED_BY` (`CREATED_BY`),
  KEY `FK_FLEET_PMS_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_FLEET_PMS_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_FLEET_PMS_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_FLEET_PMS_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `PREVENTIVE_MAINTENANCE_SCHEDULE`
--

LOCK TABLES `PREVENTIVE_MAINTENANCE_SCHEDULE` WRITE;
/*!40000 ALTER TABLE `PREVENTIVE_MAINTENANCE_SCHEDULE` DISABLE KEYS */;
/*!40000 ALTER TABLE `PREVENTIVE_MAINTENANCE_SCHEDULE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `PROCESSING_REPORT`
--

DROP TABLE IF EXISTS `PROCESSING_REPORT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `PROCESSING_REPORT` (
  `PROCESSING_REPORT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `PROCESSING_REPORT_TYPE_ID` int(10) unsigned DEFAULT '1',
  `SEQUENCE_NO` int(20) unsigned NOT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `DATE` date NOT NULL,
  `REF_NUMBER` varchar(20) DEFAULT NULL,
  `REMARKS` varchar(200) DEFAULT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `FORM_WORKFLOW_ID` int(10) unsigned DEFAULT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`PROCESSING_REPORT_ID`),
  KEY `FK_MPR_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_MPR_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_MPR_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_MPR_CREATED_BY` (`CREATED_BY`),
  KEY `FK_MPR_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_MPR_PROCESSING_TYPE_ID` (`PROCESSING_REPORT_TYPE_ID`),
  CONSTRAINT `FK_MPR_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_MPR_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_MPR_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_MPR_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_MPR_PROCESSING_TYPE_ID` FOREIGN KEY (`PROCESSING_REPORT_TYPE_ID`) REFERENCES `PROCESSING_REPORT_TYPE` (`PROCESSING_REPORT_TYPE_ID`),
  CONSTRAINT `FK_MPR_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `PROCESSING_REPORT`
--

LOCK TABLES `PROCESSING_REPORT` WRITE;
/*!40000 ALTER TABLE `PROCESSING_REPORT` DISABLE KEYS */;
/*!40000 ALTER TABLE `PROCESSING_REPORT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `PROCESSING_REPORT_TYPE`
--

DROP TABLE IF EXISTS `PROCESSING_REPORT_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `PROCESSING_REPORT_TYPE` (
  `PROCESSING_REPORT_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(25) DEFAULT NULL,
  `ACTIVE` tinyint(1) DEFAULT '1',
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`PROCESSING_REPORT_TYPE_ID`),
  KEY `FK_PRT_CREATED_BY` (`CREATED_BY`),
  KEY `FK_PRT_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_PRT_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_PRT_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `PROCESSING_REPORT_TYPE`
--

LOCK TABLES `PROCESSING_REPORT_TYPE` WRITE;
/*!40000 ALTER TABLE `PROCESSING_REPORT_TYPE` DISABLE KEYS */;
INSERT INTO `PROCESSING_REPORT_TYPE` VALUES (1,'Milling Report',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(2,'Milling Order',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(3,'Pass In',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(4,'Pass out',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(5,'Production Report-B',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(6,'Production Report',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55');
/*!40000 ALTER TABLE `PROCESSING_REPORT_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `PRODUCT_CODE`
--

DROP TABLE IF EXISTS `PRODUCT_CODE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `PRODUCT_CODE` (
  `PRODUCT_CODE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `PRODUCT_NAME` varchar(50) NOT NULL,
  `CODE` int(10) unsigned NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`PRODUCT_CODE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `PRODUCT_CODE`
--

LOCK TABLES `PRODUCT_CODE` WRITE;
/*!40000 ALTER TABLE `PRODUCT_CODE` DISABLE KEYS */;
/*!40000 ALTER TABLE `PRODUCT_CODE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `PRODUCT_LINE`
--

DROP TABLE IF EXISTS `PRODUCT_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `PRODUCT_LINE` (
  `PRODUCT_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `MAIN_ITEM_ID` int(10) unsigned NOT NULL,
  `MENU` tinyint(1) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`PRODUCT_LINE_ID`),
  KEY `FK_PRODUCT_LINE_MAIN_ITEM_ID` (`MAIN_ITEM_ID`),
  KEY `FK_PRODUCT_LINE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_PRODUCT_LINE_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_PRODUCT_LINE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_PRODUCT_LINE_MAIN_ITEM_ID` FOREIGN KEY (`MAIN_ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_PRODUCT_LINE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `PRODUCT_LINE`
--

LOCK TABLES `PRODUCT_LINE` WRITE;
/*!40000 ALTER TABLE `PRODUCT_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `PRODUCT_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `PRODUCT_LINE_ITEM`
--

DROP TABLE IF EXISTS `PRODUCT_LINE_ITEM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `PRODUCT_LINE_ITEM` (
  `PRODUCT_LINE_ITEM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `PRODUCT_LINE_ID` int(10) unsigned NOT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double NOT NULL,
  PRIMARY KEY (`PRODUCT_LINE_ITEM_ID`),
  KEY `FK_PDI_ITEM_ID` (`ITEM_ID`),
  CONSTRAINT `FK_PDI_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `PRODUCT_LINE_ITEM`
--

LOCK TABLES `PRODUCT_LINE_ITEM` WRITE;
/*!40000 ALTER TABLE `PRODUCT_LINE_ITEM` DISABLE KEYS */;
/*!40000 ALTER TABLE `PRODUCT_LINE_ITEM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `PROJECT`
--

DROP TABLE IF EXISTS `PROJECT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `PROJECT` (
  `PROJECT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(50) COLLATE utf8_spanish_ci NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`PROJECT_ID`),
  KEY `FK_PROJECT_CREATED_BY` (`CREATED_BY`),
  KEY `FK_PROJECT_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_PROJECT_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_PROJECT_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_spanish_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `PROJECT`
--

LOCK TABLES `PROJECT` WRITE;
/*!40000 ALTER TABLE `PROJECT` DISABLE KEYS */;
/*!40000 ALTER TABLE `PROJECT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `PR_BY_PRODUCT`
--

DROP TABLE IF EXISTS `PR_BY_PRODUCT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `PR_BY_PRODUCT` (
  `PR_BY_PRODUCT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `PROCESSING_REPORT_ID` int(10) unsigned NOT NULL,
  `WAREHOUSE_ID` int(10) unsigned NOT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `QUANTITY` double NOT NULL,
  `UNIT_COST` double DEFAULT '0',
  PRIMARY KEY (`PR_BY_PRODUCT_ID`),
  KEY `FK_PR_BP_PROCESSING_REPORT_ID` (`PROCESSING_REPORT_ID`),
  KEY `FK_PR_BP_WAREHOUSE_ID` (`WAREHOUSE_ID`),
  KEY `FK_PR_BP_ITEM_ID` (`ITEM_ID`),
  KEY `FK_PR_BP_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_PR_BP_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_PR_BP_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_PR_BP_PROCESSING_REPORT_ID` FOREIGN KEY (`PROCESSING_REPORT_ID`) REFERENCES `PROCESSING_REPORT` (`PROCESSING_REPORT_ID`),
  CONSTRAINT `FK_PR_BP_WAREHOUSE_ID` FOREIGN KEY (`WAREHOUSE_ID`) REFERENCES `WAREHOUSE` (`WAREHOUSE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `PR_BY_PRODUCT`
--

LOCK TABLES `PR_BY_PRODUCT` WRITE;
/*!40000 ALTER TABLE `PR_BY_PRODUCT` DISABLE KEYS */;
/*!40000 ALTER TABLE `PR_BY_PRODUCT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `PR_MAIN_PRODUCT`
--

DROP TABLE IF EXISTS `PR_MAIN_PRODUCT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `PR_MAIN_PRODUCT` (
  `PR_MAIN_PRODUCT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `PROCESSING_REPORT_ID` int(10) unsigned NOT NULL,
  `WAREHOUSE_ID` int(10) unsigned NOT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `QUANTITY` double NOT NULL,
  `UNIT_COST` double DEFAULT '0',
  PRIMARY KEY (`PR_MAIN_PRODUCT_ID`),
  KEY `FK_PR_MP_PROCESSING_REPORT_ID` (`PROCESSING_REPORT_ID`),
  KEY `FK_PR_MP_WAREHOUSE_ID` (`WAREHOUSE_ID`),
  KEY `FK_PR_MP_ITEM_ID` (`ITEM_ID`),
  KEY `FK_PR_MP_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_PR_MP_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_PR_MP_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_PR_MP_PROCESSING_REPORT_ID` FOREIGN KEY (`PROCESSING_REPORT_ID`) REFERENCES `PROCESSING_REPORT` (`PROCESSING_REPORT_ID`),
  CONSTRAINT `FK_PR_MP_WAREHOUSE_ID` FOREIGN KEY (`WAREHOUSE_ID`) REFERENCES `WAREHOUSE` (`WAREHOUSE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `PR_MAIN_PRODUCT`
--

LOCK TABLES `PR_MAIN_PRODUCT` WRITE;
/*!40000 ALTER TABLE `PR_MAIN_PRODUCT` DISABLE KEYS */;
/*!40000 ALTER TABLE `PR_MAIN_PRODUCT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `PR_OTHER_CHARGE`
--

DROP TABLE IF EXISTS `PR_OTHER_CHARGE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `PR_OTHER_CHARGE` (
  `PR_OTHER_CHARGE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `PROCESSING_REPORT_ID` int(10) unsigned NOT NULL,
  `AR_LINE_SETUP_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `QUANTITY` double DEFAULT '0',
  `UNITOFMEASUREMENT_ID` int(10) unsigned DEFAULT NULL,
  `UP_AMOUNT` double DEFAULT '0',
  `AMOUNT` double DEFAULT '0',
  PRIMARY KEY (`PR_OTHER_CHARGE_ID`),
  KEY `FK_PRAL_LINE_PR_ID` (`PROCESSING_REPORT_ID`),
  KEY `FK_PRAL_LINE_SETUP_ID` (`AR_LINE_SETUP_ID`),
  KEY `FK_PRAL_LINE_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_PRAL_LINE_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_PRAL_LINE_PR_ID` FOREIGN KEY (`PROCESSING_REPORT_ID`) REFERENCES `PROCESSING_REPORT` (`PROCESSING_REPORT_ID`),
  CONSTRAINT `FK_PRAL_LINE_SETUP_ID` FOREIGN KEY (`AR_LINE_SETUP_ID`) REFERENCES `AR_LINE_SETUP` (`AR_LINE_SETUP_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `PR_OTHER_CHARGE`
--

LOCK TABLES `PR_OTHER_CHARGE` WRITE;
/*!40000 ALTER TABLE `PR_OTHER_CHARGE` DISABLE KEYS */;
/*!40000 ALTER TABLE `PR_OTHER_CHARGE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `PR_OTHER_MATERIALS_ITEM`
--

DROP TABLE IF EXISTS `PR_OTHER_MATERIALS_ITEM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `PR_OTHER_MATERIALS_ITEM` (
  `PR_OTHER_MATERIALS_ITEM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `PROCESSING_REPORT_ID` int(10) unsigned NOT NULL,
  `WAREHOUSE_ID` int(10) unsigned NOT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `QUANTITY` double NOT NULL,
  `UNIT_COST` double DEFAULT '0',
  PRIMARY KEY (`PR_OTHER_MATERIALS_ITEM_ID`),
  KEY `FK_PR_OMI_PROCESSING_REPORT_ID` (`PROCESSING_REPORT_ID`),
  KEY `FK_PR_OMI_WAREHOUSE_ID` (`WAREHOUSE_ID`),
  KEY `FK_PR_OMI_ITEM_ID` (`ITEM_ID`),
  KEY `FK_PR_OMI_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_PR_OMI_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_PR_OMI_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_PR_OMI_PROCESSING_REPORT_ID` FOREIGN KEY (`PROCESSING_REPORT_ID`) REFERENCES `PROCESSING_REPORT` (`PROCESSING_REPORT_ID`),
  CONSTRAINT `FK_PR_OMI_WAREHOUSE_ID` FOREIGN KEY (`WAREHOUSE_ID`) REFERENCES `WAREHOUSE` (`WAREHOUSE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `PR_OTHER_MATERIALS_ITEM`
--

LOCK TABLES `PR_OTHER_MATERIALS_ITEM` WRITE;
/*!40000 ALTER TABLE `PR_OTHER_MATERIALS_ITEM` DISABLE KEYS */;
/*!40000 ALTER TABLE `PR_OTHER_MATERIALS_ITEM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `PR_RAW_MATERIALS_ITEM`
--

DROP TABLE IF EXISTS `PR_RAW_MATERIALS_ITEM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `PR_RAW_MATERIALS_ITEM` (
  `PR_RAW_MATERIALS_ITEM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `PROCESSING_REPORT_ID` int(10) unsigned NOT NULL,
  `WAREHOUSE_ID` int(10) unsigned NOT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `QUANTITY` double NOT NULL,
  `UNIT_COST` double DEFAULT '0',
  PRIMARY KEY (`PR_RAW_MATERIALS_ITEM_ID`),
  KEY `FK_PR_RMI_PROCESSING_REPORT_ID` (`PROCESSING_REPORT_ID`),
  KEY `FK_PR_RMI_WAREHOUSE_ID` (`WAREHOUSE_ID`),
  KEY `FK_PR_RMI_ITEM_ID` (`ITEM_ID`),
  KEY `FK_PR_RMI_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_PR_RMI_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_PR_RMI_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_PR_RMI_PROCESSING_REPORT_ID` FOREIGN KEY (`PROCESSING_REPORT_ID`) REFERENCES `PROCESSING_REPORT` (`PROCESSING_REPORT_ID`),
  CONSTRAINT `FK_PR_RMI_WAREHOUSE_ID` FOREIGN KEY (`WAREHOUSE_ID`) REFERENCES `WAREHOUSE` (`WAREHOUSE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `PR_RAW_MATERIALS_ITEM`
--

LOCK TABLES `PR_RAW_MATERIALS_ITEM` WRITE;
/*!40000 ALTER TABLE `PR_RAW_MATERIALS_ITEM` DISABLE KEYS */;
/*!40000 ALTER TABLE `PR_RAW_MATERIALS_ITEM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `PURCHASE_ORDER_LINE`
--

DROP TABLE IF EXISTS `PURCHASE_ORDER_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `PURCHASE_ORDER_LINE` (
  `PURCHASE_ORDER_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `R_PURCHASE_ORDER_ID` int(10) unsigned NOT NULL,
  `AP_LINE_SETUP_ID` int(10) unsigned NOT NULL,
  `UNITOFMEASUREMENT_ID` int(10) unsigned DEFAULT NULL,
  `QUANTITY` double DEFAULT NULL,
  `UP_AMOUNT` double DEFAULT NULL,
  `AMOUNT` double NOT NULL,
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  PRIMARY KEY (`PURCHASE_ORDER_LINE_ID`),
  KEY `FK_PO_LINE_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_PO_LINE_PURCHASE_ORDER_ID` (`R_PURCHASE_ORDER_ID`),
  KEY `FK_PO_LINE_AP_LINE_SETUP_ID` (`AP_LINE_SETUP_ID`),
  KEY `FK_PO_LINE_UNITOFMEASUREMENT_ID` (`UNITOFMEASUREMENT_ID`),
  KEY `FK_PO_LINE_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_PO_LINE_AP_LINE_SETUP_ID` FOREIGN KEY (`AP_LINE_SETUP_ID`) REFERENCES `AP_LINE_SETUP` (`AP_LINE_SETUP_ID`),
  CONSTRAINT `FK_PO_LINE_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_PO_LINE_PURCHASE_ORDER_ID` FOREIGN KEY (`R_PURCHASE_ORDER_ID`) REFERENCES `R_PURCHASE_ORDER` (`R_PURCHASE_ORDER_ID`),
  CONSTRAINT `FK_PO_LINE_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_PO_LINE_UNITOFMEASUREMENT_ID` FOREIGN KEY (`UNITOFMEASUREMENT_ID`) REFERENCES `UNIT_MEASUREMENT` (`UNITOFMEASUREMENT_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_spanish_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `PURCHASE_ORDER_LINE`
--

LOCK TABLES `PURCHASE_ORDER_LINE` WRITE;
/*!40000 ALTER TABLE `PURCHASE_ORDER_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `PURCHASE_ORDER_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `PURCHASE_REQUISITION_ITEM`
--

DROP TABLE IF EXISTS `PURCHASE_REQUISITION_ITEM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `PURCHASE_REQUISITION_ITEM` (
  `PURCHASE_REQUISITION_ITEM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `PURCHASE_REQUISITION_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double NOT NULL,
  `UNIT_COST` double DEFAULT '0',
  PRIMARY KEY (`PURCHASE_REQUISITION_ITEM_ID`),
  KEY `FK_PRI_PR_ID` (`PURCHASE_REQUISITION_ID`),
  KEY `FK_PRI_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_PRI_ITEM_ID` (`ITEM_ID`),
  CONSTRAINT `FK_PRI_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_PRI_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_PRI_PR_ID` FOREIGN KEY (`PURCHASE_REQUISITION_ID`) REFERENCES `REQUISITION_FORM` (`REQUISITION_FORM_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `PURCHASE_REQUISITION_ITEM`
--

LOCK TABLES `PURCHASE_REQUISITION_ITEM` WRITE;
/*!40000 ALTER TABLE `PURCHASE_REQUISITION_ITEM` DISABLE KEYS */;
/*!40000 ALTER TABLE `PURCHASE_REQUISITION_ITEM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `RATIO`
--

DROP TABLE IF EXISTS `RATIO`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `RATIO` (
  `RATIO_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(50) COLLATE utf8_spanish_ci NOT NULL,
  `VALUE` double NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`RATIO_ID`),
  KEY `FK_RATIO_CREATED_BY` (`CREATED_BY`),
  KEY `FK_RATIO_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_RATIO_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_RATIO_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_spanish_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `RATIO`
--

LOCK TABLES `RATIO` WRITE;
/*!40000 ALTER TABLE `RATIO` DISABLE KEYS */;
/*!40000 ALTER TABLE `RATIO` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `RECEIPT_METHOD`
--

DROP TABLE IF EXISTS `RECEIPT_METHOD`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `RECEIPT_METHOD` (
  `RECEIPT_METHOD_ID` int(10) NOT NULL DEFAULT '0',
  `NAME` varchar(100) NOT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `DEBIT_ACCOUNT_COMBINATION_ID` int(10) unsigned DEFAULT NULL,
  `CREDIT_ACCOUNT_COMBINATION_ID` int(10) unsigned NOT NULL,
  `BANK_ACCOUNT_ID` int(10) unsigned DEFAULT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`RECEIPT_METHOD_ID`),
  KEY `FK_RM_CREATED_BY` (`CREATED_BY`),
  KEY `FK_RM_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_RM_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_RM_DEBIT_ACCOUNT_COMBINATION` (`DEBIT_ACCOUNT_COMBINATION_ID`),
  KEY `FK_RM_CREDIT_ACCOUNT_COMBINATION` (`CREDIT_ACCOUNT_COMBINATION_ID`),
  KEY `FK_RM_BANK_ACCOUNT` (`BANK_ACCOUNT_ID`),
  CONSTRAINT `FK_RM_BANK_ACCOUNT` FOREIGN KEY (`BANK_ACCOUNT_ID`) REFERENCES `BANK_ACCOUNT` (`BANK_ACCOUNT_ID`),
  CONSTRAINT `FK_RM_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_RM_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_RM_CREDIT_ACCOUNT_COMBINATION` FOREIGN KEY (`CREDIT_ACCOUNT_COMBINATION_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_RM_DEBIT_ACCOUNT_COMBINATION` FOREIGN KEY (`DEBIT_ACCOUNT_COMBINATION_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_RM_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `RECEIPT_METHOD`
--

LOCK TABLES `RECEIPT_METHOD` WRITE;
/*!40000 ALTER TABLE `RECEIPT_METHOD` DISABLE KEYS */;
INSERT INTO `RECEIPT_METHOD` VALUES (1,'CASH ON HAND',1,35,32,NULL,1,1,'2021-08-11 01:33:20',1,'2021-08-11 01:33:20');
/*!40000 ALTER TABLE `RECEIPT_METHOD` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `REFERENCE_DOCUMENT`
--

DROP TABLE IF EXISTS `REFERENCE_DOCUMENT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `REFERENCE_DOCUMENT` (
  `REFERENCE_DOCUMENT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `DESCRIPTION` varchar(100) NOT NULL,
  `FILE_NAME` varchar(200) NOT NULL,
  `FILE_SIZE` double NOT NULL,
  `FILE` mediumblob,
  `FILE_PATH` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`REFERENCE_DOCUMENT_ID`),
  KEY `FK_RD_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_RD_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `REFERENCE_DOCUMENT`
--

LOCK TABLES `REFERENCE_DOCUMENT` WRITE;
/*!40000 ALTER TABLE `REFERENCE_DOCUMENT` DISABLE KEYS */;
/*!40000 ALTER TABLE `REFERENCE_DOCUMENT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `REPACKING`
--

DROP TABLE IF EXISTS `REPACKING`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `REPACKING` (
  `REPACKING_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `FORM_WORKFLOW_ID` int(10) unsigned DEFAULT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `WAREHOUSE_ID` int(10) unsigned NOT NULL,
  `R_DATE` date NOT NULL,
  `R_NUMBER` int(20) NOT NULL,
  `REMARKS` varchar(100) DEFAULT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `REPACKING_TYPE_ID` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`REPACKING_ID`),
  KEY `FK_RP_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_RP_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_RP_WAREHOUSE_ID` (`WAREHOUSE_ID`),
  KEY `FK_RP_CREATED_BY` (`CREATED_BY`),
  KEY `FK_RP_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_RP_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_RP_TYPE_ID` (`REPACKING_TYPE_ID`),
  CONSTRAINT `FK_RP_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_RP_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_RP_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_RP_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_RP_TYPE_ID` FOREIGN KEY (`REPACKING_TYPE_ID`) REFERENCES `REPACKING_TYPE` (`REPACKING_TYPE_ID`),
  CONSTRAINT `FK_RP_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_RP_WAREHOUSE_ID` FOREIGN KEY (`WAREHOUSE_ID`) REFERENCES `WAREHOUSE` (`WAREHOUSE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `REPACKING`
--

LOCK TABLES `REPACKING` WRITE;
/*!40000 ALTER TABLE `REPACKING` DISABLE KEYS */;
/*!40000 ALTER TABLE `REPACKING` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `REPACKING_FINISHED_GOOD`
--

DROP TABLE IF EXISTS `REPACKING_FINISHED_GOOD`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `REPACKING_FINISHED_GOOD` (
  `REPACKING_FINISHED_GOOD_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `REPACKING_ID` int(10) unsigned NOT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double NOT NULL,
  `UNIT_COST` double DEFAULT '0',
  PRIMARY KEY (`REPACKING_FINISHED_GOOD_ID`),
  KEY `FK_RFG_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_RFG_REPACKING_ID` (`REPACKING_ID`),
  KEY `FK_RFG_ITEM_ID` (`ITEM_ID`),
  CONSTRAINT `FK_RFG_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_RFG_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_RFG_REPACKING_ID` FOREIGN KEY (`REPACKING_ID`) REFERENCES `REPACKING` (`REPACKING_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `REPACKING_FINISHED_GOOD`
--

LOCK TABLES `REPACKING_FINISHED_GOOD` WRITE;
/*!40000 ALTER TABLE `REPACKING_FINISHED_GOOD` DISABLE KEYS */;
/*!40000 ALTER TABLE `REPACKING_FINISHED_GOOD` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `REPACKING_ITEM`
--

DROP TABLE IF EXISTS `REPACKING_ITEM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `REPACKING_ITEM` (
  `REPACKING_ITEM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `REPACKING_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `FROM_ITEM_ID` int(10) unsigned NOT NULL,
  `TO_ITEM_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double NOT NULL,
  `UNIT_COST` double NOT NULL DEFAULT '0',
  `REPACKED_QUANTITY` double NOT NULL,
  `REPACKED_UNIT_COST` double NOT NULL DEFAULT '0',
  PRIMARY KEY (`REPACKING_ITEM_ID`),
  KEY `RPI_REPACKING_ID` (`REPACKING_ID`),
  KEY `RPI_FROM_ITEM_ID` (`FROM_ITEM_ID`),
  KEY `RPI_TO_ITEM_ID` (`TO_ITEM_ID`),
  KEY `RPI_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `RPI_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `RPI_FROM_ITEM_ID` FOREIGN KEY (`FROM_ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `RPI_REPACKING_ID` FOREIGN KEY (`REPACKING_ID`) REFERENCES `REPACKING` (`REPACKING_ID`),
  CONSTRAINT `RPI_TO_ITEM_ID` FOREIGN KEY (`TO_ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `REPACKING_ITEM`
--

LOCK TABLES `REPACKING_ITEM` WRITE;
/*!40000 ALTER TABLE `REPACKING_ITEM` DISABLE KEYS */;
/*!40000 ALTER TABLE `REPACKING_ITEM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `REPACKING_RAW_MATERIAL`
--

DROP TABLE IF EXISTS `REPACKING_RAW_MATERIAL`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `REPACKING_RAW_MATERIAL` (
  `REPACKING_RAW_MATERIAL_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `REPACKING_ID` int(10) unsigned NOT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double NOT NULL,
  `UNIT_COST` double DEFAULT '0',
  PRIMARY KEY (`REPACKING_RAW_MATERIAL_ID`),
  KEY `FK_RRM_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_RRM_REPACKING_ID` (`REPACKING_ID`),
  KEY `FK_RRM_ITEM_ID` (`ITEM_ID`),
  CONSTRAINT `FK_RRM_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_RRM_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_RRM_REPACKING_ID` FOREIGN KEY (`REPACKING_ID`) REFERENCES `REPACKING` (`REPACKING_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `REPACKING_RAW_MATERIAL`
--

LOCK TABLES `REPACKING_RAW_MATERIAL` WRITE;
/*!40000 ALTER TABLE `REPACKING_RAW_MATERIAL` DISABLE KEYS */;
/*!40000 ALTER TABLE `REPACKING_RAW_MATERIAL` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `REPACKING_TYPE`
--

DROP TABLE IF EXISTS `REPACKING_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `REPACKING_TYPE` (
  `REPACKING_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(100) NOT NULL,
  `ACTIVE` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`REPACKING_TYPE_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `REPACKING_TYPE`
--

LOCK TABLES `REPACKING_TYPE` WRITE;
/*!40000 ALTER TABLE `REPACKING_TYPE` DISABLE KEYS */;
INSERT INTO `REPACKING_TYPE` VALUES (1,'Repacking',1),(2,'Item Conversion',1);
/*!40000 ALTER TABLE `REPACKING_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `REQUEST_TYPE`
--

DROP TABLE IF EXISTS `REQUEST_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `REQUEST_TYPE` (
  `REQUEST_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(20) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`REQUEST_TYPE_ID`),
  KEY `FK_RT_CREATED_BY` (`CREATED_BY`),
  KEY `FK_RT_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_RT_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_RT_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `REQUEST_TYPE`
--

LOCK TABLES `REQUEST_TYPE` WRITE;
/*!40000 ALTER TABLE `REQUEST_TYPE` DISABLE KEYS */;
INSERT INTO `REQUEST_TYPE` VALUES (1,'LEAVE',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(2,'OVERTIME',1,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10');
/*!40000 ALTER TABLE `REQUEST_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `REQUISITION_CLASSIFICATION`
--

DROP TABLE IF EXISTS `REQUISITION_CLASSIFICATION`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `REQUISITION_CLASSIFICATION` (
  `REQUISITION_CLASSIFICATION_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(50) COLLATE utf8_spanish_ci NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`REQUISITION_CLASSIFICATION_ID`),
  KEY `FK_REQUISITION_CLASSIFICATION_CREATED_BY` (`CREATED_BY`),
  KEY `FK_REQUISITION_CLASSIFICATION_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_REQUISITION_CLASSIFICATION_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_REQUISITION_CLASSIFICATION_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COLLATE=utf8_spanish_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `REQUISITION_CLASSIFICATION`
--

LOCK TABLES `REQUISITION_CLASSIFICATION` WRITE;
/*!40000 ALTER TABLE `REQUISITION_CLASSIFICATION` DISABLE KEYS */;
INSERT INTO `REQUISITION_CLASSIFICATION` VALUES (1,'Withdrawal',1,1,'2021-08-11 01:34:41',1,'2021-08-11 01:34:41'),(2,'Transfer',1,1,'2021-08-11 01:34:41',1,'2021-08-11 01:34:41'),(3,'Purchase Requisition',1,1,'2021-08-11 01:34:41',1,'2021-08-11 01:34:41');
/*!40000 ALTER TABLE `REQUISITION_CLASSIFICATION` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `REQUISITION_FORM`
--

DROP TABLE IF EXISTS `REQUISITION_FORM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `REQUISITION_FORM` (
  `REQUISITION_FORM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `REQUISITION_TYPE_ID` int(10) unsigned NOT NULL,
  `REQUISITION_CLASSIFICATION_ID` int(10) unsigned DEFAULT NULL,
  `WAREHOUSE_ID` int(10) unsigned DEFAULT NULL,
  `REQ_FORM_REF_ID` int(10) unsigned DEFAULT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `SEQUENCE_NO` int(20) unsigned NOT NULL,
  `DATE` date NOT NULL,
  `FLEET_PROFILE_ID` int(10) unsigned DEFAULT NULL,
  `PROJECT_ID` int(10) unsigned DEFAULT NULL,
  `AR_CUSTOMER_ID` int(10) unsigned DEFAULT NULL,
  `DISTANCE` double DEFAULT NULL,
  `RATIO_ID` int(10) unsigned DEFAULT NULL,
  `LITERS` double DEFAULT NULL,
  `REQUESTED_BY` varchar(100) DEFAULT NULL,
  `REQUESTED_DATE` date NOT NULL,
  `REMARKS` text,
  `EB_OBJECT_ID` int(10) unsigned NOT NULL,
  `FORM_WORKFLOW_ID` int(10) unsigned DEFAULT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `WORK_ORDER_ID` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`REQUISITION_FORM_ID`),
  KEY `FK_REQUISITION_FORM_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_REQUISITION_FORM_TYPE_ID` (`REQUISITION_TYPE_ID`),
  KEY `FK_REQUISITION_FORM_CLASSIFICATION_ID` (`REQUISITION_CLASSIFICATION_ID`),
  KEY `FK_REQUISITION_FORM_WAREHOUSE_ID` (`WAREHOUSE_ID`),
  KEY `FK_REQUISITION_FORM_FLEET_PROFILE_ID` (`FLEET_PROFILE_ID`),
  KEY `FK_REQUISITION_FORM_PROJECT_ID` (`PROJECT_ID`),
  KEY `FK_REQUISITION_FORM_AR_CUSTOMER_ID` (`AR_CUSTOMER_ID`),
  KEY `FK_REQUISITION_FORM_RATIO_ID` (`RATIO_ID`),
  KEY `FK_REQUISITION_FORM_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_REQUISITION_FORM_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_REQUISITION_FORM_CREATED_BY` (`CREATED_BY`),
  KEY `FK_REQUISITION_FORM_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_REQUISITION_FORM_WORK_ORDER_ID` (`WORK_ORDER_ID`),
  CONSTRAINT `FK_REQUISITION_FORM_AR_CUSTOMER_ID` FOREIGN KEY (`AR_CUSTOMER_ID`) REFERENCES `AR_CUSTOMER` (`AR_CUSTOMER_ID`),
  CONSTRAINT `FK_REQUISITION_FORM_CLASSIFICATION_ID` FOREIGN KEY (`REQUISITION_CLASSIFICATION_ID`) REFERENCES `REQUISITION_CLASSIFICATION` (`REQUISITION_CLASSIFICATION_ID`),
  CONSTRAINT `FK_REQUISITION_FORM_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_REQUISITION_FORM_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_REQUISITION_FORM_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_REQUISITION_FORM_FLEET_PROFILE_ID` FOREIGN KEY (`FLEET_PROFILE_ID`) REFERENCES `FLEET_PROFILE` (`FLEET_PROFILE_ID`),
  CONSTRAINT `FK_REQUISITION_FORM_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_REQUISITION_FORM_PROJECT_ID` FOREIGN KEY (`PROJECT_ID`) REFERENCES `PROJECT` (`PROJECT_ID`),
  CONSTRAINT `FK_REQUISITION_FORM_RATIO_ID` FOREIGN KEY (`RATIO_ID`) REFERENCES `RATIO` (`RATIO_ID`),
  CONSTRAINT `FK_REQUISITION_FORM_TYPE_ID` FOREIGN KEY (`REQUISITION_TYPE_ID`) REFERENCES `REQUISITION_TYPE` (`REQUISITION_TYPE_ID`),
  CONSTRAINT `FK_REQUISITION_FORM_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_REQUISITION_FORM_WAREHOUSE_ID` FOREIGN KEY (`WAREHOUSE_ID`) REFERENCES `WAREHOUSE` (`WAREHOUSE_ID`),
  CONSTRAINT `FK_REQUISITION_FORM_WORK_ORDER_ID` FOREIGN KEY (`WORK_ORDER_ID`) REFERENCES `WORK_ORDER` (`WORK_ORDER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `REQUISITION_FORM`
--

LOCK TABLES `REQUISITION_FORM` WRITE;
/*!40000 ALTER TABLE `REQUISITION_FORM` DISABLE KEYS */;
/*!40000 ALTER TABLE `REQUISITION_FORM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `REQUISITION_FORM_ITEM`
--

DROP TABLE IF EXISTS `REQUISITION_FORM_ITEM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `REQUISITION_FORM_ITEM` (
  `REQUISITION_FORM_ITEM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned NOT NULL,
  `WAREHOUSE_ID` int(10) unsigned DEFAULT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double NOT NULL,
  `UNIT_COST` double DEFAULT '0',
  PRIMARY KEY (`REQUISITION_FORM_ITEM_ID`),
  KEY `FK_REQUISITION_FORM_ITEM_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_REQUISITION_FORM_ITEM_WAREHOUSE_ID` (`WAREHOUSE_ID`),
  KEY `FK_REQUISITION_FORM_ITEM_ITEM_ID` (`ITEM_ID`),
  CONSTRAINT `FK_REQUISITION_FORM_ITEM_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_REQUISITION_FORM_ITEM_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_REQUISITION_FORM_ITEM_WAREHOUSE_ID` FOREIGN KEY (`WAREHOUSE_ID`) REFERENCES `WAREHOUSE` (`WAREHOUSE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `REQUISITION_FORM_ITEM`
--

LOCK TABLES `REQUISITION_FORM_ITEM` WRITE;
/*!40000 ALTER TABLE `REQUISITION_FORM_ITEM` DISABLE KEYS */;
/*!40000 ALTER TABLE `REQUISITION_FORM_ITEM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `REQUISITION_TYPE`
--

DROP TABLE IF EXISTS `REQUISITION_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `REQUISITION_TYPE` (
  `REQUISITION_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(50) COLLATE utf8_spanish_ci NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`REQUISITION_TYPE_ID`),
  KEY `FK_REQUISITION_TYPE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_REQUISITION_TYPE_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_REQUISITION_TYPE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_REQUISITION_TYPE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8 COLLATE=utf8_spanish_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `REQUISITION_TYPE`
--

LOCK TABLES `REQUISITION_TYPE` WRITE;
/*!40000 ALTER TABLE `REQUISITION_TYPE` DISABLE KEYS */;
INSERT INTO `REQUISITION_TYPE` VALUES (1,'Tire',1,1,'2021-08-11 01:34:41',1,'2021-08-11 01:34:41'),(2,'Fuel',1,1,'2021-08-11 01:34:41',1,'2021-08-11 01:34:41'),(3,'PMS',1,1,'2021-08-11 01:34:41',1,'2021-08-11 01:34:41'),(4,'Electrical',1,1,'2021-08-11 01:34:41',1,'2021-08-11 01:34:41'),(5,'Construction Material',1,1,'2021-08-11 01:34:41',1,'2021-08-11 01:34:41'),(6,'Admin',1,1,'2021-08-11 01:34:41',1,'2021-08-11 01:34:41'),(7,'Motorpool',1,1,'2021-08-11 01:34:41',1,'2021-08-11 01:34:41'),(8,'Oil',1,1,'2021-08-11 01:34:41',1,'2021-08-11 01:34:41'),(9,'Subcon Settlement',1,1,'2021-08-11 01:34:41',1,'2021-08-11 01:34:41'),(10,'Pakyawan',1,1,'2021-08-11 01:34:41',1,'2021-08-11 01:34:41');
/*!40000 ALTER TABLE `REQUISITION_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `RRI_BAG_DISCOUNT`
--

DROP TABLE IF EXISTS `RRI_BAG_DISCOUNT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `RRI_BAG_DISCOUNT` (
  `RRI_BAG_DISCOUNT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned NOT NULL,
  `BAG_QUANTITY` double DEFAULT '0',
  `DISCOUNT_QUANTITY` double DEFAULT '0',
  `ACTIVE` tinyint(1) DEFAULT '1',
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`RRI_BAG_DISCOUNT_ID`),
  KEY `FK_RRIBD_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_RRIBD_CREATED_BY` (`CREATED_BY`),
  KEY `FK_RRIBD_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_RRIBD_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_RRIBD_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_RRIBD_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `RRI_BAG_DISCOUNT`
--

LOCK TABLES `RRI_BAG_DISCOUNT` WRITE;
/*!40000 ALTER TABLE `RRI_BAG_DISCOUNT` DISABLE KEYS */;
/*!40000 ALTER TABLE `RRI_BAG_DISCOUNT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `RRI_BAG_QUANTITY`
--

DROP TABLE IF EXISTS `RRI_BAG_QUANTITY`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `RRI_BAG_QUANTITY` (
  `RRI_BAG_QUANTITY_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double DEFAULT '0',
  `BAG_QUANTITY` double DEFAULT '0',
  `NET_WEIGHT` double DEFAULT '0',
  `ACTIVE` tinyint(1) DEFAULT '1',
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`RRI_BAG_QUANTITY_ID`),
  KEY `FK_RRIBQ_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_RRIBQ_CREATED_BY` (`CREATED_BY`),
  KEY `FK_RRIBQ_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_RRIBQ_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_RRIBQ_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_RRIBQ_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `RRI_BAG_QUANTITY`
--

LOCK TABLES `RRI_BAG_QUANTITY` WRITE;
/*!40000 ALTER TABLE `RRI_BAG_QUANTITY` DISABLE KEYS */;
/*!40000 ALTER TABLE `RRI_BAG_QUANTITY` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `R_PURCHASE_ORDER`
--

DROP TABLE IF EXISTS `R_PURCHASE_ORDER`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `R_PURCHASE_ORDER` (
  `R_PURCHASE_ORDER_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `FORM_WORKFLOW_ID` int(10) unsigned NOT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `SUPPLIER_ID` int(10) unsigned NOT NULL,
  `SUPPLIER_ACCOUNT_ID` int(10) unsigned NOT NULL,
  `TERM_ID` int(10) unsigned DEFAULT NULL,
  `REQUESTED_BY_ID` int(10) unsigned DEFAULT NULL,
  `PO_DATE` date NOT NULL,
  `PO_NUMBER` int(20) NOT NULL,
  `BMS_NUMBER` varchar(50) DEFAULT NULL,
  `REQUESTER_NAME` varchar(100) DEFAULT NULL,
  `REMARKS` text,
  `PR_REFERENCE` text,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `DIVISION_ID` int(10) unsigned DEFAULT NULL,
  `ESTIMATED_DELIVERY_DATE` date DEFAULT NULL,
  `CURRENCY_ID` int(10) unsigned DEFAULT NULL,
  `CURRENCY_RATE_ID` int(10) unsigned DEFAULT NULL,
  `CURRENCY_RATE_VALUE` double DEFAULT '0',
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`R_PURCHASE_ORDER_ID`),
  KEY `FK_RPO_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_RPO_SUPPLIER_ID` (`SUPPLIER_ID`),
  KEY `FK_RPO_SUPPLIER_ACCOUNT_ID` (`SUPPLIER_ACCOUNT_ID`),
  KEY `FK_RPO_TERM_ID` (`TERM_ID`),
  KEY `FK_RPO_CREATED_BY` (`CREATED_BY`),
  KEY `FK_RPO_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_RPO_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_RPO_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_RPO_DIVISION_ID` (`DIVISION_ID`),
  KEY `FK_RPO_CURRENCY_ID` (`CURRENCY_ID`),
  KEY `FK_RPO_CURRENCY_RATE_ID` (`CURRENCY_RATE_ID`),
  KEY `FK_R_PURCHASE_ORDER_REQUESTED_BY_ID` (`REQUESTED_BY_ID`),
  CONSTRAINT `FK_RPO_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_RPO_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_RPO_CURRENCY_ID` FOREIGN KEY (`CURRENCY_ID`) REFERENCES `CURRENCY` (`CURRENCY_ID`),
  CONSTRAINT `FK_RPO_CURRENCY_RATE_ID` FOREIGN KEY (`CURRENCY_RATE_ID`) REFERENCES `CURRENCY_RATE` (`CURRENCY_RATE_ID`),
  CONSTRAINT `FK_RPO_DIVISION_ID` FOREIGN KEY (`DIVISION_ID`) REFERENCES `DIVISION` (`DIVISION_ID`),
  CONSTRAINT `FK_RPO_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_RPO_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_RPO_SUPPLIER_ACCOUNT_ID` FOREIGN KEY (`SUPPLIER_ACCOUNT_ID`) REFERENCES `SUPPLIER_ACCOUNT` (`SUPPLIER_ACCOUNT_ID`),
  CONSTRAINT `FK_RPO_SUPPLIER_ID` FOREIGN KEY (`SUPPLIER_ID`) REFERENCES `SUPPLIER` (`SUPPLIER_ID`),
  CONSTRAINT `FK_RPO_TERM_ID` FOREIGN KEY (`TERM_ID`) REFERENCES `TERM` (`TERM_ID`),
  CONSTRAINT `FK_RPO_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_R_PURCHASE_ORDER_REQUESTED_BY_ID` FOREIGN KEY (`REQUESTED_BY_ID`) REFERENCES `EMPLOYEE` (`EMPLOYEE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `R_PURCHASE_ORDER`
--

LOCK TABLES `R_PURCHASE_ORDER` WRITE;
/*!40000 ALTER TABLE `R_PURCHASE_ORDER` DISABLE KEYS */;
/*!40000 ALTER TABLE `R_PURCHASE_ORDER` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `R_PURCHASE_ORDER_ITEM`
--

DROP TABLE IF EXISTS `R_PURCHASE_ORDER_ITEM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `R_PURCHASE_ORDER_ITEM` (
  `R_PURCHASE_ORDER_ITEM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `R_PURCHASE_ORDER_ID` int(10) unsigned NOT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double DEFAULT '0',
  `UNIT_COST` double DEFAULT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  PRIMARY KEY (`R_PURCHASE_ORDER_ITEM_ID`),
  KEY `FK_RPOI_PURCHASE_ORDER_ID` (`R_PURCHASE_ORDER_ID`),
  KEY `FK_RPOI_ITEM_ID` (`ITEM_ID`),
  KEY `FK_RPOI_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_RPOI_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_RPOI_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_RPOI_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_RPOI_PURCHASE_ORDER_ID` FOREIGN KEY (`R_PURCHASE_ORDER_ID`) REFERENCES `R_PURCHASE_ORDER` (`R_PURCHASE_ORDER_ID`),
  CONSTRAINT `FK_RPOI_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `R_PURCHASE_ORDER_ITEM`
--

LOCK TABLES `R_PURCHASE_ORDER_ITEM` WRITE;
/*!40000 ALTER TABLE `R_PURCHASE_ORDER_ITEM` DISABLE KEYS */;
/*!40000 ALTER TABLE `R_PURCHASE_ORDER_ITEM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `R_RECEIVING_REPORT`
--

DROP TABLE IF EXISTS `R_RECEIVING_REPORT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `R_RECEIVING_REPORT` (
  `R_RECEIVING_REPORT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `WAREHOUSE_ID` int(10) unsigned NOT NULL,
  `AP_INVOICE_ID` int(10) unsigned DEFAULT NULL,
  `DIVISION_ID` int(10) unsigned DEFAULT NULL,
  `PO_NUMBER` varchar(100) DEFAULT NULL,
  `BMS_NUMBER` varchar(50) DEFAULT NULL,
  `DELIVERY_RECEIPT_NO` varchar(20) NOT NULL,
  `REMARKS` text,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`R_RECEIVING_REPORT_ID`),
  KEY `FK_RRR_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_RRR_DIVISION_ID` (`DIVISION_ID`),
  KEY `FK_RRR_CREATED_BY` (`CREATED_BY`),
  KEY `FK_RRR_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_RRR_AP_INVOICE_ID` (`AP_INVOICE_ID`),
  KEY `FK_RRR_WAREHOUSE_ID` (`WAREHOUSE_ID`),
  CONSTRAINT `FK_RRR_AP_INVOICE_ID` FOREIGN KEY (`AP_INVOICE_ID`) REFERENCES `AP_INVOICE` (`AP_INVOICE_ID`),
  CONSTRAINT `FK_RRR_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_RRR_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_RRR_DIVISION_ID` FOREIGN KEY (`DIVISION_ID`) REFERENCES `DIVISION` (`DIVISION_ID`),
  CONSTRAINT `FK_RRR_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_RRR_WAREHOUSE_ID` FOREIGN KEY (`WAREHOUSE_ID`) REFERENCES `WAREHOUSE` (`WAREHOUSE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `R_RECEIVING_REPORT`
--

LOCK TABLES `R_RECEIVING_REPORT` WRITE;
/*!40000 ALTER TABLE `R_RECEIVING_REPORT` DISABLE KEYS */;
/*!40000 ALTER TABLE `R_RECEIVING_REPORT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `R_RECEIVING_REPORT_ITEM`
--

DROP TABLE IF EXISTS `R_RECEIVING_REPORT_ITEM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `R_RECEIVING_REPORT_ITEM` (
  `R_RECEIVING_REPORT_ITEM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `AP_INVOICE_ID` int(10) unsigned DEFAULT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double NOT NULL,
  `UNIT_COST` double NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `ITEM_DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `DISCOUNT_VALUE` double unsigned DEFAULT NULL,
  `DISCOUNT` double unsigned DEFAULT NULL,
  PRIMARY KEY (`R_RECEIVING_REPORT_ITEM_ID`),
  KEY `FK_RRRI_ITEM_ID` (`ITEM_ID`),
  KEY `FK_RRI_AP_INVOICE_ID` (`AP_INVOICE_ID`),
  KEY `FK_RRI_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_RRI_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  KEY `FK_RRI_ITEM_DISCOUNT_TYPE_ID` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_RRI_AP_INVOICE_ID` FOREIGN KEY (`AP_INVOICE_ID`) REFERENCES `AP_INVOICE` (`AP_INVOICE_ID`),
  CONSTRAINT `FK_RRI_ITEM_DISCOUNT_TYPE_ID` FOREIGN KEY (`ITEM_DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_RRI_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_RRRI_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_RRRI_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `R_RECEIVING_REPORT_ITEM`
--

LOCK TABLES `R_RECEIVING_REPORT_ITEM` WRITE;
/*!40000 ALTER TABLE `R_RECEIVING_REPORT_ITEM` DISABLE KEYS */;
/*!40000 ALTER TABLE `R_RECEIVING_REPORT_ITEM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `R_RECEIVING_REPORT_RM_ITEM`
--

DROP TABLE IF EXISTS `R_RECEIVING_REPORT_RM_ITEM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `R_RECEIVING_REPORT_RM_ITEM` (
  `R_RECEIVING_REPORT_RM_ITEM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `R_RECEIVING_REPORT_ITEM_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `ITEM_BUYING_DISCOUNT_ID` int(10) unsigned DEFAULT NULL,
  `ITEM_BUYING_ADD_ON_ID` int(10) unsigned DEFAULT NULL,
  `DISCOUNT` double DEFAULT NULL,
  `ADD_ON` double DEFAULT NULL,
  `AMOUNT` double DEFAULT NULL,
  PRIMARY KEY (`R_RECEIVING_REPORT_RM_ITEM_ID`),
  KEY `FK_RMI_RR_ITEM_ID` (`R_RECEIVING_REPORT_ITEM_ID`),
  KEY `FK_RMI_IB_DISCOUNT_ID` (`ITEM_BUYING_DISCOUNT_ID`),
  KEY `FK_RMI_IB_ADD_ON_ID` (`ITEM_BUYING_ADD_ON_ID`),
  KEY `FK_RMI_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_RMI_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_RMI_IB_ADD_ON_ID` FOREIGN KEY (`ITEM_BUYING_ADD_ON_ID`) REFERENCES `ITEM_BUYING_ADD_ON` (`ITEM_BUYING_ADD_ON_ID`),
  CONSTRAINT `FK_RMI_IB_DISCOUNT_ID` FOREIGN KEY (`ITEM_BUYING_DISCOUNT_ID`) REFERENCES `ITEM_BUYING_DISCOUNT` (`ITEM_BUYING_DISCOUNT_ID`),
  CONSTRAINT `FK_RMI_RR_ITEM_ID` FOREIGN KEY (`R_RECEIVING_REPORT_ITEM_ID`) REFERENCES `R_RECEIVING_REPORT_ITEM` (`R_RECEIVING_REPORT_ITEM_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `R_RECEIVING_REPORT_RM_ITEM`
--

LOCK TABLES `R_RECEIVING_REPORT_RM_ITEM` WRITE;
/*!40000 ALTER TABLE `R_RECEIVING_REPORT_RM_ITEM` DISABLE KEYS */;
/*!40000 ALTER TABLE `R_RECEIVING_REPORT_RM_ITEM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `R_RETURN_TO_SUPPLIER`
--

DROP TABLE IF EXISTS `R_RETURN_TO_SUPPLIER`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `R_RETURN_TO_SUPPLIER` (
  `R_RETURN_TO_SUPPLIER_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `AP_INVOICE_ID` int(10) unsigned DEFAULT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `WAREHOUSE_ID` int(10) unsigned NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`R_RETURN_TO_SUPPLIER_ID`),
  KEY `FK_RRTS_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_RRTS_WAREHOUSE_ID` (`WAREHOUSE_ID`),
  KEY `FK_RRTS_CREATED_BY` (`CREATED_BY`),
  KEY `FK_RRTS_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_RRTS_AP_INVOICE_ID` (`AP_INVOICE_ID`),
  CONSTRAINT `FK_RRTS_AP_INVOICE_ID` FOREIGN KEY (`AP_INVOICE_ID`) REFERENCES `AP_INVOICE` (`AP_INVOICE_ID`),
  CONSTRAINT `FK_RRTS_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_RRTS_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_RRTS_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_RRTS_WAREHOUSE_ID` FOREIGN KEY (`WAREHOUSE_ID`) REFERENCES `WAREHOUSE` (`WAREHOUSE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `R_RETURN_TO_SUPPLIER`
--

LOCK TABLES `R_RETURN_TO_SUPPLIER` WRITE;
/*!40000 ALTER TABLE `R_RETURN_TO_SUPPLIER` DISABLE KEYS */;
/*!40000 ALTER TABLE `R_RETURN_TO_SUPPLIER` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `R_RETURN_TO_SUPPLIER_ITEM`
--

DROP TABLE IF EXISTS `R_RETURN_TO_SUPPLIER_ITEM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `R_RETURN_TO_SUPPLIER_ITEM` (
  `R_RETURN_TO_SUPPLIER_ITEM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `AP_INVOICE_ID` int(10) unsigned DEFAULT NULL,
  `R_RECEIVING_REPORT_ITEM_ID` int(10) unsigned DEFAULT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double DEFAULT '0',
  `UNIT_COST` double NOT NULL DEFAULT '0',
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `ITEM_DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `DISCOUNT_VALUE` double DEFAULT '0',
  `DISCOUNT` double DEFAULT '0',
  PRIMARY KEY (`R_RETURN_TO_SUPPLIER_ITEM_ID`),
  KEY `FK_RRTSI_R_RECEIVING_REPOR_ITEM_ID` (`R_RECEIVING_REPORT_ITEM_ID`),
  KEY `FK_RRTSI_R_ITEM_ID` (`ITEM_ID`),
  KEY `FK_RRTSI_AP_INVOICE_ID` (`AP_INVOICE_ID`),
  KEY `FK_RRTSI_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_RRTSI_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  KEY `FK_RRTSI_ITEM_DISCOUNT_TYPE_ID` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_RRTSI_AP_INVOICE_ID` FOREIGN KEY (`AP_INVOICE_ID`) REFERENCES `AP_INVOICE` (`AP_INVOICE_ID`),
  CONSTRAINT `FK_RRTSI_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_RRTSI_ITEM_DISCOUNT_TYPE_ID` FOREIGN KEY (`ITEM_DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_RRTSI_R_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_RRTSI_R_RECEIVING_REPOR_ITEM_ID` FOREIGN KEY (`R_RECEIVING_REPORT_ITEM_ID`) REFERENCES `R_RECEIVING_REPORT_ITEM` (`R_RECEIVING_REPORT_ITEM_ID`),
  CONSTRAINT `FK_RRTSI_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `R_RETURN_TO_SUPPLIER_ITEM`
--

LOCK TABLES `R_RETURN_TO_SUPPLIER_ITEM` WRITE;
/*!40000 ALTER TABLE `R_RETURN_TO_SUPPLIER_ITEM` DISABLE KEYS */;
/*!40000 ALTER TABLE `R_RETURN_TO_SUPPLIER_ITEM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `R_TRANSFER_RECEIPT`
--

DROP TABLE IF EXISTS `R_TRANSFER_RECEIPT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `R_TRANSFER_RECEIPT` (
  `R_TRANSFER_RECEIPT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `FORM_WORKFLOW_ID` int(10) unsigned DEFAULT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `WAREHOUSE_FROM_ID` int(10) unsigned NOT NULL,
  `TRANSFER_RECEIPT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `WAREHOUSE_TO_ID` int(10) unsigned NOT NULL,
  `TR_DATE` date NOT NULL,
  `DR_NUMBER` varchar(20) NOT NULL,
  `TR_NUMBER` int(20) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`R_TRANSFER_RECEIPT_ID`),
  KEY `FK_RTR_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_RTR_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_RTR_FROM_ID` (`WAREHOUSE_FROM_ID`),
  KEY `FK_RTR_TO_ID` (`WAREHOUSE_TO_ID`),
  KEY `FK_RTR_CREATED_BY` (`CREATED_BY`),
  KEY `FK_RTR_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_RTR_TRANSFER_RECEIPT_TYPE_ID` (`TRANSFER_RECEIPT_TYPE_ID`),
  KEY `FK_RTR_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_RTR_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_RTR_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_RTR_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_RTR_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_RTR_FROM_ID` FOREIGN KEY (`WAREHOUSE_FROM_ID`) REFERENCES `WAREHOUSE` (`WAREHOUSE_ID`),
  CONSTRAINT `FK_RTR_TO_ID` FOREIGN KEY (`WAREHOUSE_TO_ID`) REFERENCES `WAREHOUSE` (`WAREHOUSE_ID`),
  CONSTRAINT `FK_RTR_TRANSFER_RECEIPT_TYPE_ID` FOREIGN KEY (`TRANSFER_RECEIPT_TYPE_ID`) REFERENCES `TRANSFER_RECEIPT_TYPE` (`TRANSFER_RECEIPT_TYPE_ID`),
  CONSTRAINT `FK_RTR_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `R_TRANSFER_RECEIPT`
--

LOCK TABLES `R_TRANSFER_RECEIPT` WRITE;
/*!40000 ALTER TABLE `R_TRANSFER_RECEIPT` DISABLE KEYS */;
/*!40000 ALTER TABLE `R_TRANSFER_RECEIPT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `R_TRANSFER_RECEIPT_ITEM`
--

DROP TABLE IF EXISTS `R_TRANSFER_RECEIPT_ITEM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `R_TRANSFER_RECEIPT_ITEM` (
  `R_TRANSFER_RECEIPT_ITEM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `R_TRANSFER_RECEIPT_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double NOT NULL,
  `UNIT_COST` double NOT NULL DEFAULT '0',
  PRIMARY KEY (`R_TRANSFER_RECEIPT_ITEM_ID`),
  KEY `RTRI_RTRANSFER_RECEIPT_ID` (`R_TRANSFER_RECEIPT_ID`),
  KEY `RTRI_ITEM_ID` (`ITEM_ID`),
  KEY `RTRI_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `RTRI_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `RTRI_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `RTRI_RTRANSFER_RECEIPT_ID` FOREIGN KEY (`R_TRANSFER_RECEIPT_ID`) REFERENCES `R_TRANSFER_RECEIPT` (`R_TRANSFER_RECEIPT_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `R_TRANSFER_RECEIPT_ITEM`
--

LOCK TABLES `R_TRANSFER_RECEIPT_ITEM` WRITE;
/*!40000 ALTER TABLE `R_TRANSFER_RECEIPT_ITEM` DISABLE KEYS */;
/*!40000 ALTER TABLE `R_TRANSFER_RECEIPT_ITEM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `SALARY_TYPE`
--

DROP TABLE IF EXISTS `SALARY_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `SALARY_TYPE` (
  `SALARY_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(20) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`SALARY_TYPE_ID`),
  KEY `FK_SALARY_TYPE_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_SALARY_TYPE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_SALARY_TYPE_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_SALARY_TYPE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_SALARY_TYPE_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_SALARY_TYPE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `SALARY_TYPE`
--

LOCK TABLES `SALARY_TYPE` WRITE;
/*!40000 ALTER TABLE `SALARY_TYPE` DISABLE KEYS */;
INSERT INTO `SALARY_TYPE` VALUES (1,'Semi-Monthly',1,63,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(2,'Daily',1,64,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10'),(3,'Monthly',0,65,1,'2021-08-11 01:34:10',1,'2021-08-11 01:34:10');
/*!40000 ALTER TABLE `SALARY_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `SALES_ORDER`
--

DROP TABLE IF EXISTS `SALES_ORDER`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `SALES_ORDER` (
  `SALES_ORDER_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `SALES_QUOTATION_ID` int(10) unsigned DEFAULT NULL,
  `FORM_WORKFLOW_ID` int(10) unsigned DEFAULT NULL,
  `SEQUENCE_NO` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `DIVISION_ID` int(10) unsigned NOT NULL,
  `DATE` date DEFAULT NULL,
  `DELIVERY_DATE` date DEFAULT NULL,
  `SO_TYPE_ID` int(10) unsigned NOT NULL,
  `PO_NUMBER` varchar(50) DEFAULT NULL,
  `AR_CUSTOMER_ID` int(10) unsigned NOT NULL,
  `AR_CUSTOMER_ACCOUNT_ID` int(10) unsigned NOT NULL,
  `TERM_ID` int(10) unsigned NOT NULL,
  `CUSTOMER_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `SHIP_TO` text,
  `REMARKS` text,
  `CURRENCY_ID` int(10) unsigned NOT NULL,
  `CURRENCY_RATE_ID` int(10) unsigned DEFAULT NULL,
  `CURRENCY_RATE_VALUE` double DEFAULT '0',
  `AMOUNT` double DEFAULT '0',
  `WT_ACCOUNT_SETTING_ID` int(10) unsigned DEFAULT NULL,
  `WT_AMOUNT` double DEFAULT '0',
  `WT_VAT_AMOUNT` double DEFAULT '0',
  `DEPOSIT` tinyint(1) DEFAULT NULL,
  `ADVANCE_PAYMENT` double DEFAULT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`SALES_ORDER_ID`),
  KEY `FK_SO_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_SO_SALES_QUOTATION_ID` (`SALES_QUOTATION_ID`),
  KEY `FK_SO_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_SO_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_SO_DIVISION_ID` (`DIVISION_ID`),
  KEY `FK_SO_SO_TYPE_ID` (`SO_TYPE_ID`),
  KEY `FK_SO_AR_CUSTOMER_ID` (`AR_CUSTOMER_ID`),
  KEY `FK_SO_AR_CUSTOMER_ACCOUNT_ID` (`AR_CUSTOMER_ACCOUNT_ID`),
  KEY `FK_SO_TERM_ID` (`TERM_ID`),
  KEY `FK_SO_CURRENCY_ID` (`CURRENCY_ID`),
  KEY `FK_SO_CURRENCY_RATE_ID` (`CURRENCY_RATE_ID`),
  KEY `FK_SO_CUSTOMER_TYPE_ID` (`CUSTOMER_TYPE_ID`),
  KEY `FK_SO_WT_ACCOUNT_SETTING_ID` (`WT_ACCOUNT_SETTING_ID`),
  KEY `FK_SO_CREATED_BY` (`CREATED_BY`),
  KEY `FK_SO_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_SO_AR_CUSTOMER_ACCOUNT_ID` FOREIGN KEY (`AR_CUSTOMER_ACCOUNT_ID`) REFERENCES `AR_CUSTOMER_ACCOUNT` (`AR_CUSTOMER_ACCOUNT_ID`),
  CONSTRAINT `FK_SO_AR_CUSTOMER_ID` FOREIGN KEY (`AR_CUSTOMER_ID`) REFERENCES `AR_CUSTOMER` (`AR_CUSTOMER_ID`),
  CONSTRAINT `FK_SO_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_SO_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_SO_CURRENCY_ID` FOREIGN KEY (`CURRENCY_ID`) REFERENCES `CURRENCY` (`CURRENCY_ID`),
  CONSTRAINT `FK_SO_CURRENCY_RATE_ID` FOREIGN KEY (`CURRENCY_RATE_ID`) REFERENCES `CURRENCY_RATE` (`CURRENCY_RATE_ID`),
  CONSTRAINT `FK_SO_CUSTOMER_TYPE_ID` FOREIGN KEY (`CUSTOMER_TYPE_ID`) REFERENCES `CUSTOMER_TYPE` (`CUSTOMER_TYPE_ID`),
  CONSTRAINT `FK_SO_DIVISION_ID` FOREIGN KEY (`DIVISION_ID`) REFERENCES `DIVISION` (`DIVISION_ID`),
  CONSTRAINT `FK_SO_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_SO_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_SO_SALES_QUOTATION_ID` FOREIGN KEY (`SALES_QUOTATION_ID`) REFERENCES `SALES_QUOTATION` (`SALES_QUOTATION_ID`),
  CONSTRAINT `FK_SO_SO_TYPE_ID` FOREIGN KEY (`SO_TYPE_ID`) REFERENCES `SO_TYPE` (`SO_TYPE_ID`),
  CONSTRAINT `FK_SO_TERM_ID` FOREIGN KEY (`TERM_ID`) REFERENCES `TERM` (`TERM_ID`),
  CONSTRAINT `FK_SO_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_SO_WT_ACCOUNT_SETTING_ID` FOREIGN KEY (`WT_ACCOUNT_SETTING_ID`) REFERENCES `WT_ACCOUNT_SETTING` (`WT_ACCOUNT_SETTING_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `SALES_ORDER`
--

LOCK TABLES `SALES_ORDER` WRITE;
/*!40000 ALTER TABLE `SALES_ORDER` DISABLE KEYS */;
/*!40000 ALTER TABLE `SALES_ORDER` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `SALES_ORDER_EQUIPMENT_LINE`
--

DROP TABLE IF EXISTS `SALES_ORDER_EQUIPMENT_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `SALES_ORDER_EQUIPMENT_LINE` (
  `SALES_ORDER_EQUIPMENT_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `SALES_ORDER_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `AR_LINE_SETUP_ID` int(10) unsigned NOT NULL,
  `DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `DISCOUNT_VALUE` double DEFAULT '0',
  `DISCOUNT` double DEFAULT '0',
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `AMOUNT` double DEFAULT '0',
  `QUANTITY` double DEFAULT '0',
  `UP_AMOUNT` double DEFAULT '0',
  `UNITOFMEASUREMENT_ID` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`SALES_ORDER_EQUIPMENT_LINE_ID`),
  KEY `FK_SOEL_SALES_ORDER_ID` (`SALES_ORDER_ID`),
  KEY `FK_SOEL_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_SOEL_AR_LINE_SETUP_ID` (`AR_LINE_SETUP_ID`),
  KEY `FK_SOEL_DISCOUNT_TYPE_ID` (`DISCOUNT_TYPE_ID`),
  KEY `FK_SOEL_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_SOEL_AR_LINE_SETUP_ID` FOREIGN KEY (`AR_LINE_SETUP_ID`) REFERENCES `AR_LINE_SETUP` (`AR_LINE_SETUP_ID`),
  CONSTRAINT `FK_SOEL_DISCOUNT_TYPE_ID` FOREIGN KEY (`DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_SOEL_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_SOEL_SALES_ORDER_ID` FOREIGN KEY (`SALES_ORDER_ID`) REFERENCES `SALES_ORDER` (`SALES_ORDER_ID`),
  CONSTRAINT `FK_SOEL_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `SALES_ORDER_EQUIPMENT_LINE`
--

LOCK TABLES `SALES_ORDER_EQUIPMENT_LINE` WRITE;
/*!40000 ALTER TABLE `SALES_ORDER_EQUIPMENT_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `SALES_ORDER_EQUIPMENT_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `SALES_ORDER_ITEM`
--

DROP TABLE IF EXISTS `SALES_ORDER_ITEM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `SALES_ORDER_ITEM` (
  `SALES_ORDER_ITEM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `SALES_ORDER_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double DEFAULT '0',
  `GROSS_AMOUNT` double DEFAULT '0',
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `AMOUNT` double DEFAULT '0',
  `ITEM_DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `DISCOUNT_VALUE` double DEFAULT '0',
  `DISCOUNT` double DEFAULT '0',
  `MEMO` text,
  PRIMARY KEY (`SALES_ORDER_ITEM_ID`),
  KEY `FK_SOI_SALES_ORDER_ID` (`SALES_ORDER_ID`),
  KEY `FK_SOI_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_SOI_ITEM_ID` (`ITEM_ID`),
  KEY `FK_SOI_ITEM_DISCOUNT_TYPE_ID` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_SOI_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_SOI_ITEM_DISCOUNT_TYPE_ID` FOREIGN KEY (`ITEM_DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_SOI_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_SOI_SALES_ORDER_ID` FOREIGN KEY (`SALES_ORDER_ID`) REFERENCES `SALES_ORDER` (`SALES_ORDER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `SALES_ORDER_ITEM`
--

LOCK TABLES `SALES_ORDER_ITEM` WRITE;
/*!40000 ALTER TABLE `SALES_ORDER_ITEM` DISABLE KEYS */;
/*!40000 ALTER TABLE `SALES_ORDER_ITEM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `SALES_ORDER_LINE`
--

DROP TABLE IF EXISTS `SALES_ORDER_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `SALES_ORDER_LINE` (
  `SALES_ORDER_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `SALES_ORDER_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `SERVICE_SETTING_ID` int(10) unsigned NOT NULL,
  `DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `DISCOUNT_VALUE` double DEFAULT '0',
  `DISCOUNT` double DEFAULT '0',
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `AMOUNT` double DEFAULT '0',
  `QUANTITY` double DEFAULT '0',
  `UP_AMOUNT` double DEFAULT '0',
  `UNITOFMEASUREMENT_ID` int(10) unsigned DEFAULT NULL,
  `DESCRIPTION` text,
  PRIMARY KEY (`SALES_ORDER_LINE_ID`),
  KEY `FK_SOL_SALES_ORDER_ID` (`SALES_ORDER_ID`),
  KEY `FK_SOL_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_SOL_SERVICE_SETTING_ID` (`SERVICE_SETTING_ID`),
  KEY `FK_SOL_DISCOUNT_TYPE_ID` (`DISCOUNT_TYPE_ID`),
  KEY `FK_SOL_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_SOL_DISCOUNT_TYPE_ID` FOREIGN KEY (`DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_SOL_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_SOL_SALES_ORDER_ID` FOREIGN KEY (`SALES_ORDER_ID`) REFERENCES `SALES_ORDER` (`SALES_ORDER_ID`),
  CONSTRAINT `FK_SOL_SERVICE_SETTING_ID` FOREIGN KEY (`SERVICE_SETTING_ID`) REFERENCES `SERVICE_SETTING` (`SERVICE_SETTING_ID`),
  CONSTRAINT `FK_SOL_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `SALES_ORDER_LINE`
--

LOCK TABLES `SALES_ORDER_LINE` WRITE;
/*!40000 ALTER TABLE `SALES_ORDER_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `SALES_ORDER_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `SALES_ORDER_TRUCKING_LINE`
--

DROP TABLE IF EXISTS `SALES_ORDER_TRUCKING_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `SALES_ORDER_TRUCKING_LINE` (
  `SALES_ORDER_TRUCKING_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `SALES_ORDER_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `AR_LINE_SETUP_ID` int(10) unsigned NOT NULL,
  `DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `DISCOUNT_VALUE` double DEFAULT '0',
  `DISCOUNT` double DEFAULT '0',
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `AMOUNT` double DEFAULT '0',
  `QUANTITY` double DEFAULT '0',
  `UP_AMOUNT` double DEFAULT '0',
  `UNITOFMEASUREMENT_ID` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`SALES_ORDER_TRUCKING_LINE_ID`),
  KEY `FK_SOTL_SALES_ORDER_ID` (`SALES_ORDER_ID`),
  KEY `FK_SOTL_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_SOTL_AR_LINE_SETUP_ID` (`AR_LINE_SETUP_ID`),
  KEY `FK_SOTL_DISCOUNT_TYPE_ID` (`DISCOUNT_TYPE_ID`),
  KEY `FK_SOTL_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_SOTL_AR_LINE_SETUP_ID` FOREIGN KEY (`AR_LINE_SETUP_ID`) REFERENCES `AR_LINE_SETUP` (`AR_LINE_SETUP_ID`),
  CONSTRAINT `FK_SOTL_DISCOUNT_TYPE_ID` FOREIGN KEY (`DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_SOTL_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_SOTL_SALES_ORDER_ID` FOREIGN KEY (`SALES_ORDER_ID`) REFERENCES `SALES_ORDER` (`SALES_ORDER_ID`),
  CONSTRAINT `FK_SOTL_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `SALES_ORDER_TRUCKING_LINE`
--

LOCK TABLES `SALES_ORDER_TRUCKING_LINE` WRITE;
/*!40000 ALTER TABLE `SALES_ORDER_TRUCKING_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `SALES_ORDER_TRUCKING_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `SALES_PERSONNEL`
--

DROP TABLE IF EXISTS `SALES_PERSONNEL`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `SALES_PERSONNEL` (
  `SALES_PERSONNEL_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `NAME` varchar(50) NOT NULL,
  `CONTACT_NUMBER` varchar(20) NOT NULL,
  `ADDRESS` text,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`SALES_PERSONNEL_ID`),
  KEY `FK_SALES_PERSONNEL_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_SALES_PERSONNEL_CREATED_BY` (`CREATED_BY`),
  KEY `FK_SALES_PERSONNEL_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_SALES_PERSONNEL_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_SALES_PERSONNEL_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_SALES_PERSONNEL_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `SALES_PERSONNEL`
--

LOCK TABLES `SALES_PERSONNEL` WRITE;
/*!40000 ALTER TABLE `SALES_PERSONNEL` DISABLE KEYS */;
/*!40000 ALTER TABLE `SALES_PERSONNEL` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `SALES_QUOTATION`
--

DROP TABLE IF EXISTS `SALES_QUOTATION`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `SALES_QUOTATION` (
  `SALES_QUOTATION_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `FORM_WORKFLOW_ID` int(10) unsigned DEFAULT NULL,
  `SEQUENCE_NO` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `AR_CUSTOMER_ID` int(10) unsigned NOT NULL,
  `AR_CUSTOMER_ACCOUNT_ID` int(10) unsigned NOT NULL,
  `CUSTOMER_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `DATE` date DEFAULT NULL,
  `SHIP_TO` text,
  `SUBJECT` text,
  `GENERAL_CONDITIONS` text,
  `AMOUNT` double DEFAULT '0',
  `WT_ACCOUNT_SETTING_ID` int(10) unsigned DEFAULT NULL,
  `WT_AMOUNT` double DEFAULT '0',
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`SALES_QUOTATION_ID`),
  KEY `FK_SQ_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_SQ_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_SQ_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_SQ_AR_CUSTOMER_ID` (`AR_CUSTOMER_ID`),
  KEY `FK_SQ_AR_CUSTOMER_ACCOUNT_ID` (`AR_CUSTOMER_ACCOUNT_ID`),
  KEY `FK_SQ_CUSTOMER_TYPE_ID` (`CUSTOMER_TYPE_ID`),
  KEY `FK_SQ_WT_ACCOUNT_SETTING_ID` (`WT_ACCOUNT_SETTING_ID`),
  KEY `FK_SQ_CREATED_BY` (`CREATED_BY`),
  KEY `FK_SQ_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_SQ_AR_CUSTOMER_ACCOUNT_ID` FOREIGN KEY (`AR_CUSTOMER_ACCOUNT_ID`) REFERENCES `AR_CUSTOMER_ACCOUNT` (`AR_CUSTOMER_ACCOUNT_ID`),
  CONSTRAINT `FK_SQ_AR_CUSTOMER_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_SQ_COMPANY_ID` FOREIGN KEY (`AR_CUSTOMER_ID`) REFERENCES `AR_CUSTOMER` (`AR_CUSTOMER_ID`),
  CONSTRAINT `FK_SQ_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_SQ_CUSTOMER_TYPE_ID` FOREIGN KEY (`CUSTOMER_TYPE_ID`) REFERENCES `CUSTOMER_TYPE` (`CUSTOMER_TYPE_ID`),
  CONSTRAINT `FK_SQ_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_SQ_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_SQ_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_SQ_WT_ACCOUNT_SETTING_ID` FOREIGN KEY (`WT_ACCOUNT_SETTING_ID`) REFERENCES `WT_ACCOUNT_SETTING` (`WT_ACCOUNT_SETTING_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `SALES_QUOTATION`
--

LOCK TABLES `SALES_QUOTATION` WRITE;
/*!40000 ALTER TABLE `SALES_QUOTATION` DISABLE KEYS */;
/*!40000 ALTER TABLE `SALES_QUOTATION` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `SALES_QUOTATION_EQUIPMENT_LINE`
--

DROP TABLE IF EXISTS `SALES_QUOTATION_EQUIPMENT_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `SALES_QUOTATION_EQUIPMENT_LINE` (
  `SALES_QUOTATION_EQUIPMENT_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `SALES_QUOTATION_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `AR_LINE_SETUP_ID` int(10) unsigned NOT NULL,
  `GROSS_AMOUNT` double DEFAULT '0',
  `DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `DISCOUNT_VALUE` double DEFAULT '0',
  `DISCOUNT` double DEFAULT '0',
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `AMOUNT` double DEFAULT '0',
  `QUANTITY` double DEFAULT '0',
  `UP_AMOUNT` double DEFAULT '0',
  `UNITOFMEASUREMENT_ID` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`SALES_QUOTATION_EQUIPMENT_LINE_ID`),
  KEY `FK_SQEL_SALES_QUOTATION_ID` (`SALES_QUOTATION_ID`),
  KEY `FK_SQEL_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_SQEL_AR_LINE_SETUP_ID` (`AR_LINE_SETUP_ID`),
  KEY `FK_SQEL_DISCOUNT_TYPE_ID` (`DISCOUNT_TYPE_ID`),
  KEY `FK_SQEL_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_SQEL_AR_LINE_SETUP_ID` FOREIGN KEY (`AR_LINE_SETUP_ID`) REFERENCES `AR_LINE_SETUP` (`AR_LINE_SETUP_ID`),
  CONSTRAINT `FK_SQEL_DISCOUNT_TYPE_ID` FOREIGN KEY (`DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_SQEL_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_SQEL_SALES_QUOTATION_ID` FOREIGN KEY (`SALES_QUOTATION_ID`) REFERENCES `SALES_QUOTATION` (`SALES_QUOTATION_ID`),
  CONSTRAINT `FK_SQEL_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `SALES_QUOTATION_EQUIPMENT_LINE`
--

LOCK TABLES `SALES_QUOTATION_EQUIPMENT_LINE` WRITE;
/*!40000 ALTER TABLE `SALES_QUOTATION_EQUIPMENT_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `SALES_QUOTATION_EQUIPMENT_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `SALES_QUOTATION_ITEM`
--

DROP TABLE IF EXISTS `SALES_QUOTATION_ITEM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `SALES_QUOTATION_ITEM` (
  `SALES_QUOTATION_ITEM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `SALES_QUOTATION_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double DEFAULT '0',
  `GROSS_AMOUNT` double DEFAULT '0',
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `AMOUNT` double DEFAULT '0',
  `ITEM_DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `DISCOUNT_VALUE` double DEFAULT '0',
  `DISCOUNT` double DEFAULT '0',
  `MEMO` text,
  PRIMARY KEY (`SALES_QUOTATION_ITEM_ID`),
  KEY `FK_SQI_SALES_QUOTATION_ID` (`SALES_QUOTATION_ID`),
  KEY `FK_SQI_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_SQI_ITEM_ID` (`ITEM_ID`),
  KEY `FK_SQI_ITEM_DISCOUNT_TYPE_ID` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_SQI_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_SQI_ITEM_DISCOUNT_TYPE_ID` FOREIGN KEY (`ITEM_DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_SQI_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_SQI_SALES_QUOTATION_ID` FOREIGN KEY (`SALES_QUOTATION_ID`) REFERENCES `SALES_QUOTATION` (`SALES_QUOTATION_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `SALES_QUOTATION_ITEM`
--

LOCK TABLES `SALES_QUOTATION_ITEM` WRITE;
/*!40000 ALTER TABLE `SALES_QUOTATION_ITEM` DISABLE KEYS */;
/*!40000 ALTER TABLE `SALES_QUOTATION_ITEM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `SALES_QUOTATION_LINE`
--

DROP TABLE IF EXISTS `SALES_QUOTATION_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `SALES_QUOTATION_LINE` (
  `SALES_QUOTATION_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `SALES_QUOTATION_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `AR_LINE_SETUP_ID` int(10) unsigned NOT NULL,
  `GROSS_AMOUNT` double DEFAULT '0',
  `DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `DISCOUNT_VALUE` double DEFAULT '0',
  `DISCOUNT` double DEFAULT '0',
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `AMOUNT` double DEFAULT '0',
  `QUANTITY` double DEFAULT '0',
  `UP_AMOUNT` double DEFAULT '0',
  `UNITOFMEASUREMENT_ID` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`SALES_QUOTATION_LINE_ID`),
  KEY `FK_SQL_SALES_QUOTATION_ID` (`SALES_QUOTATION_ID`),
  KEY `FK_SQL_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_SQL_AR_LINE_SETUP_ID` (`AR_LINE_SETUP_ID`),
  KEY `FK_SQL_DISCOUNT_TYPE_ID` (`DISCOUNT_TYPE_ID`),
  KEY `FK_SQL_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_SQL_AR_LINE_SETUP_ID` FOREIGN KEY (`AR_LINE_SETUP_ID`) REFERENCES `AR_LINE_SETUP` (`AR_LINE_SETUP_ID`),
  CONSTRAINT `FK_SQL_DISCOUNT_TYPE_ID` FOREIGN KEY (`DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_SQL_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_SQL_SALES_QUOTATION_ID` FOREIGN KEY (`SALES_QUOTATION_ID`) REFERENCES `SALES_QUOTATION` (`SALES_QUOTATION_ID`),
  CONSTRAINT `FK_SQL_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `SALES_QUOTATION_LINE`
--

LOCK TABLES `SALES_QUOTATION_LINE` WRITE;
/*!40000 ALTER TABLE `SALES_QUOTATION_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `SALES_QUOTATION_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `SALES_QUOTATION_TRUCKING_LINE`
--

DROP TABLE IF EXISTS `SALES_QUOTATION_TRUCKING_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `SALES_QUOTATION_TRUCKING_LINE` (
  `SALES_QUOTATION_TRUCKING_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `SALES_QUOTATION_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `AR_LINE_SETUP_ID` int(10) unsigned NOT NULL,
  `GROSS_AMOUNT` double DEFAULT '0',
  `DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `DISCOUNT_VALUE` double DEFAULT '0',
  `DISCOUNT` double DEFAULT '0',
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `AMOUNT` double DEFAULT '0',
  `QUANTITY` double DEFAULT '0',
  `UP_AMOUNT` double DEFAULT '0',
  `UNITOFMEASUREMENT_ID` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`SALES_QUOTATION_TRUCKING_LINE_ID`),
  KEY `FK_SQTL_SALES_QUOTATION_ID` (`SALES_QUOTATION_ID`),
  KEY `FK_SQTL_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_SQTL_AR_LINE_SETUP_ID` (`AR_LINE_SETUP_ID`),
  KEY `FK_SQTL_DISCOUNT_TYPE_ID` (`DISCOUNT_TYPE_ID`),
  KEY `FK_SQTL_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_SQTL_AR_LINE_SETUP_ID` FOREIGN KEY (`AR_LINE_SETUP_ID`) REFERENCES `AR_LINE_SETUP` (`AR_LINE_SETUP_ID`),
  CONSTRAINT `FK_SQTL_DISCOUNT_TYPE_ID` FOREIGN KEY (`DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_SQTL_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_SQTL_SALES_QUOTATION_ID` FOREIGN KEY (`SALES_QUOTATION_ID`) REFERENCES `SALES_QUOTATION` (`SALES_QUOTATION_ID`),
  CONSTRAINT `FK_SQTL_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `SALES_QUOTATION_TRUCKING_LINE`
--

LOCK TABLES `SALES_QUOTATION_TRUCKING_LINE` WRITE;
/*!40000 ALTER TABLE `SALES_QUOTATION_TRUCKING_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `SALES_QUOTATION_TRUCKING_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `SERIAL_ITEM`
--

DROP TABLE IF EXISTS `SERIAL_ITEM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `SERIAL_ITEM` (
  `SERIAL_ITEM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double DEFAULT '1',
  `ITEM_SRP_ID` int(10) unsigned DEFAULT NULL,
  `SRP` double DEFAULT NULL,
  `UNIT_COST` double NOT NULL,
  `DISCOUNT` double DEFAULT '0',
  `ITEM_DISCOUNT_ID` int(10) unsigned DEFAULT NULL,
  `ITEM_ADD_ON_ID` int(10) unsigned DEFAULT NULL,
  `AMOUNT` double DEFAULT NULL,
  `WAREHOUSE_ID` int(10) unsigned NOT NULL,
  `SERIAL_NUMBER` varchar(50) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `ITEM_DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `DISCOUNT_VALUE` double DEFAULT '0',
  PRIMARY KEY (`SERIAL_ITEM_ID`),
  KEY `FK_SI_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_SI_ITEM_ID` (`ITEM_ID`),
  KEY `FK_SI_CREATED_BY` (`CREATED_BY`),
  KEY `FK_SI_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_SI_WAREHOUSE_ID` (`WAREHOUSE_ID`),
  KEY `FK_SI_SRP_ID` (`ITEM_SRP_ID`),
  KEY `FK_SI_DISCOUNT_ID` (`ITEM_DISCOUNT_ID`),
  KEY `FK_SI_ADD_ON_ID` (`ITEM_ADD_ON_ID`),
  KEY `FK_SI_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  KEY `FK_SI_ITEM_DISCOUNT_TYPE_ID` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_SI_ADD_ON_ID` FOREIGN KEY (`ITEM_ADD_ON_ID`) REFERENCES `ITEM_ADD_ON` (`ITEM_ADD_ON_ID`),
  CONSTRAINT `FK_SI_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_SI_DISCOUNT_ID` FOREIGN KEY (`ITEM_DISCOUNT_ID`) REFERENCES `ITEM_DISCOUNT` (`ITEM_DISCOUNT_ID`),
  CONSTRAINT `FK_SI_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_SI_ITEM_DISCOUNT_TYPE_ID` FOREIGN KEY (`ITEM_DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_SI_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_SI_SRP_ID` FOREIGN KEY (`ITEM_SRP_ID`) REFERENCES `ITEM_SRP` (`ITEM_SRP_ID`),
  CONSTRAINT `FK_SI_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_SI_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_SI_WAREHOUSE_ID` FOREIGN KEY (`WAREHOUSE_ID`) REFERENCES `WAREHOUSE` (`WAREHOUSE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `SERIAL_ITEM`
--

LOCK TABLES `SERIAL_ITEM` WRITE;
/*!40000 ALTER TABLE `SERIAL_ITEM` DISABLE KEYS */;
/*!40000 ALTER TABLE `SERIAL_ITEM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `SERIAL_ITEM_SETUP`
--

DROP TABLE IF EXISTS `SERIAL_ITEM_SETUP`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `SERIAL_ITEM_SETUP` (
  `SERIAL_ITEM_SETUP_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `SERIALIZED_ITEM` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`SERIAL_ITEM_SETUP_ID`),
  KEY `FK_SIS_ITEM_ID` (`ITEM_ID`),
  CONSTRAINT `FK_SIS_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `SERIAL_ITEM_SETUP`
--

LOCK TABLES `SERIAL_ITEM_SETUP` WRITE;
/*!40000 ALTER TABLE `SERIAL_ITEM_SETUP` DISABLE KEYS */;
/*!40000 ALTER TABLE `SERIAL_ITEM_SETUP` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `SERVICE_SETTING`
--

DROP TABLE IF EXISTS `SERVICE_SETTING`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `SERVICE_SETTING` (
  `SERVICE_SETTING_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(100) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `ACCOUNT_COMBINATION_ID` int(10) unsigned NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`SERVICE_SETTING_ID`),
  KEY `FK_SERVICE_ACCT_COMBI` (`ACCOUNT_COMBINATION_ID`),
  KEY `FK_SERVICE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_SERVICE_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_SERVICE_ACCT_COMBI` FOREIGN KEY (`ACCOUNT_COMBINATION_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_SERVICE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_SERVICE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `SERVICE_SETTING`
--

LOCK TABLES `SERVICE_SETTING` WRITE;
/*!40000 ALTER TABLE `SERVICE_SETTING` DISABLE KEYS */;
/*!40000 ALTER TABLE `SERVICE_SETTING` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `STOCK_ADJUSTMENT`
--

DROP TABLE IF EXISTS `STOCK_ADJUSTMENT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `STOCK_ADJUSTMENT` (
  `STOCK_ADJUSTMENT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `STOCK_ADJUSTMENT_CLASSIFICATION_ID` int(10) unsigned DEFAULT NULL,
  `FORM_WORKFLOW_ID` int(10) unsigned DEFAULT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `WAREHOUSE_ID` int(10) unsigned NOT NULL,
  `STOCK_ADJUSTMENT_TYPE_ID` int(10) unsigned NOT NULL,
  `SA_NUMBER` int(20) NOT NULL,
  `SA_DATE` date NOT NULL,
  `REMARKS` varchar(100) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`STOCK_ADJUSTMENT_ID`),
  KEY `FK_SA_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_SA_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_SA_WAREHOUSE_ID` (`WAREHOUSE_ID`),
  KEY `FK_SA_CREATED_BY` (`CREATED_BY`),
  KEY `FK_SA_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_SA_STOCK_ADJUSTMENT_CLASSIFICATION_ID` (`STOCK_ADJUSTMENT_CLASSIFICATION_ID`),
  KEY `FK_SA_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_SA_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_SA_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_SA_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_SA_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_SA_STOCK_ADJUSTMENT_CLASSIFICATION_ID` FOREIGN KEY (`STOCK_ADJUSTMENT_CLASSIFICATION_ID`) REFERENCES `STOCK_ADJUSTMENT_CLASSIFICATION` (`STOCK_ADJUSTMENT_CLASSIFICATION_ID`),
  CONSTRAINT `FK_SA_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_SA_WAREHOUSE_ID` FOREIGN KEY (`WAREHOUSE_ID`) REFERENCES `WAREHOUSE` (`WAREHOUSE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `STOCK_ADJUSTMENT`
--

LOCK TABLES `STOCK_ADJUSTMENT` WRITE;
/*!40000 ALTER TABLE `STOCK_ADJUSTMENT` DISABLE KEYS */;
/*!40000 ALTER TABLE `STOCK_ADJUSTMENT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `STOCK_ADJUSTMENT_CLASSIFICATION`
--

DROP TABLE IF EXISTS `STOCK_ADJUSTMENT_CLASSIFICATION`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `STOCK_ADJUSTMENT_CLASSIFICATION` (
  `STOCK_ADJUSTMENT_CLASSIFICATION_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(100) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`STOCK_ADJUSTMENT_CLASSIFICATION_ID`),
  KEY `FK_SAC_CREATED_BY` (`CREATED_BY`),
  KEY `FK_SAC_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_SAC_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_SAC_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `STOCK_ADJUSTMENT_CLASSIFICATION`
--

LOCK TABLES `STOCK_ADJUSTMENT_CLASSIFICATION` WRITE;
/*!40000 ALTER TABLE `STOCK_ADJUSTMENT_CLASSIFICATION` DISABLE KEYS */;
INSERT INTO `STOCK_ADJUSTMENT_CLASSIFICATION` VALUES (1,'Stock Adjustment In',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(2,'Stock Adjustment Out',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(3,'Stock Adjustment In - IS',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55'),(4,'Stock Adjustment Out - IS',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55');
/*!40000 ALTER TABLE `STOCK_ADJUSTMENT_CLASSIFICATION` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `STOCK_ADJUSTMENT_ITEM`
--

DROP TABLE IF EXISTS `STOCK_ADJUSTMENT_ITEM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `STOCK_ADJUSTMENT_ITEM` (
  `STOCK_ADJUSTMENT_ITEM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `STOCK_ADJUSTMENT_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double NOT NULL,
  `UNIT_COST` double NOT NULL,
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  PRIMARY KEY (`STOCK_ADJUSTMENT_ITEM_ID`),
  KEY `SAI_STOCK_ADJUSTMENT_ID` (`STOCK_ADJUSTMENT_ID`),
  KEY `SAI_ITEM_ID` (`ITEM_ID`),
  KEY `SAI_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `SAI_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  CONSTRAINT `SAI_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `SAI_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `SAI_STOCK_ADJUSTMENT_ID` FOREIGN KEY (`STOCK_ADJUSTMENT_ID`) REFERENCES `STOCK_ADJUSTMENT` (`STOCK_ADJUSTMENT_ID`),
  CONSTRAINT `SAI_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `STOCK_ADJUSTMENT_ITEM`
--

LOCK TABLES `STOCK_ADJUSTMENT_ITEM` WRITE;
/*!40000 ALTER TABLE `STOCK_ADJUSTMENT_ITEM` DISABLE KEYS */;
/*!40000 ALTER TABLE `STOCK_ADJUSTMENT_ITEM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `STOCK_ADJUSTMENT_TYPE`
--

DROP TABLE IF EXISTS `STOCK_ADJUSTMENT_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `STOCK_ADJUSTMENT_TYPE` (
  `STOCK_ADJUSTMENT_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `ACCOUNT_COMBINATION_ID` int(10) unsigned DEFAULT NULL,
  `NAME` varchar(100) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`STOCK_ADJUSTMENT_TYPE_ID`),
  KEY `FK_SAT_CREATED_BY` (`CREATED_BY`),
  KEY `FK_SAT_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_SAT_ACCOUNT_COMBI_ID` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_SAT_ACCOUNT_COMBI_ID` FOREIGN KEY (`ACCOUNT_COMBINATION_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_SAT_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_SAT_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `STOCK_ADJUSTMENT_TYPE`
--

LOCK TABLES `STOCK_ADJUSTMENT_TYPE` WRITE;
/*!40000 ALTER TABLE `STOCK_ADJUSTMENT_TYPE` DISABLE KEYS */;
/*!40000 ALTER TABLE `STOCK_ADJUSTMENT_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `SUPPLIER`
--

DROP TABLE IF EXISTS `SUPPLIER`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `SUPPLIER` (
  `SUPPLIER_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `BUSINESS_CLASSIFICATION_ID` int(10) unsigned DEFAULT NULL,
  `EB_SL_KEY_ID` int(10) unsigned NOT NULL,
  `BUS_REG_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `NAME` varchar(100) NOT NULL,
  `FIRST_NAME` varchar(50) DEFAULT NULL,
  `LAST_NAME` varchar(50) DEFAULT NULL,
  `MIDDLE_NAME` varchar(50) DEFAULT NULL,
  `ADDRESS` varchar(150) DEFAULT NULL,
  `STREET_BRGY` varchar(150) DEFAULT NULL,
  `CITY_PROVINCE` varchar(150) DEFAULT NULL,
  `CONTACT_PERSON` varchar(50) DEFAULT NULL,
  `CONTACT_NUMBER` varchar(20) DEFAULT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `TIN` varchar(20) DEFAULT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`SUPPLIER_ID`),
  KEY `FK_SUPPLIER_EB_SL_KEY_ID` (`EB_SL_KEY_ID`),
  KEY `FK_SUPPLIER_CREATED_BY` (`CREATED_BY`),
  KEY `FK_SUPPLIER_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_SUPPLIER_BUS_REG_TYPE_ID` (`BUS_REG_TYPE_ID`),
  KEY `FK_SUPPLIER_BUSINESS_CLASSIFICATION_ID` (`BUSINESS_CLASSIFICATION_ID`),
  CONSTRAINT `FK_SUPPLIER_BUSINESS_CLASSIFICATION_ID` FOREIGN KEY (`BUSINESS_CLASSIFICATION_ID`) REFERENCES `BUSINESS_CLASSIFICATION` (`BUSINESS_CLASSIFICATION_ID`),
  CONSTRAINT `FK_SUPPLIER_BUS_REG_TYPE_ID` FOREIGN KEY (`BUS_REG_TYPE_ID`) REFERENCES `BUS_REG_TYPE` (`BUS_REG_TYPE_ID`),
  CONSTRAINT `FK_SUPPLIER_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_SUPPLIER_EB_SL_KEY_ID` FOREIGN KEY (`EB_SL_KEY_ID`) REFERENCES `EB_SL_KEY` (`EB_SL_KEY_ID`),
  CONSTRAINT `FK_SUPPLIER_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `SUPPLIER`
--

LOCK TABLES `SUPPLIER` WRITE;
/*!40000 ALTER TABLE `SUPPLIER` DISABLE KEYS */;
/*!40000 ALTER TABLE `SUPPLIER` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `SUPPLIER_ACCOUNT`
--

DROP TABLE IF EXISTS `SUPPLIER_ACCOUNT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `SUPPLIER_ACCOUNT` (
  `SUPPLIER_ACCOUNT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `SUPPLIER_ID` int(10) unsigned NOT NULL,
  `NAME` varchar(100) NOT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `DEFAULT_DEBIT_AC_ID` int(10) unsigned DEFAULT NULL,
  `DEFAULT_CREDIT_AC_ID` int(10) unsigned NOT NULL,
  `TERM_ID` int(10) unsigned NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`SUPPLIER_ACCOUNT_ID`),
  KEY `FK_SUPPLIER_ACCOUNT_SUPPLIER_ID` (`SUPPLIER_ID`),
  KEY `FK_SUPPLIER_ACCOUNT_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_SUPPLIER_ACCOUNT_DEFAULT_DEBIT_AC_ID` (`DEFAULT_DEBIT_AC_ID`),
  KEY `FK_SUPPLIER_ACCOUNT_DEFAULT_CREDIT_AC_ID` (`DEFAULT_CREDIT_AC_ID`),
  KEY `FK_SUPPLIER_ACCOUNT_TERM_ID` (`TERM_ID`),
  KEY `FK_SUPPLIER_ACCOUNT_CREATED_BY` (`CREATED_BY`),
  KEY `FK_SUPPLIER_ACCOUNT_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_AR_SUPPLIER_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_AR_SUPPLIER_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_AR_SUPPLIER_DEFAULT_CREDIT_AC_ID` FOREIGN KEY (`DEFAULT_CREDIT_AC_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_AR_SUPPLIER_DEFAULT_DEBIT_AC_ID` FOREIGN KEY (`DEFAULT_DEBIT_AC_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_AR_SUPPLIER_EL_SL_KEY_ID` FOREIGN KEY (`SUPPLIER_ID`) REFERENCES `SUPPLIER` (`SUPPLIER_ID`),
  CONSTRAINT `FK_AR_SUPPLIER_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_SUPPLIER_ACCOUNT_TERM_ID` FOREIGN KEY (`TERM_ID`) REFERENCES `TERM` (`TERM_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `SUPPLIER_ACCOUNT`
--

LOCK TABLES `SUPPLIER_ACCOUNT` WRITE;
/*!40000 ALTER TABLE `SUPPLIER_ACCOUNT` DISABLE KEYS */;
/*!40000 ALTER TABLE `SUPPLIER_ACCOUNT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `SUPPLIER_ADVANCE_PAYMENT`
--

DROP TABLE IF EXISTS `SUPPLIER_ADVANCE_PAYMENT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `SUPPLIER_ADVANCE_PAYMENT` (
  `SUPPLIER_ADVANCE_PAYMENT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `FORM_WORKFLOW_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `SEQUENCE_NO` int(10) unsigned NOT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `DIVISION_ID` int(10) unsigned DEFAULT NULL,
  `R_PURCHASE_ORDER_ID` int(10) unsigned NOT NULL,
  `DATE` date NOT NULL,
  `SUPPLIER_ID` int(10) unsigned NOT NULL,
  `SUPPLIER_ACCOUNT_ID` int(10) unsigned NOT NULL,
  `BMS_NUMBER` varchar(50) DEFAULT NULL,
  `INVOICE_DATE` date NOT NULL,
  `GL_DATE` date NOT NULL,
  `DUE_DATE` date NOT NULL,
  `REFERENCE_NO` varchar(100) NOT NULL,
  `REQUESTOR` varchar(100) NOT NULL,
  `REMARKS` text,
  `CURRENCY_ID` int(10) unsigned DEFAULT NULL,
  `CURRENCY_RATE_ID` int(10) unsigned DEFAULT NULL,
  `CURRENCY_RATE_VALUE` double DEFAULT '0',
  `AMOUNT` double DEFAULT '0',
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`SUPPLIER_ADVANCE_PAYMENT_ID`),
  KEY `FK_SAP_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_SAP_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_SAP_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_SAP_DIVISION_ID` (`DIVISION_ID`),
  KEY `FK_SAP_R_PURCHASE_ORDER_ID` (`R_PURCHASE_ORDER_ID`),
  KEY `FK_SAP_SUPPLIER_ID` (`SUPPLIER_ID`),
  KEY `FK_SAP_SUPPLIER_ACCOUNT_ID` (`SUPPLIER_ACCOUNT_ID`),
  KEY `FK_SAP_CURRENCY_ID` (`CURRENCY_ID`),
  KEY `FK_SAP_CURRENCY_RATE_ID` (`CURRENCY_RATE_ID`),
  KEY `FK_SAP_CREATED_BY` (`CREATED_BY`),
  KEY `FK_SAP_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_SAP_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_SAP_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_SAP_CURRENCY_ID` FOREIGN KEY (`CURRENCY_ID`) REFERENCES `CURRENCY` (`CURRENCY_ID`),
  CONSTRAINT `FK_SAP_CURRENCY_RATE_ID` FOREIGN KEY (`CURRENCY_RATE_ID`) REFERENCES `CURRENCY_RATE` (`CURRENCY_RATE_ID`),
  CONSTRAINT `FK_SAP_DIVISION_ID` FOREIGN KEY (`DIVISION_ID`) REFERENCES `DIVISION` (`DIVISION_ID`),
  CONSTRAINT `FK_SAP_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_SAP_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_SAP_R_PURCHASE_ORDER_ID` FOREIGN KEY (`R_PURCHASE_ORDER_ID`) REFERENCES `R_PURCHASE_ORDER` (`R_PURCHASE_ORDER_ID`),
  CONSTRAINT `FK_SAP_SUPPLIER_ACCOUNT_ID` FOREIGN KEY (`SUPPLIER_ACCOUNT_ID`) REFERENCES `SUPPLIER_ACCOUNT` (`SUPPLIER_ACCOUNT_ID`),
  CONSTRAINT `FK_SAP_SUPPLIER_ID` FOREIGN KEY (`SUPPLIER_ID`) REFERENCES `SUPPLIER` (`SUPPLIER_ID`),
  CONSTRAINT `FK_SAP_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `SUPPLIER_ADVANCE_PAYMENT`
--

LOCK TABLES `SUPPLIER_ADVANCE_PAYMENT` WRITE;
/*!40000 ALTER TABLE `SUPPLIER_ADVANCE_PAYMENT` DISABLE KEYS */;
/*!40000 ALTER TABLE `SUPPLIER_ADVANCE_PAYMENT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `TAX_TYPE`
--

DROP TABLE IF EXISTS `TAX_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `TAX_TYPE` (
  `TAX_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(20) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  PRIMARY KEY (`TAX_TYPE_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `TAX_TYPE`
--

LOCK TABLES `TAX_TYPE` WRITE;
/*!40000 ALTER TABLE `TAX_TYPE` DISABLE KEYS */;
INSERT INTO `TAX_TYPE` VALUES (1,'VATABLE',1),(2,'VAT-EXEMPTED',1),(3,'ZERO RATED',1),(4,'GOODS',1),(5,'SERVICES',1),(6,'CAPITAL GOODS',1),(7,'NRA',1),(8,'PRIVATE',1),(9,'GOVERNMENT',1);
/*!40000 ALTER TABLE `TAX_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `TERM`
--

DROP TABLE IF EXISTS `TERM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `TERM` (
  `TERM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_SL_KEY_ID` int(10) unsigned NOT NULL,
  `NAME` varchar(50) NOT NULL,
  `DAYS` int(4) NOT NULL DEFAULT '0',
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`TERM_ID`),
  KEY `FK_TERM_EB_SL_KEY_ID` (`EB_SL_KEY_ID`),
  KEY `FK_TERM_CREATED_BY` (`CREATED_BY`),
  KEY `FK_TERM_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_TERM_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_TERM_EB_SL_KEY_ID` FOREIGN KEY (`EB_SL_KEY_ID`) REFERENCES `EB_SL_KEY` (`EB_SL_KEY_ID`),
  CONSTRAINT `FK_TERM_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `TERM`
--

LOCK TABLES `TERM` WRITE;
/*!40000 ALTER TABLE `TERM` DISABLE KEYS */;
/*!40000 ALTER TABLE `TERM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `TIME_PERIOD`
--

DROP TABLE IF EXISTS `TIME_PERIOD`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `TIME_PERIOD` (
  `TIME_PERIOD_ID` int(10) NOT NULL AUTO_INCREMENT,
  `TIME_PERIOD_STATUS_ID` int(10) NOT NULL,
  `NAME` varchar(50) NOT NULL,
  `DATE_FROM` date NOT NULL,
  `DATE_TO` date NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`TIME_PERIOD_ID`),
  KEY `FK_TP_CREATED_BY` (`CREATED_BY`),
  KEY `FK_TP_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_TP_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_TP_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `TIME_PERIOD`
--

LOCK TABLES `TIME_PERIOD` WRITE;
/*!40000 ALTER TABLE `TIME_PERIOD` DISABLE KEYS */;
/*!40000 ALTER TABLE `TIME_PERIOD` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `TIME_PERIOD_STATUS`
--

DROP TABLE IF EXISTS `TIME_PERIOD_STATUS`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `TIME_PERIOD_STATUS` (
  `TIME_PERIOD_STATUS_ID` int(10) NOT NULL AUTO_INCREMENT,
  `NAME` varchar(15) DEFAULT NULL,
  PRIMARY KEY (`TIME_PERIOD_STATUS_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `TIME_PERIOD_STATUS`
--

LOCK TABLES `TIME_PERIOD_STATUS` WRITE;
/*!40000 ALTER TABLE `TIME_PERIOD_STATUS` DISABLE KEYS */;
INSERT INTO `TIME_PERIOD_STATUS` VALUES (1,'Never Opened'),(2,'Open'),(3,'Closed');
/*!40000 ALTER TABLE `TIME_PERIOD_STATUS` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `TIME_SHEET`
--

DROP TABLE IF EXISTS `TIME_SHEET`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `TIME_SHEET` (
  `TIME_SHEET_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `PAYROLL_TIME_PERIOD_ID` int(10) unsigned DEFAULT NULL,
  `PAYROLL_TIME_PERIOD_SCHEDULE_ID` int(10) unsigned DEFAULT NULL,
  `FORM_WORKFLOW_ID` int(10) unsigned NOT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `DIVISION_ID` int(10) unsigned DEFAULT NULL,
  `BIOMETRIC_MODEL_ID` int(10) unsigned NOT NULL,
  `SEQUENCE_NO` int(10) NOT NULL,
  `DATE` date NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`TIME_SHEET_ID`),
  KEY `FK_PTS_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_PTS_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_PTS_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_PTS_CREATED_BY` (`CREATED_BY`),
  KEY `FK_PTS_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_PTS_PTP_ID` (`PAYROLL_TIME_PERIOD_ID`),
  KEY `FK_PTS_PTPS_ID` (`PAYROLL_TIME_PERIOD_SCHEDULE_ID`),
  KEY `FK_PTS_DIVISION_ID` (`DIVISION_ID`),
  KEY `FK_PTS_BIOMETRIC_MODEL_ID` (`BIOMETRIC_MODEL_ID`),
  CONSTRAINT `FK_PTS_BIOMETRIC_MODEL_ID` FOREIGN KEY (`BIOMETRIC_MODEL_ID`) REFERENCES `BIOMETRIC_MODEL` (`BIOMETRIC_MODEL_ID`),
  CONSTRAINT `FK_PTS_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_PTS_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_PTS_DIVISION_ID` FOREIGN KEY (`DIVISION_ID`) REFERENCES `DIVISION` (`DIVISION_ID`),
  CONSTRAINT `FK_PTS_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_PTS_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_PTS_PTPS_ID` FOREIGN KEY (`PAYROLL_TIME_PERIOD_SCHEDULE_ID`) REFERENCES `PAYROLL_TIME_PERIOD_SCHEDULE` (`PAYROLL_TIME_PERIOD_SCHEDULE_ID`),
  CONSTRAINT `FK_PTS_PTP_ID` FOREIGN KEY (`PAYROLL_TIME_PERIOD_ID`) REFERENCES `PAYROLL_TIME_PERIOD` (`PAYROLL_TIME_PERIOD_ID`),
  CONSTRAINT `FK_PTS_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `TIME_SHEET`
--

LOCK TABLES `TIME_SHEET` WRITE;
/*!40000 ALTER TABLE `TIME_SHEET` DISABLE KEYS */;
/*!40000 ALTER TABLE `TIME_SHEET` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `TIME_SHEET_HEADER`
--

DROP TABLE IF EXISTS `TIME_SHEET_HEADER`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `TIME_SHEET_HEADER` (
  `TIME_SHEET_HEADER_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `TIME_SHEET_ID` int(10) unsigned NOT NULL,
  `BIOMETRIC_MODEL_ID` int(10) unsigned NOT NULL,
  PRIMARY KEY (`TIME_SHEET_HEADER_ID`),
  KEY `FK_TSH_ID` (`TIME_SHEET_ID`),
  KEY `FK_TSH_BIOMETRIC_MODEL_ID` (`BIOMETRIC_MODEL_ID`),
  CONSTRAINT `FK_TSH_BIOMETRIC_MODEL_ID` FOREIGN KEY (`BIOMETRIC_MODEL_ID`) REFERENCES `BIOMETRIC_MODEL` (`BIOMETRIC_MODEL_ID`),
  CONSTRAINT `FK_TSH_ID` FOREIGN KEY (`TIME_SHEET_ID`) REFERENCES `TIME_SHEET` (`TIME_SHEET_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `TIME_SHEET_HEADER`
--

LOCK TABLES `TIME_SHEET_HEADER` WRITE;
/*!40000 ALTER TABLE `TIME_SHEET_HEADER` DISABLE KEYS */;
/*!40000 ALTER TABLE `TIME_SHEET_HEADER` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `TRANSFER_RECEIPT_TYPE`
--

DROP TABLE IF EXISTS `TRANSFER_RECEIPT_TYPE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `TRANSFER_RECEIPT_TYPE` (
  `TRANSFER_RECEIPT_TYPE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(20) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`TRANSFER_RECEIPT_TYPE_ID`),
  KEY `FK_TR_TYPE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_TR_TYPE_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_TR_TYPE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_TR_TYPE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `TRANSFER_RECEIPT_TYPE`
--

LOCK TABLES `TRANSFER_RECEIPT_TYPE` WRITE;
/*!40000 ALTER TABLE `TRANSFER_RECEIPT_TYPE` DISABLE KEYS */;
INSERT INTO `TRANSFER_RECEIPT_TYPE` VALUES (1,'Retail',1,1,'2021-08-11 01:33:52',1,'2021-08-11 01:33:52'),(2,'Individual Selection',1,1,'2021-08-11 01:33:55',1,'2021-08-11 01:33:55');
/*!40000 ALTER TABLE `TRANSFER_RECEIPT_TYPE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `TYPE_OF_LEAVE`
--

DROP TABLE IF EXISTS `TYPE_OF_LEAVE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `TYPE_OF_LEAVE` (
  `TYPE_OF_LEAVE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(25) NOT NULL,
  `DESCRIPTION` text,
  `PAID_LEAVE` tinyint(1) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`TYPE_OF_LEAVE_ID`),
  KEY `FK_TYPE_OF_LEAVE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_TYPE_OF_LEAVE_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_TYPE_OF_LEAVE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_TYPE_OF_LEAVE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `TYPE_OF_LEAVE`
--

LOCK TABLES `TYPE_OF_LEAVE` WRITE;
/*!40000 ALTER TABLE `TYPE_OF_LEAVE` DISABLE KEYS */;
/*!40000 ALTER TABLE `TYPE_OF_LEAVE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `UG_MF_ACCESS_RIGHT`
--

DROP TABLE IF EXISTS `UG_MF_ACCESS_RIGHT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `UG_MF_ACCESS_RIGHT` (
  `UG_MF_ACCESS_RIGHT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `USER_GROUP_ID` int(10) unsigned NOT NULL,
  `MODULE_CODE_ID` int(10) unsigned NOT NULL,
  `ACCESS_RIGHT_FLAG` int(10) unsigned NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`UG_MF_ACCESS_RIGHT_ID`) USING BTREE,
  KEY `FK_UG_MF_MODULE_CODE_ID` (`MODULE_CODE_ID`),
  KEY `FK_UG_MF_USER_GROUP_ID` (`USER_GROUP_ID`),
  CONSTRAINT `FK_UG_MF_MODULE_CODE_ID` FOREIGN KEY (`MODULE_CODE_ID`) REFERENCES `MODULE_CODE` (`MODULE_CODE_ID`),
  CONSTRAINT `FK_UG_MF_USER_GROUP_ID` FOREIGN KEY (`USER_GROUP_ID`) REFERENCES `USER_GROUP` (`USER_GROUP_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `UG_MF_ACCESS_RIGHT`
--

LOCK TABLES `UG_MF_ACCESS_RIGHT` WRITE;
/*!40000 ALTER TABLE `UG_MF_ACCESS_RIGHT` DISABLE KEYS */;
/*!40000 ALTER TABLE `UG_MF_ACCESS_RIGHT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `UG_M_ACCESS_RIGHT`
--

DROP TABLE IF EXISTS `UG_M_ACCESS_RIGHT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `UG_M_ACCESS_RIGHT` (
  `UG_M_ACCESS_RIGHT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `USER_GROUP_ID` int(10) unsigned NOT NULL,
  `PRODUCT_CODE_ID` int(10) unsigned NOT NULL,
  `ACCESS_RIGHT_FLAG` int(10) unsigned NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`UG_M_ACCESS_RIGHT_ID`) USING BTREE,
  KEY `FK_UG_M_USER_GROUP_ID` (`USER_GROUP_ID`),
  KEY `FK_UG_M_PRODUCT_CODE_ID` (`PRODUCT_CODE_ID`),
  CONSTRAINT `FK_UG_M_PRODUCT_CODE_ID` FOREIGN KEY (`PRODUCT_CODE_ID`) REFERENCES `PRODUCT_CODE` (`PRODUCT_CODE_ID`),
  CONSTRAINT `FK_UG_M_USER_GROUP_ID` FOREIGN KEY (`USER_GROUP_ID`) REFERENCES `USER_GROUP` (`USER_GROUP_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `UG_M_ACCESS_RIGHT`
--

LOCK TABLES `UG_M_ACCESS_RIGHT` WRITE;
/*!40000 ALTER TABLE `UG_M_ACCESS_RIGHT` DISABLE KEYS */;
/*!40000 ALTER TABLE `UG_M_ACCESS_RIGHT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `UNIT_MEASUREMENT`
--

DROP TABLE IF EXISTS `UNIT_MEASUREMENT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `UNIT_MEASUREMENT` (
  `UNITOFMEASUREMENT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(20) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  PRIMARY KEY (`UNITOFMEASUREMENT_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `UNIT_MEASUREMENT`
--

LOCK TABLES `UNIT_MEASUREMENT` WRITE;
/*!40000 ALTER TABLE `UNIT_MEASUREMENT` DISABLE KEYS */;
/*!40000 ALTER TABLE `UNIT_MEASUREMENT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `UOM_CONVERSION`
--

DROP TABLE IF EXISTS `UOM_CONVERSION`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `UOM_CONVERSION` (
  `UOM_CONVERSION_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `UOM_FROM` int(10) unsigned NOT NULL,
  `UOM_TO` int(10) unsigned NOT NULL,
  `NAME` varchar(50) NOT NULL,
  `VALUE` double NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  PRIMARY KEY (`UOM_CONVERSION_ID`),
  KEY `FK_UOMC_UNIT_FROM` (`UOM_FROM`),
  KEY `FK_UOMC_UNIT_TO` (`UOM_TO`),
  CONSTRAINT `FK_UOMC_UNIT_FROM` FOREIGN KEY (`UOM_FROM`) REFERENCES `UNIT_MEASUREMENT` (`UNITOFMEASUREMENT_ID`),
  CONSTRAINT `FK_UOMC_UNIT_TO` FOREIGN KEY (`UOM_TO`) REFERENCES `UNIT_MEASUREMENT` (`UNITOFMEASUREMENT_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `UOM_CONVERSION`
--

LOCK TABLES `UOM_CONVERSION` WRITE;
/*!40000 ALTER TABLE `UOM_CONVERSION` DISABLE KEYS */;
/*!40000 ALTER TABLE `UOM_CONVERSION` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `USER`
--

DROP TABLE IF EXISTS `USER`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `USER` (
  `USER_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `USER_NAME` varchar(20) NOT NULL,
  `PASSWORD` blob,
  `FIRST_NAME` varchar(40) NOT NULL,
  `LAST_NAME` varchar(40) NOT NULL,
  `MIDDLE_NAME` varchar(40) NOT NULL,
  `BIRTH_DATE` date NOT NULL,
  `CONTACT_NUMBER` varchar(20) NOT NULL,
  `EMAIL_ADDRESS` varchar(50) DEFAULT NULL,
  `ADDRESS` varchar(150) NOT NULL,
  `USER_GROUP_ID` int(10) unsigned NOT NULL,
  `POSITION_ID` int(10) unsigned DEFAULT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `CREATED_BY` int(10) DEFAULT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) DEFAULT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `ACTIVE` tinyint(1) NOT NULL,
  `EB_SL_KEY_ID` int(10) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`USER_ID`),
  KEY `FK_USER_USER_GROUP` (`USER_GROUP_ID`),
  KEY `FK_USER_COMPANY_ID` (`COMPANY_ID`),
  KEY `EB_SL_KEY_ID` (`EB_SL_KEY_ID`),
  KEY `FK_USER_POSITION_ID` (`POSITION_ID`),
  KEY `FK_USER_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_USER_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_USER_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_USER_POSITION_ID` FOREIGN KEY (`POSITION_ID`) REFERENCES `POSITION` (`POSITION_ID`),
  CONSTRAINT `USER_ibfk_1` FOREIGN KEY (`EB_SL_KEY_ID`) REFERENCES `EB_SL_KEY` (`EB_SL_KEY_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `USER`
--

LOCK TABLES `USER` WRITE;
/*!40000 ALTER TABLE `USER` DISABLE KEYS */;
INSERT INTO `USER` VALUES (1,'admin',_binary '0cf6d5896949fdc4d97009ce5195f0399ca3ad05','Admin','Admin','Admin','1900-01-01','123456789','info@admin.com','Koronadal City',1,1,1,2,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05',1,1);
/*!40000 ALTER TABLE `USER` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `USER_COMPANY`
--

DROP TABLE IF EXISTS `USER_COMPANY`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `USER_COMPANY` (
  `USER_COMPANY_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `USER_ID` int(10) unsigned NOT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `USER_COMPANY_HEAD_ID` int(10) unsigned DEFAULT NULL,
  `ACTIVE` tinyint(1) DEFAULT NULL,
  `CREATED_BY` int(10) DEFAULT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) DEFAULT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`USER_COMPANY_ID`),
  KEY `FK_USER_COMPANY_USER` (`USER_ID`),
  KEY `FK_USER_COMPANY_COMPANY` (`COMPANY_ID`),
  KEY `FK_USER_COMPANY_USER_COMPANY_HEAD_ID` (`USER_COMPANY_HEAD_ID`),
  CONSTRAINT `FK_USER_COMPANY_COMPANY` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_USER_COMPANY_USER` FOREIGN KEY (`USER_ID`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_USER_COMPANY_USER_COMPANY_HEAD_ID` FOREIGN KEY (`USER_COMPANY_HEAD_ID`) REFERENCES `USER_COMPANY_HEAD` (`USER_COMPANY_HEAD_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `USER_COMPANY`
--

LOCK TABLES `USER_COMPANY` WRITE;
/*!40000 ALTER TABLE `USER_COMPANY` DISABLE KEYS */;
/*!40000 ALTER TABLE `USER_COMPANY` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `USER_COMPANY_HEAD`
--

DROP TABLE IF EXISTS `USER_COMPANY_HEAD`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `USER_COMPANY_HEAD` (
  `USER_COMPANY_HEAD_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `ACTIVE` tinyint(4) DEFAULT '0',
  `CREATED_BY` int(10) unsigned DEFAULT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned DEFAULT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`USER_COMPANY_HEAD_ID`),
  KEY `FK_USER_COMP_CREATED_BY` (`CREATED_BY`),
  KEY `FK_USER_COMP_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_USER_COMP_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_USER_COMP_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `USER_COMPANY_HEAD`
--

LOCK TABLES `USER_COMPANY_HEAD` WRITE;
/*!40000 ALTER TABLE `USER_COMPANY_HEAD` DISABLE KEYS */;
/*!40000 ALTER TABLE `USER_COMPANY_HEAD` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `USER_CUSTODIAN`
--

DROP TABLE IF EXISTS `USER_CUSTODIAN`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `USER_CUSTODIAN` (
  `USER_CUSTODIAN_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `DIVISION_ID` int(10) unsigned NOT NULL,
  `CUSTODIAN_ACCOUNT_ID` int(10) unsigned NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`USER_CUSTODIAN_ID`),
  KEY `FK_USER_CUSTODIAN_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_USER_CUSTODIAN_DIVISION_ID` (`DIVISION_ID`),
  KEY `FK_USER_CUSTODIAN_CUSTODIAN_ACCOUNT_ID` (`CUSTODIAN_ACCOUNT_ID`),
  KEY `FK_USER_CUSTODIAN_CREATED_BY` (`CREATED_BY`),
  KEY `FK_USER_CUSTODIAN_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_USER_CUSTODIAN_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_USER_CUSTODIAN_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_USER_CUSTODIAN_CUSTODIAN_ACCOUNT_ID` FOREIGN KEY (`CUSTODIAN_ACCOUNT_ID`) REFERENCES `CUSTODIAN_ACCOUNT` (`CUSTODIAN_ACCOUNT_ID`),
  CONSTRAINT `FK_USER_CUSTODIAN_DIVISION_ID` FOREIGN KEY (`DIVISION_ID`) REFERENCES `DIVISION` (`DIVISION_ID`),
  CONSTRAINT `FK_USER_CUSTODIAN_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `USER_CUSTODIAN`
--

LOCK TABLES `USER_CUSTODIAN` WRITE;
/*!40000 ALTER TABLE `USER_CUSTODIAN` DISABLE KEYS */;
/*!40000 ALTER TABLE `USER_CUSTODIAN` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `USER_CUSTODIAN_LINES`
--

DROP TABLE IF EXISTS `USER_CUSTODIAN_LINES`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `USER_CUSTODIAN_LINES` (
  `USER_CUSTODIAN_LINES_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `USER_CUSTODIAN_ID` int(10) unsigned NOT NULL,
  `USER_ID` int(10) unsigned NOT NULL,
  PRIMARY KEY (`USER_CUSTODIAN_LINES_ID`),
  KEY `FK_USER_CUSTODIAN_LINES_USER_CUSTODIAN_ID` (`USER_CUSTODIAN_ID`),
  KEY `FK_USER_CUSTODIAN_LINES_USER_ID` (`USER_ID`),
  CONSTRAINT `FK_USER_CUSTODIAN_LINES_USER_CUSTODIAN_ID` FOREIGN KEY (`USER_CUSTODIAN_ID`) REFERENCES `USER_CUSTODIAN` (`USER_CUSTODIAN_ID`),
  CONSTRAINT `FK_USER_CUSTODIAN_LINES_USER_ID` FOREIGN KEY (`USER_ID`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `USER_CUSTODIAN_LINES`
--

LOCK TABLES `USER_CUSTODIAN_LINES` WRITE;
/*!40000 ALTER TABLE `USER_CUSTODIAN_LINES` DISABLE KEYS */;
/*!40000 ALTER TABLE `USER_CUSTODIAN_LINES` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `USER_GROUP`
--

DROP TABLE IF EXISTS `USER_GROUP`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `USER_GROUP` (
  `USER_GROUP_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `NAME` varchar(50) NOT NULL,
  `DESCRIPTION` varchar(150) DEFAULT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) DEFAULT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) DEFAULT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`USER_GROUP_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `USER_GROUP`
--

LOCK TABLES `USER_GROUP` WRITE;
/*!40000 ALTER TABLE `USER_GROUP` DISABLE KEYS */;
INSERT INTO `USER_GROUP` VALUES (1,'ADMIN','ADMINISTRATOR',1,1,'2021-08-11 01:33:04',1,'2021-08-11 01:33:04');
/*!40000 ALTER TABLE `USER_GROUP` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `USER_GROUP_ACCESS_RIGHT`
--

DROP TABLE IF EXISTS `USER_GROUP_ACCESS_RIGHT`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `USER_GROUP_ACCESS_RIGHT` (
  `USER_GROUP_ACCESS_RIGHT_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `USER_GROUP_ID` int(10) unsigned NOT NULL,
  `PRODUCT_KEY` int(20) unsigned NOT NULL,
  `MODULE_KEY` int(20) unsigned NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`USER_GROUP_ACCESS_RIGHT_ID`),
  KEY `FK_USER_GROUP_ACCESS_RIGHT_USER_ID` (`USER_GROUP_ID`),
  KEY `FK_USER_GROUP_ACCESS_RIGHT_CREATED_BY` (`CREATED_BY`),
  KEY `FK_USER_GROUP_ACCESS_RIGHT_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_USER_GROUP_ACCESS_RIGHT_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_USER_GROUP_ACCESS_RIGHT_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_USER_GROUP_ACCESS_RIGHT_USER_ID` FOREIGN KEY (`USER_GROUP_ID`) REFERENCES `USER_GROUP` (`USER_GROUP_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=110 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `USER_GROUP_ACCESS_RIGHT`
--

LOCK TABLES `USER_GROUP_ACCESS_RIGHT` WRITE;
/*!40000 ALTER TABLE `USER_GROUP_ACCESS_RIGHT` DISABLE KEYS */;
INSERT INTO `USER_GROUP_ACCESS_RIGHT` VALUES (1,1,0,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(2,1,233,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(3,1,178,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(4,1,179,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(5,1,186,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(6,1,165,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(7,1,168,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(8,1,164,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(9,1,192,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(10,1,184,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(11,1,185,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(12,1,166,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(13,1,167,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(14,1,191,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(15,1,171,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(16,1,251,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(17,1,245,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(18,1,187,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(19,1,188,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(20,1,231,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(21,1,176,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(22,1,177,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(23,1,200,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(24,1,169,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(25,1,172,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(26,1,174,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(27,1,223,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(28,1,182,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(29,1,183,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(30,1,175,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(31,1,189,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(32,1,64,64,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(33,1,84,8,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(34,1,85,16,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(35,1,77,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(36,1,88,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(37,1,202,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(38,1,68,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(39,1,82,2,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(40,1,81,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(41,1,242,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(42,1,4,32,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(43,1,135,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(44,1,246,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(45,1,91,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(46,1,144,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(47,1,69,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(48,1,159,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(49,1,92,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(50,1,103,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(51,1,102,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(52,1,157,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(53,1,104,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(54,1,83,4,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(55,1,141,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(56,1,162,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(57,1,203,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(58,1,87,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(59,1,67,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(60,1,209,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(61,1,160,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(62,1,156,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(63,1,232,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(64,1,158,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(65,1,145,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(66,1,143,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(67,1,137,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(68,1,93,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(69,1,155,1,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(70,1,139,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(71,1,138,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(72,1,140,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(73,1,142,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(74,1,8,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(75,1,95,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(76,1,94,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(77,1,239,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(78,1,2002,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(79,1,238,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(80,1,2003,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(81,1,100,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(82,1,237,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(83,1,101,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(84,1,236,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(85,1,2001,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(86,1,235,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(87,1,98,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(88,1,2006,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(89,1,2007,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(90,1,234,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(91,1,99,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(92,1,2004,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(93,1,96,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(94,1,2011,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(95,1,2008,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(96,1,161,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(97,1,2009,15,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(98,1,2012,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(99,1,2013,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(100,1,105,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(101,1,51,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(102,1,252,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(103,1,253,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(104,1,52,63,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(105,1,122,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(106,1,240,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(107,1,121,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(108,1,241,31,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05'),(109,1,120,63,1,'2021-08-11 01:33:05',1,'2021-08-11 01:33:05');
/*!40000 ALTER TABLE `USER_GROUP_ACCESS_RIGHT` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `USER_LOGIN_STATUS`
--

DROP TABLE IF EXISTS `USER_LOGIN_STATUS`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `USER_LOGIN_STATUS` (
  `USER_LOGIN_STATUS_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `USER_ID` int(10) unsigned NOT NULL,
  `SUCCESSFUL_LOGIN_ATTEMPT` int(10) unsigned NOT NULL,
  `FAILED_LOGIN_ATTEMPT` int(2) DEFAULT NULL,
  `BLOCK_USER` tinyint(1) NOT NULL,
  `LAST_LOGIN` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`USER_LOGIN_STATUS_ID`),
  KEY `FK_USER_LOG_STATUS_USER` (`USER_ID`),
  CONSTRAINT `FK_USER_LOG_STATUS_USER` FOREIGN KEY (`USER_ID`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `USER_LOGIN_STATUS`
--

LOCK TABLES `USER_LOGIN_STATUS` WRITE;
/*!40000 ALTER TABLE `USER_LOGIN_STATUS` DISABLE KEYS */;
/*!40000 ALTER TABLE `USER_LOGIN_STATUS` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `VAT_ACCOUNT_SETUP`
--

DROP TABLE IF EXISTS `VAT_ACCOUNT_SETUP`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `VAT_ACCOUNT_SETUP` (
  `VAT_ACCOUNT_SETUP_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `DIVISION_ID` int(10) unsigned DEFAULT NULL,
  `INPUT_VAT_AC_ID` int(10) unsigned NOT NULL,
  `OUTPUT_VAT_AC_ID` int(10) unsigned NOT NULL,
  `ACTIVE` tinyint(1) DEFAULT '1',
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`VAT_ACCOUNT_SETUP_ID`),
  KEY `FK_VAS_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_VAS_DIVISION_ID` (`DIVISION_ID`),
  KEY `FK_VAS_INPUT_VAT_AC_ID` (`INPUT_VAT_AC_ID`),
  KEY `FK_VAS_OUTPUT_VAT_AC_ID` (`OUTPUT_VAT_AC_ID`),
  KEY `FK_VAS_CREATED_BY` (`CREATED_BY`),
  KEY `FK_VAS_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_VAS_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_VAS_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_VAS_DIVISION_ID` FOREIGN KEY (`DIVISION_ID`) REFERENCES `DIVISION` (`DIVISION_ID`),
  CONSTRAINT `FK_VAS_INPUT_VAT_AC_ID` FOREIGN KEY (`INPUT_VAT_AC_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_VAS_OUTPUT_VAT_AC_ID` FOREIGN KEY (`OUTPUT_VAT_AC_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_VAS_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `VAT_ACCOUNT_SETUP`
--

LOCK TABLES `VAT_ACCOUNT_SETUP` WRITE;
/*!40000 ALTER TABLE `VAT_ACCOUNT_SETUP` DISABLE KEYS */;
INSERT INTO `VAT_ACCOUNT_SETUP` VALUES (1,1,1,435,436,1,1,'2021-08-11 01:34:26',1,'2021-08-11 01:34:26'),(2,1,2,0,0,1,1,'2021-08-11 01:34:26',1,'2021-08-11 01:34:26'),(3,1,3,0,0,1,1,'2021-08-11 01:34:26',1,'2021-08-11 01:34:26'),(4,1,4,0,0,1,1,'2021-08-11 01:34:26',1,'2021-08-11 01:34:26'),(5,1,5,0,0,1,1,'2021-08-11 01:34:26',1,'2021-08-11 01:34:26'),(6,1,6,0,0,1,1,'2021-08-11 01:34:26',1,'2021-08-11 01:34:26');
/*!40000 ALTER TABLE `VAT_ACCOUNT_SETUP` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Temporary table structure for view `V_AR_LINE_ANALYSIS`
--

DROP TABLE IF EXISTS `V_AR_LINE_ANALYSIS`;
/*!50001 DROP VIEW IF EXISTS `V_AR_LINE_ANALYSIS`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE VIEW `V_AR_LINE_ANALYSIS` AS SELECT 
 1 AS `SOURCE`,
 1 AS `ID`,
 1 AS `SOURCE_ID`,
 1 AS `SEQ_NO`,
 1 AS `STATUS_ID`,
 1 AS `STATUS`,
 1 AS `COMPLETE`,
 1 AS `COMPANY_ID`,
 1 AS `AL_SETUP_ID`,
 1 AS `UOM_ID`,
 1 AS `RECEIPT_DATE`,
 1 AS `MATURITY_DATE`,
 1 AS `CUSTOMER_ID`,
 1 AS `CUSTOMER_ACCT_ID`,
 1 AS `REF_DATE`,
 1 AS `REF_NUMBER`,
 1 AS `CUSTOMER`,
 1 AS `CUSTOMER_ACCT`,
 1 AS `QUANTITY`,
 1 AS `UNIT_PRICE`,
 1 AS `AMOUNT`,
 1 AS `VAT_AMOUNT`*/;
SET character_set_client = @saved_cs_client;

--
-- Temporary table structure for view `V_AR_RECEIPT_REGISTER`
--

DROP TABLE IF EXISTS `V_AR_RECEIPT_REGISTER`;
/*!50001 DROP VIEW IF EXISTS `V_AR_RECEIPT_REGISTER`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE VIEW `V_AR_RECEIPT_REGISTER` AS SELECT 
 1 AS `SOURCE`,
 1 AS `ID`,
 1 AS `SOURCE_ID`,
 1 AS `SEQ_NO`,
 1 AS `COMPANY_ID`,
 1 AS `RECEIPT_TYPE_ID`,
 1 AS `RECEIPT_METHOD_ID`,
 1 AS `CUSTOMER_ID`,
 1 AS `CUSTOMER_ACCT_ID`,
 1 AS `STATUS_ID`,
 1 AS `RECEIPT_TYPE`,
 1 AS `RECEIPT_DATE`,
 1 AS `MATURITY_DATE`,
 1 AS `RECEIPT_NO`,
 1 AS `CHECK_NO`,
 1 AS `CUSTOMER`,
 1 AS `CUSTOMER_ACCT`,
 1 AS `RECEIPT_METHOD`,
 1 AS `AMOUNT`,
 1 AS `PAID_AMOUNT`,
 1 AS `BALANCE`,
 1 AS `STATUS`*/;
SET character_set_client = @saved_cs_client;

--
-- Temporary table structure for view `V_CUSTOMER_ACCT_HISTORY`
--

DROP TABLE IF EXISTS `V_CUSTOMER_ACCT_HISTORY`;
/*!50001 DROP VIEW IF EXISTS `V_CUSTOMER_ACCT_HISTORY`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE VIEW `V_CUSTOMER_ACCT_HISTORY` AS SELECT 
 1 AS `COMPANY_ID`,
 1 AS `NAME`,
 1 AS `CUSTOMER_ACCOUNT_ID`,
 1 AS `CUSTOMER_ID`,
 1 AS `SOURCE`,
 1 AS `ID`,
 1 AS `DATE`,
 1 AS `GL_DATE`,
 1 AS `REFERENCE_NUMBER`,
 1 AS `INVOICE_NUMBER`,
 1 AS `TRANSACTION_AMOUNT`,
 1 AS `RECEIPT_AMOUNT`,
 1 AS `CREATED_DATE`,
 1 AS `AR_LINE_ID`,
 1 AS `STATUS_ID`,
 1 AS `IS_COMPLETE`,
 1 AS `TERM_ID`,
 1 AS `TERM_DAYS`*/;
SET character_set_client = @saved_cs_client;

--
-- Temporary table structure for view `V_INVOICE_HISTORY`
--

DROP TABLE IF EXISTS `V_INVOICE_HISTORY`;
/*!50001 DROP VIEW IF EXISTS `V_INVOICE_HISTORY`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE VIEW `V_INVOICE_HISTORY` AS SELECT 
 1 AS `COMPANY_ID`,
 1 AS `COMPANY_NAME`,
 1 AS `TYPE`,
 1 AS `SUPPLIER_NAME`,
 1 AS `SUPPLIER_ACCOUNT`,
 1 AS `INVOICE_NUMBER`,
 1 AS `INVOICE_NUM`,
 1 AS `SEQUENCE_NO`,
 1 AS `AMOUNT`,
 1 AS `TERM_ID`,
 1 AS `TERM`,
 1 AS `AP_INVOICE_ID`,
 1 AS `INVOICE_TYPE_ID`,
 1 AS `SUPPLIER_ACCOUNT_ID`,
 1 AS `TOTAL_PAYMENT`,
 1 AS `SUPPLIER_ID`,
 1 AS `CURRENT_STATUS_ID`,
 1 AS `STATUS`,
 1 AS `INVOICE_DATE`,
 1 AS `GL_DATE`,
 1 AS `DUE_DATE`*/;
SET character_set_client = @saved_cs_client;

--
-- Temporary table structure for view `V_ITEM_HISTORY`
--

DROP TABLE IF EXISTS `V_ITEM_HISTORY`;
/*!50001 DROP VIEW IF EXISTS `V_ITEM_HISTORY`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE VIEW `V_ITEM_HISTORY` AS SELECT 
 1 AS `COMPANY_ID`,
 1 AS `ID`,
 1 AS `FI_ID`,
 1 AS `FORM`,
 1 AS `DATE`,
 1 AS `IS_COMPLETE`,
 1 AS `FW_STATUS_ID`,
 1 AS `WAREHOUSE_ID`,
 1 AS `ITEM_ID`,
 1 AS `STOCK_CODE`,
 1 AS `DESCRIPTION`,
 1 AS `CATEGORY_ID`,
 1 AS `STATUS_ID`,
 1 AS `QUANTITY`,
 1 AS `UNIT_COST`,
 1 AS `UOM`,
 1 AS `SRP`,
 1 AS `CREATED_DATE`,
 1 AS `FWL_CD`,
 1 AS `AMOUNT`*/;
SET character_set_client = @saved_cs_client;

--
-- Temporary table structure for view `V_ITEM_SALES_CUSTOMER`
--

DROP TABLE IF EXISTS `V_ITEM_SALES_CUSTOMER`;
/*!50001 DROP VIEW IF EXISTS `V_ITEM_SALES_CUSTOMER`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE VIEW `V_ITEM_SALES_CUSTOMER` AS SELECT 
 1 AS `COMPANY_ID`,
 1 AS `AR_CUSTOMER_ID`,
 1 AS `AR_CUSTOMER_ACCOUNT_ID`,
 1 AS `ITEM_CATEGORY_ID`,
 1 AS `ITEM_ID`,
 1 AS `DATE`,
 1 AS `STOCK_CODE`,
 1 AS `DESCRIPTION`,
 1 AS `REF_NO`,
 1 AS `QUANTITY`,
 1 AS `UOM`,
 1 AS `SRP`,
 1 AS `AMOUNT`,
 1 AS `DISCOUNT`,
 1 AS `NET_AMOUNT`*/;
SET character_set_client = @saved_cs_client;

--
-- Temporary table structure for view `V_JOURNAL_ENTRY`
--

DROP TABLE IF EXISTS `V_JOURNAL_ENTRY`;
/*!50001 DROP VIEW IF EXISTS `V_JOURNAL_ENTRY`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE VIEW `V_JOURNAL_ENTRY` AS SELECT 
 1 AS `SOURCE`,
 1 AS `ID`,
 1 AS `COMPANY_ID`,
 1 AS `DIVISION_ID`,
 1 AS `ACCOUNT_ID`,
 1 AS `ACCT_NO`,
 1 AS `ACCOUNT_NAME`,
 1 AS `GL_DATE`,
 1 AS `REFERENCE_NUMBER`,
 1 AS `DESCRIPTION`,
 1 AS `DEBIT`,
 1 AS `CREDIT`,
 1 AS `FORM_WORKFLOW_ID`,
 1 AS `CURRENT_STATUS_ID`,
 1 AS `IS_COMPLETE`,
 1 AS `IS_POSTED`*/;
SET character_set_client = @saved_cs_client;

--
-- Temporary table structure for view `V_STATEMENT_OF_ACCOUNT`
--

DROP TABLE IF EXISTS `V_STATEMENT_OF_ACCOUNT`;
/*!50001 DROP VIEW IF EXISTS `V_STATEMENT_OF_ACCOUNT`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE VIEW `V_STATEMENT_OF_ACCOUNT` AS SELECT 
 1 AS `COMPANY_ID`,
 1 AS `NAME`,
 1 AS `CUSTOMER_ACCOUNT_ID`,
 1 AS `CUSTOMER_ID`,
 1 AS `SOURCE`,
 1 AS `ID`,
 1 AS `DATE`,
 1 AS `GL_DATE`,
 1 AS `DUE_DATE`,
 1 AS `REFERENCE_NUMBER`,
 1 AS `INVOICE_NUMBER`,
 1 AS `TRANSACTION_AMOUNT`,
 1 AS `RECEIPT_AMOUNT`,
 1 AS `CREATED_DATE`,
 1 AS `AR_LINE_ID`,
 1 AS `STATUS_ID`,
 1 AS `IS_COMPLETE`,
 1 AS `TERM_ID`,
 1 AS `TERM_DAYS`*/;
SET character_set_client = @saved_cs_client;

--
-- Temporary table structure for view `V_TRANSACTION_HISTORY`
--

DROP TABLE IF EXISTS `V_TRANSACTION_HISTORY`;
/*!50001 DROP VIEW IF EXISTS `V_TRANSACTION_HISTORY`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE VIEW `V_TRANSACTION_HISTORY` AS SELECT 
 1 AS `COMPANY_ID`,
 1 AS `COMPANY_NAME`,
 1 AS `TYPE`,
 1 AS `CUSTOMER_NAME`,
 1 AS `CUSTOMER_ACCOUNT`,
 1 AS `TRANSACTION_NUMBER`,
 1 AS `TRANS_NUMBER`,
 1 AS `SEQUENCE_NO`,
 1 AS `AMOUNT`,
 1 AS `TERM`,
 1 AS `DUE_DATE`,
 1 AS `TRANSACTION_DATE`,
 1 AS `GL_DATE`,
 1 AS `TERM_ID`,
 1 AS `AR_TRANSACTION_ID`,
 1 AS `AR_TRANSACTION_TYPE_ID`,
 1 AS `AR_CUSTOMER_ACCOUNT_ID`,
 1 AS `AR_CUSTOMER_ID`,
 1 AS `TOTAL_PAYMENT`,
 1 AS `CURRENT_STATUS_ID`,
 1 AS `STATUS`,
 1 AS `IS_POSTED`*/;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `WAREHOUSE`
--

DROP TABLE IF EXISTS `WAREHOUSE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `WAREHOUSE` (
  `WAREHOUSE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `NAME` varchar(30) NOT NULL,
  `ADDRESS` varchar(50) DEFAULT NULL,
  `ACTIVE` tinyint(1) DEFAULT '1',
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `PARENT_WAREHOUSE_ID` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`WAREHOUSE_ID`),
  KEY `FK_WAREHOUSE_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_WAREHOUSE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_WAREHOUSE_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_WAREHOUSE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_WAREHOUSE_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_WAREHOUSE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `WAREHOUSE`
--

LOCK TABLES `WAREHOUSE` WRITE;
/*!40000 ALTER TABLE `WAREHOUSE` DISABLE KEYS */;
/*!40000 ALTER TABLE `WAREHOUSE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `WAYBILL_LINE`
--

DROP TABLE IF EXISTS `WAYBILL_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `WAYBILL_LINE` (
  `WAYBILL_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `DELIVERY_RECEIPT_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `AR_LINE_SETUP_ID` int(10) unsigned NOT NULL,
  `DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `DISCOUNT_VALUE` double DEFAULT '0',
  `DISCOUNT` double DEFAULT '0',
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `AMOUNT` double DEFAULT '0',
  `QUANTITY` double DEFAULT '0',
  `UP_AMOUNT` double DEFAULT '0',
  `UNITOFMEASUREMENT_ID` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`WAYBILL_LINE_ID`),
  KEY `FK_WAYBILL_LINE_DELIVERY_RECEIPT_ID` (`DELIVERY_RECEIPT_ID`),
  KEY `FK_WAYBILL_LINE_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_WAYBILL_LINE_AR_LINE_SETUP_ID` (`AR_LINE_SETUP_ID`),
  KEY `FK_WAYBILL_LINE_DISCOUNT_TYPE_ID` (`DISCOUNT_TYPE_ID`),
  KEY `FK_WAYBILL_LINE_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_WAYBILL_LINE_AR_LINE_SETUP_ID` FOREIGN KEY (`AR_LINE_SETUP_ID`) REFERENCES `AR_LINE_SETUP` (`AR_LINE_SETUP_ID`),
  CONSTRAINT `FK_WAYBILL_LINE_DELIVERY_RECEIPT_ID` FOREIGN KEY (`DELIVERY_RECEIPT_ID`) REFERENCES `DELIVERY_RECEIPT` (`DELIVERY_RECEIPT_ID`),
  CONSTRAINT `FK_WAYBILL_LINE_DISCOUNT_TYPE_ID` FOREIGN KEY (`DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_WAYBILL_LINE_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_WAYBILL_LINE_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `WAYBILL_LINE`
--

LOCK TABLES `WAYBILL_LINE` WRITE;
/*!40000 ALTER TABLE `WAYBILL_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `WAYBILL_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `WITHDRAWAL_SLIP`
--

DROP TABLE IF EXISTS `WITHDRAWAL_SLIP`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `WITHDRAWAL_SLIP` (
  `WITHDRAWAL_SLIP_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `FORM_WORKFLOW_ID` int(10) unsigned DEFAULT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `REQUISITION_FORM_ID` int(10) unsigned DEFAULT NULL,
  `PO_NUMBER` varchar(20) NOT NULL,
  `REMARKS` text NOT NULL,
  `DATE` date NOT NULL,
  `WS_NUMBER` int(20) unsigned DEFAULT NULL,
  `REQUESTER_NAME` varchar(100) DEFAULT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`WITHDRAWAL_SLIP_ID`),
  KEY `FK_WITHDRAWAL_SLIP_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_WITHDRAWAL_SLIP_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_WITHDRAWAL_SLIP_CREATED_BY` (`CREATED_BY`),
  KEY `FK_WITHDRAWAL_SLIP_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_WITHDRAWAL_SLIP_REQUISITION_FORM_ID` (`REQUISITION_FORM_ID`),
  CONSTRAINT `FK_WITHDRAWAL_SLIP_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_WITHDRAWAL_SLIP_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_WITHDRAWAL_SLIP_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_WITHDRAWAL_SLIP_REQUISITION_FORM_ID` FOREIGN KEY (`REQUISITION_FORM_ID`) REFERENCES `REQUISITION_FORM` (`REQUISITION_FORM_ID`),
  CONSTRAINT `FK_WITHDRAWAL_SLIP_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `WITHDRAWAL_SLIP`
--

LOCK TABLES `WITHDRAWAL_SLIP` WRITE;
/*!40000 ALTER TABLE `WITHDRAWAL_SLIP` DISABLE KEYS */;
/*!40000 ALTER TABLE `WITHDRAWAL_SLIP` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `WITHDRAWAL_SLIP_ITEM`
--

DROP TABLE IF EXISTS `WITHDRAWAL_SLIP_ITEM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `WITHDRAWAL_SLIP_ITEM` (
  `WITHDRAWAL_SLIP_ITEM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double NOT NULL,
  `UNIT_COST` double NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`WITHDRAWAL_SLIP_ITEM_ID`),
  KEY `FK_WITHDRAWAL_SLIP_ITEM_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_WITHDRAWAL_SLIP_ITEM_ID` (`ITEM_ID`),
  KEY `FK_WITHDRAWAL_SLIP_ITEM_CREATED_BY` (`CREATED_BY`),
  KEY `FK_WITHDRAWAL_SLIP_ITEM_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_WITHDRAWAL_SLIP_ITEM_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_WITHDRAWAL_SLIP_ITEM_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_WITHDRAWAL_SLIP_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_WITHDRAWAL_SLIP_ITEM_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `WITHDRAWAL_SLIP_ITEM`
--

LOCK TABLES `WITHDRAWAL_SLIP_ITEM` WRITE;
/*!40000 ALTER TABLE `WITHDRAWAL_SLIP_ITEM` DISABLE KEYS */;
/*!40000 ALTER TABLE `WITHDRAWAL_SLIP_ITEM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `WORK_ORDER`
--

DROP TABLE IF EXISTS `WORK_ORDER`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `WORK_ORDER` (
  `WORK_ORDER_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `SALES_ORDER_ID` int(10) unsigned DEFAULT NULL,
  `REFERENCE_WORK_ORDER_ID` int(10) unsigned DEFAULT NULL,
  `FORM_WORKFLOW_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `SEQUENCE_NO` int(10) unsigned NOT NULL,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `AR_CUSTOMER_ID` int(10) unsigned NOT NULL,
  `AR_CUSTOMER_ACCOUNT_ID` int(10) unsigned NOT NULL,
  `DATE` date NOT NULL,
  `TARGET_END_DATE` date NOT NULL,
  `WORK_DESCRIPTION` text,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`WORK_ORDER_ID`),
  KEY `FK_WO_SALES_ORDER_ID` (`SALES_ORDER_ID`),
  KEY `FK_WO_REFERENCE_WORK_ORDER_ID` (`REFERENCE_WORK_ORDER_ID`),
  KEY `FK_WO_FORM_WORKFLOW_ID` (`FORM_WORKFLOW_ID`),
  KEY `FK_WO_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_WO_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_WO_CS_ID` (`AR_CUSTOMER_ID`),
  KEY `FK_WO_CS_ACCT_ID` (`AR_CUSTOMER_ACCOUNT_ID`),
  KEY `FK_WO_CREATED_BY` (`CREATED_BY`),
  KEY `FK_WO_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_WO_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`),
  CONSTRAINT `FK_WO_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_WO_CS_ACCT_ID` FOREIGN KEY (`AR_CUSTOMER_ACCOUNT_ID`) REFERENCES `AR_CUSTOMER_ACCOUNT` (`AR_CUSTOMER_ACCOUNT_ID`),
  CONSTRAINT `FK_WO_CS_ID` FOREIGN KEY (`AR_CUSTOMER_ID`) REFERENCES `AR_CUSTOMER` (`AR_CUSTOMER_ID`),
  CONSTRAINT `FK_WO_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_WO_FORM_WORKFLOW_ID` FOREIGN KEY (`FORM_WORKFLOW_ID`) REFERENCES `FORM_WORKFLOW` (`FORM_WORKFLOW_ID`),
  CONSTRAINT `FK_WO_REFERENCE_WORK_ORDER_ID` FOREIGN KEY (`REFERENCE_WORK_ORDER_ID`) REFERENCES `WORK_ORDER` (`WORK_ORDER_ID`),
  CONSTRAINT `FK_WO_SALES_ORDER_ID` FOREIGN KEY (`SALES_ORDER_ID`) REFERENCES `SALES_ORDER` (`SALES_ORDER_ID`),
  CONSTRAINT `FK_WO_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `WORK_ORDER`
--

LOCK TABLES `WORK_ORDER` WRITE;
/*!40000 ALTER TABLE `WORK_ORDER` DISABLE KEYS */;
/*!40000 ALTER TABLE `WORK_ORDER` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `WORK_ORDER_INSTRUCTION`
--

DROP TABLE IF EXISTS `WORK_ORDER_INSTRUCTION`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `WORK_ORDER_INSTRUCTION` (
  `WORK_ORDER_INSTRUCTION_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `WORK_ORDER_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `WORK_INSTRUCTION` text,
  PRIMARY KEY (`WORK_ORDER_INSTRUCTION_ID`),
  KEY `FK_WO_IN_WORK_ORDER_ID` (`WORK_ORDER_ID`),
  KEY `FK_WO_IN_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_WO_IN_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_WO_IN_WORK_ORDER_ID` FOREIGN KEY (`WORK_ORDER_ID`) REFERENCES `WORK_ORDER` (`WORK_ORDER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `WORK_ORDER_INSTRUCTION`
--

LOCK TABLES `WORK_ORDER_INSTRUCTION` WRITE;
/*!40000 ALTER TABLE `WORK_ORDER_INSTRUCTION` DISABLE KEYS */;
/*!40000 ALTER TABLE `WORK_ORDER_INSTRUCTION` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `WORK_ORDER_ITEM`
--

DROP TABLE IF EXISTS `WORK_ORDER_ITEM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `WORK_ORDER_ITEM` (
  `WORK_ORDER_ITEM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `WORK_ORDER_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double DEFAULT '0',
  PRIMARY KEY (`WORK_ORDER_ITEM_ID`),
  KEY `FK_WOI_WORK_ORDER_ID` (`WORK_ORDER_ID`),
  KEY `FK_WOI_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_WOI_ITEM_ID` (`ITEM_ID`),
  CONSTRAINT `FK_WOI_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_WOI_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_WOI_WORK_ORDER_ID` FOREIGN KEY (`WORK_ORDER_ID`) REFERENCES `WORK_ORDER` (`WORK_ORDER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `WORK_ORDER_ITEM`
--

LOCK TABLES `WORK_ORDER_ITEM` WRITE;
/*!40000 ALTER TABLE `WORK_ORDER_ITEM` DISABLE KEYS */;
/*!40000 ALTER TABLE `WORK_ORDER_ITEM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `WORK_ORDER_LINE`
--

DROP TABLE IF EXISTS `WORK_ORDER_LINE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `WORK_ORDER_LINE` (
  `WORK_ORDER_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `WORK_ORDER_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `AR_LINE_SETUP_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double DEFAULT '0',
  `UNITOFMEASUREMENT_ID` int(10) unsigned DEFAULT NULL,
  `GROSS_AMOUNT` double DEFAULT '0',
  `UP_AMOUNT` double DEFAULT '0',
  `DISCOUNT_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `DISCOUNT_VALUE` double DEFAULT '0',
  `DISCOUNT` double DEFAULT '0',
  `TAX_TYPE_ID` int(10) unsigned DEFAULT NULL,
  `VAT_AMOUNT` double DEFAULT '0',
  `AMOUNT` double DEFAULT '0',
  PRIMARY KEY (`WORK_ORDER_LINE_ID`),
  KEY `FK_WOL_WORK_ORDER_ID` (`WORK_ORDER_ID`),
  KEY `FK_WOL_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_WOL_AR_LINE_SETUP_ID` (`AR_LINE_SETUP_ID`),
  KEY `FK_WOL_DISCOUNT_TYPE_ID` (`DISCOUNT_TYPE_ID`),
  KEY `FK_WOL_TAX_TYPE_ID` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_WOL_AR_LINE_SETUP_ID` FOREIGN KEY (`AR_LINE_SETUP_ID`) REFERENCES `AR_LINE_SETUP` (`AR_LINE_SETUP_ID`),
  CONSTRAINT `FK_WOL_DISCOUNT_TYPE_ID` FOREIGN KEY (`DISCOUNT_TYPE_ID`) REFERENCES `ITEM_DISCOUNT_TYPE` (`ITEM_DISCOUNT_TYPE_ID`),
  CONSTRAINT `FK_WOL_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_WOL_TAX_TYPE_ID` FOREIGN KEY (`TAX_TYPE_ID`) REFERENCES `TAX_TYPE` (`TAX_TYPE_ID`),
  CONSTRAINT `FK_WOL_WORK_ORDER_ID` FOREIGN KEY (`WORK_ORDER_ID`) REFERENCES `WORK_ORDER` (`WORK_ORDER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `WORK_ORDER_LINE`
--

LOCK TABLES `WORK_ORDER_LINE` WRITE;
/*!40000 ALTER TABLE `WORK_ORDER_LINE` DISABLE KEYS */;
/*!40000 ALTER TABLE `WORK_ORDER_LINE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `WORK_ORDER_PURCHASED_ITEM`
--

DROP TABLE IF EXISTS `WORK_ORDER_PURCHASED_ITEM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `WORK_ORDER_PURCHASED_ITEM` (
  `WORK_ORDER_PURCHASED_ITEM_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `WORK_ORDER_ID` int(10) unsigned NOT NULL,
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `WAREHOUSE_ID` int(10) unsigned DEFAULT NULL,
  `ITEM_ID` int(10) unsigned NOT NULL,
  `QUANTITY` double DEFAULT '0',
  PRIMARY KEY (`WORK_ORDER_PURCHASED_ITEM_ID`),
  KEY `FK_WOPI_WORK_ORDER_ID` (`WORK_ORDER_ID`),
  KEY `FK_WOPI_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  KEY `FK_WOPI_WAREHOUSE_ID` (`WAREHOUSE_ID`),
  KEY `FK_WOPI_ITEM_ID` (`ITEM_ID`),
  CONSTRAINT `FK_WOPI_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_WOPI_ITEM_ID` FOREIGN KEY (`ITEM_ID`) REFERENCES `ITEM` (`ITEM_ID`),
  CONSTRAINT `FK_WOPI_WAREHOUSE_ID` FOREIGN KEY (`WAREHOUSE_ID`) REFERENCES `WAREHOUSE` (`WAREHOUSE_ID`),
  CONSTRAINT `FK_WOPI_WORK_ORDER_ID` FOREIGN KEY (`WORK_ORDER_ID`) REFERENCES `WORK_ORDER` (`WORK_ORDER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `WORK_ORDER_PURCHASED_ITEM`
--

LOCK TABLES `WORK_ORDER_PURCHASED_ITEM` WRITE;
/*!40000 ALTER TABLE `WORK_ORDER_PURCHASED_ITEM` DISABLE KEYS */;
/*!40000 ALTER TABLE `WORK_ORDER_PURCHASED_ITEM` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `WT_ACCOUNT_SETTING`
--

DROP TABLE IF EXISTS `WT_ACCOUNT_SETTING`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `WT_ACCOUNT_SETTING` (
  `WT_ACCOUNT_SETTING_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `COMPANY_ID` int(10) unsigned NOT NULL,
  `NAME` varchar(50) NOT NULL,
  `VALUE` double NOT NULL,
  `ACCOUNT_COMBINATION_ID` int(10) unsigned NOT NULL,
  `ACTIVE` tinyint(1) DEFAULT '0',
  `ORDER_ID` int(3) unsigned NOT NULL,
  `CREDITABLE` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`WT_ACCOUNT_SETTING_ID`),
  KEY `FK_WTAS_COMPANY_ID` (`COMPANY_ID`),
  KEY `FK_WTAS_ACCT_COMBI_ID` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_WTAS_ACCT_COMBI_ID` FOREIGN KEY (`ACCOUNT_COMBINATION_ID`) REFERENCES `ACCOUNT_COMBINATION` (`ACCOUNT_COMBINATION_ID`),
  CONSTRAINT `FK_WTAS_COMPANY_ID` FOREIGN KEY (`COMPANY_ID`) REFERENCES `COMPANY` (`COMPANY_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=99 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `WT_ACCOUNT_SETTING`
--

LOCK TABLES `WT_ACCOUNT_SETTING` WRITE;
/*!40000 ALTER TABLE `WT_ACCOUNT_SETTING` DISABLE KEYS */;
INSERT INTO `WT_ACCOUNT_SETTING` VALUES (1,1,'WT 1% - WI 158 / WC 158',1,351,1,1,0),(2,1,'WT 1% - WI 630 / WC 630',1,352,1,2,0),(3,1,'WT 2% - WI 120 / WC 120',2,353,1,3,0),(4,1,'WT 2% - WI 160 / WC 160',2,354,1,4,0),(5,1,'WT 5% - WI 100 / WC 100',5,355,1,5,0),(6,1,'WT 10% - WI 010 / WC 010',10,356,1,6,0),(7,1,'WT 15% - WI 011 / WC 011',15,357,1,7,0),(8,1,'CWT 1% - WI 158 / WC 158',1,358,1,1,1),(9,1,'CWT 1% - WI 630 / WC 630',1,359,1,2,1),(10,1,'CWT 2% - WI 120 / WC 120',2,360,1,3,1),(11,1,'CWT 2% - WI 160 / WC 160',2,361,1,4,1),(12,1,'CWT 5% - WI 100 / WC 100',5,362,1,5,1),(13,1,'CWT 10% - WI 010 / WC 010',10,363,1,6,1),(14,1,'CWT 15% - WI 011 / WC 011',15,364,1,7,1),(15,1,'WT 1% - WI 158 / WC 158',1,365,1,1,0),(16,1,'WT 1% - WI 630 / WC 630',1,366,1,2,0),(17,1,'WT 2% - WI 120 / WC 120',2,367,1,3,0),(18,1,'WT 2% - WI 160 / WC 160',2,368,1,4,0),(19,1,'WT 5% - WI 100 / WC 100',5,369,1,5,0),(20,1,'WT 10% - WI 010 / WC 010',10,370,1,6,0),(21,1,'WT 15% - WI 011 / WC 011',15,371,1,7,0),(22,1,'CWT 1% - WI 158 / WC 158',1,372,1,1,1),(23,1,'CWT 1% - WI 630 / WC 630',1,373,1,2,1),(24,1,'CWT 2% - WI 120 / WC 120',2,374,1,3,1),(25,1,'CWT 2% - WI 160 / WC 160',2,375,1,4,1),(26,1,'CWT 5% - WI 100 / WC 100',5,376,1,5,1),(27,1,'CWT 10% - WI 010 / WC 010',10,377,1,6,1),(28,1,'CWT 15% - WI 011 / WC 011',15,378,1,7,1),(29,1,'WT 1% - WI 158 / WC 158',1,379,1,1,0),(30,1,'WT 1% - WI 630 / WC 630',1,380,1,2,0),(31,1,'WT 2% - WI 120 / WC 120',2,381,1,3,0),(32,1,'WT 2% - WI 160 / WC 160',2,382,1,4,0),(33,1,'WT 5% - WI 100 / WC 100',5,383,1,5,0),(34,1,'WT 10% - WI 010 / WC 010',10,384,1,6,0),(35,1,'WT 15% - WI 011 / WC 011',15,385,1,7,0),(36,1,'CWT 1% - WI 158 / WC 158',1,386,1,1,1),(37,1,'CWT 1% - WI 630 / WC 630',1,387,1,2,1),(38,1,'CWT 2% - WI 120 / WC 120',2,388,1,3,1),(39,1,'CWT 2% - WI 160 / WC 160',2,389,1,4,1),(40,1,'CWT 5% - WI 100 / WC 100',5,390,1,5,1),(41,1,'CWT 10% - WI 010 / WC 010',10,391,1,6,1),(42,1,'CWT 15% - WI 011 / WC 011',15,392,1,7,1),(43,1,'WT 1% - WI 158 / WC 158',1,379,1,1,0),(44,1,'WT 1% - WI 630 / WC 630',1,380,1,2,0),(45,1,'WT 2% - WI 120 / WC 120',2,381,1,3,0),(46,1,'WT 2% - WI 160 / WC 160',2,382,1,4,0),(47,1,'WT 5% - WI 100 / WC 100',5,383,1,5,0),(48,1,'WT 10% - WI 010 / WC 010',10,384,1,6,0),(49,1,'WT 15% - WI 011 / WC 011',15,385,1,7,0),(50,1,'CWT 1% - WI 158 / WC 158',1,386,1,1,1),(51,1,'CWT 1% - WI 630 / WC 630',1,387,1,2,1),(52,1,'CWT 2% - WI 120 / WC 120',2,388,1,3,1),(53,1,'CWT 2% - WI 160 / WC 160',2,389,1,4,1),(54,1,'CWT 5% - WI 100 / WC 100',5,390,1,5,1),(55,1,'CWT 10% - WI 010 / WC 010',10,391,1,6,1),(56,1,'CWT 15% - WI 011 / WC 011',15,392,1,7,1),(57,1,'WT 1% - WI 158 / WC 158',1,393,1,1,0),(58,1,'WT 1% - WI 630 / WC 630',1,394,1,2,0),(59,1,'WT 2% - WI 120 / WC 120',2,395,1,3,0),(60,1,'WT 2% - WI 160 / WC 160',2,396,1,4,0),(61,1,'WT 5% - WI 100 / WC 100',5,397,1,5,0),(62,1,'WT 10% - WI 010 / WC 010',10,398,1,6,0),(63,1,'WT 15% - WI 011 / WC 011',15,399,1,7,0),(64,1,'CWT 1% - WI 158 / WC 158',1,400,1,1,1),(65,1,'CWT 1% - WI 630 / WC 630',1,401,1,2,1),(66,1,'CWT 2% - WI 120 / WC 120',2,402,1,3,1),(67,1,'CWT 2% - WI 160 / WC 160',2,403,1,4,1),(68,1,'CWT 5% - WI 100 / WC 100',5,404,1,5,1),(69,1,'CWT 10% - WI 010 / WC 010',10,405,1,6,1),(70,1,'CWT 15% - WI 011 / WC 011',15,406,1,7,1),(71,1,'WT 1% - WI 158 / WC 158',1,407,1,1,0),(72,1,'WT 1% - WI 630 / WC 630',1,408,1,2,0),(73,1,'WT 2% - WI 120 / WC 120',2,409,1,3,0),(74,1,'WT 2% - WI 160 / WC 160',2,410,1,4,0),(75,1,'WT 5% - WI 100 / WC 100',5,411,1,5,0),(76,1,'WT 10% - WI 010 / WC 010',10,412,1,6,0),(77,1,'WT 15% - WI 011 / WC 011',15,413,1,7,0),(78,1,'CWT 1% - WI 158 / WC 158',1,414,1,1,1),(79,1,'CWT 1% - WI 630 / WC 630',1,415,1,2,1),(80,1,'CWT 2% - WI 120 / WC 120',2,416,1,3,1),(81,1,'CWT 2% - WI 160 / WC 160',2,417,1,4,1),(82,1,'CWT 5% - WI 100 / WC 100',5,418,1,5,1),(83,1,'CWT 10% - WI 010 / WC 010',10,419,1,6,1),(84,1,'CWT 15% - WI 011 / WC 011',15,420,1,7,1),(85,1,'WT 1% - WI 158 / WC 158',1,421,1,1,0),(86,1,'WT 1% - WI 630 / WC 630',1,422,1,2,0),(87,1,'WT 2% - WI 120 / WC 120',2,423,1,3,0),(88,1,'WT 2% - WI 160 / WC 160',2,424,1,4,0),(89,1,'WT 5% - WI 100 / WC 100',5,425,1,5,0),(90,1,'WT 10% - WI 010 / WC 010',10,426,1,6,0),(91,1,'WT 15% - WI 011 / WC 011',15,427,1,7,0),(92,1,'CWT 1% - WI 158 / WC 158',1,428,1,1,1),(93,1,'CWT 1% - WI 630 / WC 630',1,429,1,2,1),(94,1,'CWT 2% - WI 120 / WC 120',2,430,1,3,1),(95,1,'CWT 2% - WI 160 / WC 160',2,431,1,4,1),(96,1,'CWT 5% - WI 100 / WC 100',5,432,1,5,1),(97,1,'CWT 10% - WI 010 / WC 010',10,433,1,6,1),(98,1,'CWT 15% - WI 011 / WC 011',15,434,1,7,1);
/*!40000 ALTER TABLE `WT_ACCOUNT_SETTING` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping routines for database 'CBS'
--
/*!50003 DROP PROCEDURE IF EXISTS `CHECK_HAS_DUPLICATE` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `CHECK_HAS_DUPLICATE`(IN IN_CASH_SALE_ID INT)
BEGIN
	
DECLARE DISTINCT_COUNT INT;
DECLARE CSI_COUNT INT;
DECLARE GT_DISTINCT_COUNT INT;
DECLARE CASH_PAID DOUBLE;
DECLARE TOTAL_AMOUNT DOUBLE;
DECLARE GE_TOTAL_AMOUNT INT;
	
SELECT COUNT(DISTINCT ITEM_ID, WAREHOUSE_ID, QUANTITY, COALESCE (UNIT_COST, 0)) INTO DISTINCT_COUNT FROM CASH_SALE_ITEM WHERE CASH_SALE_ID = IN_CASH_SALE_ID;
SELECT COUNT(*) INTO CSI_COUNT FROM CASH_SALE_ITEM WHERE CASH_SALE_ID = IN_CASH_SALE_ID;

IF CSI_COUNT > DISTINCT_COUNT THEN
	SELECT 1 INTO GT_DISTINCT_COUNT;
ELSE
	SELECT 0 INTO GT_DISTINCT_COUNT;
END IF;

SELECT CASH INTO CASH_PAID FROM CASH_SALE WHERE CASH_SALE_ID = IN_CASH_SALE_ID;
SELECT SUM(AMOUNT) INTO TOTAL_AMOUNT FROM CASH_SALE_ITEM WHERE CASH_SALE_ID = IN_CASH_SALE_ID;

IF CASH_PAID >= TOTAL_AMOUNT THEN
	SELECT 0 INTO GE_TOTAL_AMOUNT;
ELSE
	SELECT 1 INTO GE_TOTAL_AMOUNT;
END IF;
 
IF GT_DISTINCT_COUNT = 1 AND GE_TOTAL_AMOUNT = 1 THEN
	SELECT 1;
ELSE
	SELECT 0;
END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getUserIdByUserName` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE DEFINER=`cmsadmin`@`%` PROCEDURE `getUserIdByUserName`(IN userName VARCHAR(30))
BEGIN
	SELECT USER_ID FROM USER WHERE USER_NAME = userName;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GET_ACCOUNT_ANALYSIS` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_ACCOUNT_ANALYSIS`(IN IN_COMPANY_ID INT, IN IN_ACCOUNT_ID INT, IN IN_FROM_DIVISION VARCHAR(5),
	IN IN_TO_DIVISION VARCHAR(5), IN DATE_FROM DATE, IN DATE_TO DATE, IN IN_DESCRIPTION VARCHAR(50), IN IN_LIMIT_FROM INT, IN IN_LIMIT_TO INT)
BEGIN

SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION,
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (


SELECT 'GENERAL LEDGER' as SOURCE, GL.GENERAL_LEDGER_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, GL.GL_DATE, CONCAT('JV', GL.SEQUENCE_NO) as REFERENCE_NUMBER, GLE.DESCRIPTION, GLE.AMOUNT as DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM GL_ENTRY GLE 
INNER JOIN GENERAL_LEDGER GL ON GL.GENERAL_LEDGER_ID = GLE.GENERAL_LEDGER_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = GLE.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON GL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IS_DEBIT = 1
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND GL.GL_DATE BETWEEN DATE_FROM AND DATE_TO
AND GLE.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'GENERAL LEDGER' as SOURCE, GL.GENERAL_LEDGER_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, GL.GL_DATE, CONCAT('JV', GL.SEQUENCE_NO) as REFERENCE_NUMBER, GLE.DESCRIPTION, 0 as DEBIT, GLE.AMOUNT as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM GL_ENTRY GLE
INNER JOIN GENERAL_LEDGER GL ON GL.GENERAL_LEDGER_ID = GLE.GENERAL_LEDGER_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = GLE.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON GL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IS_DEBIT = 0
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND GL.GL_DATE BETWEEN DATE_FROM AND DATE_TO
AND GLE.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'AP INVOICE' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, AI.INVOICE_NUMBER as REFERENCE_NUMBER, AI.DESCRIPTION, 0 as DEBIT, AI.AMOUNT as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AP_INVOICE AI 
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AI.AMOUNT >= 0
AND AI.INVOICE_TYPE_ID != 5 AND AI.INVOICE_TYPE_ID != 6 AND AI.INVOICE_TYPE_ID != 7 AND AI.INVOICE_TYPE_ID != 8
AND AC.COMPANY_ID = SA.COMPANY_ID 
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE BETWEEN DATE_FROM AND DATE_TO
AND AI.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL

SELECT 'AP INVOICE' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, AI.INVOICE_NUMBER as REFERENCE_NUMBER, AI.DESCRIPTION, -AI.AMOUNT as DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AP_INVOICE AI 
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AI.AMOUNT < 0
AND AI.INVOICE_TYPE_ID != 5 AND AI.INVOICE_TYPE_ID != 6 AND AI.INVOICE_TYPE_ID != 7 AND AI.INVOICE_TYPE_ID != 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE BETWEEN DATE_FROM AND DATE_TO
AND AI.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'AP INVOICE' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, AI.INVOICE_NUMBER as REFERENCE_NUMBER, AL.DESCRIPTION, AL.AMOUNT AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AP_LINE AL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = AL.AP_INVOICE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = AL.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AL.AMOUNT >= 0
AND AI.INVOICE_TYPE_ID != 5 AND AI.INVOICE_TYPE_ID != 6 AND AI.INVOICE_TYPE_ID != 7 AND AI.INVOICE_TYPE_ID != 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE BETWEEN DATE_FROM AND DATE_TO
AND AL.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL 

SELECT 'AP INVOICE' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, AI.INVOICE_NUMBER as REFERENCE_NUMBER, AL.DESCRIPTION, 0 AS DEBIT, -AL.AMOUNT as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AP_LINE AL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = AL.AP_INVOICE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = AL.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AL.AMOUNT < 0
AND AI.INVOICE_TYPE_ID != 5 AND AI.INVOICE_TYPE_ID != 6 AND AI.INVOICE_TYPE_ID != 7 AND AI.INVOICE_TYPE_ID != 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE BETWEEN DATE_FROM AND DATE_TO
AND AL.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL

SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'AP PAYMENT' as SOURCE, AI.AP_PAYMENT_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AP.CHECK_DATE as GL_DATE, 
CONCAT(AP.CHECK_NUMBER, '') as REFERENCE_NUMBER, 
CONCAT (CASE API.INVOICE_TYPE_ID
WHEN 5 THEN CONCAT('RR', CAST(API.SEQUENCE_NO AS CHAR(10)))
WHEN 6 THEN CONCAT('RTS', CAST(API.SEQUENCE_NO AS CHAR(10)))
WHEN 8 THEN CONCAT('RR-RM', CAST(API.SEQUENCE_NO AS CHAR(10)))
ELSE API.INVOICE_NUMBER 
END) AS DESCRIPTION,
0 AS DEBIT, AI.PAID_AMOUNT as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID=AP.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AP_INVOICE API ON API.AP_INVOICE_ID = AI.AP_INVOICE_ID 
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AP.AMOUNT != 0
AND AI.PAID_AMOUNT > 0
AND AP.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AP.CHECK_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS PAYMENT_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL

SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'AP PAYMENT' as SOURCE, AI.AP_PAYMENT_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AP.CHECK_DATE as GL_DATE, CONCAT(AP.CHECK_NUMBER, '') as REFERENCE_NUMBER,
CONCAT (CASE API.INVOICE_TYPE_ID
WHEN 5 THEN CONCAT('RR', CAST(API.SEQUENCE_NO AS CHAR(10)))
WHEN 6 THEN CONCAT('RTS', CAST(API.SEQUENCE_NO AS CHAR(10)))
WHEN 7 THEN CONCAT('RTS-EB', CAST(API.SEQUENCE_NO AS CHAR(10)))
WHEN 8 THEN CONCAT('RR-RM', CAST(API.SEQUENCE_NO AS CHAR(10)))
ELSE API.INVOICE_NUMBER 
END) AS DESCRIPTION, -AI.PAID_AMOUNT AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID=AP.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AP_INVOICE API ON API.AP_INVOICE_ID = AI.AP_INVOICE_ID
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AP.AMOUNT != 0
AND AI.PAID_AMOUNT < 0
AND AP.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AP.CHECK_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS PAYMENT_INVOICE_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'AP PAYMENT' as SOURCE, AI.AP_PAYMENT_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AP.CHECK_DATE as GL_DATE, CONCAT(AP.CHECK_NUMBER, '') as REFERENCE_NUMBER,
CONCAT (CASE API.INVOICE_TYPE_ID
WHEN 5 THEN CONCAT('RR', CAST(API.SEQUENCE_NO AS CHAR(10)))
WHEN 6 THEN CONCAT('RTS', CAST(API.SEQUENCE_NO AS CHAR(10)))
WHEN 7 THEN CONCAT('RTS-EB', CAST(API.SEQUENCE_NO AS CHAR(10)))
WHEN 8 THEN CONCAT('RR-RM', CAST(API.SEQUENCE_NO AS CHAR(10)))
ELSE API.INVOICE_NUMBER 
END) AS DESCRIPTION, 0 AS DEBIT, -AI.PAID_AMOUNT as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AP.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AP_INVOICE API ON API.AP_INVOICE_ID = AI.AP_INVOICE_ID 
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AI.PAID_AMOUNT < 0
AND AP.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AP.CHECK_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS PAYMENT_INVOICE_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'AP PAYMENT' as SOURCE, AI.AP_PAYMENT_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AP.CHECK_DATE as GL_DATE, CONCAT(AP.CHECK_NUMBER, '') as REFERENCE_NUMBER, 
CONCAT (CASE API.INVOICE_TYPE_ID
WHEN 5 THEN CONCAT('RR', CAST(API.SEQUENCE_NO AS CHAR(10)))
WHEN 6 THEN CONCAT('RTS', CAST(API.SEQUENCE_NO AS CHAR(10)))
WHEN 7 THEN CONCAT('RTS-EB', CAST(API.SEQUENCE_NO AS CHAR(10)))
WHEN 8 THEN CONCAT('RR-RM', CAST(API.SEQUENCE_NO AS CHAR(10)))
ELSE API.INVOICE_NUMBER 
END) AS DESCRIPTION,
AI.PAID_AMOUNT AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AP.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AP_INVOICE API ON API.AP_INVOICE_ID = AI.AP_INVOICE_ID 
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AI.PAID_AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AP.CHECK_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS PAYMENT_INVOICE_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL



SELECT 'AR MISCELLANEOUS' as SOURCE, AM.AR_MISCELLANEOUS_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AM.MATURITY_DATE as GL_DATE, AM.RECEIPT_NUMBER AS REFERENCE_NUMBER, AM.DESCRIPTION, AM.AMOUNT AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_MISCELLANEOUS AM
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AM.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND RM.DEBIT_ACCOUNT_COMBINATION_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AM.MATURITY_DATE BETWEEN DATE_FROM AND DATE_TO
AND AM.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL 


SELECT 'AR MISCELLANEOUS' as SOURCE, AM.AR_MISCELLANEOUS_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AM.MATURITY_DATE as GL_DATE, AM.RECEIPT_NUMBER AS REFERENCE_NUMBER, AM.DESCRIPTION, AM.AMOUNT AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_MISCELLANEOUS AM
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AM.RECEIPT_METHOD_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND RM.BANK_ACCOUNT_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AM.MATURITY_DATE BETWEEN DATE_FROM AND DATE_TO
AND AM.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'AR MISCELLANEOUS' as SOURCE, AM.AR_MISCELLANEOUS_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AM.MATURITY_DATE as GL_DATE, AM.RECEIPT_NUMBER AS REFERENCE_NUMBER, AM.DESCRIPTION, -AML.AMOUNT AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_MISCELLANEOUS_LINE AML
INNER JOIN AR_MISCELLANEOUS AM ON AM.AR_MISCELLANEOUS_ID = AML.AR_MISCELLANEOUS_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AML.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AML.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AM.MATURITY_DATE BETWEEN DATE_FROM AND DATE_TO
AND AM.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL

SELECT 'AR MISCELLANEOUS' as SOURCE, AM.AR_MISCELLANEOUS_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AM.MATURITY_DATE as GL_DATE, AM.RECEIPT_NUMBER AS REFERENCE_NUMBER, AM.DESCRIPTION, 0 AS DEBIT, AML.AMOUNT as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_MISCELLANEOUS_LINE AML
INNER JOIN AR_MISCELLANEOUS AM ON AM.AR_MISCELLANEOUS_ID = AML.AR_MISCELLANEOUS_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AML.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AML.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AM.MATURITY_DATE BETWEEN DATE_FROM AND DATE_TO
AND AM.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL



SELECT 'AR TRANSACTION' as SOURCE, AT.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AT.GL_DATE, AT.TRANSACTION_NUMBER as REFERENCE_NUMBER, AT.DESCRIPTION, AT.AMOUNT AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_TRANSACTION AT
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AT.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AT.AMOUNT >= 0
AND AT.AR_TRANSACTION_TYPE_ID = 1 AND AT.AR_TRANSACTION_TYPE_ID = 2 AND AT.AR_TRANSACTION_TYPE_ID = 3
AND AT.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AT.GL_DATE BETWEEN DATE_FROM AND DATE_TO
AND AT.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'AR TRANSACTION' as SOURCE, AT.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AT.GL_DATE, AT.TRANSACTION_NUMBER as REFERENCE_NUMBER, AT.DESCRIPTION, 0 AS DEBIT, -AT.AMOUNT as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_TRANSACTION AT
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AT.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AT.AMOUNT < 0
AND AT.AR_TRANSACTION_TYPE_ID = 1 AND AT.AR_TRANSACTION_TYPE_ID = 2 AND AT.AR_TRANSACTION_TYPE_ID = 3
AND AT.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AT.GL_DATE BETWEEN DATE_FROM AND DATE_TO
AND AT.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL



SELECT 'AR TRANSACTION' as SOURCE, AT.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AT.GL_DATE, AT.TRANSACTION_NUMBER as REFERENCE_NUMBER, AT.DESCRIPTION, 0 AS DEBIT, AL.AMOUNT as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID=AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AL.AMOUNT >= 0
AND AT.AR_TRANSACTION_TYPE_ID = 1 AND AT.AR_TRANSACTION_TYPE_ID = 2 AND AT.AR_TRANSACTION_TYPE_ID = 3
AND AT.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AT.GL_DATE BETWEEN DATE_FROM AND DATE_TO
AND AT.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'AR TRANSACTION' as SOURCE, AT.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AT.GL_DATE, AT.TRANSACTION_NUMBER as REFERENCE_NUMBER, AT.DESCRIPTION, -AL.AMOUNT AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID=AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AL.AMOUNT < 0
AND AT.AR_TRANSACTION_TYPE_ID = 1 AND AT.AR_TRANSACTION_TYPE_ID = 2 AND AT.AR_TRANSACTION_TYPE_ID = 3
AND AT.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AT.GL_DATE BETWEEN DATE_FROM AND DATE_TO
AND AT.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL






SELECT 'ACCOUNT COLLECTION' as SOURCE, CONCAT(AR.AR_RECEIPT_ID, RM.RECEIPT_METHOD_ID) as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AR.MATURITY_DATE as GL_DATE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER, '' as DESCRIPTION, AR.AMOUNT AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND RM.DEBIT_ACCOUNT_COMBINATION_ID IS NOT NULL
AND AR.AMOUNT != 0
AND AR.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AR.MATURITY_DATE BETWEEN DATE_FROM AND DATE_TO
AND AR.RECEIPT_NUMBER LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1


UNION ALL
SELECT 'ACCOUNT COLLECTION' as SOURCE, CONCAT(AR.AR_RECEIPT_ID, BA.CASH_IN_BANK_ACCT_ID) as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AR.MATURITY_DATE as GL_DATE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER, '' AS DESCRIPTION, AR.AMOUNT AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.AMOUNT != 0
AND AR.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AR.MATURITY_DATE BETWEEN DATE_FROM AND DATE_TO
AND AR.RECEIPT_NUMBER LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL




SELECT 'ACCOUNT COLLECTION' as SOURCE, AR.AR_RECEIPT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AR.MATURITY_DATE as GL_DATE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER, '' AS DESCRIPTION, 0 AS DEBIT, AR.AMOUNT as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.AMOUNT != 0
AND AR.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AR.MATURITY_DATE BETWEEN DATE_FROM AND DATE_TO
AND AR.RECEIPT_NUMBER LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL



SELECT 'ACCOUNT COLLECTION' as SOURCE, ART.AR_RECEIPT_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AR.MATURITY_DATE as GL_DATE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER, AT.TRANSACTION_NUMBER AS DESCRIPTION, ART.AMOUNT AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT >= 0
AND AR.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AR.MATURITY_DATE BETWEEN DATE_FROM AND DATE_TO
AND AT.TRANSACTION_NUMBER LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND AT.AR_TRANSACTION_TYPE_ID != 15

UNION ALL

SELECT 'ACCOUNT COLLECTION' as SOURCE, ART.AR_RECEIPT_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AR.MATURITY_DATE as GL_DATE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER, AT.TRANSACTION_NUMBER AS DESCRIPTION, 0 AS DEBIT, -ART.AMOUNT as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT < 0
AND AR.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AR.MATURITY_DATE BETWEEN DATE_FROM AND DATE_TO
AND AT.TRANSACTION_NUMBER LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND AT.AR_TRANSACTION_TYPE_ID != 15

UNION ALL



SELECT 'ACCOUNT COLLECTION' as SOURCE, ART.AR_RECEIPT_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AR.MATURITY_DATE as GL_DATE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER, AT.TRANSACTION_NUMBER AS DESCRIPTION, 0 AS DEBIT, ART.AMOUNT as CREDIT, 
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT >= 0
AND AR.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AR.MATURITY_DATE BETWEEN DATE_FROM AND DATE_TO
AND AT.TRANSACTION_NUMBER LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND AT.AR_TRANSACTION_TYPE_ID != 15

UNION ALL

SELECT 'ACCOUNT COLLECTION' as SOURCE, ART.AR_RECEIPT_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AR.MATURITY_DATE as GL_DATE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER, AT.TRANSACTION_NUMBER AS DESCRIPTION, -ART.AMOUNT AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT < 0
AND AR.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AR.MATURITY_DATE BETWEEN DATE_FROM AND DATE_TO
AND AT.TRANSACTION_NUMBER LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND AT.AR_TRANSACTION_TYPE_ID != 15

UNION ALL


SELECT 'ACCOUNT COLLECTION' as SOURCE, ACL.AC_AR_LINE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AR.MATURITY_DATE as GL_DATE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER, ALS.NAME AS DESCRIPTION, ACL.AMOUNT AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AC_AR_LINE ACL
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ACL.AR_RECEIPT_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = ACL.AR_LINE_SETUP_ID 
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AR.MATURITY_DATE BETWEEN DATE_FROM AND DATE_TO
AND ALS.NAME LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT COLLECTION' as SOURCE, ACL.AC_AR_LINE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AR.MATURITY_DATE as GL_DATE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER, ALS.NAME AS DESCRIPTION, 0 AS DEBIT, ACL.AMOUNT as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AC_AR_LINE ACL
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ACL.AR_RECEIPT_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = ACL.AR_LINE_SETUP_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = AR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AR.MATURITY_DATE BETWEEN DATE_FROM AND DATE_TO
AND ALS.NAME LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - WHOLESALE' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-W', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-IS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - POS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-POS', CS_NUMBER) as REFERENCE_NUMBER, '' AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - PROCESSING' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID = 6
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL 


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - WHOLESALE' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-W', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-IS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - POS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-POS', CS_NUMBER) as REFERENCE_NUMBER, '' AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - PROCESSING' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID,
D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE,
CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID = 6
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 AS DEBIT, QUANTITY * SRP as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION,
0 AS DEBIT, QUANTITY * SRP as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1


UNION ALL


SELECT 'CASH SALES - WHOLESALE' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-W', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 AS DEBIT, QUANTITY * SRP as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-IS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 AS DEBIT, QUANTITY * SRP as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - POS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-POS', CS_NUMBER) as REFERENCE_NUMBER, '' AS DESCRIPTION, 
0 AS DEBIT, QUANTITY * SRP as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - PROCESSING' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 AS DEBIT, QUANTITY * SRP as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID = 6
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1


UNION ALL


SELECT 'CASH SALES - WHOLESALE' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-W', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-IS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - POS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-POS', CS_NUMBER) as REFERENCE_NUMBER, '' AS DESCRIPTION, 
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
CSI.AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION,
CSI.AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1


UNION ALL


SELECT 'CASH SALES - WHOLESALE' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-W', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
CSI.AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-IS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
CSI.AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - POS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-POS', CS_NUMBER) as REFERENCE_NUMBER, '' AS DESCRIPTION, 
CSI.AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - PROCESSING' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
CSI.AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID = 6
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
AL.AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION,
AL.AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - WHOLESALE' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-W', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
AL.AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-IS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
AL.AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - POS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-POS', CS_NUMBER) as REFERENCE_NUMBER, '' AS DESCRIPTION, 
AL.AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION,
AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1


UNION ALL


SELECT 'CASH SALES - WHOLESALE' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-W', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-IS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - POS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-POS', CS_NUMBER) as REFERENCE_NUMBER, '' AS DESCRIPTION, 
AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - PROCESSING' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID = 6
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 AS DEBIT, AL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION,
0 AS DEBIT, AL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL 


SELECT 'CASH SALES - WHOLESALE' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-W', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 AS DEBIT, AL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-IS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 AS DEBIT, AL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE,  CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE,  CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID =12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL 


SELECT 'ACCOUNT SALES/PRESCRIPTION' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE,  CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 14
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-W', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-IS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
UNION ALL


SELECT 'ACCOUNT SALES/PRESCRIPTION' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 14
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-W', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-IS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, QUANTITY * SRP as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, QUANTITY * SRP as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES/PRESCRIPTION' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, QUANTITY * SRP as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 14
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-W', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, QUANTITY * SRP as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-IS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, QUANTITY * SRP as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES/PRESCRIPTION' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 14
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-W', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-IS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
ASI.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
ASI.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES/PRESCRIPTION' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
ASI.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 14
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-W', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
ASI.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-IS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
ASI.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
AL.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
AL.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES/PRESCRIPTION' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
AL.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 14
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-W', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
AL.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-IS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
AL.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, AL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, AL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES/PRESCRIPTION' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, AL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 14
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-W', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, AL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-IS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, AL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'RECEIVING REPORT' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, CONCAT('RR', AI.SEQUENCE_NO) as REFERENCE_NUMBER, COALESCE(AI.INVOICE_NUMBER, ', ', RR.DELIVERY_RECEIPT_NO) as DESCRIPTION,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM R_RECEIVING_REPORT_ITEM RRI
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN ITEM I ON I.ITEM_ID = RRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = RR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND AI.INVOICE_TYPE_ID = 5
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS RR_DEBIT_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'RECEIVING REPORT' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, CONCAT('RR', AI.SEQUENCE_NO) as REFERENCE_NUMBER, COALESCE(AI.INVOICE_NUMBER, ', ', RR.DELIVERY_RECEIPT_NO) as DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM R_RECEIVING_REPORT_ITEM RRI
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RR.AP_INVOICE_ID
INNER JOIN SUPPLIER_ACCOUNT SPA ON SPA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = SPA.DEFAULT_CREDIT_AC_ID AND AC.COMPANY_ID = RR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE UNIT_COST IS NOT NULL
AND AI.INVOICE_TYPE_ID = 5
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS RR_CREDIT_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'RECEIVING REPORT' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE as GL_DATE, CONCAT('RR', AI.SEQUENCE_NO) as REFERENCE_NUMBER, COALESCE(AI.INVOICE_NUMBER, RR.DELIVERY_RECEIPT_NO) AS DESCRIPTION, 
0 AS DEBIT, APL.AMOUNT AS CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AP_INVOICE_LINE APL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = APL.AP_INVOICE_ID
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = APL.AP_INVOICE_ID
INNER JOIN SUPPLIER_ACCOUNT SPA ON SPA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = SPA.DEFAULT_CREDIT_AC_ID AND AC.COMPANY_ID = RR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AI.INVOICE_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS RR_CREDIT_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'RECEIVING REPORT' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE as GL_DATE, CONCAT('RR', AI.SEQUENCE_NO) as REFERENCE_NUMBER, COALESCE(AI.INVOICE_NUMBER, ', ', RR.DELIVERY_RECEIPT_NO) AS DESCRIPTION, 
APL.AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AP_INVOICE_LINE APL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = APL.AP_INVOICE_ID
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = APL.AP_INVOICE_ID
INNER JOIN AP_LINE_SETUP ALS ON ALS.AP_LINE_SETUP_ID = APL.AP_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AI.INVOICE_TYPE_ID = 5
AND ALS.ACTIVE = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS RR_APL_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'RECEIVING REPORT - RM' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, CONCAT('RR-RM', AI.SEQUENCE_NO) as REFERENCE_NUMBER, COALESCE(AI.INVOICE_NUMBER, ', ', RR.DELIVERY_RECEIPT_NO) as DESCRIPTION,
RRMI.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM R_RECEIVING_REPORT_ITEM RRI
INNER JOIN R_RECEIVING_REPORT_RM_ITEM RRMI ON RRMI.R_RECEIVING_REPORT_ITEM_ID = RRI.R_RECEIVING_REPORT_ITEM_ID
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN ITEM I ON I.ITEM_ID = RRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = RR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND AI.INVOICE_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS RR_RM_DEBIT_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'RECEIVING REPORT - RM' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE as GL_DATE, CONCAT('RR-RM', AI.SEQUENCE_NO) as REFERENCE_NUMBER, COALESCE(AI.INVOICE_NUMBER, ', ', RR.DELIVERY_RECEIPT_NO) AS DESCRIPTION, 
APL.AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AP_INVOICE_LINE APL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = APL.AP_INVOICE_ID
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = APL.AP_INVOICE_ID
INNER JOIN AP_LINE_SETUP ALS ON ALS.AP_LINE_SETUP_ID = APL.AP_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AI.INVOICE_TYPE_ID = 8
AND ALS.ACTIVE = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS RR_RM_APL_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'RECEIVING REPORT - RM' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, CONCAT('RR-RM', AI.SEQUENCE_NO) as REFERENCE_NUMBER, COALESCE(AI.INVOICE_NUMBER, ', ', RR.DELIVERY_RECEIPT_NO) as DESCRIPTION,
0 as DEBIT, AI.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AP_INVOICE AI
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = AI.AP_INVOICE_ID
INNER JOIN SUPPLIER_ACCOUNT SPA ON SPA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = SPA.DEFAULT_CREDIT_AC_ID AND AC.COMPANY_ID = RR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AI.INVOICE_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS RR_RM_CREDIT_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'RETURN TO SUPPLIER' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, CONCAT('RTS', AI.SEQUENCE_NO) as REFERENCE_NUMBER,  CONCAT('RR', CONCAT('RR', CAST(RRAI.SEQUENCE_NO AS CHAR(10)))) as DESCRIPTION,
0 as DEBIT, COALESCE(RTSI.UNIT_COST, 0) * RTSI.QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM R_RETURN_TO_SUPPLIER_ITEM RTSI
INNER JOIN R_RETURN_TO_SUPPLIER RTS ON RTS.AP_INVOICE_ID = RTSI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RTS.AP_INVOICE_ID
INNER JOIN R_RECEIVING_REPORT_ITEM RRI ON RRI.R_RECEIVING_REPORT_ITEM_ID = RTSI.R_RECEIVING_REPORT_ITEM_ID
INNER JOIN AP_INVOICE RRAI ON RRAI.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN ITEM I ON I.ITEM_ID = RTSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = RTS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND RTSI.UNIT_COST IS NOT NULL
AND AI.INVOICE_TYPE_ID = 6
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS RTS_CREDIT_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'RETURN TO SUPPLIER' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, CONCAT('RTS', AI.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('RR', CAST(RRAI.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
COALESCE(RTSI.UNIT_COST, 0) * RTSI.QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM R_RETURN_TO_SUPPLIER_ITEM RTSI
INNER JOIN R_RETURN_TO_SUPPLIER RTS ON RTS.AP_INVOICE_ID = RTSI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RTS.AP_INVOICE_ID
INNER JOIN R_RECEIVING_REPORT_ITEM RRI ON RRI.R_RECEIVING_REPORT_ITEM_ID = RTSI.R_RECEIVING_REPORT_ITEM_ID
INNER JOIN AP_INVOICE RRAI ON RRAI.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN SUPPLIER_ACCOUNT SPA ON SPA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = SPA.DEFAULT_CREDIT_AC_ID AND AC.COMPANY_ID = RTS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE RTSI.UNIT_COST IS NOT NULL
AND AI.INVOICE_TYPE_ID = 6
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS RTS_DEBIT_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT 'RTS - EB' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, CONCAT('RTS-EB', AI.SEQUENCE_NO) as REFERENCE_NUMBER, AI.INVOICE_NUMBER as DESCRIPTION,
0 as DEBIT, COALESCE(RTSI.UNIT_COST, 0) * RTSI.QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM R_RETURN_TO_SUPPLIER_ITEM RTSI
INNER JOIN R_RETURN_TO_SUPPLIER RTS ON RTS.AP_INVOICE_ID = RTSI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RTS.AP_INVOICE_ID
INNER JOIN ITEM I ON I.ITEM_ID = RTSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = RTS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND RTSI.UNIT_COST IS NOT NULL
AND AI.INVOICE_TYPE_ID = 7
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE BETWEEN DATE_FROM AND DATE_TO
AND AI.INVOICE_NUMBER LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'RTS - EB' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, CONCAT('RTS-EB', AI.SEQUENCE_NO) as REFERENCE_NUMBER, AI.INVOICE_NUMBER as DESCRIPTION,
COALESCE(RTSI.UNIT_COST, 0) * RTSI.QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM R_RETURN_TO_SUPPLIER_ITEM RTSI
INNER JOIN R_RETURN_TO_SUPPLIER RTS ON RTS.AP_INVOICE_ID = RTSI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RTS.AP_INVOICE_ID
INNER JOIN SUPPLIER_ACCOUNT SPA ON SPA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = SPA.DEFAULT_CREDIT_AC_ID AND AC.COMPANY_ID = RTS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE RTSI.UNIT_COST IS NOT NULL
AND AI.INVOICE_TYPE_ID = 7
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE BETWEEN DATE_FROM AND DATE_TO
AND AI.INVOICE_NUMBER LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE,  CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_CA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE,  CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_CA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - CT' as SOURCE,  CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_CA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - CT' as SOURCE,  CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_CA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE,  CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-W', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSRW_CA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE,  CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-W', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSRW_CA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - IS' as SOURCE,  CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-IS', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_IS_CA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - IS' as SOURCE,  CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-IS', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_IS_CA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_IA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_IA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - CT' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_IA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - CT' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_IA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-W', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSRW_IA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-W', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSRW_IA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - IS' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-IS', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_IS_IA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - IS' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-IS', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_IS_IA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, (QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_SRA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, (QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_SRA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - CT' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, (QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_SRA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION


UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - CT' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, (QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_SRA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-W', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, (QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSRW_SRA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-W', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, (QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSRW_SRA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - IS' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-IS', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, (QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_IS_SRA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - IS' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-IS', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, (QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_IS_SRA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 AS DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_SDA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 AS DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_SDA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - CT' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 AS DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_SDA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - CT' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 AS DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_SDA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-W', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 AS DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSRW_SDA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-W', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 AS DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSRW_SDA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - IS' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-IS', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 AS DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_IS_SDA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - IS' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-IS', CAST(CSR.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 AS DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_IS_SDA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - CT' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - CT' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-W', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSRW_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-W', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSRW_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - IS' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-IS', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_IS_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - IS' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-IS', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_IS_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_BA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_BA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - CT' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_BA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - CT' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_BA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL 


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-W', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSRW_BA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL 


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-W', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSRW_BA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - IS' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-IS', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_IS_BA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - IS' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-IS', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_IS_BA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_AR_LINE AL
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = AL.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_IS_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_AR_LINE AL
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = AL.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_IS_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - CT' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_AR_LINE AL
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = AL.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_IS_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL 


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-',CAST(CSRR.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_AR_LINE AL
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = AL.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CSRR ON CSRR.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AL.CASH_SALE_RETURN_AR_LINE_REF_ID IS NOT NULL
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1 ) AS CSR_IS_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL 


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - CT' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_AR_LINE AL
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = AL.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_IS_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL 


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_AR_LINE AL
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = AL.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_IS_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL 


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - CT' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_AR_LINE AL
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = AL.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_IS_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL 


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CAST(CSRR.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_AR_LINE AL
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = AL.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CSRR ON CSRR.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AL.CASH_SALE_RETURN_AR_LINE_REF_ID IS NOT NULL
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_IS_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - CT' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CAST(CSRR.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_AR_LINE AL
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = AL.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CSRR ON CSRR.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AL.CASH_SALE_RETURN_AR_LINE_REF_ID IS NOT NULL
AND CSR.DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS CSR_IS_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 5
AND ASR.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS ASR_CA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-W', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-W', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 9
AND ASR.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS ASR_CA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-IS', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-IS', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 11
AND ASR.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS ASR_IS_CA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN - CT' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 13
AND ASR.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS ASR_CA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 5 
AND ASR.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS ASR_IA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-W', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-W', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 9 
AND ASR.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS ASRW_IA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-IS', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-IS', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 11
AND ASR.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS ASR_IS_IA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN - CT' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 13 
AND ASR.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS ASR_IA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
0 as DEBIT, (QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 5 
AND ASR.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS ASR_SRA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-W', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-W', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
0 as DEBIT, (QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 9
AND ASR.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS ASRW_SRA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-IS', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-IS', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
0 as DEBIT, (QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 11
AND ASR.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS ASR_IS_SRA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN - CT' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
0 as DEBIT, (QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 13 
AND ASR.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS ASR_SRA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
0 as DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 5 
AND ASR.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS ASR_SDA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-W', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-W', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
0 as DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 9
AND ASR.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS ASRW_SDA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-IS', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-IS', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
0 as DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 11
AND ASR.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS ASR_IS_SDA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN - CT' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
0 as DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 13 
AND ASR.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS ASR_SDA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
ASI.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 5 
AND ASR.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS ASR_CAS_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-W', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-W', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
ASI.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 9 
AND ASR.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS ASRW_CAS_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL 


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-IS', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-IS', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
ASI.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 11
AND ASR.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS ASR_IS_CAS_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN - CT' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
ASI.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 13 
AND ASR.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND FW.IS_COMPLETE = 1) AS ASR_CAS_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID,
D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE,
CONCAT('ASR', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION, AL.AMOUNT as DEBIT, 0 as CREDIT, 
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 5
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES RETURN - CT' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID,
D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE,
CONCAT('ASR', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION, AL.AMOUNT as DEBIT, 0 as CREDIT, 
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 13
AND FW.CURRENT_STATUS_ID != 12
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID,
D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE,
CONCAT('ASR', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION, 0 as DEBIT, AL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID,
FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 5
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES RETURN - CT' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID,
D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE,
CONCAT('ASR', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION, 0 as DEBIT, AL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID,
FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 13
AND FW.CURRENT_STATUS_ID != 12
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ASR - EB' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-EB', ART.SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 7
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ASR - EB' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-EB', ART.SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 7
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ASR - EB' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-EB', ART.SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
(QUANTITY * SRP) as DEBIT,  0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 7
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ASR - EB' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-EB', ART.SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, (QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 7
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP', CAST(CAP_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAP.SALE_INVOICE_NO AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAP.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP', CAST(CAP_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAP.SALE_INVOICE_NO AS DESCRIPTION, 
CAL.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_AR_LINE CAL
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAL.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAP.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1
AND FW.IS_COMPLETE = 1

UNION ALL 


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP', CAST(CAP_NUMBER AS CHAR(20))) as REFERENCE_NUMBER,  CAP.SALE_INVOICE_NO AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAP.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1
AND FW.IS_COMPLETE = 1

UNION ALL 


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP', CAST(CAP_NUMBER AS CHAR(20))) as REFERENCE_NUMBER,  CAP.SALE_INVOICE_NO AS DESCRIPTION, 
CAL.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_AR_LINE CAL
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAL.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAP.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1
AND FW.IS_COMPLETE = 1

UNION ALL 


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP', CAST(CAP_NUMBER AS CHAR(20))) as REFERENCE_NUMBER,  CAP.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAP.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1
AND FW.IS_COMPLETE = 1

UNION ALL 


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP', CAST(CAP_NUMBER AS CHAR(20))) as REFERENCE_NUMBER,  CAP.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, CAL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_AR_LINE CAL
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAL.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAP.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CUSTOMER ADVANCE PAYMENT - IS' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-IS', CAST(CAP_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAP.SALE_INVOICE_NO AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAP.SALE_INVOICE_NO LIKE IN_DESCRIPTION
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CUSTOMER ADVANCE PAYMENT - IS' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-IS', CAST(CAP_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAP.SALE_INVOICE_NO AS DESCRIPTION, 
CAL.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_AR_LINE CAL
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAL.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAP.SALE_INVOICE_NO LIKE IN_DESCRIPTION
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CUSTOMER ADVANCE PAYMENT - IS' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-IS', CAST(CAP_NUMBER AS CHAR(20))) as REFERENCE_NUMBER,  CAP.SALE_INVOICE_NO AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAP.SALE_INVOICE_NO LIKE IN_DESCRIPTION
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CUSTOMER ADVANCE PAYMENT - IS' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-IS', CAST(CAP_NUMBER AS CHAR(20))) as REFERENCE_NUMBER,  CAP.SALE_INVOICE_NO AS DESCRIPTION, 
CAL.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_AR_LINE CAL
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAL.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAP.SALE_INVOICE_NO LIKE IN_DESCRIPTION
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CUSTOMER ADVANCE PAYMENT - IS' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-IS', CAST(CAP_NUMBER AS CHAR(20))) as REFERENCE_NUMBER,  CAP.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAP.SALE_INVOICE_NO LIKE IN_DESCRIPTION
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CUSTOMER ADVANCE PAYMENT - IS' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-IS', CAST(CAP_NUMBER AS CHAR(20))) as REFERENCE_NUMBER,  CAP.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, CAL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_AR_LINE CAL
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAL.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAP.SALE_INVOICE_NO LIKE IN_DESCRIPTION
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'STOCK ADJUSTMENT IN' as SOURCE, SA.STOCK_ADJUSTMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, SA.SA_DATE as GL_DATE, CONCAT('SA', CAST(SA.SA_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, SA.REMARKS AS DESCRIPTION,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ITEM I ON I.ITEM_ID = SAI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND QUANTITY > 0
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NULL
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND SA.SA_DATE BETWEEN DATE_FROM AND DATE_TO
AND SA.REMARKS LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'STOCK ADJUSTMENT IN - IS' as SOURCE, SA.STOCK_ADJUSTMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, SA.SA_DATE as GL_DATE, CONCAT('SA-IS', CAST(SA.SA_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, SA.REMARKS AS DESCRIPTION,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ITEM I ON I.ITEM_ID = SAI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND QUANTITY > 0
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND SA.SA_DATE BETWEEN DATE_FROM AND DATE_TO
AND SA.REMARKS LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'STOCK ADJUSTMENT IN' as SOURCE, SA.STOCK_ADJUSTMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, SA.SA_DATE as GL_DATE, CONCAT('SA', CAST(SA.SA_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, SA.REMARKS AS DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = SAT.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE QUANTITY > 0
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NULL
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND SA.SA_DATE BETWEEN DATE_FROM AND DATE_TO
AND SA.REMARKS LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL 



SELECT 'STOCK ADJUSTMENT IN - IS' as SOURCE, SA.STOCK_ADJUSTMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, SA.SA_DATE as GL_DATE, CONCAT('SA-IS', CAST(SA.SA_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, SA.REMARKS AS DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = SAT.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE QUANTITY > 0
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND SA.SA_DATE BETWEEN DATE_FROM AND DATE_TO
AND SA.REMARKS LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL 


SELECT 'STOCK ADJUSTMENT OUT' as SOURCE, SA.STOCK_ADJUSTMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, SA.SA_DATE as GL_DATE, CONCAT('SA', CAST(SA.SA_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, SA.REMARKS AS DESCRIPTION,
COALESCE(UNIT_COST, 0) * -QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = SAT.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE QUANTITY < 0
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NULL
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND SA.SA_DATE BETWEEN DATE_FROM AND DATE_TO
AND SA.REMARKS LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'STOCK ADJUSTMENT OUT - IS' as SOURCE, SA.STOCK_ADJUSTMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, SA.SA_DATE as GL_DATE, CONCAT('SA-IS', CAST(SA.SA_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, SA.REMARKS AS DESCRIPTION,
COALESCE(UNIT_COST, 0) * -QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = SAT.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE QUANTITY < 0
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND SA.SA_DATE BETWEEN DATE_FROM AND DATE_TO
AND SA.REMARKS LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'STOCK ADJUSTMENT OUT' as SOURCE, SA.STOCK_ADJUSTMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, SA.SA_DATE as GL_DATE, CONCAT('SA', CAST(SA.SA_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, SA.REMARKS AS DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * -QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ITEM I ON I.ITEM_ID = SAI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND QUANTITY < 0 
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NULL
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND SA.SA_DATE BETWEEN DATE_FROM AND DATE_TO
AND SA.REMARKS LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'STOCK ADJUSTMENT OUT - IS' as SOURCE, SA.STOCK_ADJUSTMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, SA.SA_DATE as GL_DATE, CONCAT('SA-IS', CAST(SA.SA_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, SA.REMARKS AS DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * -QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ITEM I ON I.ITEM_ID = SAI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND QUANTITY < 0 
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND SA.SA_DATE BETWEEN DATE_FROM AND DATE_TO
AND SA.REMARKS LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD', CAST(CAPD.CAPD_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
COALESCE(CAPDI.UNIT_COST, 0) * CAPDI.QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1

UNION ALL

SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD', CAST(CAPD.CAPD_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, COALESCE(CAPDI.UNIT_COST, 0) * CAPDI.QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4 
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD', CAST(CAPD.CAPD_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, CAPDI.QUANTITY * CAPDI.SRP as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD', CAST(CAPD.CAPD_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND (DISCOUNT IS NOT NULL || DISCOUNT != 0)
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD', CAST(CAPD.CAPD_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
CAPDI.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAPD.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IA.ACTIVE = 1
AND IA.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD', CAST(CAPD.CAPD_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
CPAL.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_AR_LINE CPAL
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CPAL.CAP_DELIVERY_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAPD.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IA.ACTIVE = 1
AND IA.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD', CAST(CAPD.CAPD_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, CPAL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_AR_LINE CPAL
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CPAL.CAP_DELIVERY_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = CPAL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE CAPD.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4 
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - IS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-IS', CAST(CAPD.CAPD_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
COALESCE(CAPDI.UNIT_COST, 0) * CAPDI.QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - IS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-IS', CAST(CAPD.CAPD_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, COALESCE(CAPDI.UNIT_COST, 0) * CAPDI.QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4 
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - IS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-IS', CAST(CAPD.CAPD_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, CAPDI.QUANTITY * CAPDI.SRP as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - IS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-IS', CAST(CAPD.CAPD_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND (DISCOUNT IS NOT NULL || DISCOUNT != 0)
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - IS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-IS', CAST(CAPD.CAPD_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
CAPDI.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAPD.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IA.ACTIVE = 1
AND IA.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - IS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-IS', CAST(CAPD.CAPD_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
CPAL.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_AR_LINE CPAL
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CPAL.CAP_DELIVERY_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAPD.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IA.ACTIVE = 1
AND IA.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - IS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-IS', CAST(CAPD.CAPD_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, CPAL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_AR_LINE CPAL
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CPAL.CAP_DELIVERY_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = CPAL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE CAPD.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4 
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3

UNION ALL


SELECT 'PROCESSING REPORT' as SOURCE, CONCAT(RMI.PR_RAW_MATERIALS_ITEM_ID, RMI.ITEM_ID) as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, PR.DATE as GL_DATE, CONCAT('PR', SEQUENCE_NO) as REFERENCE_NUMBER, PR.REF_NUMBER AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM PR_RAW_MATERIALS_ITEM RMI
INNER JOIN PROCESSING_REPORT PR ON PR.PROCESSING_REPORT_ID = RMI.PROCESSING_REPORT_ID
INNER JOIN ITEM I ON I.ITEM_ID = RMI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = PR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON PR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND PR.DATE BETWEEN DATE_FROM AND DATE_TO
AND PR.REF_NUMBER LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'PROCESSING REPORT' as SOURCE, CONCAT(OMI.PR_OTHER_MATERIALS_ITEM_ID, OMI.ITEM_ID) as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, PR.DATE as GL_DATE, CONCAT('PR', SEQUENCE_NO) as REFERENCE_NUMBER, PR.REF_NUMBER AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM PR_OTHER_MATERIALS_ITEM OMI
INNER JOIN PROCESSING_REPORT PR ON PR.PROCESSING_REPORT_ID = OMI.PROCESSING_REPORT_ID
INNER JOIN ITEM I ON I.ITEM_ID = OMI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = PR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON PR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND PR.DATE BETWEEN DATE_FROM AND DATE_TO
AND PR.REF_NUMBER LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'PROCESSING REPORT' as SOURCE, CONCAT(MP.PR_MAIN_PRODUCT_ID, MP.ITEM_ID) as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, PR.DATE as GL_DATE, CONCAT('PR', SEQUENCE_NO) as REFERENCE_NUMBER, PR.REF_NUMBER AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM PR_MAIN_PRODUCT MP
INNER JOIN PROCESSING_REPORT PR ON PR.PROCESSING_REPORT_ID = MP.PROCESSING_REPORT_ID
INNER JOIN ITEM I ON I.ITEM_ID = MP.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = PR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON PR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND PR.DATE BETWEEN DATE_FROM AND DATE_TO
AND PR.REF_NUMBER LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'PROCESSING REPORT' as SOURCE, CONCAT(OC.PR_OTHER_CHARGE_ID, OC.AR_LINE_SETUP_ID) as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, PR.DATE as GL_DATE, CONCAT('PR', SEQUENCE_NO) as REFERENCE_NUMBER, PR.REF_NUMBER AS DESCRIPTION,  0 AS DEBIT, OC.AMOUNT as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM PR_OTHER_CHARGE OC
INNER JOIN PROCESSING_REPORT PR ON PR.PROCESSING_REPORT_ID = OC.PROCESSING_REPORT_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = OC.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON PR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND PR.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND PR.DATE BETWEEN DATE_FROM AND DATE_TO
AND PR.REF_NUMBER LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'WIP - SPECIAL ORDER' as SOURCE, CONCAT(WIPSOM.WIPSO_MATERIAL_ID, WIPSOM.ITEM_ID) as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.GL_DATE as GL_DATE, CONCAT('WIPSO', SEQUENCE_NUMBER) as REFERENCE_NUMBER, ART.DESCRIPTION AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM WIPSO_MATERIAL WIPSOM
INNER JOIN WIP_SPECIAL_ORDER WIPSO ON WIPSO.WIP_SPECIAL_ORDER_ID = WIPSOM.WIP_SPECIAL_ORDER_ID
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = WIPSO.AR_TRANSACTION_ID
INNER JOIN ITEM I ON I.ITEM_ID = WIPSOM.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = WIPSO.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON WIPSO.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'WIP - SPECIAL ORDER' as SOURCE, CONCAT(WIPSOFP.WIPSO_FINISHED_PRODUCT_ID, WIPSOFP.ITEM_ID) as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.GL_DATE as GL_DATE, CONCAT('WIPSO', SEQUENCE_NUMBER) as REFERENCE_NUMBER, ART.DESCRIPTION AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM WIPSO_FINISHED_PRODUCT WIPSOFP
INNER JOIN WIP_SPECIAL_ORDER WIPSO ON WIPSO.WIP_SPECIAL_ORDER_ID = WIPSOFP.WIP_SPECIAL_ORDER_ID
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = WIPSO.AR_TRANSACTION_ID
INNER JOIN ITEM I ON I.ITEM_ID = WIPSOFP.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = WIPSO.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON WIPSO.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'WIP - SPECIAL ORDER' AS SOURCE, CONCAT(WIPOC.WIPSO_OTHER_CHARGE_ID, WIPOC.AR_LINE_SETUP_ID) AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER AS ACCT_NO, A.ACCOUNT_NAME, ART.GL_DATE AS GL_DATE, CONCAT('WIPSO', SEQUENCE_NUMBER) AS REFERENCE_NUMBER, ART.DESCRIPTION AS DESCRIPTION, 0 AS DEBIT, WIPOC.AMOUNT AS CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE AS IS_POSTED
FROM WIPSO_OTHER_CHARGE WIPOC
INNER JOIN WIP_SPECIAL_ORDER WIPSO ON WIPSO.WIP_SPECIAL_ORDER_ID = WIPOC.WIP_SPECIAL_ORDER_ID
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = WIPSO.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = WIPOC.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW  FW ON WIPSO.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE WIPSO.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN  IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE BETWEEN DATE_FROM AND DATE_TO
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - AS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-AS ', CAST(CAPD.CAPD_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
COALESCE(CAPDI.UNIT_COST, 0) * CAPDI.QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 4

UNION ALL

SELECT 'PAID IN ADVANCE DELIVERY - AS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-AS ', CAST(CAPD.CAPD_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, COALESCE(CAPDI.UNIT_COST, 0) * CAPDI.QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 4

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - AS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD - AS', CAST(CAPD.CAPD_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, CAPDI.QUANTITY * CAPDI.SRP as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 4

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - AS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-AS ', CAST(CAPD.CAPD_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND (DISCOUNT IS NOT NULL || DISCOUNT != 0)
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 4

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - AS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-AS ', CAST(CAPD.CAPD_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
CAPDI.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAPD.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IA.ACTIVE = 1
AND IA.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 4

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - AS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-AS ', CAST(CAPD.CAPD_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
CPAL.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_AR_LINE CPAL
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CPAL.CAP_DELIVERY_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAPD.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IA.ACTIVE = 1
AND IA.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 4

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - AS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-AS ', CAST(CAPD.CAPD_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, CPAL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_AR_LINE CPAL
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CPAL.CAP_DELIVERY_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = CPAL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE CAPD.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 4

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - WIPSO' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-WIPSO ', CAST(CAPD.CAPD_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
COALESCE(CAPDI.UNIT_COST, 0) * CAPDI.QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 5

UNION ALL

SELECT 'PAID IN ADVANCE DELIVERY - WIPSO' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-WIPSO ', CAST(CAPD.CAPD_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, COALESCE(CAPDI.UNIT_COST, 0) * CAPDI.QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 5

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - WIPSO' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD - WIPSO', CAST(CAPD.CAPD_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, CAPDI.QUANTITY * CAPDI.SRP as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 5

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - WIPSO' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-WIPSO ', CAST(CAPD.CAPD_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND (DISCOUNT IS NOT NULL || DISCOUNT != 0)
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 5

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - WIPSO' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-WIPSO ', CAST(CAPD.CAPD_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
CAPDI.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAPD.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IA.ACTIVE = 1
AND IA.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 5

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - WIPSO' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-WIPSO ', CAST(CAPD.CAPD_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
CPAL.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_AR_LINE CPAL
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CPAL.CAP_DELIVERY_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAPD.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IA.ACTIVE = 1
AND IA.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 5

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - WIPSO' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-WIPSO ', CAST(CAPD.CAPD_NUMBER AS CHAR(20))) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, CPAL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_AR_LINE CPAL
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CPAL.CAP_DELIVERY_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = CPAL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE CAPD.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE BETWEEN DATE_FROM AND DATE_TO
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 5
) AS ACCOUNT_ANALYSIS ORDER BY GL_DATE, REFERENCE_NUMBER LIMIT IN_LIMIT_FROM, IN_LIMIT_TO;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GET_ACCOUNT_BALANCE` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_ACCOUNT_BALANCE`(IN IN_COMPANY_ID INT, IN IN_ACCOUNT_ID INT,
	IN IN_AS_OF_DATE DATE, IN IN_LIMIT_FROM INT, IN IN_LIMIT_TO INT)
BEGIN 

SELECT ACCOUNT_ID, sum(DEBIT) as DEBIT, sum(CREDIT) as CREDIT, ACCT_NO FROM (


SELECT 'GENERAL LEDGER' as SOURCE, GL.GENERAL_LEDGER_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, GL.GL_DATE, CONCAT('JV', GL.SEQUENCE_NO) as REFERENCE_NUMBER, GLE.DESCRIPTION, SUM(GLE.AMOUNT) as DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM GL_ENTRY GLE 
INNER JOIN GENERAL_LEDGER GL ON GL.GENERAL_LEDGER_ID = GLE.GENERAL_LEDGER_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = GLE.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON GL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IS_DEBIT = 1
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND GL.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'GENERAL LEDGER' as SOURCE, GL.GENERAL_LEDGER_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, GL.GL_DATE, CONCAT('JV', GL.SEQUENCE_NO) as REFERENCE_NUMBER, GLE.DESCRIPTION, 0 as DEBIT, SUM(GLE.AMOUNT) as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM GL_ENTRY GLE
INNER JOIN GENERAL_LEDGER GL ON GL.GENERAL_LEDGER_ID = GLE.GENERAL_LEDGER_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = GLE.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON GL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IS_DEBIT = 0
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND GL.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'AP INVOICE' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, AI.INVOICE_NUMBER as REFERENCE_NUMBER, AI.DESCRIPTION, 0 as DEBIT, SUM(AI.AMOUNT) as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AP_INVOICE AI 
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AI.AMOUNT >= 0
AND AI.INVOICE_TYPE_ID != 5 AND AI.INVOICE_TYPE_ID != 6 AND AI.INVOICE_TYPE_ID != 7 AND AI.INVOICE_TYPE_ID != 8
AND AC.COMPANY_ID = SA.COMPANY_ID 
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL

SELECT 'AP INVOICE' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, AI.INVOICE_NUMBER as REFERENCE_NUMBER, AI.DESCRIPTION, -SUM(AI.AMOUNT) as DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AP_INVOICE AI 
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AI.AMOUNT < 0
AND AI.INVOICE_TYPE_ID != 5 AND AI.INVOICE_TYPE_ID != 6 AND AI.INVOICE_TYPE_ID != 7 AND AI.INVOICE_TYPE_ID != 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'AP INVOICE' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, AI.INVOICE_NUMBER as REFERENCE_NUMBER, AL.DESCRIPTION, SUM(AL.AMOUNT) AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AP_LINE AL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = AL.AP_INVOICE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = AL.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AL.AMOUNT >= 0
AND AI.INVOICE_TYPE_ID != 5 AND AI.INVOICE_TYPE_ID != 6 AND AI.INVOICE_TYPE_ID != 7 AND AI.INVOICE_TYPE_ID != 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL 

SELECT 'AP INVOICE' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, AI.INVOICE_NUMBER as REFERENCE_NUMBER, AL.DESCRIPTION, 0 AS DEBIT, -SUM(AL.AMOUNT) as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AP_LINE AL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = AL.AP_INVOICE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = AL.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AL.AMOUNT < 0
AND AI.INVOICE_TYPE_ID != 5 AND AI.INVOICE_TYPE_ID != 6 AND AI.INVOICE_TYPE_ID != 7 AND AI.INVOICE_TYPE_ID != 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL

SELECT 'AP PAYMENT' as SOURCE, AI.AP_PAYMENT_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AP.CHECK_DATE as GL_DATE, AP.CHECK_NUMBER as REFERENCE_NUMBER, 
CONCAT (CASE API.INVOICE_TYPE_ID
WHEN 5 THEN CONCAT('RR-', API.SEQUENCE_NO)
WHEN 6 THEN CONCAT('RTS-', API.SEQUENCE_NO)
WHEN 8 THEN CONCAT('RR-RM ', API.SEQUENCE_NO)
ELSE API.INVOICE_NUMBER END) AS DESCSRIPTION,
0 AS DEBIT, SUM(AI.PAID_AMOUNT) as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID=AP.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AP_INVOICE API ON API.AP_INVOICE_ID = AI.AP_INVOICE_ID 
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AP.AMOUNT != 0
AND AI.PAID_AMOUNT > 0
AND AP.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AP.CHECK_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL

SELECT 'AP PAYMENT' as SOURCE, AI.AP_PAYMENT_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AP.CHECK_DATE as GL_DATE, AP.CHECK_NUMBER as REFERENCE_NUMBER,
CONCAT (CASE API.INVOICE_TYPE_ID
WHEN 5 THEN CONCAT('RR-', API.SEQUENCE_NO)
WHEN 6 THEN CONCAT('RTS-', API.SEQUENCE_NO)
WHEN 7 THEN CONCAT('RTS-EB', API.SEQUENCE_NO)
WHEN 8 THEN CONCAT('RR-RM ', API.SEQUENCE_NO)
ELSE API.INVOICE_NUMBER END) AS DESCSRIPTION, -SUM(AI.PAID_AMOUNT) AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID=AP.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AP_INVOICE API ON API.AP_INVOICE_ID = AI.AP_INVOICE_ID
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AP.AMOUNT != 0
AND AI.PAID_AMOUNT < 0
AND AP.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AP.CHECK_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'AP PAYMENT' as SOURCE, AI.AP_PAYMENT_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AP.CHECK_DATE as GL_DATE, AP.CHECK_NUMBER as REFERENCE_NUMBER,
CONCAT (CASE API.INVOICE_TYPE_ID
WHEN 5 THEN CONCAT('RR-', API.SEQUENCE_NO)
WHEN 6 THEN CONCAT('RTS-', API.SEQUENCE_NO)
WHEN 7 THEN CONCAT('RTS-EB', API.SEQUENCE_NO)
WHEN 8 THEN CONCAT('RR-RM ', API.SEQUENCE_NO)
ELSE API.INVOICE_NUMBER 
END) AS DESCSRIPTION, 0 AS DEBIT, -SUM(AI.PAID_AMOUNT) as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AP.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AP_INVOICE API ON API.AP_INVOICE_ID = AI.AP_INVOICE_ID 
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AI.PAID_AMOUNT < 0
AND AP.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AP.CHECK_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'AP PAYMENT' as SOURCE, AI.AP_PAYMENT_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AP.CHECK_DATE as GL_DATE, AP.CHECK_NUMBER as REFERENCE_NUMBER, 
CONCAT (CASE API.INVOICE_TYPE_ID
WHEN 5 THEN CONCAT('RR-', API.SEQUENCE_NO)
WHEN 6 THEN CONCAT('RTS-', API.SEQUENCE_NO)
WHEN 7 THEN CONCAT('RTS-EB', API.SEQUENCE_NO)
WHEN 8 THEN CONCAT('RR-RM ', API.SEQUENCE_NO)
ELSE API.INVOICE_NUMBER END) AS DESCSRIPTION,
SUM(AI.PAID_AMOUNT) AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AP.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AP_INVOICE API ON API.AP_INVOICE_ID = AI.AP_INVOICE_ID 
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AI.PAID_AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AP.CHECK_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL



SELECT 'AR MISCELLANEOUS' as SOURCE, AM.AR_MISCELLANEOUS_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AM.MATURITY_DATE as GL_DATE, AM.RECEIPT_NUMBER AS REFERENCE_NUMBER, AM.DESCRIPTION, SUM(AM.AMOUNT) AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_MISCELLANEOUS AM
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AM.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND RM.DEBIT_ACCOUNT_COMBINATION_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AM.MATURITY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL 


SELECT 'AR MISCELLANEOUS' as SOURCE, AM.AR_MISCELLANEOUS_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AM.MATURITY_DATE as GL_DATE, AM.RECEIPT_NUMBER AS REFERENCE_NUMBER, AM.DESCRIPTION, SUM(AM.AMOUNT) AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_MISCELLANEOUS AM
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AM.RECEIPT_METHOD_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND RM.BANK_ACCOUNT_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AM.MATURITY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'AR MISCELLANEOUS' as SOURCE, AM.AR_MISCELLANEOUS_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AM.MATURITY_DATE as GL_DATE, AM.RECEIPT_NUMBER AS REFERENCE_NUMBER, AM.DESCRIPTION, -SUM(AML.AMOUNT) AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_MISCELLANEOUS_LINE AML
INNER JOIN AR_MISCELLANEOUS AM ON AM.AR_MISCELLANEOUS_ID = AML.AR_MISCELLANEOUS_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AML.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AML.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AM.MATURITY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL

SELECT 'AR MISCELLANEOUS' as SOURCE, AM.AR_MISCELLANEOUS_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AM.MATURITY_DATE as GL_DATE, AM.RECEIPT_NUMBER AS REFERENCE_NUMBER, AM.DESCRIPTION, 0 AS DEBIT, SUM(AML.AMOUNT) as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_MISCELLANEOUS_LINE AML
INNER JOIN AR_MISCELLANEOUS AM ON AM.AR_MISCELLANEOUS_ID = AML.AR_MISCELLANEOUS_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AML.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AML.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AM.MATURITY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL



SELECT 'AR TRANSACTION' as SOURCE, AT.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AT.GL_DATE, AT.TRANSACTION_NUMBER as REFERENCE_NUMBER, AT.DESCRIPTION, SUM(AT.AMOUNT) AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_TRANSACTION AT
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AT.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AT.AMOUNT >= 0
AND AT.AR_TRANSACTION_TYPE_ID = 1 AND AT.AR_TRANSACTION_TYPE_ID = 2 AND AT.AR_TRANSACTION_TYPE_ID = 3
AND AT.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AT.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'AR TRANSACTION' as SOURCE, AT.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AT.GL_DATE, AT.TRANSACTION_NUMBER as REFERENCE_NUMBER, AT.DESCRIPTION, 0 AS DEBIT, -SUM(AT.AMOUNT) as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_TRANSACTION AT
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AT.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AT.AMOUNT < 0
AND AT.AR_TRANSACTION_TYPE_ID = 1 AND AT.AR_TRANSACTION_TYPE_ID = 2 AND AT.AR_TRANSACTION_TYPE_ID = 3
AND AT.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AT.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL



SELECT 'AR TRANSACTION' as SOURCE, AT.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AT.GL_DATE, AT.TRANSACTION_NUMBER as REFERENCE_NUMBER, AT.DESCRIPTION, 0 AS DEBIT, SUM(AL.AMOUNT) as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID=AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AL.AMOUNT >= 0
AND AT.AR_TRANSACTION_TYPE_ID = 1 AND AT.AR_TRANSACTION_TYPE_ID = 2 AND AT.AR_TRANSACTION_TYPE_ID = 3
AND AT.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AT.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'AR TRANSACTION' as SOURCE, AT.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AT.GL_DATE, AT.TRANSACTION_NUMBER as REFERENCE_NUMBER, AT.DESCRIPTION, -SUM(AL.AMOUNT) AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID=AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AL.AMOUNT < 0
AND AT.AR_TRANSACTION_TYPE_ID = 1 AND AT.AR_TRANSACTION_TYPE_ID = 2 AND AT.AR_TRANSACTION_TYPE_ID = 3
AND AT.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AT.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL






SELECT 'ACCOUNT COLLECTION' as SOURCE, CONCAT(AR.AR_RECEIPT_ID, RM.RECEIPT_METHOD_ID) as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AR.MATURITY_DATE as GL_DATE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER, '' as DESCRIPTION, SUM(AR.AMOUNT) AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND RM.DEBIT_ACCOUNT_COMBINATION_ID IS NOT NULL
AND AR.AMOUNT != 0
AND AR.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID


UNION ALL
SELECT 'ACCOUNT COLLECTION' as SOURCE, CONCAT(AR.AR_RECEIPT_ID, BA.CASH_IN_BANK_ACCT_ID) as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AR.MATURITY_DATE as GL_DATE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER, '' AS DESCRIPTION, SUM(AR.AMOUNT) AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.AMOUNT != 0
AND AR.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL




SELECT 'ACCOUNT COLLECTION' as SOURCE, AR.AR_RECEIPT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AR.MATURITY_DATE as GL_DATE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER, '' AS DESCRIPTION, 0 AS DEBIT, SUM(AR.AMOUNT) as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.AMOUNT != 0
AND AR.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL



SELECT 'ACCOUNT COLLECTION' as SOURCE, ART.AR_RECEIPT_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AR.MATURITY_DATE as GL_DATE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER, AT.TRANSACTION_NUMBER AS DESCRIPTION, SUM(ART.AMOUNT) AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT >= 0
AND AR.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND AT.AR_TRANSACTION_TYPE_ID != 15
GROUP BY AC.ACCOUNT_ID

UNION ALL

SELECT 'ACCOUNT COLLECTION' as SOURCE, ART.AR_RECEIPT_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AR.MATURITY_DATE as GL_DATE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER, AT.TRANSACTION_NUMBER AS DESCRIPTION, 0 AS DEBIT, -SUM(ART.AMOUNT) as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT < 0
AND AR.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND AT.AR_TRANSACTION_TYPE_ID != 15
GROUP BY AC.ACCOUNT_ID

UNION ALL



SELECT 'ACCOUNT COLLECTION' as SOURCE, ART.AR_RECEIPT_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AR.MATURITY_DATE as GL_DATE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER, AT.TRANSACTION_NUMBER AS DESCRIPTION, 0 AS DEBIT, SUM(ART.AMOUNT) as CREDIT, 
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT >= 0
AND AR.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND AT.AR_TRANSACTION_TYPE_ID != 15
GROUP BY AC.ACCOUNT_ID

UNION ALL

SELECT 'ACCOUNT COLLECTION' as SOURCE, ART.AR_RECEIPT_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AR.MATURITY_DATE as GL_DATE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER, AT.TRANSACTION_NUMBER AS DESCRIPTION, -SUM(ART.AMOUNT) AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT < 0
AND AR.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND AT.AR_TRANSACTION_TYPE_ID != 15
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT COLLECTION' as SOURCE, ACL.AC_AR_LINE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AR.MATURITY_DATE as GL_DATE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER, ALS.NAME AS DESCRIPTION, SUM(ACL.AMOUNT) AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AC_AR_LINE ACL
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ACL.AR_RECEIPT_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = ACL.AR_LINE_SETUP_ID 
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT COLLECTION' as SOURCE, ACL.AC_AR_LINE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AR.MATURITY_DATE as GL_DATE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER, ALS.NAME AS DESCRIPTION, 0 AS DEBIT, SUM(ACL.AMOUNT) as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AC_AR_LINE ACL
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ACL.AR_RECEIPT_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = ACL.AR_LINE_SETUP_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = AR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION,
SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES - WHOLESALE' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-W ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-IS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-POS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES - PROCESSING' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID = 6
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID


UNION ALL


SELECT 'CASH SALES - WHOLESALE' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-W ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-IS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-POS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES - PROCESSING' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID = 6
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID


UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 AS DEBIT, SUM(QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION,
0 AS DEBIT, SUM(QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES - WHOLESALE' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-W ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 AS DEBIT, SUM(QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-IS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 AS DEBIT, SUM(QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-POS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 AS DEBIT, SUM(QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES - PROCESSING' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 AS DEBIT, SUM(QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID = 6
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, -SUM(COALESCE(DISCOUNT, 0)) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, -SUM(COALESCE(DISCOUNT, 0)) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID


UNION ALL


SELECT 'CASH SALES - WHOLESALE' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-W ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, -SUM(COALESCE(DISCOUNT, 0)) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-IS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, -SUM(COALESCE(DISCOUNT, 0)) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-POS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, -SUM(COALESCE(DISCOUNT, 0)) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
SUM(CSI.AMOUNT) AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION,
SUM(CSI.AMOUNT) AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES - WHOLESALE' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-W ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
SUM(CSI.AMOUNT) AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-IS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
SUM(CSI.AMOUNT) AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-POS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
SUM(CSI.AMOUNT) AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES - PROCESSING' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
SUM(CSI.AMOUNT) AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID = 6
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
SUM(AL.AMOUNT) AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION,
SUM(AL.AMOUNT) AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES - WHOLESALE' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-W ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
sum(AL.AMOUNT) AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-IS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
SUM(AL.AMOUNT) AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-POS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
SUM(AL.AMOUNT) AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
SUM(AMOUNT) AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION,
SUM(AMOUNT) AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES - WHOLESALE' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-W ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
SUM(AMOUNT) AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-IS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
SUM(AMOUNT) AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-POS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
SUM(AMOUNT) AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES - PROCESSING' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
SUM(AMOUNT) AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID = 6
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 AS DEBIT, SUM(AL.AMOUNT) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION,
0 AS DEBIT, SUM(AL.AMOUNT) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL 


SELECT 'CASH SALES - WHOLESALE' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-W ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 AS DEBIT, SUM(AL.AMOUNT) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-IS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 AS DEBIT, SUM(AL.AMOUNT) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE,  CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE,  CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL 


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE,  CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 14
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-W ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-IS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 14
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-W ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-IS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, SUM(QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, SUM(QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, SUM(QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 14
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-W ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, SUM(QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-IS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, SUM(QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, -SUM(COALESCE(DISCOUNT, 0)) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, -SUM(COALESCE(DISCOUNT, 0)) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, -SUM(COALESCE(DISCOUNT, 0)) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 14
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-W ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, -SUM(COALESCE(DISCOUNT, 0)) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-IS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, -SUM(COALESCE(DISCOUNT, 0)) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
SUM(ASI.AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
SUM(ASI.AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
SUM(ASI.AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 14
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-W ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
SUM(ASI.AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-IS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
SUM(ASI.AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
SUM(AL.AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
SUM(AL.AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
SUM(AL.AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 14
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-W ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
SUM(AL.AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-IS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
SUM(AL.AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, SUM(AL.AMOUNT) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, SUM(AL.AMOUNT) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, SUM(AL.AMOUNT) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 14
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-W ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, SUM(AL.AMOUNT) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-IS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, SUM(AL.AMOUNT) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'RECEIVING REPORT' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, CONCAT('RR-', AI.SEQUENCE_NO) as REFERENCE_NUMBER, COALESCE(AI.INVOICE_NUMBER, RR.DELIVERY_RECEIPT_NO) as DESCRIPTION,
SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM R_RECEIVING_REPORT_ITEM RRI
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN ITEM I ON I.ITEM_ID = RRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = RR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND AI.INVOICE_TYPE_ID = 5
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'RECEIVING REPORT' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, CONCAT('RR-', AI.SEQUENCE_NO) as REFERENCE_NUMBER, COALESCE(AI.INVOICE_NUMBER, RR.DELIVERY_RECEIPT_NO) as DESCRIPTION,
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM R_RECEIVING_REPORT_ITEM RRI
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RR.AP_INVOICE_ID
INNER JOIN SUPPLIER_ACCOUNT SPA ON SPA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = SPA.DEFAULT_CREDIT_AC_ID AND AC.COMPANY_ID = RR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE UNIT_COST IS NOT NULL
AND AI.INVOICE_TYPE_ID = 5
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'RECEIVING REPORT' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE as GL_DATE, CONCAT('RR-', AI.SEQUENCE_NO) as REFERENCE_NUMBER, COALESCE(AI.INVOICE_NUMBER, RR.DELIVERY_RECEIPT_NO) AS DESCRIPTION, 
SUM(APL.AMOUNT) AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AP_INVOICE_LINE APL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = APL.AP_INVOICE_ID
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = APL.AP_INVOICE_ID
INNER JOIN AP_LINE_SETUP ALS ON ALS.AP_LINE_SETUP_ID = APL.AP_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AI.INVOICE_TYPE_ID = 5
AND ALS.ACTIVE = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'RECEIVING REPORT' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE as GL_DATE, CONCAT('RR-', AI.SEQUENCE_NO) as REFERENCE_NUMBER, COALESCE(AI.INVOICE_NUMBER, RR.DELIVERY_RECEIPT_NO) AS DESCRIPTION, 
0 AS DEBIT, SUM(APL.AMOUNT) AS CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AP_INVOICE_LINE APL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = APL.AP_INVOICE_ID
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = APL.AP_INVOICE_ID
INNER JOIN SUPPLIER_ACCOUNT SPA ON SPA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = SPA.DEFAULT_CREDIT_AC_ID AND AC.COMPANY_ID = RR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AI.INVOICE_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'RECEIVING REPORT - RM' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, CONCAT('RR-RM ', AI.SEQUENCE_NO) as REFERENCE_NUMBER, COALESCE(AI.INVOICE_NUMBER, RR.DELIVERY_RECEIPT_NO) as DESCRIPTION,
SUM(RRMI.AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM R_RECEIVING_REPORT_ITEM RRI
INNER JOIN R_RECEIVING_REPORT_RM_ITEM RRMI ON RRMI.R_RECEIVING_REPORT_ITEM_ID = RRI.R_RECEIVING_REPORT_ITEM_ID
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN ITEM I ON I.ITEM_ID = RRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = RR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND AI.INVOICE_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'RECEIVING REPORT - RM' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE as GL_DATE, CONCAT('RR-RM ', AI.SEQUENCE_NO) as REFERENCE_NUMBER, COALESCE(AI.INVOICE_NUMBER, RR.DELIVERY_RECEIPT_NO) AS DESCRIPTION, 
SUM(APL.AMOUNT) AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AP_INVOICE_LINE APL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = APL.AP_INVOICE_ID
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = APL.AP_INVOICE_ID
INNER JOIN AP_LINE_SETUP ALS ON ALS.AP_LINE_SETUP_ID = APL.AP_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AI.INVOICE_TYPE_ID = 8
AND ALS.ACTIVE = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'RECEIVING REPORT - RM' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, CONCAT('RR-RM ', AI.SEQUENCE_NO) as REFERENCE_NUMBER, COALESCE(AI.INVOICE_NUMBER, RR.DELIVERY_RECEIPT_NO) as DESCRIPTION,
0 as DEBIT, SUM(AI.AMOUNT) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AP_INVOICE AI
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = AI.AP_INVOICE_ID
INNER JOIN SUPPLIER_ACCOUNT SPA ON SPA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = SPA.DEFAULT_CREDIT_AC_ID AND AC.COMPANY_ID = RR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AI.INVOICE_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'RETURN TO SUPPLIER' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, CONCAT('RTS-', AI.SEQUENCE_NO) as REFERENCE_NUMBER,  CONCAT('RR-', RRAI.SEQUENCE_NO) as DESCRIPTION,
0 as DEBIT, SUM(COALESCE(RTSI.UNIT_COST, 0) * RTSI.QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM R_RETURN_TO_SUPPLIER_ITEM RTSI
INNER JOIN R_RETURN_TO_SUPPLIER RTS ON RTS.AP_INVOICE_ID = RTSI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RTS.AP_INVOICE_ID
INNER JOIN R_RECEIVING_REPORT_ITEM RRI ON RRI.R_RECEIVING_REPORT_ITEM_ID = RTSI.R_RECEIVING_REPORT_ITEM_ID
INNER JOIN AP_INVOICE RRAI ON RRAI.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN ITEM I ON I.ITEM_ID = RTSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = RTS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND RTSI.UNIT_COST IS NOT NULL
AND AI.INVOICE_TYPE_ID = 6
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'RETURN TO SUPPLIER' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, CONCAT('RTS-', AI.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('RR-', RRAI.SEQUENCE_NO) as DESCRIPTION,
SUM(COALESCE(RTSI.UNIT_COST, 0) * RTSI.QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM R_RETURN_TO_SUPPLIER_ITEM RTSI
INNER JOIN R_RETURN_TO_SUPPLIER RTS ON RTS.AP_INVOICE_ID = RTSI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RTS.AP_INVOICE_ID
INNER JOIN R_RECEIVING_REPORT_ITEM RRI ON RRI.R_RECEIVING_REPORT_ITEM_ID = RTSI.R_RECEIVING_REPORT_ITEM_ID
INNER JOIN AP_INVOICE RRAI ON RRAI.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN SUPPLIER_ACCOUNT SPA ON SPA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = SPA.DEFAULT_CREDIT_AC_ID AND AC.COMPANY_ID = RTS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE RTSI.UNIT_COST IS NOT NULL
AND AI.INVOICE_TYPE_ID = 6
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'RTS - EB' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, CONCAT('RTS-EB-', AI.SEQUENCE_NO) as REFERENCE_NUMBER, AI.INVOICE_NUMBER as DESCRIPTION,
0 as DEBIT, SUM(COALESCE(RTSI.UNIT_COST, 0) * RTSI.QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM R_RETURN_TO_SUPPLIER_ITEM RTSI
INNER JOIN R_RETURN_TO_SUPPLIER RTS ON RTS.AP_INVOICE_ID = RTSI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RTS.AP_INVOICE_ID
INNER JOIN ITEM I ON I.ITEM_ID = RTSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = RTS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND RTSI.UNIT_COST IS NOT NULL
AND AI.INVOICE_TYPE_ID = 7
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'RTS - EB' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, CONCAT('RTS-EB-', AI.SEQUENCE_NO) as REFERENCE_NUMBER, AI.INVOICE_NUMBER as DESCRIPTION,
SUM(COALESCE(RTSI.UNIT_COST, 0) * RTSI.QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM R_RETURN_TO_SUPPLIER_ITEM RTSI
INNER JOIN R_RETURN_TO_SUPPLIER RTS ON RTS.AP_INVOICE_ID = RTSI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RTS.AP_INVOICE_ID
INNER JOIN SUPPLIER_ACCOUNT SPA ON SPA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = SPA.DEFAULT_CREDIT_AC_ID AND AC.COMPANY_ID = RTS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE RTSI.UNIT_COST IS NOT NULL
AND AI.INVOICE_TYPE_ID = 7
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE,  CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CS_NUMBER) AS DESCRIPTION, 
SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE,  CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CS.CSR_NUMBER) AS DESCRIPTION, 
SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE,  CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CS_NUMBER) AS DESCRIPTION, 
SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE,  CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CS.CSR_NUMBER) AS DESCRIPTION, 
SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE,  CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-W ', CS_NUMBER) AS DESCRIPTION, 
SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE,  CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-W ', CS.CSR_NUMBER) AS DESCRIPTION, 
SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN - IS' as SOURCE,  CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-IS ', CS_NUMBER) AS DESCRIPTION, 
SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN - IS' as SOURCE,  CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-IS ', CS.CSR_NUMBER) AS DESCRIPTION, 
SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CS_NUMBER) AS DESCRIPTION, 
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CS.CSR_NUMBER) AS DESCRIPTION, 
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CS_NUMBER) AS DESCRIPTION, 
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CS.CSR_NUMBER) AS DESCRIPTION, 
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-W ', CS_NUMBER) AS DESCRIPTION, 
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-W ', CS.CSR_NUMBER) AS DESCRIPTION, 
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN - IS' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-IS ', CS_NUMBER) AS DESCRIPTION, 
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN - IS' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-IS ', CS.CSR_NUMBER) AS DESCRIPTION, 
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CS_NUMBER) AS DESCRIPTION, 
0 as DEBIT, SUM(QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CS.CSR_NUMBER) AS DESCRIPTION, 
0 as DEBIT, SUM(QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CS_NUMBER) AS DESCRIPTION, 
0 as DEBIT, SUM(QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CS.CSR_NUMBER) AS DESCRIPTION, 
0 as DEBIT, SUM(QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-W ', CS_NUMBER) AS DESCRIPTION, 
0 as DEBIT, SUM(QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-W ', CS.CSR_NUMBER) AS DESCRIPTION, 
0 as DEBIT, SUM(QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN - IS' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-IS ', CS_NUMBER) AS DESCRIPTION, 
0 as DEBIT, SUM(QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN - IS' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-IS ', CS.CSR_NUMBER) AS DESCRIPTION, 
0 as DEBIT, SUM(QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CS_NUMBER) AS DESCRIPTION, 
0 AS DEBIT, SUM(COALESCE(-DISCOUNT, 0)) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CS.CSR_NUMBER) AS DESCRIPTION, 
0 AS DEBIT, SUM(COALESCE(-DISCOUNT, 0)) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CS_NUMBER) AS DESCRIPTION, 
0 AS DEBIT, SUM(COALESCE(-DISCOUNT, 0)) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CS.CSR_NUMBER) AS DESCRIPTION, 
0 AS DEBIT, SUM(COALESCE(-DISCOUNT, 0)) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-W ', CS_NUMBER) AS DESCRIPTION, 
0 AS DEBIT, SUM(COALESCE(-DISCOUNT, 0)) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-W ', CS.CSR_NUMBER) AS DESCRIPTION, 
0 AS DEBIT, SUM(COALESCE(-DISCOUNT, 0)) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN - IS' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-IS ', CS_NUMBER) AS DESCRIPTION, 
0 AS DEBIT, SUM(COALESCE(-DISCOUNT, 0)) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN - IS' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-IS ', CS.CSR_NUMBER) AS DESCRIPTION, 
0 AS DEBIT, SUM(COALESCE(-DISCOUNT, 0)) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CS_NUMBER) AS DESCRIPTION, 
SUM(AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CS.CSR_NUMBER) AS DESCRIPTION, 
SUM(AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CS_NUMBER) AS DESCRIPTION, 
SUM(AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CS.CSR_NUMBER) AS DESCRIPTION, 
SUM(AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-W', CS_NUMBER) AS DESCRIPTION, 
SUM(AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-W', CS.CSR_NUMBER) AS DESCRIPTION, 
SUM(AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN - IS' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-IS', CS_NUMBER) AS DESCRIPTION, 
SUM(AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN - IS' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-IS', CS.CSR_NUMBER) AS DESCRIPTION, 
SUM(AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CS_NUMBER) AS DESCRIPTION, 
SUM(AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CS.CSR_NUMBER) AS DESCRIPTION, 
SUM(AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CS_NUMBER) AS DESCRIPTION, 
SUM(AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CS.CSR_NUMBER) AS DESCRIPTION, 
SUM(AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL 


SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-W', CS_NUMBER) AS DESCRIPTION, 
SUM(AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL 


SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-W', CS.CSR_NUMBER) AS DESCRIPTION, 
SUM(AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN - IS' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-IS', CS_NUMBER) AS DESCRIPTION, 
SUM(AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN - IS' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-IS', CS.CSR_NUMBER) AS DESCRIPTION, 
SUM(AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CS_NUMBER) AS DESCRIPTION, 
0 AS DEBIT, SUM(AL.AMOUNT) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_AR_LINE AL
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = AL.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CS.CSR_NUMBER) AS DESCRIPTION, 
0 AS DEBIT, SUM(AL.AMOUNT) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_AR_LINE AL
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = AL.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CS_NUMBER) AS DESCRIPTION, 
0 AS DEBIT, SUM(AL.AMOUNT) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_AR_LINE AL
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = AL.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CS.CSR_NUMBER) AS DESCRIPTION, 
0 AS DEBIT, SUM(AL.AMOUNT) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_AR_LINE AL
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = AL.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CS_NUMBER) AS DESCRIPTION, 
SUM(AL.AMOUNT) AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_AR_LINE AL
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = AL.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CS.CSR_NUMBER) AS DESCRIPTION, 
SUM(AL.AMOUNT) AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_AR_LINE AL
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = AL.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CS_NUMBER) AS DESCRIPTION, 
SUM(AL.AMOUNT) AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_AR_LINE AL
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = AL.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CS.CSR_NUMBER) AS DESCRIPTION, 
SUM(AL.AMOUNT) AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_AR_LINE AL
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = AL.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-', ASR.SEQUENCE_NO) as DESCRIPTION,
 SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 5
AND ASR.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES RETURN - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-W ', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-W ', ASR.SEQUENCE_NO) as DESCRIPTION,
SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 9
AND ASR.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES RETURN - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-IS ', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-IS ', ASR.SEQUENCE_NO) as DESCRIPTION,
SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 11
AND ASR.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-', ASR.SEQUENCE_NO) as DESCRIPTION,
 SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 13
AND ASR.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-', ASR.SEQUENCE_NO) as DESCRIPTION,
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 5 
AND ASR.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES RETURN - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-W ', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-W ', ASR.SEQUENCE_NO) as DESCRIPTION,
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 9 
AND ASR.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES RETURN - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-IS ', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-IS ', ASR.SEQUENCE_NO) as DESCRIPTION,
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 11
AND ASR.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-', ASR.SEQUENCE_NO) as DESCRIPTION,
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 13 
AND ASR.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-', ASR.SEQUENCE_NO) as DESCRIPTION,
0 as DEBIT, SUM(QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 5 
AND ASR.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES RETURN - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-W ', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-W ', ASR.SEQUENCE_NO) as DESCRIPTION,
0 as DEBIT, SUM(QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 9
AND ASR.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES RETURN - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-IS ', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-IS ', ASR.SEQUENCE_NO) as DESCRIPTION,
0 as DEBIT, SUM(QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 11
AND ASR.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-', ASR.SEQUENCE_NO) as DESCRIPTION,
0 as DEBIT, SUM(QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 13 
AND ASR.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-', ASR.SEQUENCE_NO) as DESCRIPTION,
0 as DEBIT, SUM(COALESCE(-DISCOUNT, 0)) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 5 
AND ASR.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES RETURN - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-W ', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-W ', ASR.SEQUENCE_NO) as DESCRIPTION,
0 as DEBIT, SUM(COALESCE(-DISCOUNT, 0)) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 9
AND ASR.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES RETURN - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-IS ', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-IS ', ASR.SEQUENCE_NO) as DESCRIPTION,
0 as DEBIT, SUM(COALESCE(-DISCOUNT, 0)) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 11
AND ASR.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-', ASR.SEQUENCE_NO) as DESCRIPTION,
0 as DEBIT, SUM(COALESCE(-DISCOUNT, 0)) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 13 
AND ASR.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-', ASR.SEQUENCE_NO) as DESCRIPTION,
SUM(ASI.AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 5 
AND ASR.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES RETURN - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-W ', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-W ', ASR.SEQUENCE_NO) as DESCRIPTION,
SUM(ASI.AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 9 
AND ASR.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL 


SELECT 'ACCOUNT SALES RETURN - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-IS ', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-IS ', ASR.SEQUENCE_NO) as DESCRIPTION,
SUM(ASI.AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 11
AND ASR.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-', ASR.SEQUENCE_NO) as DESCRIPTION,
SUM(ASI.AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 13 
AND ASR.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
SUM(AL.AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 5
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
SUM(AL.AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 13
AND FW.CURRENT_STATUS_ID != 12
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, SUM(AL.AMOUNT) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 5
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, SUM(AL.AMOUNT) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 13
AND FW.CURRENT_STATUS_ID != 12
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ASR - EB' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-EB-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 7
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ASR - EB' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-EB-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 7
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ASR - EB' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-EB-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
SUM(QUANTITY * SRP) as DEBIT,  0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 7
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ASR - EB' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-EB-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, SUM(QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 7
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-', CAP_NUMBER) as REFERENCE_NUMBER, CAP.SALE_INVOICE_NO AS DESCRIPTION, 
SUM(AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-', CAP_NUMBER) as REFERENCE_NUMBER, CAP.SALE_INVOICE_NO AS DESCRIPTION, 
SUM(CAL.AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_AR_LINE CAL
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAL.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL 


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-', CAP_NUMBER) as REFERENCE_NUMBER,  CAP.SALE_INVOICE_NO AS DESCRIPTION, 
SUM(AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL 


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-', CAP_NUMBER) as REFERENCE_NUMBER,  CAP.SALE_INVOICE_NO AS DESCRIPTION, 
SUM(CAL.AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_AR_LINE CAL
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAL.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL 


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-', CAP_NUMBER) as REFERENCE_NUMBER,  CAP.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, SUM(AMOUNT) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL 


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-', CAP_NUMBER) as REFERENCE_NUMBER,  CAP.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, SUM(CAL.AMOUNT) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_AR_LINE CAL
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAL.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CUSTOMER ADVANCE PAYMENT - IS' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-IS', CAP_NUMBER) as REFERENCE_NUMBER, CAP.SALE_INVOICE_NO AS DESCRIPTION, 
SUM(AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CUSTOMER ADVANCE PAYMENT - IS' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-IS', CAP_NUMBER) as REFERENCE_NUMBER, CAP.SALE_INVOICE_NO AS DESCRIPTION, 
SUM(CAL.AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_AR_LINE CAL
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAL.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CUSTOMER ADVANCE PAYMENT - IS' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-IS', CAP_NUMBER) as REFERENCE_NUMBER,  CAP.SALE_INVOICE_NO AS DESCRIPTION, 
SUM(AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CUSTOMER ADVANCE PAYMENT - IS' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-IS', CAP_NUMBER) as REFERENCE_NUMBER,  CAP.SALE_INVOICE_NO AS DESCRIPTION, 
SUM(CAL.AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_AR_LINE CAL
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAL.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CUSTOMER ADVANCE PAYMENT - IS' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-IS', CAP_NUMBER) as REFERENCE_NUMBER,  CAP.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, SUM(AMOUNT) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CUSTOMER ADVANCE PAYMENT - IS' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-IS', CAP_NUMBER) as REFERENCE_NUMBER,  CAP.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, SUM(CAL.AMOUNT) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_AR_LINE CAL
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAL.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'STOCK ADJUSTMENT IN' as SOURCE, SA.STOCK_ADJUSTMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, SA.SA_DATE as GL_DATE, CONCAT('SA-', SA.SA_NUMBER) as REFERENCE_NUMBER, SA.REMARKS AS DESCRIPTION,
SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ITEM I ON I.ITEM_ID = SAI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND QUANTITY > 0
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NULL
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND SA.SA_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'STOCK ADJUSTMENT IN - IS' as SOURCE, SA.STOCK_ADJUSTMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, SA.SA_DATE as GL_DATE, CONCAT('SA-IS ', SA.SA_NUMBER) as REFERENCE_NUMBER, SA.REMARKS AS DESCRIPTION,
SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ITEM I ON I.ITEM_ID = SAI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND QUANTITY > 0
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND SA.SA_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'STOCK ADJUSTMENT IN' as SOURCE, SA.STOCK_ADJUSTMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, SA.SA_DATE as GL_DATE, CONCAT('SA-', SA.SA_NUMBER) as REFERENCE_NUMBER, SA.REMARKS AS DESCRIPTION,
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = SAT.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE QUANTITY > 0
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NULL
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND SA.SA_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL 



SELECT 'STOCK ADJUSTMENT IN - IS' as SOURCE, SA.STOCK_ADJUSTMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, SA.SA_DATE as GL_DATE, CONCAT('SA-IS ', SA.SA_NUMBER) as REFERENCE_NUMBER, SA.REMARKS AS DESCRIPTION,
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = SAT.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE QUANTITY > 0
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND SA.SA_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL 


SELECT 'STOCK ADJUSTMENT OUT' as SOURCE, SA.STOCK_ADJUSTMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, SA.SA_DATE as GL_DATE, CONCAT('SA-', SA.SA_NUMBER) as REFERENCE_NUMBER, SA.REMARKS AS DESCRIPTION,
SUM(COALESCE(UNIT_COST, 0) * -QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = SAT.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE QUANTITY < 0
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NULL
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND SA.SA_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'STOCK ADJUSTMENT OUT - IS' as SOURCE, SA.STOCK_ADJUSTMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, SA.SA_DATE as GL_DATE, CONCAT('SA-IS ', SA.SA_NUMBER) as REFERENCE_NUMBER, SA.REMARKS AS DESCRIPTION,
SUM(COALESCE(UNIT_COST, 0) * -QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = SAT.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE QUANTITY < 0
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND SA.SA_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'STOCK ADJUSTMENT OUT' as SOURCE, SA.STOCK_ADJUSTMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, SA.SA_DATE as GL_DATE, CONCAT('SA-', SA.SA_NUMBER) as REFERENCE_NUMBER, SA.REMARKS AS DESCRIPTION,
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * -QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ITEM I ON I.ITEM_ID = SAI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND QUANTITY < 0 
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NULL
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND SA.SA_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'STOCK ADJUSTMENT OUT - IS' as SOURCE, SA.STOCK_ADJUSTMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, SA.SA_DATE as GL_DATE, CONCAT('SA-IS ', SA.SA_NUMBER) as REFERENCE_NUMBER, SA.REMARKS AS DESCRIPTION,
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * -QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ITEM I ON I.ITEM_ID = SAI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND QUANTITY < 0 
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND SA.SA_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
SUM(COALESCE(CAPDI.UNIT_COST, 0) * CAPDI.QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL

SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, SUM(COALESCE(CAPDI.UNIT_COST, 0) * CAPDI.QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4 
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, SUM(CAPDI.QUANTITY * CAPDI.SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, -SUM(COALESCE(DISCOUNT, 0)) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND (DISCOUNT IS NOT NULL || DISCOUNT != 0)
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
SUM(CAPDI.AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAPD.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IA.ACTIVE = 1
AND IA.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
SUM(CPAL.AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_AR_LINE CPAL
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CPAL.CAP_DELIVERY_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAPD.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IA.ACTIVE = 1
AND IA.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, SUM(CPAL.AMOUNT) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_AR_LINE CPAL
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CPAL.CAP_DELIVERY_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = CPAL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE CAPD.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4 
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - IS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-IS', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
SUM(COALESCE(CAPDI.UNIT_COST, 0) * CAPDI.QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3
GROUP BY AC.ACCOUNT_ID

UNION ALL

SELECT 'PAID IN ADVANCE DELIVERY - IS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-IS', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, SUM(COALESCE(CAPDI.UNIT_COST, 0) * CAPDI.QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4 
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - IS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-IS', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, SUM(CAPDI.QUANTITY * CAPDI.SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - IS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-IS', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, -SUM(COALESCE(DISCOUNT, 0)) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND (DISCOUNT IS NOT NULL || DISCOUNT != 0)
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - IS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-IS', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
SUM(CAPDI.AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAPD.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IA.ACTIVE = 1
AND IA.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - IS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-IS', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
SUM(CPAL.AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_AR_LINE CPAL
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CPAL.CAP_DELIVERY_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAPD.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IA.ACTIVE = 1
AND IA.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - IS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-IS', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, SUM(CPAL.AMOUNT) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_AR_LINE CPAL
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CPAL.CAP_DELIVERY_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = CPAL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE CAPD.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4 
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'PROCESSING REPORT' as SOURCE, CONCAT(RMI.PR_RAW_MATERIALS_ITEM_ID, RMI.ITEM_ID) as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, PR.DATE as GL_DATE, CONCAT('PR ', SEQUENCE_NO) as REFERENCE_NUMBER, PR.REF_NUMBER AS DESCRIPTION, 
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM PR_RAW_MATERIALS_ITEM RMI
INNER JOIN PROCESSING_REPORT PR ON PR.PROCESSING_REPORT_ID = RMI.PROCESSING_REPORT_ID
INNER JOIN ITEM I ON I.ITEM_ID = RMI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = PR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON PR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND PR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'PROCESSING REPORT' as SOURCE, CONCAT(OMI.PR_OTHER_MATERIALS_ITEM_ID, OMI.ITEM_ID) as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, PR.DATE as GL_DATE, CONCAT('PR ', SEQUENCE_NO) as REFERENCE_NUMBER, PR.REF_NUMBER AS DESCRIPTION, 
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM PR_OTHER_MATERIALS_ITEM OMI
INNER JOIN PROCESSING_REPORT PR ON PR.PROCESSING_REPORT_ID = OMI.PROCESSING_REPORT_ID
INNER JOIN ITEM I ON I.ITEM_ID = OMI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = PR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON PR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND PR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'PROCESSING REPORT' as SOURCE, CONCAT(MP.PR_MAIN_PRODUCT_ID, MP.ITEM_ID) as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, PR.DATE as GL_DATE, CONCAT('PR ', SEQUENCE_NO) as REFERENCE_NUMBER, PR.REF_NUMBER AS DESCRIPTION, 
SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM PR_MAIN_PRODUCT MP
INNER JOIN PROCESSING_REPORT PR ON PR.PROCESSING_REPORT_ID = MP.PROCESSING_REPORT_ID
INNER JOIN ITEM I ON I.ITEM_ID = MP.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = PR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON PR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND PR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'PROCESSING REPORT' as SOURCE, CONCAT(OC.PR_OTHER_CHARGE_ID, OC.AR_LINE_SETUP_ID) as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, PR.DATE as GL_DATE, CONCAT('PR ', SEQUENCE_NO) as REFERENCE_NUMBER, PR.REF_NUMBER AS DESCRIPTION,  0 AS DEBIT, SUM(OC.AMOUNT) as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM PR_OTHER_CHARGE OC
INNER JOIN PROCESSING_REPORT PR ON PR.PROCESSING_REPORT_ID = OC.PROCESSING_REPORT_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = OC.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON PR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND PR.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND PR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'WIP - SPECIAL ORDER' as SOURCE, CONCAT(WIPSOM.WIPSO_MATERIAL_ID, WIPSOM.ITEM_ID) as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.GL_DATE as GL_DATE, CONCAT('WIPSO ', SEQUENCE_NUMBER) as REFERENCE_NUMBER, ART.DESCRIPTION AS DESCRIPTION, 
0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM WIPSO_MATERIAL WIPSOM
INNER JOIN WIP_SPECIAL_ORDER WIPSO ON WIPSO.WIP_SPECIAL_ORDER_ID = WIPSOM.WIP_SPECIAL_ORDER_ID
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = WIPSO.AR_TRANSACTION_ID
INNER JOIN ITEM I ON I.ITEM_ID = WIPSOM.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = WIPSO.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON WIPSO.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'WIP - SPECIAL ORDER' as SOURCE, CONCAT(WIPSOFP.WIPSO_FINISHED_PRODUCT_ID, WIPSOFP.ITEM_ID) as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.GL_DATE as GL_DATE, CONCAT('WIPSO ', SEQUENCE_NUMBER) as REFERENCE_NUMBER, ART.DESCRIPTION AS DESCRIPTION, 
SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM WIPSO_FINISHED_PRODUCT WIPSOFP
INNER JOIN WIP_SPECIAL_ORDER WIPSO ON WIPSO.WIP_SPECIAL_ORDER_ID = WIPSOFP.WIP_SPECIAL_ORDER_ID
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = WIPSO.AR_TRANSACTION_ID
INNER JOIN ITEM I ON I.ITEM_ID = WIPSOFP.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = WIPSO.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON WIPSO.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
GROUP BY AC.ACCOUNT_ID

UNION ALL

SELECT 'WIP - SPECIAL ORDER' AS SOURCE, CONCAT(WIPOC.WIPSO_OTHER_CHARGE_ID, WIPOC.AR_LINE_SETUP_ID) AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER AS ACCT_NO, A.ACCOUNT_NAME, ART.GL_DATE AS GL_DATE, CONCAT('WIPSO ', SEQUENCE_NUMBER) AS REFERENCE_NUMBER, ART.DESCRIPTION AS DESCRIPTION, 0 AS DEBIT, SUM(WIPOC.AMOUNT) AS CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE AS IS_POSTED
FROM WIPSO_OTHER_CHARGE WIPOC
INNER JOIN WIP_SPECIAL_ORDER WIPSO ON WIPSO.WIP_SPECIAL_ORDER_ID = WIPOC.WIP_SPECIAL_ORDER_ID
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = WIPSO.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = WIPOC.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = WIPSO.FORM_WORKFLOW_ID
WHERE WIPSO.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - AS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-AS-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
SUM(COALESCE(CAPDI.UNIT_COST, 0) * CAPDI.QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 4
GROUP BY AC.ACCOUNT_ID

UNION ALL

SELECT 'PAID IN ADVANCE DELIVERY - AS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-AS-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, SUM(COALESCE(CAPDI.UNIT_COST, 0) * CAPDI.QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 4
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - AS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-AS-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, SUM(CAPDI.QUANTITY * CAPDI.SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 4
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - AS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-AS-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, -SUM(COALESCE(DISCOUNT, 0)) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND (DISCOUNT IS NOT NULL || DISCOUNT != 0)
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 4
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - AS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-AS-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
SUM(CAPDI.AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAPD.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IA.ACTIVE = 1
AND IA.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 4
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - AS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-AS-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
SUM(CPAL.AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_AR_LINE CPAL
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CPAL.CAP_DELIVERY_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAPD.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IA.ACTIVE = 1
AND IA.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 4
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - AS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-AS-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, SUM(CPAL.AMOUNT) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_AR_LINE CPAL
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CPAL.CAP_DELIVERY_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = CPAL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE CAPD.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 4
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - WIPSO' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-WIPSO-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
SUM(COALESCE(CAPDI.UNIT_COST, 0) * CAPDI.QUANTITY) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 5
GROUP BY AC.ACCOUNT_ID

UNION ALL

SELECT 'PAID IN ADVANCE DELIVERY - WIPSO' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-WIPSO-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, SUM(COALESCE(CAPDI.UNIT_COST, 0) * CAPDI.QUANTITY) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 5
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - WIPSO' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-WIPSO-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, SUM(CAPDI.QUANTITY * CAPDI.SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 5
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - WIPSO' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-WIPSO-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, -SUM(COALESCE(DISCOUNT, 0)) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND (DISCOUNT IS NOT NULL || DISCOUNT != 0)
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 5
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - WIPSO' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-WIPSO-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
SUM(CAPDI.AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAPD.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IA.ACTIVE = 1
AND IA.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 5
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - WIPSO' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-WIPSO-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
SUM(CPAL.AMOUNT) as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_AR_LINE CPAL
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CPAL.CAP_DELIVERY_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAPD.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IA.ACTIVE = 1
AND IA.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 5
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - WIPSO' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-WIPSO-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, SUM(CPAL.AMOUNT) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_AR_LINE CPAL
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CPAL.CAP_DELIVERY_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = CPAL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE CAPD.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 5
GROUP BY AC.ACCOUNT_ID
) as ACCOUNT_BALANCES GROUP BY ACCOUNT_ID ORDER BY ACCT_NO LIMIT IN_LIMIT_FROM, IN_LIMIT_TO;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GET_ACCOUNT_BALANCES` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_ACCOUNT_BALANCES`(IN IN_COMPANY_ID INT, IN IN_AS_OF_DATE DATE)
BEGIN 


SELECT A.ACCOUNT_ID, sum(DEBIT) as DEBIT, sum(CREDIT) as CREDIT FROM (
SELECT 'GL' as SOURCE, AC.ACCOUNT_ID, SUM(GLE.AMOUNT) as DEBIT, 0 as CREDIT
FROM GL_ENTRY GLE
INNER JOIN GENERAL_LEDGER GL ON GL.GENERAL_LEDGER_ID = GLE.GENERAL_LEDGER_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = GLE.ACCOUNT_COMBINATION_ID 
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = GL.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FWL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID !=4 
AND FWL.FORM_STATUS_ID=6
AND IS_DEBIT = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND GL.GL_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL 
SELECT 'GL' as SOURCE, AC.ACCOUNT_ID, 0 as DEBIT, SUM(GLE.AMOUNT) as CREDIT
FROM GL_ENTRY GLE
INNER JOIN GENERAL_LEDGER GL ON GL.GENERAL_LEDGER_ID = GLE.GENERAL_LEDGER_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = GLE.ACCOUNT_COMBINATION_ID
INNER JOIN FORM_WORKFLOW FW ON GL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 6
AND IS_DEBIT = 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND GL.GL_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT 'AP INVOICE' as SOURCE, AC.ACCOUNT_ID,  0 as DEBIT, SUM(AI.AMOUNT) as CREDIT
FROM AP_INVOICE AI 
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 3
AND AI.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
AND AI.INVOICE_TYPE_ID != 5 AND AI.INVOICE_TYPE_ID != 6
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT 'AP INVOICE' as SOURCE, AC.ACCOUNT_ID, SUM(-AI.AMOUNT) as DEBIT, 0 as CREDIT
FROM AP_INVOICE AI 
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 3
AND AI.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
AND AI.INVOICE_TYPE_ID != 5 AND AI.INVOICE_TYPE_ID != 6
GROUP BY AC.ACCOUNT_ID
UNION ALL



SELECT 'AP INVOICE' as SOURCE, AC.ACCOUNT_ID, SUM(AL.AMOUNT) AS DEBIT, 0 as CREDIT 
FROM AP_LINE AL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = AL.AP_INVOICE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = AL.ACCOUNT_COMBINATION_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 3
AND AL.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
AND AI.INVOICE_TYPE_ID != 5 AND AI.INVOICE_TYPE_ID != 6
GROUP BY AC.ACCOUNT_ID
UNION ALL 

SELECT 'AP INVOICE' as SOURCE, AC.ACCOUNT_ID, 0 AS DEBIT, SUM(-AL.AMOUNT) as CREDIT 
FROM AP_LINE AL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = AL.AP_INVOICE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = AL.ACCOUNT_COMBINATION_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 3
AND AL.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
AND AI.INVOICE_TYPE_ID != 5 AND AI.INVOICE_TYPE_ID != 6
GROUP BY AC.ACCOUNT_ID
UNION ALL


SELECT 'AP PAYMENT' as SOURCE, AC.ACCOUNT_ID, 0 AS DEBIT, SUM(AP.AMOUNT) as CREDIT 
FROM AP_PAYMENT AP
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID=AP.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AP.AMOUNT != 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AP.CHECK_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT 'AP PAYMENT' as SOURCE, AC.ACCOUNT_ID, 0 AS DEBIT, SUM(-AI.PAID_AMOUNT) as CREDIT
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AP.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AI.PAID_AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AP.CHECK_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL


SELECT 'AP PAYMENT' as SOURCE, AC.ACCOUNT_ID, SUM(AI.PAID_AMOUNT) AS DEBIT, 0 as CREDIT
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AP.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AI.PAID_AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AP.CHECK_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL


SELECT 'AR MISCELLANEOUS' as SOURCE, AC.ACCOUNT_ID, SUM(AM.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_MISCELLANEOUS AM
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AM.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND RM.DEBIT_ACCOUNT_COMBINATION_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AM.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL 
SELECT 'AR MISCELLANEOUS' as SOURCE, AC.ACCOUNT_ID, SUM(AM.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_MISCELLANEOUS AM
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AM.RECEIPT_METHOD_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND RM.BANK_ACCOUNT_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AM.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT 'AR MISCELLANEOUS' as SOURCE, AC.ACCOUNT_ID, SUM(-AML.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_MISCELLANEOUS_LINE AML
INNER JOIN AR_MISCELLANEOUS AM ON AM.AR_MISCELLANEOUS_ID = AML.AR_MISCELLANEOUS_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AML.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AML.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AM.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT 'AR MISCELLANEOUS' as SOURCE, AC.ACCOUNT_ID, 0 AS DEBIT, SUM(AML.AMOUNT) as CREDIT
FROM AR_MISCELLANEOUS_LINE AML
INNER JOIN AR_MISCELLANEOUS AM ON AM.AR_MISCELLANEOUS_ID = AML.AR_MISCELLANEOUS_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AML.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AML.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AM.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL


SELECT 'AR TRANSACTION' as SOURCE, AC.ACCOUNT_ID, SUM(AT.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_TRANSACTION AT
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AT.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID = 17
AND AT.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AT.GL_DATE <= IN_AS_OF_DATE
AND AT.AR_TRANSACTION_TYPE_ID != 4 AND AT.AR_TRANSACTION_TYPE_ID != 5
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT 'AR TRANSACTION' as SOURCE, AC.ACCOUNT_ID, 0 AS DEBIT, SUM(-AT.AMOUNT) as CREDIT
FROM AR_TRANSACTION AT
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AT.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID = 17
AND AT.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AT.GL_DATE <= IN_AS_OF_DATE
AND AT.AR_TRANSACTION_TYPE_ID != 4 AND AT.AR_TRANSACTION_TYPE_ID != 5
GROUP BY AC.ACCOUNT_ID
UNION ALL


SELECT 'AR TRANSACTION' as SOURCE, AC.ACCOUNT_ID, 0 AS DEBIT, SUM(AL.AMOUNT) as CREDIT
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID=AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID = 17
AND AL.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AT.GL_DATE <= IN_AS_OF_DATE
AND AT.AR_TRANSACTION_TYPE_ID != 4 AND AT.AR_TRANSACTION_TYPE_ID != 5
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT 'AR TRANSACTION' as SOURCE, AC.ACCOUNT_ID, SUM(-AL.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID=AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID = 17
AND AL.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AT.GL_DATE <= IN_AS_OF_DATE
AND AT.AR_TRANSACTION_TYPE_ID != 4 AND AT.AR_TRANSACTION_TYPE_ID != 5
GROUP BY AC.ACCOUNT_ID
UNION ALL






SELECT 'AR RECEIPT' as SOURCE, AC.ACCOUNT_ID, SUM(AR.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.AMOUNT != 0
AND RM.DEBIT_ACCOUNT_COMBINATION_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL
SELECT 'AR RECEIPT' as SOURCE, AC.ACCOUNT_ID, SUM(AR.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.AMOUNT != 0
AND RM.BANK_ACCOUNT_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL




SELECT 'AR RECEIPT' as SOURCE, AC.ACCOUNT_ID, 0 AS DEBIT, SUM(AR.AMOUNT) as CREDIT
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.AMOUNT != 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL




SELECT 'AR RECEIPT' as SOURCE, AC.ACCOUNT_ID, SUM(ART.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT 'AR RECEIPT' as SOURCE, AC.ACCOUNT_ID, 0 AS DEBIT, SUM(-ART.AMOUNT) as CREDIT
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL




SELECT 'AR RECEIPT' as SOURCE, AC.ACCOUNT_ID, 0 AS DEBIT, SUM(ART.AMOUNT) as CREDIT
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT 'AR RECEIPT' as SOURCE, AC.ACCOUNT_ID, SUM(-ART.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES' as SOURCE, AC.ACCOUNT_ID, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND CS.COMPANY_ID = IN_COMPANY_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES' as SOURCE, AC.ACCOUNT_ID, 0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND CS.COMPANY_ID = IN_COMPANY_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES' as SOURCE, AC.ACCOUNT_ID, 0 AS DEBIT, SUM(QUANTITY * SRP) as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND CS.COMPANY_ID = IN_COMPANY_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES' as SOURCE, AC.ACCOUNT_ID, 0 AS DEBIT, SUM(-COALESCE(DISCOUNT, 0)) as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND CS.COMPANY_ID = IN_COMPANY_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES' as SOURCE, AC.ACCOUNT_ID, SUM(CSI.AMOUNT) + COALESCE ((SELECT SUM(AMOUNT) FROM CASH_SALE_AR_LINE AL
WHERE AL.CASH_SALE_ID = CSI.CASH_SALE_ID
GROUP BY CS.CASH_SALE_ID), 0) AS DEBIT, 0 as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CS.COMPANY_ID = IN_COMPANY_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES' as SOURCE, AC.ACCOUNT_ID, SUM(AMOUNT) AS DEBIT, 0 as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CS.COMPANY_ID = IN_COMPANY_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES' as SOURCE, AC.ACCOUNT_ID, 0 AS DEBIT, SUM(AL.AMOUNT) as CREDIT
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CS.COMPANY_ID = IN_COMPANY_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL 


SELECT 'ACCOUNT SALES' as SOURCE, AC.ACCOUNT_ID, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 4
GROUP BY AC.ACCOUNT_ID

UNION ALL 


SELECT 'ACCOUNT SALES' as SOURCE, AC.ACCOUNT_ID, 0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 4
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, AC.ACCOUNT_ID, 0 as DEBIT, SUM(QUANTITY * SRP) as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 4
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, AC.ACCOUNT_ID, 0 as DEBIT, SUM(-COALESCE(DISCOUNT, 0)) as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 4
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, AC.ACCOUNT_ID, SUM(ASI.AMOUNT) + COALESCE((SELECT SUM(AMOUNT) FROM AR_LINE AL
WHERE AL.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
GROUP BY ART.AR_TRANSACTION_ID), 0) AS DEBIT, 0 as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 4
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, AC.ACCOUNT_ID, 0 as DEBIT, SUM(AL.AMOUNT) as CREDIT
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 4
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'RECEIVING REPORT' as SOURCE, AC.ACCOUNT_ID, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT
FROM R_RECEIVING_REPORT_ITEM RRI
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN ITEM I ON I.ITEM_ID = RRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND RR.COMPANY_ID = IN_COMPANY_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
AND AI.INVOICE_TYPE_ID = 5
GROUP BY AC.ACCOUNT_ID

UNION ALL 


SELECT 'RECEIVING REPORT' as SOURCE, AC.ACCOUNT_ID, 0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT
FROM R_RECEIVING_REPORT_ITEM RRI
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RR.AP_INVOICE_ID
INNER JOIN SUPPLIER_ACCOUNT SPA ON SPA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SPA.DEFAULT_CREDIT_AC_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND RR.COMPANY_ID = IN_COMPANY_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
AND AI.INVOICE_TYPE_ID = 5
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'RETURN TO SUPPLIER' as SOURCE, AC.ACCOUNT_ID, 0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT
FROM R_RETURN_TO_SUPPLIER_ITEM RTSI
INNER JOIN R_RETURN_TO_SUPPLIER RTS ON RTS.AP_INVOICE_ID = RTSI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RTS.AP_INVOICE_ID
INNER JOIN ITEM I ON I.ITEM_ID = RTSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND RTS.COMPANY_ID = IN_COMPANY_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
AND AI.INVOICE_TYPE_ID = 6
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'RETURN TO SUPPLIER' as SOURCE, AC.ACCOUNT_ID, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT
FROM R_RETURN_TO_SUPPLIER_ITEM RTSI
INNER JOIN R_RETURN_TO_SUPPLIER RTS ON RTS.AP_INVOICE_ID = RTSI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RTS.AP_INVOICE_ID
INNER JOIN SUPPLIER_ACCOUNT SPA ON SPA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SPA.DEFAULT_CREDIT_AC_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND RTS.COMPANY_ID = IN_COMPANY_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
AND AI.INVOICE_TYPE_ID = 6
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, AC.ACCOUNT_ID, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND CSR.DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, AC.ACCOUNT_ID, 0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND QUANTITY < 0
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND CSR.DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, AC.ACCOUNT_ID, 0 as DEBIT, SUM((COALESCE(UNIT_COST, 0) * QUANTITY)) as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND QUANTITY > 0
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND CSR.DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, AC.ACCOUNT_ID, 0 as DEBIT, SUM((QUANTITY * SRP)) as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND CSR.DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, AC.ACCOUNT_ID, 0 AS DEBIT, SUM(COALESCE(DISCOUNT, 0)) as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND CSR.DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, AC.ACCOUNT_ID,  SUM(AMOUNT) as DEBIT, 0 as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND CSR.DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, AC.ACCOUNT_ID, SUM(AMOUNT) as DEBIT, 0 as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND CSR.DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, AC.ACCOUNT_ID, SUM(AL.AMOUNT) AS DEBIT, 0 as CREDIT
FROM CASH_SALE_RETURN_AR_LINE AL
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = AL.CASH_SALE_RETURN_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND CSR.RECEIPT_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, AC.ACCOUNT_ID, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 5
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, AC.ACCOUNT_ID, 0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ASI.QUANTITY < 0
AND ART.AR_TRANSACTION_TYPE_ID = 5
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, AC.ACCOUNT_ID, 0 as DEBIT, SUM((COALESCE(UNIT_COST, 0) * QUANTITY)) as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 5
AND ASI.QUANTITY > 0
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, AC.ACCOUNT_ID, 0 as DEBIT, SUM((QUANTITY * SRP)) as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 5
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, AC.ACCOUNT_ID,  0 as DEBIT, SUM(COALESCE(DISCOUNT, 0)) as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 5
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, AC.ACCOUNT_ID, SUM(ASI.AMOUNT) as DEBIT, 0 as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 5
GROUP BY AC.ACCOUNT_ID

UNION ALL 


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, AC.ACCOUNT_ID, SUM(AMOUNT) as DEBIT, 0 as CREDIT
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CAP.COMPANY_ID = IN_COMPANY_ID
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL 


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, AC.ACCOUNT_ID, SUM(AMOUNT) as DEBIT, 0 as CREDIT
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CAP.COMPANY_ID = IN_COMPANY_ID
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL 


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, AC.ACCOUNT_ID, 0 as DEBIT, SUM(AMOUNT) as CREDIT
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CAP.COMPANY_ID = IN_COMPANY_ID
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'STOCK ADJUSTMENT IN' as SOURCE, AC.ACCOUNT_ID, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as DEBIT, 0 as CREDIT
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ITEM I ON I.ITEM_ID = SAI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND SA.COMPANY_ID = IN_COMPANY_ID
AND SA.SA_DATE <= IN_AS_OF_DATE
AND QUANTITY > 0
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'STOCK ADJUSTMENT IN' as SOURCE, AC.ACCOUNT_ID, 0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SAT.ACCOUNT_COMBINATION_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND SA.COMPANY_ID = IN_COMPANY_ID
AND SA.SA_DATE <= IN_AS_OF_DATE
AND QUANTITY > 0
GROUP BY AC.ACCOUNT_ID

UNION ALL 


SELECT 'STOCK ADJUSTMENT OUT' as SOURCE, AC.ACCOUNT_ID, SUM(COALESCE(UNIT_COST, 0) * -QUANTITY) as DEBIT, 0 as CREDIT
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SAT.ACCOUNT_COMBINATION_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND SA.COMPANY_ID = IN_COMPANY_ID
AND SA.SA_DATE <= IN_AS_OF_DATE
AND QUANTITY < 0
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT 'STOCK ADJUSTMENT OUT' as SOURCE, AC.ACCOUNT_ID, 0 as DEBIT, SUM(COALESCE(UNIT_COST, 0) * -QUANTITY) as CREDIT
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ITEM I ON I.ITEM_ID = SAI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND SA.COMPANY_ID = IN_COMPANY_ID
AND SA.SA_DATE <= IN_AS_OF_DATE
AND QUANTITY < 0
GROUP BY AC.ACCOUNT_ID

) as ACCOUNT_BALANCES 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = ACCOUNT_BALANCES.ACCOUNT_ID
GROUP BY ACCOUNT_BALANCES.ACCOUNT_ID 
ORDER BY A.NUMBER;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GET_ALL_ACCOUNTS` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_ALL_ACCOUNTS`(IN IN_COMPANY_ID INT, IN IN_ACCOUNT_ID INT,
	IN IN_FROM_DIV VARCHAR(5), IN IN_TO_DIV VARCHAR(5), IN IN_FROM_GL_DATE DATE, IN IN_TO_GL_DATE DATE)
BEGIN 
SELECT TBL.SOURCE, TBL.DIVISION_ID,
	TBL.GL_DATE, TBL.REFERENCE_NUMBER, TBL.DESCRIPTION as DESCRIPTION, TBL.DEBIT, TBL.CREDIT FROM (
SELECT 'GENERAL LEDGER' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, GL.GL_DATE,
	CONCAT('JV', GL.SEQUENCE_NO) as REFERENCE_NUMBER, GLE.DESCRIPTION, GLE.AMOUNT as DEBIT, 0 as CREDIT
FROM GL_ENTRY GLE 
INNER JOIN GENERAL_LEDGER GL ON GL.GENERAL_LEDGER_ID = GLE.GENERAL_LEDGER_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = GLE.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON GL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 6
AND IS_DEBIT = 1
AND AC.COMPANY_ID=IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 

UNION ALL 
SELECT 'GENERAL LEDGER' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, GL.GL_DATE, 
	CONCAT('JV', GL.SEQUENCE_NO) as REFERENCE_NUMBER, GLE.DESCRIPTION, 0 as DEBIT, GLE.AMOUNT as CREDIT
FROM GL_ENTRY GLE
INNER JOIN GENERAL_LEDGER GL ON GL.GENERAL_LEDGER_ID = GLE.GENERAL_LEDGER_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = GLE.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON GL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 6
AND IS_DEBIT = 0
AND AC.COMPANY_ID=IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
UNION ALL



SELECT 'AP INVOICE' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, AI.GL_DATE,
	AI.INVOICE_NUMBER as REFERENCE_NUMBER, AI.DESCRIPTION, 0 as DEBIT, AI.AMOUNT as CREDIT
FROM AP_INVOICE AI 
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 3 
AND AI.AMOUNT >= 0
AND AC.COMPANY_ID=IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND AI.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND AI.INVOICE_TYPE_ID != 5 AND AI.INVOICE_TYPE_ID != 6
UNION ALL

SELECT 'AP INVOICE' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, AI.GL_DATE, 
	AI.INVOICE_NUMBER as REFERENCE_NUMBER, AI.DESCRIPTION, -AI.AMOUNT as DEBIT, 0 as CREDIT
FROM AP_INVOICE AI 
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 3
AND AI.AMOUNT < 0
AND AC.COMPANY_ID=IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND AI.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND AI.INVOICE_TYPE_ID != 5 AND AI.INVOICE_TYPE_ID != 6
UNION ALL



SELECT 'AP INVOICE' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, AI.GL_DATE,
	AI.INVOICE_NUMBER as REFERENCE_NUMBER, AL.DESCRIPTION, AL.AMOUNT AS DEBIT, 0 as CREDIT 
FROM AP_LINE AL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = AL.AP_INVOICE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = AL.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 3 
AND AL.AMOUNT >= 0
AND AC.COMPANY_ID=IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND AI.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND AI.INVOICE_TYPE_ID != 5 AND AI.INVOICE_TYPE_ID != 6
UNION ALL 

SELECT 'AP INVOICE' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, AI.GL_DATE, 
	AI.INVOICE_NUMBER as REFERENCE_NUMBER, AL.DESCRIPTION, 0 AS DEBIT, -AL.AMOUNT as CREDIT 
FROM AP_LINE AL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = AL.AP_INVOICE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = AL.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 3
AND AL.AMOUNT < 0
AND AC.COMPANY_ID=IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND AI.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
AND AI.INVOICE_TYPE_ID != 5 AND AI.INVOICE_TYPE_ID != 6
UNION ALL


SELECT 'AP PAYMENT' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, AP.CHECK_DATE as GL_DATE, 
	AP.CHECK_NUMBER as REFERENCE_NUMBER, API.INVOICE_NUMBER as DESCRIPTION, 0 AS DEBIT, AI.PAID_AMOUNT as CREDIT
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID=AP.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN AP_INVOICE API ON API.AP_INVOICE_ID = AI.AP_INVOICE_ID 
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AP.AMOUNT != 0
AND AI.PAID_AMOUNT > 0
AND AC.COMPANY_ID=IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND AP.CHECK_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
UNION ALL

SELECT 'AP PAYMENT' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, AP.CHECK_DATE as GL_DATE, 
	AP.CHECK_NUMBER as REFERENCE_NUMBER, API.INVOICE_NUMBER as DESCRIPTION, -AI.PAID_AMOUNT AS DEBIT, 0 as CREDIT
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID=AP.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN AP_INVOICE API ON API.AP_INVOICE_ID = AI.AP_INVOICE_ID 
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AP.AMOUNT != 0
AND AI.PAID_AMOUNT < 0
AND AC.COMPANY_ID=IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND AP.CHECK_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
UNION ALL


SELECT 'AP PAYMENT' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, AP.CHECK_DATE as GL_DATE, 
	AP.CHECK_NUMBER as REFERENCE_NUMBER, API.INVOICE_NUMBER as DESCRIPTION, 0 AS DEBIT, -AI.PAID_AMOUNT as CREDIT
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AP.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN AP_INVOICE API ON API.AP_INVOICE_ID = AI.AP_INVOICE_ID 
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AI.PAID_AMOUNT < 0
AND AC.COMPANY_ID=IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND AP.CHECK_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
UNION ALL


SELECT 'AP PAYMENT' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, AP.CHECK_DATE as GL_DATE, 
	AP.CHECK_NUMBER as REFERENCE_NUMBER, API.INVOICE_NUMBER as DESCRIPTION, AI.PAID_AMOUNT AS DEBIT, 0 as CREDIT
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AP.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN AP_INVOICE API ON API.AP_INVOICE_ID = AI.AP_INVOICE_ID 
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AI.PAID_AMOUNT >= 0
AND AC.COMPANY_ID=IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND AP.CHECK_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
UNION ALL


SELECT 'AR MISCELLANEOUS' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, AM.MATURITY_DATE as GL_DATE, 
	AM.RECEIPT_NUMBER AS REFERENCE_NUMBER, AM.DESCRIPTION, AM.AMOUNT AS DEBIT, 0 as CREDIT
FROM AR_MISCELLANEOUS AM
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AM.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND RM.DEBIT_ACCOUNT_COMBINATION_ID IS NOT NULL
AND AC.COMPANY_ID=IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND AM.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 

UNION ALL 
SELECT 'AR MISCELLANEOUS' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, AM.MATURITY_DATE as GL_DATE,
	AM.RECEIPT_NUMBER AS REFERENCE_NUMBER, AM.DESCRIPTION, AM.AMOUNT AS DEBIT, 0 as CREDIT
FROM AR_MISCELLANEOUS AM
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AM.RECEIPT_METHOD_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND RM.BANK_ACCOUNT_ID IS NOT NULL
AND AC.COMPANY_ID=IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND AM.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
UNION ALL

SELECT 'AR MISCELLANEOUS' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, AM.MATURITY_DATE as GL_DATE,
	AM.RECEIPT_NUMBER AS REFERENCE_NUMBER, AM.DESCRIPTION, -AML.AMOUNT AS DEBIT, 0 as CREDIT
FROM AR_MISCELLANEOUS_LINE AML
INNER JOIN AR_MISCELLANEOUS AM ON AM.AR_MISCELLANEOUS_ID = AML.AR_MISCELLANEOUS_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AML.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AML.AMOUNT < 0
AND AC.COMPANY_ID=IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND AM.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
UNION ALL

SELECT 'AR MISCELLANEOUS' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, AM.MATURITY_DATE as GL_DATE, 
	AM.RECEIPT_NUMBER AS REFERENCE_NUMBER, AM.DESCRIPTION, 0 AS DEBIT, AML.AMOUNT as CREDIT
FROM AR_MISCELLANEOUS_LINE AML
INNER JOIN AR_MISCELLANEOUS AM ON AM.AR_MISCELLANEOUS_ID = AML.AR_MISCELLANEOUS_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AML.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AML.AMOUNT >= 0
AND AC.COMPANY_ID=IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND AM.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
UNION ALL


SELECT 'AR TRANSACTION' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, AT.GL_DATE, 
	AT.TRANSACTION_NUMBER as REFERENCE_NUMBER, AT.DESCRIPTION, AT.AMOUNT AS DEBIT, 0 as CREDIT
FROM AR_TRANSACTION AT
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AT.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID = 17
AND AT.AMOUNT >= 0
AND AC.COMPANY_ID=IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND AT.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND AT.AR_TRANSACTION_TYPE_ID != 4 AND AT.AR_TRANSACTION_TYPE_ID != 5
UNION ALL

SELECT 'AR TRANSACTION' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, AT.GL_DATE, 
	AT.TRANSACTION_NUMBER as REFERENCE_NUMBER, AT.DESCRIPTION, 0 AS DEBIT, -AT.AMOUNT as CREDIT
FROM AR_TRANSACTION AT
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AT.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID = 17
AND AT.AMOUNT < 0
AND AC.COMPANY_ID=IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND AT.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND AT.AR_TRANSACTION_TYPE_ID != 4 AND AT.AR_TRANSACTION_TYPE_ID != 5
UNION ALL


SELECT 'AR TRANSACTION' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, AT.GL_DATE, 
	AT.TRANSACTION_NUMBER as REFERENCE_NUMBER, AT.DESCRIPTION, 0 AS DEBIT, AL.AMOUNT as CREDIT
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID=AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID = 17
AND AL.AMOUNT >= 0
AND AC.COMPANY_ID=IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND AT.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND AT.AR_TRANSACTION_TYPE_ID != 4 AND AT.AR_TRANSACTION_TYPE_ID != 5
UNION ALL

SELECT 'AR TRANSACTION' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, AT.GL_DATE, 
	AT.TRANSACTION_NUMBER as REFERENCE_NUMBER, AT.DESCRIPTION, -AL.AMOUNT AS DEBIT, 0 as CREDIT
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID=AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID = 17
AND AL.AMOUNT < 0
AND AC.COMPANY_ID=IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND AT.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND AT.AR_TRANSACTION_TYPE_ID != 4 AND AT.AR_TRANSACTION_TYPE_ID != 5
UNION ALL






SELECT 'AR RECEIPT' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, AR.MATURITY_DATE as GL_DATE,
	AR.RECEIPT_NUMBER as REFERENCE_NUMBER, '' as DESCRIPTION, AR.AMOUNT AS DEBIT, 0 as CREDIT
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND RM.DEBIT_ACCOUNT_COMBINATION_ID IS NOT NULL
AND AR.AMOUNT != 0
AND AC.COMPANY_ID=IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND AR.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL
SELECT 'AR RECEIPT' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, AR.MATURITY_DATE as GL_DATE, 
	AR.RECEIPT_NUMBER as REFERENCE_NUMBER, '' AS DESCRIPTION, AR.AMOUNT AS DEBIT, 0 as CREDIT
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.AMOUNT != 0
AND RM.BANK_ACCOUNT_ID IS NOT NULL
AND AC.COMPANY_ID=IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND AR.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
UNION ALL




SELECT 'AR RECEIPT' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, AR.MATURITY_DATE as GL_DATE, 
	AR.RECEIPT_NUMBER as REFERENCE_NUMBER, '' AS DESCRIPTION, 0 AS DEBIT, AR.AMOUNT as CREDIT
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.AMOUNT != 0
AND AC.COMPANY_ID=IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND AR.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
UNION ALL




SELECT 'AR RECEIPT' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, AR.MATURITY_DATE as GL_DATE,
	AR.RECEIPT_NUMBER as REFERENCE_NUMBER, AT.TRANSACTION_NUMBER AS DESCRIPTION, ART.AMOUNT AS DEBIT, 0 as CREDIT
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT >= 0
AND AC.COMPANY_ID=IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND AR.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
UNION ALL

SELECT 'AR RECEIPT' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, AR.MATURITY_DATE as GL_DATE,
	AR.RECEIPT_NUMBER as REFERENCE_NUMBER, AT.TRANSACTION_NUMBER AS DESCRIPTION, 0 AS DEBIT, -ART.AMOUNT as CREDIT
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT < 0
AND AC.COMPANY_ID=IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND AR.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
UNION ALL




SELECT 'AR RECEIPT' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, AR.MATURITY_DATE as GL_DATE,
	AR.RECEIPT_NUMBER as REFERENCE_NUMBER, AT.TRANSACTION_NUMBER AS DESCRIPTION, 0 AS DEBIT, ART.AMOUNT as CREDIT
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT >= 0
AND AC.COMPANY_ID=IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND AR.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
UNION ALL

SELECT 'AR RECEIPT' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, AR.MATURITY_DATE as GL_DATE, 
	AR.RECEIPT_NUMBER as REFERENCE_NUMBER,AT.TRANSACTION_NUMBER AS DESCRIPTION, -ART.AMOUNT AS DEBIT, 0 as CREDIT
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT < 0
AND AC.COMPANY_ID=IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND AR.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL


SELECT 'CASH SALES' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, CS.RECEIPT_DATE as GL_DATE, 
	CONCAT('CS-', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
	COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND CS.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND CS.RECEIPT_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL


SELECT 'CASH SALES' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, CS.RECEIPT_DATE as GL_DATE,
	CONCAT('CS-', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
 	0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND CS.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND CS.RECEIPT_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL


SELECT 'CASH SALES' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, CS.RECEIPT_DATE as GL_DATE,
	CONCAT('CS-', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
	0 AS DEBIT, QUANTITY * SRP as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND CS.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND CS.RECEIPT_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL


SELECT 'CASH SALES' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, CS.RECEIPT_DATE as GL_DATE,
	CONCAT('CS-', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
	0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND CS.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND CS.RECEIPT_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL


SELECT 'CASH SALES' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, CS.RECEIPT_DATE as GL_DATE,
	CONCAT('CS-', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
	CSI.AMOUNT AS DEBIT, 0 as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CS.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND CS.RECEIPT_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL


SELECT 'CASH SALES' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, CS.RECEIPT_DATE as GL_DATE,
	CONCAT('CS-', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
	AL.AMOUNT AS DEBIT, 0 as CREDIT
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CS.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND CS.RECEIPT_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL


SELECT 'CASH SALES' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, CS.RECEIPT_DATE as GL_DATE,
	CONCAT('CS-', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
	AMOUNT AS DEBIT, 0 as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CS.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND CS.RECEIPT_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL


SELECT 'CASH SALES' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, CS.RECEIPT_DATE as GL_DATE,
	CONCAT('CS-', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
	0 AS DEBIT, AL.AMOUNT as CREDIT
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CS.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND CS.RECEIPT_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL 


SELECT 'ACCOUNT SALES' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, ART.TRANSACTION_DATE AS GL_DATE, 
	CONCAT('AS-', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
	COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 4

UNION ALL 


SELECT 'ACCOUNT SALES' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, ART.TRANSACTION_DATE AS GL_DATE, 
	CONCAT('AS-', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
	0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 4

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, ART.TRANSACTION_DATE AS GL_DATE, 
	CONCAT('AS-', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
	0 as DEBIT, QUANTITY * SRP as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 4

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, ART.TRANSACTION_DATE AS GL_DATE, 
	CONCAT('AS-', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
	0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 4

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, ART.TRANSACTION_DATE AS GL_DATE, 
	CONCAT('AS-', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
	ASI.AMOUNT as DEBIT, 0 as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ART.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 4

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, ART.TRANSACTION_DATE AS GL_DATE, 
	CONCAT('AS-', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
	AL.AMOUNT as DEBIT, 0 as CREDIT
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ART.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 4

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, ART.TRANSACTION_DATE AS GL_DATE, 
	CONCAT('AS-', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
	0 as DEBIT, AL.AMOUNT as CREDIT
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ART.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 4

UNION ALL


SELECT 'RECEIVING REPORT' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, AI.GL_DATE,
	CONCAT('RR-', AI.SEQUENCE_NO) as REFERENCE_NUMBER,
	COALESCE(AI.INVOICE_NUMBER, RR.DELIVERY_RECEIPT_NO) as DESCRIPTION,
	COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT
FROM R_RECEIVING_REPORT_ITEM RRI
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN ITEM I ON I.ITEM_ID = RRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND RR.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND AI.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
AND AI.INVOICE_TYPE_ID = 5

UNION ALL 


SELECT 'RECEIVING REPORT' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, AI.GL_DATE,
	CONCAT('RR-', AI.SEQUENCE_NO) as REFERENCE_NUMBER, 
	COALESCE(AI.INVOICE_NUMBER, RR.DELIVERY_RECEIPT_NO) as DESCRIPTION,
	0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT
FROM R_RECEIVING_REPORT_ITEM RRI
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RR.AP_INVOICE_ID
INNER JOIN SUPPLIER_ACCOUNT SPA ON SPA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SPA.DEFAULT_CREDIT_AC_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND RR.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND AI.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
AND AI.INVOICE_TYPE_ID = 5

UNION ALL


SELECT 'RETURN TO SUPPLIER' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, AI.GL_DATE,
	CONCAT('RTS-', AI.SEQUENCE_NO) as REFERENCE_NUMBER,  'RETURN TO SUPPLIER' as DESCRIPTION,
	0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT
FROM R_RETURN_TO_SUPPLIER_ITEM RTSI
INNER JOIN R_RETURN_TO_SUPPLIER RTS ON RTS.AP_INVOICE_ID = RTSI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RTS.AP_INVOICE_ID
INNER JOIN ITEM I ON I.ITEM_ID = RTSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND RTS.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND AI.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
AND AI.INVOICE_TYPE_ID = 6

UNION ALL


SELECT 'RETURN TO SUPPLIER' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, AI.GL_DATE,
	CONCAT('RTS-', AI.SEQUENCE_NO) as REFERENCE_NUMBER, AI.DESCRIPTION,
	COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT
FROM R_RETURN_TO_SUPPLIER_ITEM RTSI
INNER JOIN R_RETURN_TO_SUPPLIER RTS ON RTS.AP_INVOICE_ID = RTSI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RTS.AP_INVOICE_ID
INNER JOIN SUPPLIER_ACCOUNT SPA ON SPA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SPA.DEFAULT_CREDIT_AC_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND RTS.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND AI.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
AND AI.INVOICE_TYPE_ID = 6

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE,  AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, CSR.DATE as GL_DATE,
	CONCAT('CSR-', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CS_NUMBER) AS DESCRIPTION, 
	COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND CSR.DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE,  AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, CSR.DATE as GL_DATE,
	CONCAT('CSR-', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CS_NUMBER) AS DESCRIPTION, 
	0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND CSR.DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE,  AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, CSR.DATE as GL_DATE,
	CONCAT('CSR-', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CS_NUMBER) AS DESCRIPTION, 
	0 as DEBIT, (QUANTITY * SRP) as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND CSR.DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE,  AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, CSR.DATE as GL_DATE,
	CONCAT('CSR-', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CS_NUMBER) AS DESCRIPTION, 
	0 AS DEBIT, COALESCE(DISCOUNT, 0) as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND CSR.DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE,  AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, CSR.DATE as GL_DATE,
	CONCAT('CSR-', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CS_NUMBER) AS DESCRIPTION, 
	AMOUNT as DEBIT, 0 as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND CSR.DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE,  AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, CSR.DATE as GL_DATE,
	CONCAT('CSR-', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CS_NUMBER) AS DESCRIPTION, 
	AMOUNT as DEBIT, 0 as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND CSR.DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, ART.TRANSACTION_DATE AS GL_DATE,
	CONCAT('ASR-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-', ASR.SEQUENCE_NO) as DESCRIPTION,
	COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 5
AND ASR.AR_TRANSACTION_TYPE_ID = 4

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, ART.TRANSACTION_DATE AS GL_DATE,
	CONCAT('ASR-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-', ASR.SEQUENCE_NO) as DESCRIPTION,
	0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 5
AND ASR.AR_TRANSACTION_TYPE_ID = 4

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, ART.TRANSACTION_DATE AS GL_DATE,
	CONCAT('ASR-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-', ASR.SEQUENCE_NO) as DESCRIPTION,
	0 as DEBIT, (QUANTITY * SRP) as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 5
AND ASR.AR_TRANSACTION_TYPE_ID = 4

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, ART.TRANSACTION_DATE AS GL_DATE,
	CONCAT('ASR-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-', ASR.SEQUENCE_NO) as DESCRIPTION,
	0 as DEBIT, COALESCE(DISCOUNT, 0) as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 5
AND ASR.AR_TRANSACTION_TYPE_ID = 4

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, ART.TRANSACTION_DATE AS GL_DATE,
	CONCAT('ASR-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-', ASR.SEQUENCE_NO) as DESCRIPTION,
	ASI.AMOUNT as DEBIT, 0 as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ART.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 5
AND ASR.AR_TRANSACTION_TYPE_ID = 4

UNION ALL 


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, CAP.RECEIPT_DATE as GL_DATE,
	CONCAT('CAP-', CAP_NUMBER) as REFERENCE_NUMBER,  CAP.SALE_INVOICE_NO AS DESCRIPTION, 
	AMOUNT as DEBIT, 0 as CREDIT
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CAP.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND CAP.RECEIPT_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 

UNION ALL 


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, CAP.RECEIPT_DATE as GL_DATE,
	CONCAT('CAP-', CAP_NUMBER) as REFERENCE_NUMBER,  CAP.SALE_INVOICE_NO AS DESCRIPTION, 
	AMOUNT as DEBIT, 0 as CREDIT
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CAP.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND CAP.RECEIPT_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 

UNION ALL 


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, CAP.RECEIPT_DATE as GL_DATE,
	CONCAT('CAP-', CAP_NUMBER) as REFERENCE_NUMBER,  CAP.SALE_INVOICE_NO AS DESCRIPTION, 
	0 as DEBIT, AMOUNT as CREDIT
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CAP.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND CAP.RECEIPT_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 

UNION ALL


SELECT 'STOCK ADJUSTMENT IN' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, SA.SA_DATE as GL_DATE,
	SA.SA_NUMBER as REFERENCE_NUMBER, SA.REMARKS AS DESCRIPTION,  
	COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ITEM I ON I.ITEM_ID = SAI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND SA.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND SA.SA_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
AND QUANTITY > 0

UNION ALL


SELECT 'STOCK ADJUSTMENT IN' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, SA.SA_DATE as GL_DATE,
	SA.SA_NUMBER as REFERENCE_NUMBER, SA.REMARKS AS DESCRIPTION,
	0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SAT.ACCOUNT_COMBINATION_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND SA.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND SA.SA_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND QUANTITY > 0

UNION ALL 


SELECT 'STOCK ADJUSTMENT OUT' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, SA.SA_DATE as GL_DATE, 
	SA.SA_NUMBER as REFERENCE_NUMBER, SA.REMARKS AS DESCRIPTION,
	COALESCE(UNIT_COST, 0) * -QUANTITY as DEBIT, 0 as CREDIT
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SAT.ACCOUNT_COMBINATION_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND SA.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND SA.SA_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND QUANTITY < 0

UNION ALL


SELECT 'STOCK ADJUSTMENT OUT' as SOURCE, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, SA.SA_DATE as GL_DATE, 
	SA.SA_NUMBER as REFERENCE_NUMBER, SA.REMARKS AS DESCRIPTION, 
	0 as DEBIT, COALESCE(UNIT_COST, 0) * -QUANTITY as CREDIT
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ITEM I ON I.ITEM_ID = SAI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND SA.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID=IN_ACCOUNT_ID
AND D.NUMBER BETWEEN IN_FROM_DIV and IN_TO_DIV
AND SA.SA_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND QUANTITY < 0

) as TBL 
ORDER BY TBL.GL_DATE, TBL.REFERENCE_NUMBER;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GET_BALANCE_SHEET` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_BALANCE_SHEET`(IN IN_COMPANY_ID INT, IN IN_ACCOUNT_ID INT, 
IN IN_AS_OF_DATE DATE)
BEGIN 


SELECT A.ACCOUNT_ID, A.ACCOUNT_NAME, sum(DEBIT) as DEBIT, sum(CREDIT) as CREDIT FROM (
SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(GLE.AMOUNT) as DEBIT, 0 as CREDIT
FROM GL_ENTRY GLE
INNER JOIN GENERAL_LEDGER GL ON GL.GENERAL_LEDGER_ID = GLE.GENERAL_LEDGER_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = GLE.ACCOUNT_COMBINATION_ID 
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = GL.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FWL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID !=4 
AND FWL.FORM_STATUS_ID=6
AND IS_DEBIT = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND GL.GL_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL 

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 as DEBIT, SUM(GLE.AMOUNT) as CREDIT
FROM GL_ENTRY GLE
INNER JOIN GENERAL_LEDGER GL ON GL.GENERAL_LEDGER_ID = GLE.GENERAL_LEDGER_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = GLE.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON GL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 6
AND IS_DEBIT = 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND GL.GL_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 as DEBIT, SUM(AI.AMOUNT) as CREDIT
FROM AP_INVOICE AI 
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 3
AND AI.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(-AI.AMOUNT) as DEBIT, 0 as CREDIT
FROM AP_INVOICE AI 
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 3
AND AI.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL



SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(AL.AMOUNT) AS DEBIT, 0 as CREDIT 
FROM AP_LINE AL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = AL.AP_INVOICE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = AL.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 3
AND AL.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL 

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(-AL.AMOUNT) as CREDIT 
FROM AP_LINE AL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = AL.AP_INVOICE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = AL.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 3
AND AL.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(AP.AMOUNT) as CREDIT 
FROM AP_PAYMENT AP
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID=AP.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AP.AMOUNT != 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AP.CHECK_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(-AI.PAID_AMOUNT) as CREDIT
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AP.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AI.PAID_AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AP.CHECK_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(AI.PAID_AMOUNT) AS DEBIT, 0 as CREDIT
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AP.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AI.PAID_AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AP.CHECK_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL


SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(AM.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_MISCELLANEOUS AM
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AM.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND RM.DEBIT_ACCOUNT_COMBINATION_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AM.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL 
SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(AM.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_MISCELLANEOUS AM
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AM.RECEIPT_METHOD_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND RM.BANK_ACCOUNT_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AM.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(-AML.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_MISCELLANEOUS_LINE AML
INNER JOIN AR_MISCELLANEOUS AM ON AM.AR_MISCELLANEOUS_ID = AML.AR_MISCELLANEOUS_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AML.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AML.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AM.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(AML.AMOUNT) as CREDIT
FROM AR_MISCELLANEOUS_LINE AML
INNER JOIN AR_MISCELLANEOUS AM ON AM.AR_MISCELLANEOUS_ID = AML.AR_MISCELLANEOUS_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AML.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AML.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AM.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL


SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(AT.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_TRANSACTION AT
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AT.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID = 17
AND AT.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AT.GL_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(-AT.AMOUNT) as CREDIT
FROM AR_TRANSACTION AT
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AT.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID = 17
AND AT.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AT.GL_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL


SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(AL.AMOUNT) as CREDIT
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID=AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID = 17
AND AL.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AT.GL_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(-AL.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID=AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID = 17
AND AL.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AT.GL_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL






SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(AR.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.AMOUNT != 0
AND RM.DEBIT_ACCOUNT_COMBINATION_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL
SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(AR.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.AMOUNT != 0
AND RM.BANK_ACCOUNT_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL




SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(AR.AMOUNT) as CREDIT
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.AMOUNT != 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL




SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(ART.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(-ART.AMOUNT) as CREDIT
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL




SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(ART.AMOUNT) as CREDIT
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(-ART.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
) as ACCOUNT_BALANCES 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = ACCOUNT_BALANCES.ACCOUNT_ID
GROUP BY ACCOUNT_BALANCES.ACCOUNT_ID 
ORDER BY A.NUMBER;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GET_BALANCE_SHEET_CONTRA` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_BALANCE_SHEET_CONTRA`(IN IN_COMPANY_ID INT, IN IN_ACCOUNT_ID INT, 
IN IN_AS_OF_DATE DATE)
BEGIN 


SELECT A.ACCOUNT_ID, A.ACCOUNT_NAME, sum(DEBIT) as DEBIT, sum(CREDIT) as CREDIT FROM (
SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(GLE.AMOUNT) as DEBIT, 0 as CREDIT
FROM GL_ENTRY GLE
INNER JOIN GENERAL_LEDGER GL ON GL.GENERAL_LEDGER_ID = GLE.GENERAL_LEDGER_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = GLE.ACCOUNT_COMBINATION_ID 
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = GL.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FWL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID !=4 
AND FWL.FORM_STATUS_ID=6
AND IS_DEBIT = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND GL.GL_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL 

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 as DEBIT, SUM(GLE.AMOUNT) as CREDIT
FROM GL_ENTRY GLE
INNER JOIN GENERAL_LEDGER GL ON GL.GENERAL_LEDGER_ID = GLE.GENERAL_LEDGER_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = GLE.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON GL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 6
AND IS_DEBIT = 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND GL.GL_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 as DEBIT, SUM(AI.AMOUNT) as CREDIT
FROM AP_INVOICE AI 
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 3
AND AI.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(-AI.AMOUNT) as DEBIT, 0 as CREDIT
FROM AP_INVOICE AI 
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 3
AND AI.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL



SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(AL.AMOUNT) AS DEBIT, 0 as CREDIT 
FROM AP_LINE AL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = AL.AP_INVOICE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = AL.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 3
AND AL.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL 

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(-AL.AMOUNT) as CREDIT 
FROM AP_LINE AL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = AL.AP_INVOICE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = AL.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 3
AND AL.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(AP.AMOUNT) as CREDIT 
FROM AP_PAYMENT AP
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID=AP.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AP.AMOUNT != 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AP.CHECK_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(-AI.PAID_AMOUNT) as CREDIT
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AP.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AI.PAID_AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AP.CHECK_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(AI.PAID_AMOUNT) AS DEBIT, 0 as CREDIT
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AP.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AI.PAID_AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AP.CHECK_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL


SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(AM.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_MISCELLANEOUS AM
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AM.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND RM.DEBIT_ACCOUNT_COMBINATION_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AM.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL 
SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(AM.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_MISCELLANEOUS AM
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AM.RECEIPT_METHOD_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND RM.BANK_ACCOUNT_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AM.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(-AML.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_MISCELLANEOUS_LINE AML
INNER JOIN AR_MISCELLANEOUS AM ON AM.AR_MISCELLANEOUS_ID = AML.AR_MISCELLANEOUS_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AML.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AML.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AM.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(AML.AMOUNT) as CREDIT
FROM AR_MISCELLANEOUS_LINE AML
INNER JOIN AR_MISCELLANEOUS AM ON AM.AR_MISCELLANEOUS_ID = AML.AR_MISCELLANEOUS_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AML.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AML.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AM.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL


SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(AT.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_TRANSACTION AT
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AT.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID = 17
AND AT.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AT.GL_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(-AT.AMOUNT) as CREDIT
FROM AR_TRANSACTION AT
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AT.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID = 17
AND AT.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AT.GL_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL


SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(AL.AMOUNT) as CREDIT
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID=AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID = 17
AND AL.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AT.GL_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(-AL.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID=AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID = 17
AND AL.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AT.GL_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL






SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(AR.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.AMOUNT != 0
AND RM.DEBIT_ACCOUNT_COMBINATION_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID

UNION ALL
SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(AR.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.AMOUNT != 0
AND RM.BANK_ACCOUNT_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL




SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(AR.AMOUNT) as CREDIT
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.AMOUNT != 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL




SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(ART.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(-ART.AMOUNT) as CREDIT
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL




SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(ART.AMOUNT) as CREDIT
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(-ART.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
GROUP BY AC.ACCOUNT_ID
) as ACCOUNT_BALANCES 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = ACCOUNT_BALANCES.ACCOUNT_ID
GROUP BY ACCOUNT_BALANCES.ACCOUNT_ID 
ORDER BY A.NUMBER;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GET_BANK_RECON` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_BANK_RECON`(IN IN_BANK_ACCT_ID INT, IN IN_AS_OF_DATE DATE)
BEGIN
SELECT FORM_ID, DATE, CHECK_DATE, RECEIPT_NO, CHECK_NO, CUSTOMER, SUPPLIER, AMOUNT, STATUS, FIELD FROM (
	SELECT ARR.AR_RECEIPT_ID AS FORM_ID, ARR.MATURITY_DATE AS DATE, NULL AS CHECK_DATE, ARR.RECEIPT_NUMBER AS RECEIPT_NO,
	ARR.REF_NUMBER AS CHECK_NO, AC.NAME AS CUSTOMER, NULL AS SUPPLIER,
	ARR.AMOUNT AS AMOUNT, FS.DESCRIPTION AS STATUS, '1' AS FIELD FROM AR_RECEIPT ARR
		INNER JOIN AR_CUSTOMER AC ON ARR.AR_CUSTOMER_ID = AC.AR_CUSTOMER_ID
		INNER JOIN AR_CUSTOMER_ACCOUNT ACC ON ARR.AR_CUSTOMER_ACCOUNT_ID = ACC.AR_CUSTOMER_ACCOUNT_ID
		INNER JOIN RECEIPT_METHOD RM ON ARR.RECEIPT_METHOD_ID = RM.RECEIPT_METHOD_ID
		INNER JOIN BANK_ACCOUNT BA ON RM.BANK_ACCOUNT_ID = BA.BANK_ACCOUNT_ID
		INNER JOIN FORM_WORKFLOW FW ON ARR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
		INNER JOIN FORM_STATUS FS ON FW.CURRENT_STATUS_ID = FS.FORM_STATUS_ID
		WHERE FW.CURRENT_STATUS_ID != 4 AND FW.CURRENT_STATUS_ID != 16
		AND BA.BANK_ACCOUNT_ID=IN_BANK_ACCT_ID AND ARR.MATURITY_DATE<=IN_AS_OF_DATE
	UNION ALL
	SELECT ARM.AR_MISCELLANEOUS_ID, ARM.MATURITY_DATE, NULL, ARM.RECEIPT_NUMBER, ARM.REF_NUMBER,
	AC.NAME, NULL, ARM.AMOUNT, FS.DESCRIPTION, '1' FROM AR_MISCELLANEOUS ARM
		INNER JOIN AR_CUSTOMER AC ON ARM.AR_CUSTOMER_ID = AC.AR_CUSTOMER_ID
		INNER JOIN AR_CUSTOMER_ACCOUNT ACC ON ARM.AR_CUSTOMER_ACCOUNT_ID = ACC.AR_CUSTOMER_ACCOUNT_ID
		INNER JOIN RECEIPT_METHOD RM ON ARM.RECEIPT_METHOD_ID = RM.RECEIPT_METHOD_ID
		INNER JOIN BANK_ACCOUNT BA ON RM.BANK_ACCOUNT_ID = BA.BANK_ACCOUNT_ID
		INNER JOIN FORM_WORKFLOW FW ON ARM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
		INNER JOIN FORM_STATUS FS ON FW.CURRENT_STATUS_ID = FS.FORM_STATUS_ID
		WHERE FW.CURRENT_STATUS_ID != 4 AND FW.CURRENT_STATUS_ID != 16
		AND BA.BANK_ACCOUNT_ID=IN_BANK_ACCT_ID AND ARM.MATURITY_DATE<=IN_AS_OF_DATE
	UNION ALL
	SELECT APP.AP_PAYMENT_ID, APP.PAYMENT_DATE, APP.CHECK_DATE, NULL, APP.CHECK_NUMBER, NULL, S.NAME, 
	APP.AMOUNT, FS.DESCRIPTION, '2' FROM AP_PAYMENT APP
		INNER JOIN SUPPLIER S ON APP.SUPPLIER_ID = S.SUPPLIER_ID
		INNER JOIN BANK_ACCOUNT BA ON APP.BANK_ACCOUNT_ID = BA.BANK_ACCOUNT_ID
		INNER JOIN FORM_WORKFLOW FW ON APP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
		INNER JOIN FORM_STATUS FS ON FW.CURRENT_STATUS_ID = FS.FORM_STATUS_ID
		WHERE FW.CURRENT_STATUS_ID != 4 AND FW.CURRENT_STATUS_ID != 16
		AND BA.BANK_ACCOUNT_ID=IN_BANK_ACCT_ID AND APP.CHECK_DATE<=IN_AS_OF_DATE
) as BANK_RECON_TBL ORDER BY DATE;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GET_BEGINNING_BALANCE` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_BEGINNING_BALANCE`(IN IN_COMPANY_ID INT, IN IN_ACCOUNT_ID INT, 
	IN IN_FROM_DIVISION VARCHAR(5), IN IN_TO_DIVISION VARCHAR(5), IN IN_AS_OF_DATE DATE, IN IN_DESCRIPTION VARCHAR(50))
BEGIN 
SELECT SUM(DEBIT) as TOTAL_DEBIT, SUM(CREDIT) as TOTAL_CREDIT FROM (


SELECT 'GENERAL LEDGER' as SOURCE, GL.GENERAL_LEDGER_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, GL.GL_DATE, CONCAT('JV', GL.SEQUENCE_NO) as REFERENCE_NUMBER, GLE.DESCRIPTION, GLE.AMOUNT as DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM GL_ENTRY GLE 
INNER JOIN GENERAL_LEDGER GL ON GL.GENERAL_LEDGER_ID = GLE.GENERAL_LEDGER_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = GLE.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON GL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IS_DEBIT = 1
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND GL_DATE <= IN_AS_OF_DATE
AND GLE.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'GENERAL LEDGER' as SOURCE, GL.GENERAL_LEDGER_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, GL.GL_DATE, CONCAT('JV', GL.SEQUENCE_NO) as REFERENCE_NUMBER, GLE.DESCRIPTION, 0 as DEBIT, GLE.AMOUNT as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM GL_ENTRY GLE
INNER JOIN GENERAL_LEDGER GL ON GL.GENERAL_LEDGER_ID = GLE.GENERAL_LEDGER_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = GLE.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON GL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IS_DEBIT = 0
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND GL_DATE <= IN_AS_OF_DATE
AND GLE.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'AP INVOICE' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, AI.INVOICE_NUMBER as REFERENCE_NUMBER, AI.DESCRIPTION, 0 as DEBIT, AI.AMOUNT as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AP_INVOICE AI 
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AI.AMOUNT >= 0
AND AI.INVOICE_TYPE_ID != 5 AND AI.INVOICE_TYPE_ID != 6 AND AI.INVOICE_TYPE_ID != 7 AND AI.INVOICE_TYPE_ID != 8
AND AC.COMPANY_ID = SA.COMPANY_ID 
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND AI.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL

SELECT 'AP INVOICE' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, AI.INVOICE_NUMBER as REFERENCE_NUMBER, AI.DESCRIPTION, -AI.AMOUNT as DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AP_INVOICE AI 
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AI.AMOUNT < 0
AND AI.INVOICE_TYPE_ID != 5 AND AI.INVOICE_TYPE_ID != 6 AND AI.INVOICE_TYPE_ID != 7 AND AI.INVOICE_TYPE_ID != 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND AI.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'AP INVOICE' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, AI.INVOICE_NUMBER as REFERENCE_NUMBER, AL.DESCRIPTION, AL.AMOUNT AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AP_LINE AL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = AL.AP_INVOICE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = AL.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AL.AMOUNT >= 0
AND AI.INVOICE_TYPE_ID != 5 AND AI.INVOICE_TYPE_ID != 6 AND AI.INVOICE_TYPE_ID != 7 AND AI.INVOICE_TYPE_ID != 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND AL.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL 

SELECT 'AP INVOICE' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, AI.INVOICE_NUMBER as REFERENCE_NUMBER, AL.DESCRIPTION, 0 AS DEBIT, -AL.AMOUNT as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AP_LINE AL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = AL.AP_INVOICE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = AL.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AL.AMOUNT < 0
AND AI.INVOICE_TYPE_ID != 5 AND AI.INVOICE_TYPE_ID != 6 AND AI.INVOICE_TYPE_ID != 7 AND AI.INVOICE_TYPE_ID != 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND AL.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL

SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'AP PAYMENT' as SOURCE, AI.AP_PAYMENT_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AP.CHECK_DATE as GL_DATE, 
AP.CHECK_NUMBER as REFERENCE_NUMBER, 
CONCAT (CASE API.INVOICE_TYPE_ID
WHEN 5 THEN CONCAT('RR-', CAST(API.SEQUENCE_NO AS CHAR(10)))
WHEN 6 THEN CONCAT('RTS-', CAST(API.SEQUENCE_NO AS CHAR(10)))
WHEN 8 THEN CONCAT('RR-RM ', CAST(API.SEQUENCE_NO AS CHAR(10)))
ELSE API.INVOICE_NUMBER 
END) AS DESCRIPTION,
0 AS DEBIT, AI.PAID_AMOUNT as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID=AP.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AP_INVOICE API ON API.AP_INVOICE_ID = AI.AP_INVOICE_ID 
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AP.AMOUNT != 0
AND AI.PAID_AMOUNT > 0
AND AP.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AP.CHECK_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS PAYMENT_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL

SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'AP PAYMENT' as SOURCE, AI.AP_PAYMENT_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AP.CHECK_DATE as GL_DATE, AP.CHECK_NUMBER as REFERENCE_NUMBER,
CONCAT (CASE API.INVOICE_TYPE_ID
WHEN 5 THEN CONCAT('RR-', CAST(API.SEQUENCE_NO AS CHAR(10)))
WHEN 6 THEN CONCAT('RTS-', CAST(API.SEQUENCE_NO AS CHAR(10)))
WHEN 7 THEN CONCAT('RTS-EB', CAST(API.SEQUENCE_NO AS CHAR(10)))
WHEN 8 THEN CONCAT('RR-RM ', CAST(API.SEQUENCE_NO AS CHAR(10)))
ELSE API.INVOICE_NUMBER 
END) AS DESCRIPTION, -AI.PAID_AMOUNT AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID=AP.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AP_INVOICE API ON API.AP_INVOICE_ID = AI.AP_INVOICE_ID
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AP.AMOUNT != 0
AND AI.PAID_AMOUNT < 0
AND AP.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AP.CHECK_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS PAYMENT_INVOICE_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'AP PAYMENT' as SOURCE, AI.AP_PAYMENT_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AP.CHECK_DATE as GL_DATE, AP.CHECK_NUMBER as REFERENCE_NUMBER,
CONCAT (CASE API.INVOICE_TYPE_ID
WHEN 5 THEN CONCAT('RR-', API.SEQUENCE_NO)
WHEN 6 THEN CONCAT('RTS-', API.SEQUENCE_NO)
WHEN 7 THEN CONCAT('RTS-EB', API.SEQUENCE_NO)
WHEN 8 THEN CONCAT('RR-RM ', API.SEQUENCE_NO)
ELSE API.INVOICE_NUMBER 
END) AS DESCRIPTION, 0 AS DEBIT, -AI.PAID_AMOUNT as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AP.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AP_INVOICE API ON API.AP_INVOICE_ID = AI.AP_INVOICE_ID 
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AI.PAID_AMOUNT < 0
AND AP.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AP.CHECK_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS PAYMENT_INVOICE_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'AP PAYMENT' as SOURCE, AI.AP_PAYMENT_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AP.CHECK_DATE as GL_DATE, AP.CHECK_NUMBER as REFERENCE_NUMBER, 
CONCAT (CASE API.INVOICE_TYPE_ID
WHEN 5 THEN CONCAT('RR-', CAST(API.SEQUENCE_NO AS CHAR(10)))
WHEN 6 THEN CONCAT('RTS-', CAST(API.SEQUENCE_NO AS CHAR(10)))
WHEN 7 THEN CONCAT('RTS-EB', CAST(API.SEQUENCE_NO AS CHAR(10)))
WHEN 8 THEN CONCAT('RR-RM ', CAST(API.SEQUENCE_NO AS CHAR(10)))
ELSE API.INVOICE_NUMBER 
END) AS DESCRIPTION,
AI.PAID_AMOUNT AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AP.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AP_INVOICE API ON API.AP_INVOICE_ID = AI.AP_INVOICE_ID 
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AI.PAID_AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AP.CHECK_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS PAYMENT_INVOICE_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 


UNION ALL



SELECT 'AR MISCELLANEOUS' as SOURCE, AM.AR_MISCELLANEOUS_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AM.MATURITY_DATE as GL_DATE, AM.RECEIPT_NUMBER AS REFERENCE_NUMBER, AM.DESCRIPTION, AM.AMOUNT AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_MISCELLANEOUS AM
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AM.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND RM.DEBIT_ACCOUNT_COMBINATION_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AM.MATURITY_DATE <= IN_AS_OF_DATE
AND AM.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL 


SELECT 'AR MISCELLANEOUS' as SOURCE, AM.AR_MISCELLANEOUS_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AM.MATURITY_DATE as GL_DATE, AM.RECEIPT_NUMBER AS REFERENCE_NUMBER, AM.DESCRIPTION, AM.AMOUNT AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_MISCELLANEOUS AM
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AM.RECEIPT_METHOD_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND RM.BANK_ACCOUNT_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AM.MATURITY_DATE <= IN_AS_OF_DATE
AND AM.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'AR MISCELLANEOUS' as SOURCE, AM.AR_MISCELLANEOUS_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AM.MATURITY_DATE as GL_DATE, AM.RECEIPT_NUMBER AS REFERENCE_NUMBER, AM.DESCRIPTION, -AML.AMOUNT AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_MISCELLANEOUS_LINE AML
INNER JOIN AR_MISCELLANEOUS AM ON AM.AR_MISCELLANEOUS_ID = AML.AR_MISCELLANEOUS_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AML.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AML.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AM.MATURITY_DATE <= IN_AS_OF_DATE
AND AM.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL

SELECT 'AR MISCELLANEOUS' as SOURCE, AM.AR_MISCELLANEOUS_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AM.MATURITY_DATE as GL_DATE, AM.RECEIPT_NUMBER AS REFERENCE_NUMBER, AM.DESCRIPTION, 0 AS DEBIT, AML.AMOUNT as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_MISCELLANEOUS_LINE AML
INNER JOIN AR_MISCELLANEOUS AM ON AM.AR_MISCELLANEOUS_ID = AML.AR_MISCELLANEOUS_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AML.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AML.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AM.MATURITY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND AM.DESCRIPTION LIKE IN_DESCRIPTION
UNION ALL



SELECT 'AR TRANSACTION' as SOURCE, AT.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AT.GL_DATE, AT.TRANSACTION_NUMBER as REFERENCE_NUMBER, AT.DESCRIPTION, AT.AMOUNT AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_TRANSACTION AT
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AT.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AT.AMOUNT >= 0
AND AT.AR_TRANSACTION_TYPE_ID <= 3
AND AT.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AT.GL_DATE <= IN_AS_OF_DATE
AND AT.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'AR TRANSACTION' as SOURCE, AT.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AT.GL_DATE, AT.TRANSACTION_NUMBER as REFERENCE_NUMBER, AT.DESCRIPTION, 0 AS DEBIT, -AT.AMOUNT as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_TRANSACTION AT
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AT.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AT.AMOUNT < 0
AND AT.AR_TRANSACTION_TYPE_ID <= 3
AND AT.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AT.GL_DATE <= IN_AS_OF_DATE
AND AT.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL



SELECT 'AR TRANSACTION' as SOURCE, AT.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AT.GL_DATE, AT.TRANSACTION_NUMBER as REFERENCE_NUMBER, AT.DESCRIPTION, 0 AS DEBIT, AL.AMOUNT as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID=AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AL.AMOUNT >= 0
AND AT.AR_TRANSACTION_TYPE_ID <= 3
AND AT.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AT.GL_DATE <= IN_AS_OF_DATE
AND AT.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'AR TRANSACTION' as SOURCE, AT.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AT.GL_DATE, AT.TRANSACTION_NUMBER as REFERENCE_NUMBER, AT.DESCRIPTION, -AL.AMOUNT AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID=AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AL.AMOUNT < 0
AND AT.AR_TRANSACTION_TYPE_ID = 1 AND AT.AR_TRANSACTION_TYPE_ID = 2 AND AT.AR_TRANSACTION_TYPE_ID = 3
AND AT.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AT.GL_DATE <= IN_AS_OF_DATE
AND AT.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL






SELECT 'AR RECEIPT' as SOURCE, CONCAT(AR.AR_RECEIPT_ID, RM.RECEIPT_METHOD_ID) as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AR.MATURITY_DATE as GL_DATE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER, '' as DESCRIPTION, AR.AMOUNT AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND RM.DEBIT_ACCOUNT_COMBINATION_ID IS NOT NULL
AND AR.AMOUNT != 0
AND AR.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
AND AR.RECEIPT_NUMBER LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1


UNION ALL
SELECT 'AR RECEIPT' as SOURCE, CONCAT(AR.AR_RECEIPT_ID, BA.CASH_IN_BANK_ACCT_ID) as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AR.MATURITY_DATE as GL_DATE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER, '' AS DESCRIPTION, AR.AMOUNT AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.AMOUNT != 0
AND AR.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
AND AR.RECEIPT_NUMBER LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL




SELECT 'AR RECEIPT' as SOURCE, AR.AR_RECEIPT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AR.MATURITY_DATE as GL_DATE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER, '' AS DESCRIPTION, 0 AS DEBIT, AR.AMOUNT as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.AMOUNT != 0
AND AR.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
AND AR.RECEIPT_NUMBER LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL



SELECT 'AR RECEIPT' as SOURCE, ART.AR_RECEIPT_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AR.MATURITY_DATE as GL_DATE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER, AT.TRANSACTION_NUMBER AS DESCRIPTION, ART.AMOUNT AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT >= 0
AND AR.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
AND AT.TRANSACTION_NUMBER LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND AT.AR_TRANSACTION_TYPE_ID != 15

UNION ALL

SELECT 'AR RECEIPT' as SOURCE, ART.AR_RECEIPT_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AR.MATURITY_DATE as GL_DATE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER, AT.TRANSACTION_NUMBER AS DESCRIPTION, 0 AS DEBIT, -ART.AMOUNT as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT < 0
AND AR.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
AND AT.TRANSACTION_NUMBER LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND AT.AR_TRANSACTION_TYPE_ID != 15

UNION ALL



SELECT 'AR RECEIPT' as SOURCE, ART.AR_RECEIPT_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AR.MATURITY_DATE as GL_DATE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER, AT.TRANSACTION_NUMBER AS DESCRIPTION, 0 AS DEBIT, ART.AMOUNT as CREDIT, 
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT >= 0
AND AR.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
AND AT.TRANSACTION_NUMBER LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND AT.AR_TRANSACTION_TYPE_ID != 15

UNION ALL

SELECT 'AR RECEIPT' as SOURCE, ART.AR_RECEIPT_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AR.MATURITY_DATE as GL_DATE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER, AT.TRANSACTION_NUMBER AS DESCRIPTION, -ART.AMOUNT AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT < 0
AND AR.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
AND AT.TRANSACTION_NUMBER LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND AT.AR_TRANSACTION_TYPE_ID != 15

UNION ALL


SELECT 'AR RECEIPT' as SOURCE, ACL.AC_AR_LINE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AR.MATURITY_DATE as GL_DATE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER, ALS.NAME AS DESCRIPTION, ACL.AMOUNT AS DEBIT, 0 as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AC_AR_LINE ACL
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ACL.AR_RECEIPT_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = ACL.AR_LINE_SETUP_ID 
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
AND ALS.NAME LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'AR RECEIPT' as SOURCE, ACL.AC_AR_LINE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AR.MATURITY_DATE as GL_DATE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER, ALS.NAME AS DESCRIPTION, 0 AS DEBIT, ACL.AMOUNT as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, 1 as IS_POSTED
FROM AC_AR_LINE ACL
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ACL.AR_RECEIPT_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = ACL.AR_LINE_SETUP_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = AR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
AND ALS.NAME LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - PROCESSING' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID = 6
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - WHOLESALE' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-W ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-IS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - POS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS POS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - PROCESSING' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID = 6
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - WHOLESALE' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-W ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-IS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - POS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS POS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 AS DEBIT, QUANTITY * SRP as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - PROCESSING' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 AS DEBIT, QUANTITY * SRP as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID = 6
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION,
0 AS DEBIT, QUANTITY * SRP as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1


UNION ALL


SELECT 'CASH SALES - WHOLESALE' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-W ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 AS DEBIT, QUANTITY * SRP as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-IS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 AS DEBIT, QUANTITY * SRP as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - POS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS POS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 AS DEBIT, QUANTITY * SRP as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - WHOLESALE' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-W ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-IS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - POS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS POS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
CSI.AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES-PROCESSING' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
CSI.AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID = 6
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1


UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION,
CSI.AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - WHOLESALE' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-W ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
CSI.AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-IS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
CSI.AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS POS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
CSI.AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
AL.AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION,
AL.AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - WHOLESALE' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-W ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
AL.AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-IS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
AL.AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - POS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS POS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
AL.AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - PROCESSING' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID = 6
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION,
AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1


UNION ALL


SELECT 'CASH SALES - WHOLESALE' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-W ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-IS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - POS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS POS', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 AS DEBIT, AL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION,
0 AS DEBIT, AL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL 


SELECT 'CASH SALES - WHOLESALE' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-W ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 AS DEBIT, AL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, CS.CASH_SALE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CS.RECEIPT_DATE as GL_DATE, CONCAT('CS-IS ', CS_NUMBER) as REFERENCE_NUMBER, CS.SALE_INVOICE_NO AS DESCRIPTION, 
0 AS DEBIT, AL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE,  CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE,  CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL 


SELECT 'ACCOUNT SALES - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-W ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-IS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE,  CONCAT('AS-P', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 14
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-W ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-IS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-P', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 14
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, QUANTITY * SRP as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, QUANTITY * SRP as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-W ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, QUANTITY * SRP as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-IS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, QUANTITY * SRP as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-P ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, QUANTITY * SRP as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 14
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-W ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-IS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-P ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 14
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
ASI.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
ASI.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-W ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
ASI.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-IS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
ASI.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-P ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
ASI.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 14
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
AL.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
AL.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-W ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
AL.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-IS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
AL.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-P ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
AL.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 14
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, AL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, AL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-W ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, AL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS-IS ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, AL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('AS -P ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, AL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 14
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'RECEIVING REPORT' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, CONCAT('RR-', AI.SEQUENCE_NO) as REFERENCE_NUMBER, COALESCE(AI.INVOICE_NUMBER, RR.DELIVERY_RECEIPT_NO) as DESCRIPTION,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM R_RECEIVING_REPORT_ITEM RRI
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN ITEM I ON I.ITEM_ID = RRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = RR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND AI.INVOICE_TYPE_ID = 5
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS RR_DEBIT_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'RECEIVING REPORT' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, CONCAT('RR-', AI.SEQUENCE_NO) as REFERENCE_NUMBER, COALESCE(AI.INVOICE_NUMBER, RR.DELIVERY_RECEIPT_NO) as DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM R_RECEIVING_REPORT_ITEM RRI
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RR.AP_INVOICE_ID
INNER JOIN SUPPLIER_ACCOUNT SPA ON SPA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = SPA.DEFAULT_CREDIT_AC_ID AND AC.COMPANY_ID = RR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE UNIT_COST IS NOT NULL
AND AI.INVOICE_TYPE_ID = 5
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS RR_CREDIT_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'RECEIVING REPORT' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE as GL_DATE, CONCAT('RR-', AI.SEQUENCE_NO) as REFERENCE_NUMBER, COALESCE(AI.INVOICE_NUMBER, RR.DELIVERY_RECEIPT_NO) AS DESCRIPTION, 
0 AS DEBIT, APL.AMOUNT AS CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AP_INVOICE_LINE APL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = APL.AP_INVOICE_ID
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = APL.AP_INVOICE_ID
INNER JOIN SUPPLIER_ACCOUNT SPA ON SPA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = SPA.DEFAULT_CREDIT_AC_ID AND AC.COMPANY_ID = RR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AI.INVOICE_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS RR_CREDIT_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'RECEIVING REPORT' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE as GL_DATE, CONCAT('RR-', AI.SEQUENCE_NO) as REFERENCE_NUMBER, COALESCE(AI.INVOICE_NUMBER, RR.DELIVERY_RECEIPT_NO) AS DESCRIPTION, 
APL.AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AP_INVOICE_LINE APL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = APL.AP_INVOICE_ID
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = APL.AP_INVOICE_ID
INNER JOIN AP_LINE_SETUP ALS ON ALS.AP_LINE_SETUP_ID = APL.AP_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AI.INVOICE_TYPE_ID = 5
AND ALS.ACTIVE = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS RR_CREDIT_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'RECEIVING REPORT - RM' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, CONCAT('RR-RM ', AI.SEQUENCE_NO) as REFERENCE_NUMBER, COALESCE(AI.INVOICE_NUMBER, RR.DELIVERY_RECEIPT_NO) as DESCRIPTION,
RRMI.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM R_RECEIVING_REPORT_ITEM RRI
INNER JOIN R_RECEIVING_REPORT_RM_ITEM RRMI ON RRMI.R_RECEIVING_REPORT_ITEM_ID = RRI.R_RECEIVING_REPORT_ITEM_ID
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN ITEM I ON I.ITEM_ID = RRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = RR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND AI.INVOICE_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS RR_RM_DEBIT_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'RECEIVING REPORT - RM' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE as GL_DATE, CONCAT('RR-RM ', AI.SEQUENCE_NO) as REFERENCE_NUMBER, COALESCE(AI.INVOICE_NUMBER, RR.DELIVERY_RECEIPT_NO) AS DESCRIPTION, 
APL.AMOUNT AS DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AP_INVOICE_LINE APL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = APL.AP_INVOICE_ID
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = APL.AP_INVOICE_ID
INNER JOIN AP_LINE_SETUP ALS ON ALS.AP_LINE_SETUP_ID = APL.AP_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AI.INVOICE_TYPE_ID = 8
AND ALS.ACTIVE = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS RR_APL_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'RECEIVING REPORT - RM' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, CONCAT('RR-RM ', AI.SEQUENCE_NO) as REFERENCE_NUMBER, COALESCE(AI.INVOICE_NUMBER, RR.DELIVERY_RECEIPT_NO) as DESCRIPTION,
0 as DEBIT, AI.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM AP_INVOICE AI
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = AI.AP_INVOICE_ID
INNER JOIN SUPPLIER_ACCOUNT SPA ON SPA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = SPA.DEFAULT_CREDIT_AC_ID AND AC.COMPANY_ID = RR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AI.INVOICE_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS RR_RM_CREDIT_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'RETURN TO SUPPLIER' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, CONCAT('RTS-', AI.SEQUENCE_NO) as REFERENCE_NUMBER,  CONCAT('RR-', CONCAT('RR-', CAST(RRAI.SEQUENCE_NO AS CHAR(10)))) as DESCRIPTION,
0 as DEBIT, COALESCE(RTSI.UNIT_COST, 0) * RTSI.QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM R_RETURN_TO_SUPPLIER_ITEM RTSI
INNER JOIN R_RETURN_TO_SUPPLIER RTS ON RTS.AP_INVOICE_ID = RTSI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RTS.AP_INVOICE_ID
INNER JOIN R_RECEIVING_REPORT_ITEM RRI ON RRI.R_RECEIVING_REPORT_ITEM_ID = RTSI.R_RECEIVING_REPORT_ITEM_ID
INNER JOIN AP_INVOICE RRAI ON RRAI.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN ITEM I ON I.ITEM_ID = RTSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = RTS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND RTSI.UNIT_COST IS NOT NULL
AND AI.INVOICE_TYPE_ID = 6
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS RTS_CREDIT_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'RETURN TO SUPPLIER' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, CONCAT('RTS-', AI.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('RR-', CAST(RRAI.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
COALESCE(RTSI.UNIT_COST, 0) * RTSI.QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM R_RETURN_TO_SUPPLIER_ITEM RTSI
INNER JOIN R_RETURN_TO_SUPPLIER RTS ON RTS.AP_INVOICE_ID = RTSI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RTS.AP_INVOICE_ID
INNER JOIN R_RECEIVING_REPORT_ITEM RRI ON RRI.R_RECEIVING_REPORT_ITEM_ID = RTSI.R_RECEIVING_REPORT_ITEM_ID
INNER JOIN AP_INVOICE RRAI ON RRAI.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN SUPPLIER_ACCOUNT SPA ON SPA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = SPA.DEFAULT_CREDIT_AC_ID AND AC.COMPANY_ID = RTS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE RTSI.UNIT_COST IS NOT NULL
AND AI.INVOICE_TYPE_ID = 6
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS RTS_DEBIT_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT 'RTS - EB' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, CONCAT('RTS-EB-', AI.SEQUENCE_NO) as REFERENCE_NUMBER, AI.INVOICE_NUMBER as DESCRIPTION,
0 as DEBIT, COALESCE(RTSI.UNIT_COST, 0) * RTSI.QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM R_RETURN_TO_SUPPLIER_ITEM RTSI
INNER JOIN R_RETURN_TO_SUPPLIER RTS ON RTS.AP_INVOICE_ID = RTSI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RTS.AP_INVOICE_ID
INNER JOIN ITEM I ON I.ITEM_ID = RTSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = RTS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND RTSI.UNIT_COST IS NOT NULL
AND AI.INVOICE_TYPE_ID = 7
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND AI.INVOICE_NUMBER LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'RTS - EB' as SOURCE, AI.AP_INVOICE_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, AI.GL_DATE, CONCAT('RTS-EB-', AI.SEQUENCE_NO) as REFERENCE_NUMBER, AI.INVOICE_NUMBER as DESCRIPTION,
COALESCE(RTSI.UNIT_COST, 0) * RTSI.QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM R_RETURN_TO_SUPPLIER_ITEM RTSI
INNER JOIN R_RETURN_TO_SUPPLIER RTS ON RTS.AP_INVOICE_ID = RTSI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RTS.AP_INVOICE_ID
INNER JOIN SUPPLIER_ACCOUNT SPA ON SPA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = SPA.DEFAULT_CREDIT_AC_ID AND AC.COMPANY_ID = RTS.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE RTSI.UNIT_COST IS NOT NULL
AND AI.INVOICE_TYPE_ID = 7
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND AI.GL_DATE <= IN_AS_OF_DATE
AND AI.INVOICE_NUMBER LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE,  CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_CA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE,  CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_CA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE,  CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_CA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE,  CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_CA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE,  CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-W ', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSRW_CA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE,  CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-W ', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSRW_CA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - IS' as SOURCE,  CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-IS ', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_IS_CA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - IS' as SOURCE,  CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-IS ', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_IS_CA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_IA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_IA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_IA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_IA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-W ', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSRW_IA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-W ', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSRW_IA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - IS' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-IS ', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_IS_IA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - IS' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-IS ', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_IS_IA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, (QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_SRA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, (QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_SRA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, (QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_SRA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, (QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_SRA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-W ', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, (QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSRW_SRA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-W ', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, (QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSRW_SRA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - IS' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-IS ', CAST(CS_NUMBER AS CHAR(50))) AS DESCRIPTION, 
0 as DEBIT, (QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_IS_SRA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - IS' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-IS ', CAST(CS.CSR_NUMBER AS CHAR(50))) AS DESCRIPTION, 
0 as DEBIT, (QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_IS_SRA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 AS DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_SDA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 AS DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_SDA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 AS DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_SDA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 AS DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_SDA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-W ', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 AS DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSRW_SDA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-W ', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 AS DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSRW_SDA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - IS' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-IS ', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 AS DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_IS_SDA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - IS' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-IS ', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 AS DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_IS_SDA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CAST(CS_NUMBER AS CHAR(50))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CAST(CS.CSR_NUMBER AS CHAR(50))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CAST(CS_NUMBER AS CHAR(50))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CAST(CS.CSR_NUMBER AS CHAR(50))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-W', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSRW_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-W', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSRW_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - IS' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-IS', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_IS_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - IS' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-IS', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_IS_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_AR_LINE AL
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = AL.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_IS_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL

SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_AR_LINE AL
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = AL.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_IS_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_AR_LINE AL
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = AL.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_IS_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL 


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
0 as DEBIT, AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_AR_LINE AL
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = AL.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_IS_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL 


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_AR_LINE AL
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = AL.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_IS_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL 


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_AR_LINE AL
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = AL.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_IS_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL 


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_AR_LINE AL
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = AL.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_IS_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL 


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_AR_LINE AL
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = AL.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_IS_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL 


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_IS_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL 


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_IS_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL 


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR ', CSR.CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CSR-', CAST(CS.CSR_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE_RETURN CS ON CS.CASH_SALE_RETURN_ID = CSR.REF_CASH_SALE_RETURN_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_IS_RM_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL 


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-W', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-W', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 2
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSR_BA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'CASH SALES RETURN - IS' as SOURCE, CSR.CASH_SALE_RETURN_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CSR.DATE as GL_DATE, CONCAT('CSR-IS', CSR_NUMBER) as REFERENCE_NUMBER, CONCAT('CS-IS', CAST(CS_NUMBER AS CHAR(20))) AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 3
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS CSRW_BA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 5
AND ASR.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS ASR_CA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 13
AND ASR.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS ASR_CA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-W ', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-W ', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 9
AND ASR.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS ASRW_CA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-IS ', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-IS ', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 11
AND ASR.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS ASR_IS_CA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 5 
AND ASR.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS ASR_IA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 13
AND ASR.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS ASR_IA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-W ', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-W ', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 9 
AND ASR.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS ASRW_IA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-IS ', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-IS ', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 11
AND ASR.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS ASR_IS_IA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
0 as DEBIT, (QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 5 
AND ASR.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS ASR_SRA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
0 as DEBIT, (QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 13 
AND ASR.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS ASR_SRA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-W ', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-W ', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
0 as DEBIT, (QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 9
AND ASR.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS ASRW_SRA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-IS ', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-IS ', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
0 as DEBIT, (QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 11
AND ASR.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS ASR_IS_SRA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
0 as DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 5 
AND ASR.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS ASR_SDA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
0 as DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 13
AND ASR.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS ASR_SDA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-W ', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-W ', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
0 as DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 9
AND ASR.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS ASRW_SDA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-IS ', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-IS ', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
0 as DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 11
AND ASR.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS ASR_IS_SDA_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
ASI.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 5 
AND ASR.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS ASR_CAS_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
ASI.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 13 
AND ASR.AR_TRANSACTION_TYPE_ID = 12
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS ASR_CAS_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION

UNION ALL


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN - WHOLESALE' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-W ', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-W ', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
ASI.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 9 
AND ASR.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS ASRW_CAS_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL 


SELECT SOURCE, ID, COMPANY_ID, DIVISION_ID, ACCOUNT_ID, DIVISION_NO, DIVISION_NAME, ACCT_NO, ACCOUNT_NAME, GL_DATE, REFERENCE_NUMBER, DESCRIPTION, 
DEBIT, CREDIT, FORM_WORKFLOW_ID, CURRENT_STATUS_ID, IS_COMPLETE, IS_POSTED FROM (
SELECT 'ACCOUNT SALES RETURN - IS' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-IS ', ART.SEQUENCE_NO) as REFERENCE_NUMBER, CONCAT('AS-IS ', CAST(ASR.SEQUENCE_NO AS CHAR(10))) as DESCRIPTION,
ASI.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 11
AND ASR.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1) AS ASR_IS_CAS_TBL
WHERE DESCRIPTION LIKE IN_DESCRIPTION 

UNION ALL


SELECT 'ASR - EB' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-EB-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 7
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID,
D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE,
CONCAT('ASR ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION, AL.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID,
FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 5
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID,
D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE,
CONCAT('ASR ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION, AL.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID,
FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 13
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, 
D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE,
CONCAT('ASR ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION, 0 as DEBIT, AL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID,
FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 5
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, 
D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE,
CONCAT('ASR ', SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION, 0 as DEBIT, AL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID,
FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 13
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ASR - EB' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-EB-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 7
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ASR - EB' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-EB-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
(QUANTITY * SRP) as DEBIT,  0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 7
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'ASR - EB' as SOURCE, ART.AR_TRANSACTION_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.TRANSACTION_DATE AS GL_DATE, CONCAT('ASR-EB-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, ART.DESCRIPTION,
0 as DEBIT, (QUANTITY * SRP) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 7
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-', CAP_NUMBER) as REFERENCE_NUMBER, CAP.SALE_INVOICE_NO AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE
AND CAP.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-', CAP_NUMBER) as REFERENCE_NUMBER, CAP.SALE_INVOICE_NO AS DESCRIPTION, 
CAL.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_AR_LINE CAL
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAL.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE
AND CAP.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1
AND FW.IS_COMPLETE = 1

UNION ALL 


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-', CAP_NUMBER) as REFERENCE_NUMBER,  CAP.SALE_INVOICE_NO AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE
AND CAP.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1
AND FW.IS_COMPLETE = 1

UNION ALL 


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-', CAP_NUMBER) as REFERENCE_NUMBER,  CAP.SALE_INVOICE_NO AS DESCRIPTION, 
CAL.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_AR_LINE CAL
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAL.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE
AND CAP.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1
AND FW.IS_COMPLETE = 1

UNION ALL 


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-', CAP_NUMBER) as REFERENCE_NUMBER,  CAP.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE
AND CAP.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1
AND FW.IS_COMPLETE = 1

UNION ALL 


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-', CAP_NUMBER) as REFERENCE_NUMBER,  CAP.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, CAL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_AR_LINE CAL
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAL.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE
AND CAP.SALE_INVOICE_NO LIKE IN_DESCRIPTION 
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CUSTOMER ADVANCE PAYMENT - IS' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-IS', CAP_NUMBER) as REFERENCE_NUMBER, CAP.SALE_INVOICE_NO AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE
AND CAP.SALE_INVOICE_NO LIKE IN_DESCRIPTION
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CUSTOMER ADVANCE PAYMENT - IS' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-IS', CAP_NUMBER) as REFERENCE_NUMBER, CAP.SALE_INVOICE_NO AS DESCRIPTION, 
CAL.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_AR_LINE CAL
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAL.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE
AND CAP.SALE_INVOICE_NO LIKE IN_DESCRIPTION
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CUSTOMER ADVANCE PAYMENT IS' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-IS', CAP_NUMBER) as REFERENCE_NUMBER,  CAP.SALE_INVOICE_NO AS DESCRIPTION, 
AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE
AND CAP.SALE_INVOICE_NO LIKE IN_DESCRIPTION
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CUSTOMER ADVANCE PAYMENT - IS' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-IS', CAP_NUMBER) as REFERENCE_NUMBER,  CAP.SALE_INVOICE_NO AS DESCRIPTION, 
CAL.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_AR_LINE CAL
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAL.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE
AND CAP.SALE_INVOICE_NO LIKE IN_DESCRIPTION
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CUSTOMER ADVANCE PAYMENT - IS' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-IS', CAP_NUMBER) as REFERENCE_NUMBER,  CAP.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE
AND CAP.SALE_INVOICE_NO LIKE IN_DESCRIPTION
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'CUSTOMER ADVANCE PAYMENT - IS' as SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAP.RECEIPT_DATE as GL_DATE, CONCAT('CAP-IS', CAP_NUMBER) as REFERENCE_NUMBER,  CAP.SALE_INVOICE_NO AS DESCRIPTION, 
0 as DEBIT, CAL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_AR_LINE CAL
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAL.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE
AND CAP.SALE_INVOICE_NO LIKE IN_DESCRIPTION
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'STOCK ADJUSTMENT IN' as SOURCE, SA.STOCK_ADJUSTMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, SA.SA_DATE as GL_DATE, CONCAT('SA-', SA.SA_NUMBER) as REFERENCE_NUMBER, SA.REMARKS AS DESCRIPTION,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ITEM I ON I.ITEM_ID = SAI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND QUANTITY > 0
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NULL
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND SA.SA_DATE <= IN_AS_OF_DATE
AND SA.REMARKS LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'STOCK ADJUSTMENT IN - IS' as SOURCE, SA.STOCK_ADJUSTMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, SA.SA_DATE as GL_DATE, CONCAT('SA-IS ', SA.SA_NUMBER) as REFERENCE_NUMBER, SA.REMARKS AS DESCRIPTION,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ITEM I ON I.ITEM_ID = SAI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND QUANTITY > 0
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND SA.SA_DATE <= IN_AS_OF_DATE
AND SA.REMARKS LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'STOCK ADJUSTMENT IN' as SOURCE, SA.STOCK_ADJUSTMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, SA.SA_DATE as GL_DATE, CONCAT('SA-', SA.SA_NUMBER) as REFERENCE_NUMBER, SA.REMARKS AS DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = SAT.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE QUANTITY > 0
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NULL
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND SA.SA_DATE <= IN_AS_OF_DATE
AND SA.REMARKS LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL 



SELECT 'STOCK ADJUSTMENT IN - IS' as SOURCE, SA.STOCK_ADJUSTMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, SA.SA_DATE as GL_DATE, CONCAT('SA-IS ', SA.SA_NUMBER) as REFERENCE_NUMBER, SA.REMARKS AS DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = SAT.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE QUANTITY > 0
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND SA.SA_DATE <= IN_AS_OF_DATE
AND SA.REMARKS LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL 


SELECT 'STOCK ADJUSTMENT OUT' as SOURCE, SA.STOCK_ADJUSTMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, SA.SA_DATE as GL_DATE, CONCAT('SA-', SA.SA_NUMBER) as REFERENCE_NUMBER, SA.REMARKS AS DESCRIPTION,
COALESCE(UNIT_COST, 0) * -QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = SAT.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE QUANTITY < 0
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NULL
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND SA.SA_DATE <= IN_AS_OF_DATE
AND SA.REMARKS LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'STOCK ADJUSTMENT OUT - IS' as SOURCE, SA.STOCK_ADJUSTMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, SA.SA_DATE as GL_DATE, CONCAT('SA-IS ', SA.SA_NUMBER) as REFERENCE_NUMBER, SA.REMARKS AS DESCRIPTION,
COALESCE(UNIT_COST, 0) * -QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = SAT.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE QUANTITY < 0
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND SA.SA_DATE <= IN_AS_OF_DATE
AND SA.REMARKS LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'STOCK ADJUSTMENT OUT' as SOURCE, SA.STOCK_ADJUSTMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, SA.SA_DATE as GL_DATE, CONCAT('SA-', SA.SA_NUMBER) as REFERENCE_NUMBER, SA.REMARKS AS DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * -QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ITEM I ON I.ITEM_ID = SAI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND QUANTITY < 0 
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NULL
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND SA.SA_DATE <= IN_AS_OF_DATE
AND SA.REMARKS LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'STOCK ADJUSTMENT OUT - IS' as SOURCE, SA.STOCK_ADJUSTMENT_ID as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, SA.SA_DATE as GL_DATE, CONCAT('SA-IS ', SA.SA_NUMBER) as REFERENCE_NUMBER, SA.REMARKS AS DESCRIPTION,
0 as DEBIT, COALESCE(UNIT_COST, 0) * -QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ITEM I ON I.ITEM_ID = SAI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND QUANTITY < 0 
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND SA.SA_DATE <= IN_AS_OF_DATE
AND SA.REMARKS LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
COALESCE(CAPDI.UNIT_COST, 0) * CAPDI.QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1

UNION ALL

SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, COALESCE(CAPDI.UNIT_COST, 0) * CAPDI.QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4 
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, CAPDI.QUANTITY * CAPDI.SRP as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND (DISCOUNT IS NOT NULL || DISCOUNT != 0)
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
CAPDI.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAPD.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IA.ACTIVE = 1
AND IA.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
CPAL.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_AR_LINE CPAL
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CPAL.CAP_DELIVERY_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAPD.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IA.ACTIVE = 1
AND IA.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, CPAL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_AR_LINE CPAL
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CPAL.CAP_DELIVERY_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = CPAL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE CAPD.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4 
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - IS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-IS-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
COALESCE(CAPDI.UNIT_COST, 0) * CAPDI.QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - IS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-IS', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, COALESCE(CAPDI.UNIT_COST, 0) * CAPDI.QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4 
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - IS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-IS', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, CAPDI.QUANTITY * CAPDI.SRP as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - IS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-IS', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND (DISCOUNT IS NOT NULL || DISCOUNT != 0)
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - IS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME, 
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-IS', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
CAPDI.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAPD.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IA.ACTIVE = 1
AND IA.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - IS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-IS', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
CPAL.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_AR_LINE CPAL
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CPAL.CAP_DELIVERY_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAPD.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IA.ACTIVE = 1
AND IA.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - IS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-IS-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, CPAL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_AR_LINE CPAL
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CPAL.CAP_DELIVERY_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = CPAL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE CAPD.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4 
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3

UNION ALL


SELECT 'PROCESSING REPORT' as SOURCE, CONCAT(RMI.PR_RAW_MATERIALS_ITEM_ID, RMI.ITEM_ID) as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, PR.DATE as GL_DATE, CONCAT('PR ', SEQUENCE_NO) as REFERENCE_NUMBER, PR.REF_NUMBER AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM PR_RAW_MATERIALS_ITEM RMI
INNER JOIN PROCESSING_REPORT PR ON PR.PROCESSING_REPORT_ID = RMI.PROCESSING_REPORT_ID
INNER JOIN ITEM I ON I.ITEM_ID = RMI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = PR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON PR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND PR.DATE <= IN_AS_OF_DATE
AND PR.REF_NUMBER LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'PROCESSING REPORT' as SOURCE, CONCAT(OMI.PR_OTHER_MATERIALS_ITEM_ID, OMI.ITEM_ID) as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, PR.DATE as GL_DATE, CONCAT('PR ', SEQUENCE_NO) as REFERENCE_NUMBER, PR.REF_NUMBER AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM PR_OTHER_MATERIALS_ITEM OMI
INNER JOIN PROCESSING_REPORT PR ON PR.PROCESSING_REPORT_ID = OMI.PROCESSING_REPORT_ID
INNER JOIN ITEM I ON I.ITEM_ID = OMI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = PR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON PR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND PR.DATE <= IN_AS_OF_DATE
AND PR.REF_NUMBER LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'PROCESSING REPORT' as SOURCE, CONCAT(MP.PR_MAIN_PRODUCT_ID, MP.ITEM_ID) as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, PR.DATE as GL_DATE, CONCAT('PR ', SEQUENCE_NO) as REFERENCE_NUMBER, PR.REF_NUMBER AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM PR_MAIN_PRODUCT MP
INNER JOIN PROCESSING_REPORT PR ON PR.PROCESSING_REPORT_ID = MP.PROCESSING_REPORT_ID
INNER JOIN ITEM I ON I.ITEM_ID = MP.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = PR.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON PR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND PR.DATE <= IN_AS_OF_DATE
AND PR.REF_NUMBER LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'PROCESSING REPORT' as SOURCE, CONCAT(OC.PR_OTHER_CHARGE_ID, OC.AR_LINE_SETUP_ID) as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, PR.DATE as GL_DATE, CONCAT('PR ', SEQUENCE_NO) as REFERENCE_NUMBER, PR.REF_NUMBER AS DESCRIPTION,  0 AS DEBIT, OC.AMOUNT as CREDIT,
FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM PR_OTHER_CHARGE OC
INNER JOIN PROCESSING_REPORT PR ON PR.PROCESSING_REPORT_ID = OC.PROCESSING_REPORT_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = OC.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON PR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND PR.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND PR.DATE <= IN_AS_OF_DATE
AND PR.REF_NUMBER LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'WIP - SPECIAL ORDER' as SOURCE,CONCAT(WIPSOM.WIPSO_MATERIAL_ID, WIPSOM.ITEM_ID) as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.GL_DATE as GL_DATE, CONCAT('WIPSO ', SEQUENCE_NUMBER) as REFERENCE_NUMBER, ART.DESCRIPTION AS DESCRIPTION, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM WIPSO_MATERIAL WIPSOM
INNER JOIN WIP_SPECIAL_ORDER WIPSO ON WIPSO.WIP_SPECIAL_ORDER_ID = WIPSOM.WIP_SPECIAL_ORDER_ID
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = WIPSO.AR_TRANSACTION_ID
INNER JOIN ITEM I ON I.ITEM_ID = WIPSOM.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = WIPSO.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON WIPSO.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'WIP - SPECIAL ORDER' as SOURCE, CONCAT(WIPSOFP.WIPSO_FINISHED_PRODUCT_ID, WIPSOFP.ITEM_ID) as ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, ART.GL_DATE as GL_DATE, CONCAT('WIPSO ', SEQUENCE_NUMBER) as REFERENCE_NUMBER, ART.DESCRIPTION AS DESCRIPTION, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM WIPSO_FINISHED_PRODUCT WIPSOFP
INNER JOIN WIP_SPECIAL_ORDER WIPSO ON WIPSO.WIP_SPECIAL_ORDER_ID = WIPSOFP.WIP_SPECIAL_ORDER_ID
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = WIPSO.AR_TRANSACTION_ID
INNER JOIN ITEM I ON I.ITEM_ID = WIPSOFP.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = WIPSO.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON WIPSO.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND ART.TRANSACTION_DATE <= IN_AS_OF_DATE
AND ART.DESCRIPTION LIKE IN_DESCRIPTION 
AND FW.IS_COMPLETE = 1

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - AS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-AS-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
COALESCE(CAPDI.UNIT_COST, 0) * CAPDI.QUANTITY as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 4

UNION ALL

SELECT 'PAID IN ADVANCE DELIVERY - AS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-AS-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, COALESCE(CAPDI.UNIT_COST, 0) * CAPDI.QUANTITY as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 4

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - AS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-AS-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, CAPDI.QUANTITY * CAPDI.SRP as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 4

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - AS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-AS-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND (DISCOUNT IS NOT NULL || DISCOUNT != 0)
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 4

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - AS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-AS-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
CAPDI.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAPD.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IA.ACTIVE = 1
AND IA.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 4

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - AS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-AS-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
CPAL.AMOUNT as DEBIT, 0 as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_AR_LINE CPAL
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CPAL.CAP_DELIVERY_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAPD.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IA.ACTIVE = 1
AND IA.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 4

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY - AS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID, AC.COMPANY_ID, AC.DIVISION_ID, AC.ACCOUNT_ID, D.NUMBER AS DIVISION_NO, D.NAME AS DIVISION_NAME,
A.NUMBER as ACCT_NO, A.ACCOUNT_NAME, CAPD.DELIVERY_DATE AS GL_DATE, CONCAT('PIAD-AS-', CAPD.CAPD_NUMBER) as REFERENCE_NUMBER, CAPD.SALES_INVOICE_NO AS DESCRIPTION,
0 as DEBIT, CPAL.AMOUNT as CREDIT, FW.FORM_WORKFLOW_ID, FW.CURRENT_STATUS_ID, FW.IS_COMPLETE, FW.IS_COMPLETE as IS_POSTED
FROM CAP_DELIVERY_AR_LINE CPAL
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CPAL.CAP_DELIVERY_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = CPAL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE CAPD.COMPANY_ID = AC.COMPANY_ID
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND D.NUMBER BETWEEN IN_FROM_DIVISION AND IN_TO_DIVISION
AND (CASE WHEN IN_ACCOUNT_ID = -1 THEN AC.ACCOUNT_ID != IN_ACCOUNT_ID
	ELSE AC.ACCOUNT_ID = IN_ACCOUNT_ID END)
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND CAPD.SALES_INVOICE_NO LIKE IN_DESCRIPTION
AND FW.IS_COMPLETE = 1
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 4
) as BEGINNING_BALANCE;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GET_BOOK_BALANCE` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_BOOK_BALANCE`(IN IN_BANK_ACCT_ID INT, IN IN_COMPANY_ID INT, IN IN_ACCOUNT_ID INT, 
	IN IN_AS_OF_DATE DATE)
BEGIN

SELECT ACCOUNT_ID, SUM(DEBIT) as TOTAL_DEBIT, SUM(CREDIT) as TOTAL_CREDIT FROM (

SELECT 'GENERAL LEDGER' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, GLE.AMOUNT as DEBIT, 0 as CREDIT
FROM GL_ENTRY GLE 
INNER JOIN GENERAL_LEDGER GL ON GL.GENERAL_LEDGER_ID = GLE.GENERAL_LEDGER_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = GLE.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON GL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IS_DEBIT = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND GL.GL_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4

UNION ALL 

SELECT 'GENERAL LEDGER' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 0 as DEBIT, GLE.AMOUNT as CREDIT
FROM GL_ENTRY GLE
INNER JOIN GENERAL_LEDGER GL ON GL.GENERAL_LEDGER_ID = GLE.GENERAL_LEDGER_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = GLE.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON GL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IS_DEBIT = 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND GL.GL_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'AP INVOICE' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 0 as DEBIT, AI.AMOUNT as CREDIT
FROM AP_INVOICE AI 
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AI.AMOUNT >= 0
AND AI.INVOICE_TYPE_ID != 5 AND AI.INVOICE_TYPE_ID != 6 AND AI.INVOICE_TYPE_ID != 7 AND AI.INVOICE_TYPE_ID != 8
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4

UNION ALL

SELECT 'AP INVOICE' as SOURCE, A.ACCOUNT_ID,  A.ACCOUNT_NAME, -AI.AMOUNT as DEBIT, 0 as CREDIT
FROM AP_INVOICE AI 
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AI.AMOUNT < 0
AND AI.INVOICE_TYPE_ID != 5 AND AI.INVOICE_TYPE_ID != 6 AND AI.INVOICE_TYPE_ID != 7 AND AI.INVOICE_TYPE_ID != 8
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4
UNION ALL



SELECT 'AP INVOICE' as SOURCE, A.ACCOUNT_ID,  A.ACCOUNT_NAME, AL.AMOUNT AS DEBIT, 0 as CREDIT
FROM AP_LINE AL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = AL.AP_INVOICE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = AL.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AL.AMOUNT >= 0
AND AI.INVOICE_TYPE_ID != 5 AND AI.INVOICE_TYPE_ID != 6 AND AI.INVOICE_TYPE_ID != 7 AND AI.INVOICE_TYPE_ID != 8
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4
UNION ALL 

SELECT 'AP INVOICE' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 0 AS DEBIT, -AL.AMOUNT as CREDIT
FROM AP_LINE AL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = AL.AP_INVOICE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = AL.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AL.AMOUNT < 0
AND AI.INVOICE_TYPE_ID != 5 AND AI.INVOICE_TYPE_ID != 6 AND AI.INVOICE_TYPE_ID != 7 AND AI.INVOICE_TYPE_ID != 8
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4
UNION ALL



SELECT 'AP PAYMENT' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 0 AS DEBIT, AI.PAID_AMOUNT as CREDIT
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID=AP.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AP_INVOICE API ON API.AP_INVOICE_ID = AI.AP_INVOICE_ID 
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AP.AMOUNT != 0
AND AI.PAID_AMOUNT > 0
AND AP.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AP.CHECK_DATE <= IN_AS_OF_DATE
AND BA.BANK_ACCOUNT_ID = IN_BANK_ACCT_ID

UNION ALL

SELECT 'AP PAYMENT' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, -AI.PAID_AMOUNT AS DEBIT, 0 as CREDIT
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID=AP.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AP_INVOICE API ON API.AP_INVOICE_ID = AI.AP_INVOICE_ID
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AP.AMOUNT != 0
AND AI.PAID_AMOUNT < 0
AND AP.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AP.CHECK_DATE <= IN_AS_OF_DATE
AND BA.BANK_ACCOUNT_ID = IN_BANK_ACCT_ID

UNION ALL

SELECT 'AP PAYMENT' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 0 AS DEBIT, -AI.PAID_AMOUNT as CREDIT
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AP.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AP_INVOICE API ON API.AP_INVOICE_ID = AI.AP_INVOICE_ID 
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AI.PAID_AMOUNT < 0
AND AP.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AP.CHECK_DATE <= IN_AS_OF_DATE

UNION ALL


SELECT 'AP PAYMENT' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, AI.PAID_AMOUNT AS DEBIT, 0 as CREDIT
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AP.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AP_INVOICE API ON API.AP_INVOICE_ID = AI.AP_INVOICE_ID 
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AI.PAID_AMOUNT >= 0
AND AP.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AP.CHECK_DATE <= IN_AS_OF_DATE

UNION ALL


SELECT 'AR MISCELLANEOUS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, AM.AMOUNT AS DEBIT, 0 as CREDIT
FROM AR_MISCELLANEOUS AM
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AM.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND RM.DEBIT_ACCOUNT_COMBINATION_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AM.MATURITY_DATE <= IN_AS_OF_DATE


UNION ALL 
SELECT 'AR MISCELLANEOUS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, AM.AMOUNT AS DEBIT, 0 as CREDIT
FROM AR_MISCELLANEOUS AM
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AM.RECEIPT_METHOD_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND RM.BANK_ACCOUNT_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AM.MATURITY_DATE <= IN_AS_OF_DATE
AND BA.BANK_ACCOUNT_ID = IN_BANK_ACCT_ID

UNION ALL

SELECT 'AR MISCELLANEOUS' as SOURCE,  A.ACCOUNT_ID, A.ACCOUNT_NAME, -AML.AMOUNT AS DEBIT, 0 as CREDIT
FROM AR_MISCELLANEOUS_LINE AML
INNER JOIN AR_MISCELLANEOUS AM ON AM.AR_MISCELLANEOUS_ID = AML.AR_MISCELLANEOUS_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AML.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AML.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AM.MATURITY_DATE <= IN_AS_OF_DATE

UNION ALL

SELECT 'AR MISCELLANEOUS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 0 AS DEBIT, AML.AMOUNT as CREDIT
FROM AR_MISCELLANEOUS_LINE AML
INNER JOIN AR_MISCELLANEOUS AM ON AM.AR_MISCELLANEOUS_ID = AML.AR_MISCELLANEOUS_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AML.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AML.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AM.MATURITY_DATE <= IN_AS_OF_DATE

UNION ALL


SELECT 'AR TRANSACTION' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, AT.AMOUNT AS DEBIT, 0 as CREDIT
FROM AR_TRANSACTION AT
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AT.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AT.AMOUNT >= 0
AND AT.AR_TRANSACTION_TYPE_ID != 4 AND AT.AR_TRANSACTION_TYPE_ID != 5
AND AT.AR_TRANSACTION_TYPE_ID != 7
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AT.GL_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4
UNION ALL

SELECT 'AR TRANSACTION' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 0 AS DEBIT, -AT.AMOUNT as CREDIT
FROM AR_TRANSACTION AT
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AT.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AT.AMOUNT < 0
AND AT.AR_TRANSACTION_TYPE_ID != 4 AND AT.AR_TRANSACTION_TYPE_ID != 5
AND AT.AR_TRANSACTION_TYPE_ID != 7 AND AT.AR_TRANSACTION_TYPE_ID != 8 AND AT.AR_TRANSACTION_TYPE_ID != 9
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AT.GL_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4
UNION ALL


SELECT 'AR TRANSACTION' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 0 AS DEBIT, AL.AMOUNT as CREDIT
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID=AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AL.AMOUNT >= 0
AND AT.AR_TRANSACTION_TYPE_ID != 4 AND AT.AR_TRANSACTION_TYPE_ID != 5
AND AT.AR_TRANSACTION_TYPE_ID != 7 AND AT.AR_TRANSACTION_TYPE_ID != 8 AND AT.AR_TRANSACTION_TYPE_ID != 9
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AT.GL_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4
UNION ALL

SELECT 'AR TRANSACTION' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, -AL.AMOUNT AS DEBIT, 0 as CREDIT
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID=AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AL.AMOUNT < 0
AND AT.AR_TRANSACTION_TYPE_ID != 4 AND AT.AR_TRANSACTION_TYPE_ID != 5
AND AT.AR_TRANSACTION_TYPE_ID != 7 AND AT.AR_TRANSACTION_TYPE_ID != 8 AND AT.AR_TRANSACTION_TYPE_ID != 9
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AT.GL_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4
UNION ALL






SELECT 'AR RECEIPT' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, AR.AMOUNT AS DEBIT, 0 as CREDIT
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND RM.DEBIT_ACCOUNT_COMBINATION_ID IS NOT NULL
AND AR.AMOUNT != 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE


UNION ALL
SELECT 'AR RECEIPT' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, AR.AMOUNT AS DEBIT, 0 as CREDIT
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.AMOUNT != 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE
AND BA.BANK_ACCOUNT_ID = IN_BANK_ACCT_ID

UNION ALL




SELECT 'AR RECEIPT' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 0 AS DEBIT, AR.AMOUNT as CREDIT
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.AMOUNT != 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE

UNION ALL




SELECT 'AR RECEIPT' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, ART.AMOUNT AS DEBIT, 0 as CREDIT
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE

UNION ALL

SELECT 'AR RECEIPT' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 0 AS DEBIT, -ART.AMOUNT as CREDIT
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE

UNION ALL




SELECT 'AR RECEIPT' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 0 AS DEBIT, ART.AMOUNT as CREDIT
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE

UNION ALL

SELECT 'AR RECEIPT' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, -ART.AMOUNT AS DEBIT, 0 as CREDIT
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE

UNION ALL


SELECT 'AR RECEIPT' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, ACL.AMOUNT AS DEBIT, 0 as CREDIT
FROM AC_AR_LINE ACL
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ACL.AR_RECEIPT_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = ACL.AR_LINE_SETUP_ID 
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE

UNION ALL


SELECT 'AR RECEIPT' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 0 AS DEBIT, ACL.AMOUNT as CREDIT
FROM AC_AR_LINE ACL
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ACL.AR_RECEIPT_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = ACL.AR_LINE_SETUP_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = AR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE <= IN_AS_OF_DATE

UNION ALL


SELECT 'CASH SALES' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND CS.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=1

UNION ALL


SELECT 'CASH SALES - WHOLESALE' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND CS.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=2

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND CS.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=3

UNION ALL


SELECT 'CASH SALES' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND CS.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=1

UNION ALL


SELECT 'CASH SALES - WHOLESALE' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND CS.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=2

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE,  A.ACCOUNT_ID, A.ACCOUNT_NAME, 0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND CS.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=3

UNION ALL


SELECT 'CASH SALES' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 0 AS DEBIT, QUANTITY * SRP as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND CS.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=1

UNION ALL


SELECT 'CASH SALES - WHOLESALE' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 0 AS DEBIT, QUANTITY * SRP as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND CS.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=2

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 0 AS DEBIT, QUANTITY * SRP as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND CS.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=3

UNION ALL


SELECT 'CASH SALES' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND CS.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=1 

UNION ALL


SELECT 'CASH SALES - WHOLESALE' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND CS.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=2

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AC.DIVISION_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND CS.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CS.CASH_SALE_TYPE_ID=3

UNION ALL


SELECT 'CASH SALES' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, CSI.AMOUNT AS DEBIT, 0 as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.CASH_SALE_TYPE_ID=1

UNION ALL


SELECT 'CASH SALES - WHOLESALE' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, CSI.AMOUNT AS DEBIT, 0 as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.CASH_SALE_TYPE_ID=2

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, CSI.AMOUNT AS DEBIT, 0 as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.CASH_SALE_TYPE_ID=3

UNION ALL


SELECT 'CASH SALES' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, AL.AMOUNT AS DEBIT, 0 as CREDIT
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.CASH_SALE_TYPE_ID=1

UNION ALL


SELECT 'CASH SALES - WHOLESALE' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, AL.AMOUNT AS DEBIT, 0 as CREDIT
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.CASH_SALE_TYPE_ID=2

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, AL.AMOUNT AS DEBIT, 0 as CREDIT
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.CASH_SALE_TYPE_ID=3

UNION ALL


SELECT 'CASH SALES' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, AMOUNT AS DEBIT, 0 as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND BA.BANK_ACCOUNT_ID = IN_BANK_ACCT_ID
AND CS.CASH_SALE_TYPE_ID=1

UNION ALL


SELECT 'CASH SALES - WHOLESALE' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, AMOUNT AS DEBIT, 0 as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND BA.BANK_ACCOUNT_ID = IN_BANK_ACCT_ID
AND CS.CASH_SALE_TYPE_ID=2

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, AMOUNT AS DEBIT, 0 as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND BA.BANK_ACCOUNT_ID = IN_BANK_ACCT_ID
AND CS.CASH_SALE_TYPE_ID=3

UNION ALL


SELECT 'CASH SALES' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 0 AS DEBIT, AL.AMOUNT as CREDIT
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.CASH_SALE_TYPE_ID=1

UNION ALL 


SELECT 'CASH SALES - WHOLESALE' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 0 AS DEBIT, AL.AMOUNT as CREDIT
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.CASH_SALE_TYPE_ID=2

UNION ALL


SELECT 'CASH SALES - IS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 0 AS DEBIT, AL.AMOUNT as CREDIT
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CS.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CS.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CS.RECEIPT_DATE <= IN_AS_OF_DATE
AND CS.CASH_SALE_TYPE_ID=3

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 4 
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 14 
AND FW.CURRENT_STATUS_ID != 4

UNION ALL 


SELECT 'ACCOUNT SALES - WHOLESALE' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES - IS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 14
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES - WHOLESALE' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES - IS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4

UNION ALL

SELECT 'ACCOUNT SALES' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, QUANTITY * SRP as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4

UNION ALL

SELECT 'ACCOUNT SALES' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, QUANTITY * SRP as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 14
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES - WHOLESALE' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, QUANTITY * SRP as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES - IS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, QUANTITY * SRP as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 14
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES - WHOLESALE' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES - IS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
ASI.AMOUNT as DEBIT, 0 as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 4 
AND ART.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
ASI.AMOUNT as DEBIT, 0 as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 14 
AND ART.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES - WHOLESALE' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
ASI.AMOUNT as DEBIT, 0 as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 8
AND ART.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES - IS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
ASI.AMOUNT as DEBIT, 0 as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 10
AND ART.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
AL.AMOUNT as DEBIT, 0 as CREDIT
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 4
AND ART.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
AL.AMOUNT as DEBIT, 0 as CREDIT
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 14
AND ART.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES - WHOLESALE' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME,
AL.AMOUNT as DEBIT, 0 as CREDIT
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 8
AND ART.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES - IS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
AL.AMOUNT as DEBIT, 0 as CREDIT
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 10
AND ART.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, AL.AMOUNT as CREDIT
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 4
AND ART.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, AL.AMOUNT as CREDIT
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 14
AND ART.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES - WHOLESALE' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, AL.AMOUNT as CREDIT
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 8
AND ART.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES - IS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, AL.AMOUNT as CREDIT
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 10
AND ART.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'RECEIVING REPORT' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT
FROM R_RECEIVING_REPORT_ITEM RRI
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN ITEM I ON I.ITEM_ID = RRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = RR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
AND UNIT_COST IS NOT NULL
AND AI.INVOICE_TYPE_ID = 5
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'RECEIVING REPORT' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT
FROM R_RECEIVING_REPORT_ITEM RRI
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RR.AP_INVOICE_ID
INNER JOIN SUPPLIER_ACCOUNT SPA ON SPA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = SPA.DEFAULT_CREDIT_AC_ID AND AC.COMPANY_ID = RR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE UNIT_COST IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
AND AI.INVOICE_TYPE_ID = 5
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'RECEIVING REPORT' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME,
0 AS DEBIT, APL.AMOUNT AS CREDIT
FROM AP_INVOICE_LINE APL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = APL.AP_INVOICE_ID
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = APL.AP_INVOICE_ID
INNER JOIN SUPPLIER_ACCOUNT SPA ON SPA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = SPA.DEFAULT_CREDIT_AC_ID AND AC.COMPANY_ID = RR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
AND AI.INVOICE_TYPE_ID = 5

UNION ALL


SELECT 'RECEIVING REPORT' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
APL.AMOUNT AS DEBIT, 0 as CREDIT
FROM AP_INVOICE_LINE APL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = APL.AP_INVOICE_ID
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = APL.AP_INVOICE_ID
INNER JOIN AP_LINE_SETUP ALS ON ALS.AP_LINE_SETUP_ID = APL.AP_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
AND AI.INVOICE_TYPE_ID = 5
AND ALS.ACTIVE = 1

UNION ALL


SELECT 'RECEIVING REPORT - RM' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
RRMI.AMOUNT as DEBIT, 0 as CREDIT
FROM R_RECEIVING_REPORT_ITEM RRI
INNER JOIN R_RECEIVING_REPORT_RM_ITEM RRMI ON RRMI.R_RECEIVING_REPORT_ITEM_ID = RRI.R_RECEIVING_REPORT_ITEM_ID
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN ITEM I ON I.ITEM_ID = RRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = RR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
AND UNIT_COST IS NOT NULL
AND AI.INVOICE_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'RECEIVING REPORT - RM' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
APL.AMOUNT AS DEBIT, 0 as CREDIT
FROM AP_INVOICE_LINE APL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = APL.AP_INVOICE_ID
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = APL.AP_INVOICE_ID
INNER JOIN AP_LINE_SETUP ALS ON ALS.AP_LINE_SETUP_ID = APL.AP_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
AND AI.INVOICE_TYPE_ID = 8
AND ALS.ACTIVE = 1

UNION ALL


SELECT 'RECEIVING REPORT - RM' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, AI.AMOUNT as CREDIT
FROM AP_INVOICE AI
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = AI.AP_INVOICE_ID
INNER JOIN SUPPLIER_ACCOUNT SPA ON SPA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = SPA.DEFAULT_CREDIT_AC_ID AND AC.COMPANY_ID = RR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE AI.INVOICE_TYPE_ID = 8
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'RETURN TO SUPPLIER' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, COALESCE(RTSI.UNIT_COST, 0) * RTSI.QUANTITY as CREDIT
FROM R_RETURN_TO_SUPPLIER_ITEM RTSI
INNER JOIN R_RETURN_TO_SUPPLIER RTS ON RTS.AP_INVOICE_ID = RTSI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RTS.AP_INVOICE_ID
INNER JOIN R_RECEIVING_REPORT_ITEM RRI ON RRI.R_RECEIVING_REPORT_ITEM_ID = RTSI.R_RECEIVING_REPORT_ITEM_ID
INNER JOIN AP_INVOICE RRAI ON RRAI.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN ITEM I ON I.ITEM_ID = RTSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = RTS.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND RTSI.UNIT_COST IS NOT NULL
AND AI.INVOICE_TYPE_ID = 6
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'RETURN TO SUPPLIER' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
COALESCE(RTSI.UNIT_COST, 0) * RTSI.QUANTITY as DEBIT, 0 as CREDIT
FROM R_RETURN_TO_SUPPLIER_ITEM RTSI
INNER JOIN R_RETURN_TO_SUPPLIER RTS ON RTS.AP_INVOICE_ID = RTSI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RTS.AP_INVOICE_ID
INNER JOIN R_RECEIVING_REPORT_ITEM RRI ON RRI.R_RECEIVING_REPORT_ITEM_ID = RTSI.R_RECEIVING_REPORT_ITEM_ID
INNER JOIN AP_INVOICE RRAI ON RRAI.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN SUPPLIER_ACCOUNT SPA ON SPA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = SPA.DEFAULT_CREDIT_AC_ID AND AC.COMPANY_ID = RTS.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE RTSI.UNIT_COST IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
AND AI.INVOICE_TYPE_ID = 6
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'RTS - EB' as SOURCE, A.ACCOUNT_ID, 0 as DEBIT, A.ACCOUNT_NAME, 
COALESCE(RTSI.UNIT_COST, 0) * RTSI.QUANTITY as CREDIT
FROM R_RETURN_TO_SUPPLIER_ITEM RTSI
INNER JOIN R_RETURN_TO_SUPPLIER RTS ON RTS.AP_INVOICE_ID = RTSI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RTS.AP_INVOICE_ID
INNER JOIN ITEM I ON I.ITEM_ID = RTSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = RTS.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
AND RTSI.UNIT_COST IS NOT NULL
AND AI.INVOICE_TYPE_ID = 7
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'RTS - EB' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
COALESCE(RTSI.UNIT_COST, 0) * RTSI.QUANTITY as DEBIT, 0 as CREDIT
FROM R_RETURN_TO_SUPPLIER_ITEM RTSI
INNER JOIN R_RETURN_TO_SUPPLIER RTS ON RTS.AP_INVOICE_ID = RTSI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RTS.AP_INVOICE_ID
INNER JOIN SUPPLIER_ACCOUNT SPA ON SPA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = SPA.DEFAULT_CREDIT_AC_ID AND AC.COMPANY_ID = RTS.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE RTSI.UNIT_COST IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE <= IN_AS_OF_DATE
AND AI.INVOICE_TYPE_ID = 7
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CSR.DATE <= IN_AS_OF_DATE
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=1

UNION ALL


SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CSR.DATE <= IN_AS_OF_DATE
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=2

UNION ALL


SELECT 'CASH SALES RETURN - IS' as SOURCE, AC.ACCOUNT_ID, A.ACCOUNT_NAME, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CSR.DATE <= IN_AS_OF_DATE
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=3

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CSR.DATE <= IN_AS_OF_DATE
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=1

UNION ALL


SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CSR.DATE <= IN_AS_OF_DATE
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=2

UNION ALL


SELECT 'CASH SALES RETURN - IS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CSR.DATE <= IN_AS_OF_DATE
AND UNIT_COST IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=3

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, (QUANTITY * SRP) as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID=1

UNION ALL


SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, (QUANTITY * SRP) as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 2

UNION ALL


SELECT 'CASH SALES RETURN - IS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, (QUANTITY * SRP) as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CSR.DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 3

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 AS DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CSR.DATE <= IN_AS_OF_DATE
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 1

UNION ALL


SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 AS DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CSR.DATE <= IN_AS_OF_DATE
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 2

UNION ALL


SELECT 'CASH SALES RETURN - IS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 AS DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CSR.DATE <= IN_AS_OF_DATE
AND DISCOUNT IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4
AND CSR.CASH_SALE_TYPE_ID = 3

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
AMOUNT as DEBIT, 0 as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CSR.DATE <= IN_AS_OF_DATE
AND CSR.CASH_SALE_TYPE_ID = 1

UNION ALL


SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
AMOUNT as DEBIT, 0 as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CSR.DATE <= IN_AS_OF_DATE
AND CSR.CASH_SALE_TYPE_ID = 2

UNION ALL


SELECT 'CASH SALES RETURN - IS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME,
AMOUNT as DEBIT, 0 as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CSR.DATE <= IN_AS_OF_DATE
AND CSR.CASH_SALE_TYPE_ID = 3

UNION ALL


SELECT 'CASH SALES RETURN' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
AMOUNT as DEBIT, 0 as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CSR.DATE <= IN_AS_OF_DATE
AND BA.BANK_ACCOUNT_ID = IN_BANK_ACCT_ID
AND CSR.CASH_SALE_TYPE_ID = 1

UNION ALL 


SELECT 'CASH SALES RETURN - WHOLESALE' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
AMOUNT as DEBIT, 0 as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CSR.DATE <= IN_AS_OF_DATE
AND BA.BANK_ACCOUNT_ID = IN_BANK_ACCT_ID
AND CSR.CASH_SALE_TYPE_ID = 2

UNION ALL


SELECT 'CASH SALES RETURN - IS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
AMOUNT as DEBIT, 0 as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CSR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CSR.DATE <= IN_AS_OF_DATE
AND BA.BANK_ACCOUNT_ID = IN_BANK_ACCT_ID
AND CSR.CASH_SALE_TYPE_ID = 3

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ASR.GL_DATE <= IN_AS_OF_DATE
AND ASR.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES RETURN - WHOLESALE' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 9
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ASR.GL_DATE <= IN_AS_OF_DATE
AND ASR.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES RETURN - IS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 11
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ASR.GL_DATE <= IN_AS_OF_DATE
AND ASR.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 5
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ASR.GL_DATE <= IN_AS_OF_DATE
AND ASR.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES RETURN - WHOLESALE' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 9 
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ASR.GL_DATE <= IN_AS_OF_DATE
AND ASR.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES RETURN - IS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 11
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ASR.GL_DATE <= IN_AS_OF_DATE
AND ASR.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, (QUANTITY * SRP) as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 5 
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ASR.GL_DATE <= IN_AS_OF_DATE
AND ASR.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES RETURN - WHOLESALE' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, (QUANTITY * SRP) as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ASR.GL_DATE <= IN_AS_OF_DATE
AND ASR.AR_TRANSACTION_TYPE_ID = 9
AND ASR.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES RETURN - IS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME,
0 as DEBIT, (QUANTITY * SRP) as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ASR.GL_DATE <= IN_AS_OF_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 11
AND ASR.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME,
0 as DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ASR.GL_DATE <= IN_AS_OF_DATE
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 5 
AND ASR.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES RETURN - WHOLESALE' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME,
0 as DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ASR.GL_DATE <= IN_AS_OF_DATE
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 9
AND ASR.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES RETURN - IS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME,
0 as DEBIT, COALESCE(-DISCOUNT, 0) as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ASR.GL_DATE <= IN_AS_OF_DATE
AND DISCOUNT IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 11
AND ASR.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES RETURN' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
ASI.AMOUNT as DEBIT, 0 as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 5 
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ASR.GL_DATE <= IN_AS_OF_DATE
AND ASR.AR_TRANSACTION_TYPE_ID = 4
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ACCOUNT SALES RETURN - WHOLESALE' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
ASI.AMOUNT as DEBIT, 0 as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 9
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ASR.GL_DATE <= IN_AS_OF_DATE
AND ASR.AR_TRANSACTION_TYPE_ID = 8
AND FW.CURRENT_STATUS_ID != 4

UNION ALL 


SELECT 'ACCOUNT SALES RETURN - IS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME,
ASI.AMOUNT as DEBIT, 0 as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 11
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ASR.GL_DATE <= IN_AS_OF_DATE
AND ASR.AR_TRANSACTION_TYPE_ID = 10
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ASR - EB' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 7
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'ASR - EB' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND UNIT_COST IS NOT NULL
AND ART.AR_TRANSACTION_TYPE_ID = 7
AND FW.CURRENT_STATUS_ID != 4
UNION ALL


SELECT 'ASR - EB' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME,
(QUANTITY * SRP) as DEBIT,  0 as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 7
AND FW.CURRENT_STATUS_ID != 4


UNION ALL


SELECT 'ASR - EB' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, (QUANTITY * SRP) as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID AND AC.COMPANY_ID = ART.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ART.AR_TRANSACTION_TYPE_ID = 7
AND AC.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.GL_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
AMOUNT as DEBIT, 0 as CREDIT
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
WHERE CAP.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE

UNION ALL


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
CAL.AMOUNT as DEBIT, 0 as CREDIT
FROM CAP_AR_LINE CAL
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAL.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
WHERE CAP.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE

UNION ALL 


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
AMOUNT as DEBIT, 0 as CREDIT
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
WHERE CAP.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE
AND BA.BANK_ACCOUNT_ID = IN_BANK_ACCT_ID

UNION ALL 


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME,
CAL.AMOUNT as DEBIT, 0 as CREDIT
FROM CAP_AR_LINE CAL
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAL.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
WHERE CAP.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE
AND BA.BANK_ACCOUNT_ID = IN_BANK_ACCT_ID

UNION ALL 


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, AMOUNT as CREDIT
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
WHERE CAP.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE

UNION ALL 


SELECT 'CUSTOMER ADVANCE PAYMENT' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, CAL.AMOUNT as CREDIT
FROM CAP_AR_LINE CAL
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAL.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAP.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
WHERE CAP.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CAP.RECEIPT_DATE <= IN_AS_OF_DATE

UNION ALL


SELECT 'STOCK ADJUSTMENT IN' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ITEM I ON I.ITEM_ID = SAI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND SA.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND SA.SA_DATE <= IN_AS_OF_DATE
AND QUANTITY > 0
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NULL
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'STOCK ADJUSTMENT IN - IS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME,
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ITEM I ON I.ITEM_ID = SAI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND SA.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND SA.SA_DATE <= IN_AS_OF_DATE
AND QUANTITY > 0
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'STOCK ADJUSTMENT IN' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = SAT.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE QUANTITY > 0
AND SA.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND SA.SA_DATE <= IN_AS_OF_DATE
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NULL
AND FW.CURRENT_STATUS_ID != 4

UNION ALL 


SELECT 'STOCK ADJUSTMENT IN - IS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME,
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = SAT.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE QUANTITY > 0
AND SA.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND SA.SA_DATE <= IN_AS_OF_DATE
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4

UNION ALL 


SELECT 'STOCK ADJUSTMENT OUT' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
COALESCE(UNIT_COST, 0) * -QUANTITY as DEBIT, 0 as CREDIT
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = SAT.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE QUANTITY < 0
AND SA.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND SA.SA_DATE <= IN_AS_OF_DATE
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NULL
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'STOCK ADJUSTMENT OUT - IS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
COALESCE(UNIT_COST, 0) * -QUANTITY as DEBIT, 0 as CREDIT
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = SAT.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE QUANTITY < 0
AND SA.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND SA.SA_DATE <= IN_AS_OF_DATE
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'STOCK ADJUSTMENT OUT' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * -QUANTITY as CREDIT
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ITEM I ON I.ITEM_ID = SAI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND QUANTITY < 0 
AND SA.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND SA.SA_DATE <= IN_AS_OF_DATE
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NULL
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'STOCK ADJUSTMENT OUT - IS' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * -QUANTITY as CREDIT
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ITEM I ON I.ITEM_ID = SAI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = SA.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND QUANTITY < 0 
AND SA.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND SA.SA_DATE <= IN_AS_OF_DATE
AND UNIT_COST IS NOT NULL AND SAI.EB_OBJECT_ID IS NOT NULL
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME,
COALESCE(CAPDI.UNIT_COST, 0) * CAPDI.QUANTITY as DEBIT, 0 as CREDIT
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND CAPD.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4

UNION ALL

SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME,
0 as DEBIT, COALESCE(CAPDI.UNIT_COST, 0) * CAPDI.QUANTITY as CREDIT
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND CAPD.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4 

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME,
0 as DEBIT, CAPDI.QUANTITY * CAPDI.SRP as CREDIT
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND CAPD.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME,
0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID 
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND CAPD.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4
AND (DISCOUNT IS NOT NULL || DISCOUNT != 0)

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME,
CAPDI.AMOUNT as DEBIT, 0 as CREDIT
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAPD.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IA.ACTIVE = 1
AND IA.COMPANY_ID = AC.COMPANY_ID
AND CAPD.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME,
CPAL.AMOUNT as DEBIT, 0 as CREDIT
FROM CAP_DELIVERY_AR_LINE CPAL
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CPAL.CAP_DELIVERY_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAPD.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IA.ACTIVE = 1
AND IA.COMPANY_ID = AC.COMPANY_ID
AND CAPD.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME,
0 as DEBIT, CPAL.AMOUNT as CREDIT
FROM CAP_DELIVERY_AR_LINE CPAL
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CPAL.CAP_DELIVERY_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = CPAL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON 
(AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID AND AC.COMPANY_ID = CAPD.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAPD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE CAPD.COMPANY_ID = AC.COMPANY_ID
AND CAPD.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND CAPD.DELIVERY_DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4 

UNION ALL


SELECT 'PROCESSING REPORT' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT
FROM PR_RAW_MATERIALS_ITEM RMI
INNER JOIN PROCESSING_REPORT PR ON PR.PROCESSING_REPORT_ID = RMI.PROCESSING_REPORT_ID
INNER JOIN ITEM I ON I.ITEM_ID = RMI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = PR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON PR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND PR.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND PR.DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'PROCESSING REPORT' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT
FROM PR_OTHER_MATERIALS_ITEM OMI
INNER JOIN PROCESSING_REPORT PR ON PR.PROCESSING_REPORT_ID = OMI.PROCESSING_REPORT_ID
INNER JOIN ITEM I ON I.ITEM_ID = OMI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = PR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON PR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND PR.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND PR.DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'PROCESSING REPORT' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 
COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT
FROM PR_MAIN_PRODUCT MP
INNER JOIN PROCESSING_REPORT PR ON PR.PROCESSING_REPORT_ID = MP.PROCESSING_REPORT_ID
INNER JOIN ITEM I ON I.ITEM_ID = MP.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON
(AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT AND AC.COMPANY_ID = PR.COMPANY_ID)
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON PR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = AC.COMPANY_ID
AND PR.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND PR.DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4

UNION ALL


SELECT 'PROCESSING REPORT' as SOURCE, A.ACCOUNT_ID, A.ACCOUNT_NAME, 0 AS DEBIT, OC.AMOUNT as CREDIT
FROM PR_OTHER_CHARGE OC
INNER JOIN PROCESSING_REPORT PR ON PR.PROCESSING_REPORT_ID = OC.PROCESSING_REPORT_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = OC.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON PR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND PR.COMPANY_ID = AC.COMPANY_ID
AND PR.COMPANY_ID = IN_COMPANY_ID
AND A.ACCOUNT_ID = IN_ACCOUNT_ID
AND PR.DATE <= IN_AS_OF_DATE
AND FW.CURRENT_STATUS_ID != 4)
AS BOOK_BALANCE;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GET_CONTRA_ACCOUNT` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_CONTRA_ACCOUNT`(IN IN_COMPANY_ID INT, IN IN_ACCOUNT_ID INT, 
IN IN_FROM_GL_DATE DATE, IN IN_TO_GL_DATE DATE)
BEGIN 


SELECT A.ACCOUNT_ID, A.ACCOUNT_NAME, sum(DEBIT) as DEBIT, sum(CREDIT) as CREDIT FROM (
SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(GLE.AMOUNT) as DEBIT, 0 as CREDIT
FROM GL_ENTRY GLE
INNER JOIN GENERAL_LEDGER GL ON GL.GENERAL_LEDGER_ID = GLE.GENERAL_LEDGER_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = GLE.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = GL.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FWL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID !=4 
AND FWL.FORM_STATUS_ID=6
AND IS_DEBIT = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID

AND GL.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID

UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 as DEBIT, SUM(GLE.AMOUNT) as CREDIT
FROM GL_ENTRY GLE
INNER JOIN GENERAL_LEDGER GL ON GL.GENERAL_LEDGER_ID = GLE.GENERAL_LEDGER_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = GLE.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON GL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 6
AND IS_DEBIT = 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID

AND GL.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 as DEBIT, SUM(AI.AMOUNT) as CREDIT
FROM AP_INVOICE AI 
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 3
AND AI.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(-AI.AMOUNT) as DEBIT, 0 as CREDIT
FROM AP_INVOICE AI 
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 3
AND AI.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL



SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(AL.AMOUNT) AS DEBIT, 0 as CREDIT 
FROM AP_LINE AL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = AL.AP_INVOICE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = AL.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 3
AND AL.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL 

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(-AL.AMOUNT) as CREDIT 
FROM AP_LINE AL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = AL.AP_INVOICE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = AL.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 3
AND AL.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL


SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(AP.AMOUNT) as CREDIT 
FROM AP_PAYMENT AP
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID=AP.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AP.AMOUNT != 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AP.CHECK_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(-AI.PAID_AMOUNT) as CREDIT
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AP.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AI.PAID_AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AP.CHECK_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL


SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(AI.PAID_AMOUNT) AS DEBIT, 0 as CREDIT
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AP.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AI.PAID_AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AP.CHECK_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL


SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(AM.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_MISCELLANEOUS AM
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AM.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND RM.DEBIT_ACCOUNT_COMBINATION_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AM.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID

UNION ALL 
SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(AM.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_MISCELLANEOUS AM
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AM.RECEIPT_METHOD_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND RM.BANK_ACCOUNT_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AM.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(-AML.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_MISCELLANEOUS_LINE AML
INNER JOIN AR_MISCELLANEOUS AM ON AM.AR_MISCELLANEOUS_ID = AML.AR_MISCELLANEOUS_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AML.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AML.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AM.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(AML.AMOUNT) as CREDIT
FROM AR_MISCELLANEOUS_LINE AML
INNER JOIN AR_MISCELLANEOUS AM ON AM.AR_MISCELLANEOUS_ID = AML.AR_MISCELLANEOUS_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AML.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AML.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AM.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL


SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(AT.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_TRANSACTION AT
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AT.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID = 17
AND AT.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AT.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(-AT.AMOUNT) as CREDIT
FROM AR_TRANSACTION AT
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AT.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID = 17
AND AT.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AT.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL


SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(AL.AMOUNT) as CREDIT
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID=AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID = 17
AND AL.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AT.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(-AL.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID=AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID = 17
AND AL.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AT.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL






SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(AR.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.AMOUNT != 0
AND RM.DEBIT_ACCOUNT_COMBINATION_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID

UNION ALL
SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(AR.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.AMOUNT != 0
AND RM.BANK_ACCOUNT_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL




SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(AR.AMOUNT) as CREDIT
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.AMOUNT != 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL




SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(ART.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(-ART.AMOUNT) as CREDIT
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL




SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(ART.AMOUNT) as CREDIT
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(-ART.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND ACCT.RELATED_ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
) as ACCOUNT_BALANCES 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = ACCOUNT_BALANCES.ACCOUNT_ID
GROUP BY ACCOUNT_BALANCES.ACCOUNT_ID 
ORDER BY A.NUMBER;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GET_CUSTOMER_AVAILABE_BALANCE` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_CUSTOMER_AVAILABE_BALANCE`(IN IN_CUSTOMER_ID INT)
BEGIN

SELECT CREDIT_LIMIT - TOTAL_TRANSACTION + TOTAL_RECEIPT FROM (
SELECT CUST_ID, CREDIT_LIMIT, SUM(TOTAL_TRANSACTION) AS TOTAL_TRANSACTION, SUM(TOTAL_RECEIPT) AS TOTAL_RECEIPT FROM(


SELECT AR_CUSTOMER_ID AS CUST_ID, MAX_AMOUNT AS CREDIT_LIMIT, 0 AS TOTAL_TRANSACTION, 0 AS TOTAL_RECEIPT FROM AR_CUSTOMER

UNION ALL


SELECT ART.CUSTOMER_ID AS CUST_ID, 0 AS CREDIT_LIMIT, COALESCE(SUM(ART.AMOUNT), 0) AS TOTAL_TRANSACTION, 0 AS TOTAL_RECEIPT FROM AR_TRANSACTION ART
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ART.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4

UNION ALL 


SELECT ARR.AR_CUSTOMER_ID AS CUST_ID, 0 AS CREDIT_LIMIT, 0 AS TOTAL_TRANSACTION, COALESCE(SUM(ARR.AMOUNT), 0) AS TOTAL_RECEIPT FROM AR_RECEIPT ARR
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ARR.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
) AS TBL WHERE CUST_ID = IN_CUSTOMER_ID
) AS CUSTOMER_BALANCE;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GET_DAILY_CASH_COLLECTION` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_DAILY_CASH_COLLECTION`(IN IN_COMPANY_ID INT, IN IN_USER_ID INT, IN IN_DATE DATE, 
IN IN_ORDER_BY VARCHAR(15), IN IN_STATUS INT)
BEGIN

IF IN_ORDER_BY = 'REFERENCE_NO' THEN

SELECT CURRENT_STATUS_ID, TIME, REFERENCE_NO, INVOICE_NO, CUSTOMER_NAME, AMOUNT, DATE, CREATED_DATE, ORIG_CREATED_DATE FROM (


SELECT FW.CURRENT_STATUS_ID, TIME(CS.CREATED_DATE) AS TIME, CONCAT('CS ', LEFT(C.NAME , 1), ' ', CS_NUMBER) AS REFERENCE_NO,
CS.SALE_INVOICE_NO AS INVOICE_NO, CUST.NAME AS CUSTOMER_NAME, (SUM(CSI.AMOUNT + COALESCE(CSI.VAT_AMOUNT, 0))
+ COALESCE((SELECT SUM(AMOUNT + COALESCE(AL.VAT_AMOUNT, 0)) FROM CASH_SALE_AR_LINE AL
WHERE AL.CASH_SALE_ID = CSI.CASH_SALE_ID GROUP BY CS.CASH_SALE_ID), 0)) - COALESCE(WT_AMOUNT, 0) AS AMOUNT,
RECEIPT_DATE AS DATE, FWL.CREATED_DATE, CS.CREATED_DATE AS ORIG_CREATED_DATE
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = CS.COMPANY_ID
INNER JOIN AR_CUSTOMER CUST ON CUST.AR_CUSTOMER_ID = CS.AR_CUSTOMER_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CS.FORM_WORKFLOW_ID
INNER JOIN (SELECT FORM_WORKFLOW_ID, FORM_STATUS_ID, CREATED_BY, CREATED_DATE 
FROM FORM_WORKFLOW_LOG GROUP BY FORM_WORKFLOW_ID, FORM_STATUS_ID) FWL 
ON FWL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IF (IN_STATUS = -1, FW.CURRENT_STATUS_ID = 4 OR IS_COMPLETE = 1, FW.CURRENT_STATUS_ID != 4 AND IS_COMPLETE = 1)
AND FWL.FORM_STATUS_ID = FW.CURRENT_STATUS_ID
AND FWL.CREATED_BY = IN_USER_ID
AND RECEIPT_DATE = IN_DATE
AND CS.COMPANY_ID = IN_COMPANY_ID
AND CS.CASH_SALE_TYPE_ID=1
GROUP BY CS.CASH_SALE_ID

UNION ALL


SELECT FW.CURRENT_STATUS_ID, TIME(CS.CREATED_DATE) AS TIME, CONCAT('CS ', LEFT(C.NAME , 1), ' ', CS_NUMBER) AS REFERENCE_NO,
CS.SALE_INVOICE_NO AS INVOICE_NO, CUST.NAME AS CUSTOMER_NAME,
SUM(AMOUNT) + COALESCE((SELECT SUM(AMOUNT) FROM CASH_SALE_AR_LINE AL
WHERE AL.CASH_SALE_ID = CSI.CASH_SALE_ID
GROUP BY CS.CASH_SALE_ID), 0) AS AMOUNT,
RECEIPT_DATE AS DATE, FWL.CREATED_DATE, CS.CREATED_DATE AS ORIG_CREATED_DATE
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = CS.COMPANY_ID
INNER JOIN AR_CUSTOMER CUST ON CUST.AR_CUSTOMER_ID = CS.AR_CUSTOMER_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CS.FORM_WORKFLOW_ID
INNER JOIN (SELECT FORM_WORKFLOW_ID, FORM_STATUS_ID, CREATED_BY, CREATED_DATE
FROM FORM_WORKFLOW_LOG GROUP BY FORM_WORKFLOW_ID, FORM_STATUS_ID) FWL
ON FWL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE
IF (IN_STATUS = -1, FW.CURRENT_STATUS_ID = 4 OR IS_COMPLETE = 1,
FW.CURRENT_STATUS_ID != 4 AND IS_COMPLETE = 1)
AND FWL.FORM_STATUS_ID = FW.CURRENT_STATUS_ID
AND FWL.CREATED_BY = IN_USER_ID
AND RECEIPT_DATE = IN_DATE
AND CS.COMPANY_ID = IN_COMPANY_ID
AND CS.CASH_SALE_TYPE_ID=5
GROUP BY CS.CASH_SALE_ID

UNION ALL

SELECT FW.CURRENT_STATUS_ID, TIME(CS.CREATED_DATE) AS TIME, CONCAT('CS-W ', LEFT(C.NAME , 1), ' ', CS_NUMBER) AS REFERENCE_NO, 
CS.SALE_INVOICE_NO AS INVOICE_NO, CUST.NAME AS CUSTOMER_NAME,
SUM(AMOUNT) + COALESCE ((SELECT SUM(AMOUNT) FROM CASH_SALE_AR_LINE AL
WHERE AL.CASH_SALE_ID = CSI.CASH_SALE_ID
GROUP BY CS.CASH_SALE_ID), 0) AS AMOUNT,
RECEIPT_DATE AS DATE, FWL.CREATED_DATE, CS.CREATED_DATE AS ORIG_CREATED_DATE
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = CS.COMPANY_ID
INNER JOIN AR_CUSTOMER CUST ON CUST.AR_CUSTOMER_ID = CS.AR_CUSTOMER_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CS.FORM_WORKFLOW_ID
INNER JOIN (SELECT FORM_WORKFLOW_ID, FORM_STATUS_ID, CREATED_BY, CREATED_DATE 
FROM FORM_WORKFLOW_LOG GROUP BY FORM_WORKFLOW_ID, FORM_STATUS_ID) FWL 
ON FWL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE
IF (IN_STATUS = -1, FW.CURRENT_STATUS_ID = 4 OR IS_COMPLETE = 1, 
FW.CURRENT_STATUS_ID != 4 AND IS_COMPLETE = 1)
AND FWL.FORM_STATUS_ID = FW.CURRENT_STATUS_ID
AND FWL.CREATED_BY = IN_USER_ID
AND RECEIPT_DATE = IN_DATE
AND CS.COMPANY_ID = IN_COMPANY_ID
AND CS.CASH_SALE_TYPE_ID=2
GROUP BY CS.CASH_SALE_ID

UNION ALL

SELECT FW.CURRENT_STATUS_ID, TIME(CS.CREATED_DATE) AS TIME, CONCAT('CS-IS ', LEFT(C.NAME , 1), ' ', CS_NUMBER) AS REFERENCE_NO,
CS.SALE_INVOICE_NO AS INVOICE_NO, CUST.NAME AS CUSTOMER_NAME,
SUM(AMOUNT) + COALESCE ((SELECT SUM(AMOUNT) FROM CASH_SALE_AR_LINE AL
WHERE AL.CASH_SALE_ID = CSI.CASH_SALE_ID
GROUP BY CS.CASH_SALE_ID), 0) AS AMOUNT,
RECEIPT_DATE AS DATE, FWL.CREATED_DATE, CS.CREATED_DATE AS ORIG_CREATED_DATE
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = CS.COMPANY_ID
INNER JOIN AR_CUSTOMER CUST ON CUST.AR_CUSTOMER_ID = CS.AR_CUSTOMER_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CS.FORM_WORKFLOW_ID
INNER JOIN (SELECT FORM_WORKFLOW_ID, FORM_STATUS_ID, CREATED_BY, CREATED_DATE
FROM FORM_WORKFLOW_LOG GROUP BY FORM_WORKFLOW_ID, FORM_STATUS_ID) FWL 
ON FWL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE
IF (IN_STATUS = -1, FW.CURRENT_STATUS_ID = 4 OR IS_COMPLETE = 1, 
FW.CURRENT_STATUS_ID != 4 AND IS_COMPLETE = 1)
AND FWL.FORM_STATUS_ID = FW.CURRENT_STATUS_ID
AND FWL.CREATED_BY = IN_USER_ID
AND RECEIPT_DATE = IN_DATE
AND CS.COMPANY_ID = IN_COMPANY_ID
AND CS.CASH_SALE_TYPE_ID=3
GROUP BY CS.CASH_SALE_ID

UNION ALL

SELECT FW.CURRENT_STATUS_ID, TIME(CS.CREATED_DATE) AS TIME, CONCAT('CS-CPOS ', LEFT(C.NAME , 1), ' ', CS_NUMBER) AS REFERENCE_NO,
CS.SALE_INVOICE_NO AS INVOICE_NO, CUST.NAME AS CUSTOMER_NAME,
SUM(AMOUNT) + COALESCE ((SELECT SUM(AMOUNT) FROM CASH_SALE_AR_LINE AL
WHERE AL.CASH_SALE_ID = CSI.CASH_SALE_ID
GROUP BY CS.CASH_SALE_ID), 0) AS AMOUNT,
RECEIPT_DATE AS DATE, FWL.CREATED_DATE, CS.CREATED_DATE AS ORIG_CREATED_DATE
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = CS.COMPANY_ID
INNER JOIN AR_CUSTOMER CUST ON CUST.AR_CUSTOMER_ID = CS.AR_CUSTOMER_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CS.FORM_WORKFLOW_ID
INNER JOIN (SELECT FORM_WORKFLOW_ID, FORM_STATUS_ID, CREATED_BY, CREATED_DATE
FROM FORM_WORKFLOW_LOG GROUP BY FORM_WORKFLOW_ID, FORM_STATUS_ID) FWL 
ON FWL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE
IF (IN_STATUS = -1, FW.CURRENT_STATUS_ID = 4 OR IS_COMPLETE = 1, 
FW.CURRENT_STATUS_ID != 4 AND IS_COMPLETE = 1)
AND FWL.FORM_STATUS_ID = FW.CURRENT_STATUS_ID
AND FWL.CREATED_BY = IN_USER_ID
AND RECEIPT_DATE = IN_DATE
AND CS.COMPANY_ID = IN_COMPANY_ID
AND CS.CASH_SALE_TYPE_ID=4
GROUP BY CS.CASH_SALE_ID

UNION ALL

SELECT FW.CURRENT_STATUS_ID, TIME(CS.CREATED_DATE) AS TIME, CONCAT('CS-P ', LEFT(C.NAME , 1), ' ', CS_NUMBER) AS REFERENCE_NO,
CS.SALE_INVOICE_NO AS INVOICE_NO, CUST.NAME AS CUSTOMER_NAME,
SUM(AMOUNT) + COALESCE ((SELECT SUM(AMOUNT) FROM CASH_SALE_AR_LINE AL
WHERE AL.CASH_SALE_ID = CSI.CASH_SALE_ID
GROUP BY CS.CASH_SALE_ID), 0) AS AMOUNT,
RECEIPT_DATE AS DATE, FWL.CREATED_DATE, CS.CREATED_DATE AS ORIG_CREATED_DATE
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = CS.COMPANY_ID
INNER JOIN AR_CUSTOMER CUST ON CUST.AR_CUSTOMER_ID = CS.AR_CUSTOMER_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CS.FORM_WORKFLOW_ID
INNER JOIN (SELECT FORM_WORKFLOW_ID, FORM_STATUS_ID, CREATED_BY, CREATED_DATE
FROM FORM_WORKFLOW_LOG GROUP BY FORM_WORKFLOW_ID, FORM_STATUS_ID) FWL 
ON FWL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE
IF (IN_STATUS = -1, FW.CURRENT_STATUS_ID = 4 OR IS_COMPLETE = 1, 
FW.CURRENT_STATUS_ID != 4 AND IS_COMPLETE = 1)
AND FWL.FORM_STATUS_ID = FW.CURRENT_STATUS_ID
AND FWL.CREATED_BY = IN_USER_ID
AND RECEIPT_DATE = IN_DATE
AND CS.COMPANY_ID = IN_COMPANY_ID
AND CS.CASH_SALE_TYPE_ID = 6
GROUP BY CS.CASH_SALE_ID

UNION ALL

SELECT FW.CURRENT_STATUS_ID, TIME(CSR.CREATED_DATE) AS TIME, CONCAT('CSR ', LEFT(C.NAME , 1), ' ', CSR_NUMBER) AS REFERENCE_NO,
CSR.SALE_INVOICE_NO AS INVOICE_NO, CUST.NAME AS CUSTOMER_NAME, SUM(CSRI.AMOUNT + COALESCE(CSRI.VAT_AMOUNT, 0)) - COALESCE(WT_AMOUNT, 0) AS AMOUNT,
DATE, FWL.CREATED_DATE, CSR.CREATED_DATE AS ORIG_CREATED_DATE
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN AR_CUSTOMER CUST ON CUST.AR_CUSTOMER_ID = CSR.AR_CUSTOMER_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CSR.FORM_WORKFLOW_ID
INNER JOIN (SELECT FORM_WORKFLOW_ID, FORM_STATUS_ID, CREATED_BY, CREATED_DATE
FROM FORM_WORKFLOW_LOG GROUP BY FORM_WORKFLOW_ID, FORM_STATUS_ID) FWL 
ON FWL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IF (IN_STATUS = -1, (FW.CURRENT_STATUS_ID = 4 OR IS_COMPLETE = 1), (FW.CURRENT_STATUS_ID != 4 AND IS_COMPLETE = 1))
AND FWL.FORM_STATUS_ID = FW.CURRENT_STATUS_ID
AND FWL.CREATED_BY = IN_USER_ID
AND C.COMPANY_ID = IN_COMPANY_ID
AND DATE = IN_DATE
AND CSR.CASH_SALE_TYPE_ID=1
GROUP BY CSR.CASH_SALE_RETURN_ID

UNION ALL 

SELECT FW.CURRENT_STATUS_ID, TIME(CSR.CREATED_DATE) AS TIME, CONCAT('CSR W ', LEFT(C.NAME , 1), ' ', CSR_NUMBER) AS REFERENCE_NO,
CSR.SALE_INVOICE_NO AS INVOICE_NO, CUST.NAME AS CUSTOMER_NAME, SUM(AMOUNT) AS AMOUNT,
DATE, FWL.CREATED_DATE, CSR.CREATED_DATE AS ORIG_CREATED_DATE
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN AR_CUSTOMER CUST ON CUST.AR_CUSTOMER_ID = CSR.AR_CUSTOMER_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CSR.FORM_WORKFLOW_ID
INNER JOIN (SELECT FORM_WORKFLOW_ID, FORM_STATUS_ID, CREATED_BY, CREATED_DATE
FROM FORM_WORKFLOW_LOG GROUP BY FORM_WORKFLOW_ID, FORM_STATUS_ID) FWL
ON FWL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE
IF (IN_STATUS = -1, FW.CURRENT_STATUS_ID = 4 OR IS_COMPLETE = 1, 
FW.CURRENT_STATUS_ID != 4 AND IS_COMPLETE = 1)
AND FWL.FORM_STATUS_ID = FW.CURRENT_STATUS_ID
AND FWL.CREATED_BY = IN_USER_ID
AND C.COMPANY_ID = IN_COMPANY_ID
AND DATE = IN_DATE
AND CSR.CASH_SALE_TYPE_ID=2
GROUP BY CSR.CASH_SALE_RETURN_ID

UNION ALL

SELECT FW.CURRENT_STATUS_ID, TIME(CSR.CREATED_DATE) AS TIME, CONCAT('CSR-IS ', LEFT(C.NAME , 1), ' ', CSR_NUMBER) AS REFERENCE_NO,
CSR.SALE_INVOICE_NO AS INVOICE_NO, CUST.NAME AS CUSTOMER_NAME, SUM(AMOUNT) AS AMOUNT,
DATE, FWL.CREATED_DATE, CSR.CREATED_DATE AS ORIG_CREATED_DATE
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN AR_CUSTOMER CUST ON CUST.AR_CUSTOMER_ID = CSR.AR_CUSTOMER_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CSR.FORM_WORKFLOW_ID
INNER JOIN (SELECT FORM_WORKFLOW_ID, FORM_STATUS_ID, CREATED_BY, CREATED_DATE
FROM FORM_WORKFLOW_LOG GROUP BY FORM_WORKFLOW_ID, FORM_STATUS_ID) FWL 
ON FWL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE
IF (IN_STATUS = -1, FW.CURRENT_STATUS_ID = 4 OR IS_COMPLETE = 1, 
FW.CURRENT_STATUS_ID != 4 AND IS_COMPLETE = 1)
AND FWL.FORM_STATUS_ID = FW.CURRENT_STATUS_ID
AND FWL.CREATED_BY = IN_USER_ID
AND C.COMPANY_ID = IN_COMPANY_ID
AND DATE = IN_DATE
AND CSR.CASH_SALE_TYPE_ID=3
GROUP BY CSR.CASH_SALE_RETURN_ID

UNION ALL

SELECT FW.CURRENT_STATUS_ID, TIME(CSR.CREATED_DATE) AS TIME, CONCAT('CSR-CPOS ', LEFT(C.NAME , 1), ' ', CSR_NUMBER) AS REFERENCE_NO,
CSR.SALE_INVOICE_NO AS INVOICE_NO, CUST.NAME AS CUSTOMER_NAME, SUM(AMOUNT) AS AMOUNT,
DATE, FWL.CREATED_DATE, CSR.CREATED_DATE AS ORIG_CREATED_DATE
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN AR_CUSTOMER CUST ON CUST.AR_CUSTOMER_ID = CSR.AR_CUSTOMER_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CSR.FORM_WORKFLOW_ID
INNER JOIN (SELECT FORM_WORKFLOW_ID, FORM_STATUS_ID, CREATED_BY, CREATED_DATE
FROM FORM_WORKFLOW_LOG GROUP BY FORM_WORKFLOW_ID, FORM_STATUS_ID) FWL 
ON FWL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE
IF (IN_STATUS = -1, FW.CURRENT_STATUS_ID = 4 OR IS_COMPLETE = 1, 
FW.CURRENT_STATUS_ID != 4 AND IS_COMPLETE = 1)
AND FWL.FORM_STATUS_ID = FW.CURRENT_STATUS_ID
AND FWL.CREATED_BY = IN_USER_ID
AND C.COMPANY_ID = IN_COMPANY_ID
AND DATE = IN_DATE
AND CSR.CASH_SALE_TYPE_ID=4
GROUP BY CSR.CASH_SALE_RETURN_ID

UNION ALL

SELECT FW.CURRENT_STATUS_ID, TIME(CSR.CREATED_DATE) AS TIME, CONCAT('CSR ', LEFT(C.NAME , 1), ' ', CSR_NUMBER) AS REFERENCE_NO,
CSR.SALE_INVOICE_NO AS INVOICE_NO, CUST.NAME AS CUSTOMER_NAME, SUM(AMOUNT) AS AMOUNT,
DATE, FWL.CREATED_DATE, CSR.CREATED_DATE AS ORIG_CREATED_DATE
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN AR_CUSTOMER CUST ON CUST.AR_CUSTOMER_ID = CSR.AR_CUSTOMER_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CSR.FORM_WORKFLOW_ID
INNER JOIN (SELECT FORM_WORKFLOW_ID, FORM_STATUS_ID, CREATED_BY, CREATED_DATE
FROM FORM_WORKFLOW_LOG GROUP BY FORM_WORKFLOW_ID, FORM_STATUS_ID) FWL 
ON FWL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE
IF (IN_STATUS = -1, FW.CURRENT_STATUS_ID = 4 OR IS_COMPLETE = 1, 
FW.CURRENT_STATUS_ID != 4 AND IS_COMPLETE = 1)
AND FWL.FORM_STATUS_ID = FW.CURRENT_STATUS_ID
AND FWL.CREATED_BY = IN_USER_ID
AND C.COMPANY_ID = IN_COMPANY_ID
AND DATE = IN_DATE
AND CSR.CASH_SALE_TYPE_ID=5
GROUP BY CSR.CASH_SALE_RETURN_ID

UNION ALL

SELECT FW.CURRENT_STATUS_ID, TIME(AR.CREATED_DATE) AS TIME, CONCAT('AC ', LEFT(C.NAME , 1), ' ', SEQUENCE_NO) AS REFERENCE_NO,
AR.RECEIPT_NUMBER AS INVOICE_NO, CUST.NAME AS CUSTOMER_NAME,  SUM(AMOUNT) AS AMOUNT,
RECEIPT_DATE AS DATE, FWL.CREATED_DATE, AR.CREATED_DATE AS ORIG_CREATED_DATE
FROM AR_RECEIPT AR 
INNER JOIN COMPANY C ON C.COMPANY_ID = AR.COMPANY_ID
INNER JOIN AR_CUSTOMER CUST ON CUST.AR_CUSTOMER_ID = AR.AR_CUSTOMER_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = AR.FORM_WORKFLOW_ID
INNER JOIN (SELECT FORM_WORKFLOW_ID, FORM_STATUS_ID, CREATED_BY, CREATED_DATE
FROM FORM_WORKFLOW_LOG GROUP BY FORM_WORKFLOW_ID, FORM_STATUS_ID) FWL 
ON FWL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE
IF (IN_STATUS = -1, FW.CURRENT_STATUS_ID = 4 OR FW.CURRENT_STATUS_ID != 4, 
FW.CURRENT_STATUS_ID != 4)
AND FWL.FORM_STATUS_ID = FW.CURRENT_STATUS_ID
AND FWL.CREATED_BY = IN_USER_ID
AND RECEIPT_DATE = IN_DATE
AND C.COMPANY_ID = IN_COMPANY_ID
GROUP BY AR_RECEIPT_ID

UNION ALL

SELECT FW.CURRENT_STATUS_ID, TIME(CAP.CREATED_DATE) AS TIME, CONCAT('CAP ', LEFT(C.NAME , 1), ' ', CAP_NUMBER) AS REFERENCE_NO, 
CAP.SALE_INVOICE_NO AS INVOICE_NO, CUST.NAME AS CUSTOMER_NAME, 
SUM(AMOUNT) + COALESCE ((SELECT SUM(AMOUNT) FROM CAP_AR_LINE AL
WHERE AL.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
GROUP BY CAP.CUSTOMER_ADVANCE_PAYMENT_ID), 0) AS AMOUNT,
RECEIPT_DATE AS DATE, FWL.CREATED_DATE, CAP.CREATED_DATE AS ORIG_CREATED_DATE 
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN AR_CUSTOMER CUST ON CUST.AR_CUSTOMER_ID = CAP.AR_CUSTOMER_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CAP.FORM_WORKFLOW_ID
INNER JOIN (SELECT FORM_WORKFLOW_ID, FORM_STATUS_ID, CREATED_BY, CREATED_DATE 
FROM FORM_WORKFLOW_LOG GROUP BY FORM_WORKFLOW_ID, FORM_STATUS_ID) FWL 
ON FWL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE 
IF (IN_STATUS = -1, FW.CURRENT_STATUS_ID = 4 OR FW.CURRENT_STATUS_ID != 4 AND FW.CURRENT_STATUS_ID != 1, 
FW.CURRENT_STATUS_ID != 1 AND FW.CURRENT_STATUS_ID != 4)
AND FWL.FORM_STATUS_ID = FW.CURRENT_STATUS_ID
AND FWL.CREATED_BY = IN_USER_ID
AND RECEIPT_DATE = IN_DATE
AND C.COMPANY_ID = IN_COMPANY_ID
GROUP BY CAP.CUSTOMER_ADVANCE_PAYMENT_ID

) AS DCC ORDER BY REFERENCE_NO;

ELSEIF IN_ORDER_BY = 'INVOICE_NO' THEN

SELECT CURRENT_STATUS_ID, TIME, REFERENCE_NO, INVOICE_NO, CUSTOMER_NAME, AMOUNT, DATE, CREATED_DATE, ORIG_CREATED_DATE  FROM (


SELECT  FW.CURRENT_STATUS_ID, TIME(CS.CREATED_DATE) AS TIME, CONCAT('CS ', LEFT(C.NAME , 1), ' ', CS_NUMBER) AS REFERENCE_NO, 
CS.SALE_INVOICE_NO AS INVOICE_NO, CUST.NAME AS CUSTOMER_NAME, (SUM(CSI.AMOUNT + COALESCE(CSI.VAT_AMOUNT, 0))
+ COALESCE((SELECT SUM(AMOUNT + (COALESCE(AL.QUANTITY, 0) * COALESCE(AL.VAT_AMOUNT, 0))) FROM CASH_SALE_AR_LINE AL
WHERE AL.CASH_SALE_ID = CSI.CASH_SALE_ID GROUP BY CS.CASH_SALE_ID), 0)) - COALESCE(WT_AMOUNT, 0) AS AMOUNT,
RECEIPT_DATE AS DATE, FWL.CREATED_DATE, CS.CREATED_DATE AS ORIG_CREATED_DATE
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = CS.COMPANY_ID
INNER JOIN AR_CUSTOMER CUST ON CUST.AR_CUSTOMER_ID = CS.AR_CUSTOMER_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CS.FORM_WORKFLOW_ID
INNER JOIN (SELECT FORM_WORKFLOW_ID, FORM_STATUS_ID, CREATED_BY, CREATED_DATE 
FROM FORM_WORKFLOW_LOG GROUP BY FORM_WORKFLOW_ID, FORM_STATUS_ID) FWL 
ON FWL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IF (IN_STATUS = -1, FW.CURRENT_STATUS_ID = 4 OR IS_COMPLETE = 1, FW.CURRENT_STATUS_ID != 4 AND IS_COMPLETE = 1)
AND FWL.FORM_STATUS_ID = FW.CURRENT_STATUS_ID
AND FWL.CREATED_BY = IN_USER_ID
AND RECEIPT_DATE = IN_DATE
AND CS.COMPANY_ID = IN_COMPANY_ID
AND CS.CASH_SALE_TYPE_ID=1
GROUP BY CS.CASH_SALE_ID

UNION ALL 

SELECT FW.CURRENT_STATUS_ID, TIME(CS.CREATED_DATE) AS TIME, CONCAT('CS-W ', LEFT(C.NAME , 1), ' ', CS_NUMBER) AS REFERENCE_NO, 
CS.SALE_INVOICE_NO AS INVOICE_NO, 
CUST.NAME AS CUSTOMER_NAME,
SUM(AMOUNT) + COALESCE ((SELECT SUM(AMOUNT) FROM CASH_SALE_AR_LINE AL
WHERE AL.CASH_SALE_ID = CSI.CASH_SALE_ID
GROUP BY CS.CASH_SALE_ID), 0) AS AMOUNT,
RECEIPT_DATE AS DATE, FWL.CREATED_DATE, CS.CREATED_DATE AS ORIG_CREATED_DATE
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = CS.COMPANY_ID
INNER JOIN AR_CUSTOMER CUST ON CUST.AR_CUSTOMER_ID = CS.AR_CUSTOMER_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CS.FORM_WORKFLOW_ID
INNER JOIN (SELECT FORM_WORKFLOW_ID, FORM_STATUS_ID, CREATED_BY, CREATED_DATE 
FROM FORM_WORKFLOW_LOG GROUP BY FORM_WORKFLOW_ID, FORM_STATUS_ID) FWL 
ON FWL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE
IF (IN_STATUS = -1, FW.CURRENT_STATUS_ID = 4 OR IS_COMPLETE = 1, 
FW.CURRENT_STATUS_ID != 4 AND IS_COMPLETE = 1)
AND FWL.FORM_STATUS_ID = FW.CURRENT_STATUS_ID
AND FWL.CREATED_BY = IN_USER_ID
AND RECEIPT_DATE = IN_DATE
AND CS.COMPANY_ID = IN_COMPANY_ID
AND CS.CASH_SALE_TYPE_ID=2
GROUP BY CS.CASH_SALE_ID

UNION ALL

SELECT FW.CURRENT_STATUS_ID, TIME(CS.CREATED_DATE) AS TIME, CONCAT('CS-IS ', LEFT(C.NAME , 1), ' ', CS_NUMBER) AS REFERENCE_NO,
CS.SALE_INVOICE_NO AS INVOICE_NO, 
CUST.NAME AS CUSTOMER_NAME,
SUM(AMOUNT) + COALESCE ((SELECT SUM(AMOUNT) FROM CASH_SALE_AR_LINE AL
WHERE AL.CASH_SALE_ID = CSI.CASH_SALE_ID
GROUP BY CS.CASH_SALE_ID), 0) AS AMOUNT,
RECEIPT_DATE AS DATE, FWL.CREATED_DATE, CS.CREATED_DATE AS ORIG_CREATED_DATE
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = CS.COMPANY_ID
INNER JOIN AR_CUSTOMER CUST ON CUST.AR_CUSTOMER_ID = CS.AR_CUSTOMER_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CS.FORM_WORKFLOW_ID
INNER JOIN (SELECT FORM_WORKFLOW_ID, FORM_STATUS_ID, CREATED_BY, CREATED_DATE
FROM FORM_WORKFLOW_LOG GROUP BY FORM_WORKFLOW_ID, FORM_STATUS_ID) FWL 
ON FWL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE
IF (IN_STATUS = -1, FW.CURRENT_STATUS_ID = 4 OR IS_COMPLETE = 1, 
FW.CURRENT_STATUS_ID != 4 AND IS_COMPLETE = 1)
AND FWL.FORM_STATUS_ID = FW.CURRENT_STATUS_ID
AND FWL.CREATED_BY = IN_USER_ID
AND RECEIPT_DATE = IN_DATE
AND CS.COMPANY_ID = IN_COMPANY_ID
AND CS.CASH_SALE_TYPE_ID=3
GROUP BY CS.CASH_SALE_ID

UNION ALL 

SELECT FW.CURRENT_STATUS_ID, TIME(CS.CREATED_DATE) AS TIME, CONCAT('CS-CPOS ', LEFT(C.NAME , 1), ' ', CS_NUMBER) AS REFERENCE_NO, 
CS.SALE_INVOICE_NO AS INVOICE_NO, 
CUST.NAME AS CUSTOMER_NAME,
SUM(AMOUNT) + COALESCE ((SELECT SUM(AMOUNT) FROM CASH_SALE_AR_LINE AL
WHERE AL.CASH_SALE_ID = CSI.CASH_SALE_ID
GROUP BY CS.CASH_SALE_ID), 0) AS AMOUNT,
RECEIPT_DATE AS DATE, FWL.CREATED_DATE, CS.CREATED_DATE AS ORIG_CREATED_DATE
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = CS.COMPANY_ID
INNER JOIN AR_CUSTOMER CUST ON CUST.AR_CUSTOMER_ID = CS.AR_CUSTOMER_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CS.FORM_WORKFLOW_ID
INNER JOIN (SELECT FORM_WORKFLOW_ID, FORM_STATUS_ID, CREATED_BY, CREATED_DATE 
FROM FORM_WORKFLOW_LOG GROUP BY FORM_WORKFLOW_ID, FORM_STATUS_ID) FWL 
ON FWL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE
IF (IN_STATUS = -1, FW.CURRENT_STATUS_ID = 4 OR IS_COMPLETE = 1, 
FW.CURRENT_STATUS_ID != 4 AND IS_COMPLETE = 1)
AND FWL.FORM_STATUS_ID = FW.CURRENT_STATUS_ID
AND FWL.CREATED_BY = IN_USER_ID
AND RECEIPT_DATE = IN_DATE
AND CS.COMPANY_ID = IN_COMPANY_ID
AND CS.CASH_SALE_TYPE_ID=4
GROUP BY CS.CASH_SALE_ID

UNION ALL

SELECT FW.CURRENT_STATUS_ID, TIME(CS.CREATED_DATE) AS TIME, CONCAT('CS-P ', LEFT(C.NAME , 1), ' ', CS_NUMBER) AS REFERENCE_NO,
CS.SALE_INVOICE_NO AS INVOICE_NO, CUST.NAME AS CUSTOMER_NAME,
SUM(AMOUNT) + COALESCE ((SELECT SUM(AMOUNT) FROM CASH_SALE_AR_LINE AL
WHERE AL.CASH_SALE_ID = CSI.CASH_SALE_ID
GROUP BY CS.CASH_SALE_ID), 0) AS AMOUNT,
RECEIPT_DATE AS DATE, FWL.CREATED_DATE, CS.CREATED_DATE AS ORIG_CREATED_DATE
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = CS.COMPANY_ID
INNER JOIN AR_CUSTOMER CUST ON CUST.AR_CUSTOMER_ID = CS.AR_CUSTOMER_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CS.FORM_WORKFLOW_ID
INNER JOIN (SELECT FORM_WORKFLOW_ID, FORM_STATUS_ID, CREATED_BY, CREATED_DATE
FROM FORM_WORKFLOW_LOG GROUP BY FORM_WORKFLOW_ID, FORM_STATUS_ID) FWL 
ON FWL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE
IF (IN_STATUS = -1, FW.CURRENT_STATUS_ID = 4 OR IS_COMPLETE = 1, 
FW.CURRENT_STATUS_ID != 4 AND IS_COMPLETE = 1)
AND FWL.FORM_STATUS_ID = FW.CURRENT_STATUS_ID
AND FWL.CREATED_BY = IN_USER_ID
AND RECEIPT_DATE = IN_DATE
AND CS.COMPANY_ID = IN_COMPANY_ID
AND CS.CASH_SALE_TYPE_ID = 6
GROUP BY CS.CASH_SALE_ID

UNION ALL

SELECT FW.CURRENT_STATUS_ID, TIME(CSR.CREATED_DATE) AS TIME, CONCAT('CSR ', LEFT(C.NAME , 1), ' ', CSR_NUMBER) AS REFERENCE_NO,
CSR.SALE_INVOICE_NO AS INVOICE_NO,  CUST.NAME AS CUSTOMER_NAME, SUM(CSRI.AMOUNT + COALESCE(CSRI.VAT_AMOUNT, 0)) - COALESCE(WT_AMOUNT, 0) AS AMOUNT,
DATE, FWL.CREATED_DATE, CSR.CREATED_DATE AS ORIG_CREATED_DATE
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN AR_CUSTOMER CUST ON CUST.AR_CUSTOMER_ID = CSR.AR_CUSTOMER_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CSR.FORM_WORKFLOW_ID
INNER JOIN (SELECT FORM_WORKFLOW_ID, FORM_STATUS_ID, CREATED_BY, CREATED_DATE
FROM FORM_WORKFLOW_LOG GROUP BY FORM_WORKFLOW_ID, FORM_STATUS_ID) FWL 
ON FWL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE IF (IN_STATUS = -1, (FW.CURRENT_STATUS_ID = 4 OR IS_COMPLETE = 1), (FW.CURRENT_STATUS_ID != 4 AND IS_COMPLETE = 1))
AND FWL.FORM_STATUS_ID = FW.CURRENT_STATUS_ID
AND FWL.CREATED_BY = IN_USER_ID
AND C.COMPANY_ID = IN_COMPANY_ID
AND DATE = IN_DATE
AND CSR.CASH_SALE_TYPE_ID=1
GROUP BY CSR.CASH_SALE_RETURN_ID

UNION ALL 

SELECT FW.CURRENT_STATUS_ID, TIME(CSR.CREATED_DATE) AS TIME, CONCAT('CSR W ', LEFT(C.NAME , 1), ' ', CSR_NUMBER) AS REFERENCE_NO,
CSR.SALE_INVOICE_NO AS INVOICE_NO, 
CUST.NAME AS CUSTOMER_NAME, SUM(AMOUNT) AS AMOUNT,
DATE, FWL.CREATED_DATE, CSR.CREATED_DATE AS ORIG_CREATED_DATE
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN AR_CUSTOMER CUST ON CUST.AR_CUSTOMER_ID = CSR.AR_CUSTOMER_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CSR.FORM_WORKFLOW_ID
INNER JOIN (SELECT FORM_WORKFLOW_ID, FORM_STATUS_ID, CREATED_BY, CREATED_DATE
FROM FORM_WORKFLOW_LOG GROUP BY FORM_WORKFLOW_ID, FORM_STATUS_ID) FWL
ON FWL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE
IF (IN_STATUS = -1, FW.CURRENT_STATUS_ID = 4 OR IS_COMPLETE = 1, 
FW.CURRENT_STATUS_ID != 4 AND IS_COMPLETE = 1)
AND FWL.FORM_STATUS_ID = FW.CURRENT_STATUS_ID
AND FWL.CREATED_BY = IN_USER_ID
AND C.COMPANY_ID = IN_COMPANY_ID
AND DATE = IN_DATE
AND CSR.CASH_SALE_TYPE_ID=2
GROUP BY CSR.CASH_SALE_RETURN_ID

UNION ALL

SELECT FW.CURRENT_STATUS_ID, TIME(CSR.CREATED_DATE) AS TIME, CONCAT('CSR-IS ', LEFT(C.NAME , 1), ' ', CSR_NUMBER) AS REFERENCE_NO,
CSR.SALE_INVOICE_NO AS INVOICE_NO,  
CUST.NAME AS CUSTOMER_NAME, SUM(AMOUNT) AS AMOUNT,
DATE, FWL.CREATED_DATE, CSR.CREATED_DATE AS ORIG_CREATED_DATE
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN AR_CUSTOMER CUST ON CUST.AR_CUSTOMER_ID = CSR.AR_CUSTOMER_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CSR.FORM_WORKFLOW_ID
INNER JOIN (SELECT FORM_WORKFLOW_ID, FORM_STATUS_ID, CREATED_BY, CREATED_DATE
FROM FORM_WORKFLOW_LOG GROUP BY FORM_WORKFLOW_ID, FORM_STATUS_ID) FWL 
ON FWL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE
IF (IN_STATUS = -1, FW.CURRENT_STATUS_ID = 4 OR IS_COMPLETE = 1, 
FW.CURRENT_STATUS_ID != 4 AND IS_COMPLETE = 1)
AND FWL.FORM_STATUS_ID = FW.CURRENT_STATUS_ID
AND FWL.CREATED_BY = IN_USER_ID
AND C.COMPANY_ID = IN_COMPANY_ID
AND DATE = IN_DATE
AND CSR.CASH_SALE_TYPE_ID=3
GROUP BY CSR.CASH_SALE_RETURN_ID

UNION ALL

SELECT FW.CURRENT_STATUS_ID, TIME(CSR.CREATED_DATE) AS TIME, CONCAT('CSR-CPOS ', LEFT(C.NAME , 1), ' ', CSR_NUMBER) AS REFERENCE_NO,
CSR.SALE_INVOICE_NO AS INVOICE_NO,  
CUST.NAME AS CUSTOMER_NAME, SUM(AMOUNT) AS AMOUNT,
DATE, FWL.CREATED_DATE, CSR.CREATED_DATE AS ORIG_CREATED_DATE
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN AR_CUSTOMER CUST ON CUST.AR_CUSTOMER_ID = CSR.AR_CUSTOMER_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CSR.FORM_WORKFLOW_ID
INNER JOIN (SELECT FORM_WORKFLOW_ID, FORM_STATUS_ID, CREATED_BY, CREATED_DATE
FROM FORM_WORKFLOW_LOG GROUP BY FORM_WORKFLOW_ID, FORM_STATUS_ID) FWL 
ON FWL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE
IF (IN_STATUS = -1, FW.CURRENT_STATUS_ID = 4 OR IS_COMPLETE = 1, 
FW.CURRENT_STATUS_ID != 4 AND IS_COMPLETE = 1)
AND FWL.FORM_STATUS_ID = FW.CURRENT_STATUS_ID
AND FWL.CREATED_BY = IN_USER_ID
AND C.COMPANY_ID = IN_COMPANY_ID
AND DATE = IN_DATE
AND CSR.CASH_SALE_TYPE_ID=4
GROUP BY CSR.CASH_SALE_RETURN_ID

UNION ALL

SELECT FW.CURRENT_STATUS_ID, TIME(AR.CREATED_DATE) AS TIME, CONCAT('AC ', LEFT(C.NAME , 1), ' ', SEQUENCE_NO) AS REFERENCE_NO,
AR.RECEIPT_NUMBER AS INVOICE_NO, 
CUST.NAME AS CUSTOMER_NAME,  SUM(AMOUNT) AS AMOUNT,
RECEIPT_DATE AS DATE, FWL.CREATED_DATE, AR.CREATED_DATE AS ORIG_CREATED_DATE
FROM AR_RECEIPT AR 
INNER JOIN COMPANY C ON C.COMPANY_ID = AR.COMPANY_ID
INNER JOIN AR_CUSTOMER CUST ON CUST.AR_CUSTOMER_ID = AR.AR_CUSTOMER_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = AR.FORM_WORKFLOW_ID
INNER JOIN (SELECT FORM_WORKFLOW_ID, FORM_STATUS_ID, CREATED_BY, CREATED_DATE
FROM FORM_WORKFLOW_LOG GROUP BY FORM_WORKFLOW_ID, FORM_STATUS_ID) FWL 
ON FWL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE
IF (IN_STATUS = -1, FW.CURRENT_STATUS_ID = 4 OR FW.CURRENT_STATUS_ID != 4, 
FW.CURRENT_STATUS_ID != 4)
AND FWL.FORM_STATUS_ID = FW.CURRENT_STATUS_ID
AND FWL.CREATED_BY = IN_USER_ID
AND RECEIPT_DATE = IN_DATE
AND C.COMPANY_ID = IN_COMPANY_ID
GROUP BY AR_RECEIPT_ID

UNION ALL

SELECT FW.CURRENT_STATUS_ID, TIME(CAP.CREATED_DATE) AS TIME, CONCAT('CAP ', LEFT(C.NAME , 1), ' ', CAP_NUMBER) AS REFERENCE_NO, 
CAP.SALE_INVOICE_NO AS INVOICE_NO, CUST.NAME AS CUSTOMER_NAME, 
SUM(AMOUNT) + COALESCE ((SELECT SUM(AMOUNT) FROM CAP_AR_LINE AL
WHERE AL.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
GROUP BY CAP.CUSTOMER_ADVANCE_PAYMENT_ID), 0) AS AMOUNT,
RECEIPT_DATE AS DATE, FWL.CREATED_DATE, CAP.CREATED_DATE AS ORIG_CREATED_DATE 
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN AR_CUSTOMER CUST ON CUST.AR_CUSTOMER_ID = CAP.AR_CUSTOMER_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CAP.FORM_WORKFLOW_ID
INNER JOIN (SELECT FORM_WORKFLOW_ID, FORM_STATUS_ID, CREATED_BY, CREATED_DATE 
FROM FORM_WORKFLOW_LOG GROUP BY FORM_WORKFLOW_ID, FORM_STATUS_ID) FWL 
ON FWL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE
IF (IN_STATUS = -1, FW.CURRENT_STATUS_ID = 4 OR FW.CURRENT_STATUS_ID != 4 AND FW.CURRENT_STATUS_ID != 1, 
FW.CURRENT_STATUS_ID != 1 AND FW.CURRENT_STATUS_ID != 4)
AND FWL.FORM_STATUS_ID = FW.CURRENT_STATUS_ID
AND FWL.CREATED_BY = IN_USER_ID
AND RECEIPT_DATE = IN_DATE
AND C.COMPANY_ID = IN_COMPANY_ID
GROUP BY CAP.CUSTOMER_ADVANCE_PAYMENT_ID

) AS DCC ORDER BY INVOICE_NO+00,INVOICE_NO+0 DESC, INVOICE_NO;
END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GET_DAILY_ITEM_SALES` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_DAILY_ITEM_SALES`(IN IN_COMPANY_ID INT, IN IN_STOCK_CODE VARCHAR(50), IN IN_DATE_FROM DATE, IN IN_DATE_TO DATE, IN IN_ITEM_CATEGORY_ID INT,
IN IN_WAREHOUSE_ID INT)
BEGIN
	
SELECT DISTINCT STOCK_CODE, DESCRIPTION, NAME FROM (


SELECT I.STOCK_CODE, I.DESCRIPTION, UM.NAME FROM ITEM I
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID 
INNER JOIN CASH_SALE_ITEM CSI ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = CS.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CS.FORM_WORKFLOW_ID
INNER JOIN WAREHOUSE W ON CSI.WAREHOUSE_ID = W.WAREHOUSE_ID
WHERE IS_COMPLETE = 1
AND C.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_STOCK_CODE LIKE "" THEN I.STOCK_CODE LIKE I.STOCK_CODE 
 ELSE I.STOCK_CODE LIKE IN_STOCK_CODE END)
AND (RECEIPT_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO)
AND (CASE WHEN IN_ITEM_CATEGORY_ID != -1 THEN I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID
 ELSE I.ITEM_CATEGORY_ID = I.ITEM_CATEGORY_ID END)
AND (CASE WHEN IN_WAREHOUSE_ID != -1 THEN CSI.WAREHOUSE_ID = IN_WAREHOUSE_ID
 ELSE CSI.WAREHOUSE_ID = CSI.WAREHOUSE_ID END)
GROUP BY I.STOCK_CODE

UNION ALL


SELECT I.STOCK_CODE, I.DESCRIPTION, UM.NAME FROM ITEM I
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID 
INNER JOIN ACCOUNT_SALE_ITEM ASI ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = ART.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ART.FORM_WORKFLOW_ID
INNER JOIN WAREHOUSE W ON ASI.WAREHOUSE_ID = W.WAREHOUSE_ID
WHERE IS_COMPLETE = 1
AND C.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_STOCK_CODE LIKE "" THEN I.STOCK_CODE LIKE I.STOCK_CODE 
 ELSE I.STOCK_CODE LIKE IN_STOCK_CODE END)
AND (TRANSACTION_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO)





AND (AR_TRANSACTION_TYPE_ID = 4 || AR_TRANSACTION_TYPE_ID = 8 || AR_TRANSACTION_TYPE_ID = 10 || AR_TRANSACTION_TYPE_ID = 12 || AR_TRANSACTION_TYPE_ID = 14) 
AND (CASE WHEN IN_ITEM_CATEGORY_ID != -1 THEN I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID
ELSE I.ITEM_CATEGORY_ID = I.ITEM_CATEGORY_ID END)
AND (CASE WHEN IN_WAREHOUSE_ID != -1 THEN ASI.WAREHOUSE_ID = IN_WAREHOUSE_ID
 ELSE ASI.WAREHOUSE_ID = ASI.WAREHOUSE_ID END)
GROUP BY I.STOCK_CODE

UNION ALL

SELECT I.STOCK_CODE, I.DESCRIPTION, UM.NAME FROM ITEM I
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID 
INNER JOIN CAP_DELIVERY_ITEM CDI ON I.ITEM_ID = CDI.ITEM_ID
INNER JOIN CAP_DELIVERY CAP_DEL ON CAP_DEL.CAP_DELIVERY_ID = CDI.CAP_DELIVERY_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = CAP_DEL.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CAP_DEL.FORM_WORKFLOW_ID
INNER JOIN WAREHOUSE W ON CDI.WAREHOUSE_ID = W.WAREHOUSE_ID
WHERE IS_COMPLETE = 1
AND C.COMPANY_ID = IN_COMPANY_ID
AND (CASE WHEN IN_STOCK_CODE LIKE "" THEN I.STOCK_CODE LIKE I.STOCK_CODE 
 ELSE I.STOCK_CODE LIKE IN_STOCK_CODE END)
AND (DELIVERY_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO)
AND (CASE WHEN IN_ITEM_CATEGORY_ID != -1 THEN I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID
 ELSE I.ITEM_CATEGORY_ID = I.ITEM_CATEGORY_ID END)
AND (CASE WHEN IN_WAREHOUSE_ID != -1 THEN CDI.WAREHOUSE_ID = IN_WAREHOUSE_ID
 ELSE CDI.WAREHOUSE_ID = CDI.WAREHOUSE_ID END)
GROUP BY I.STOCK_CODE
) AS ITEM_SALES ORDER BY STOCK_CODE;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GET_DAILY_ITEM_SALE_DETAIL` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_DAILY_ITEM_SALE_DETAIL`(IN IN_COMPANY_ID INT, IN IN_STOCK_CODE VARCHAR(50), 
IN IN_INVOICE_NO VARCHAR(100), IN IN_DATE_FROM DATE, IN IN_DATE_TO DATE, IN IN_ITEM_CATEGORY_ID INT, IN IN_WAREHOUSE_ID INT)
BEGIN
	
SELECT SOURCE, SEQUENCE_NO, INVOICE_NO, QUANTITY, AMOUNT FROM (

 SELECT 'CASH SALES' AS SOURCE, CONCAT('CS ', CS.CS_NUMBER) AS SEQUENCE_NO,
  CS.SALE_INVOICE_NO AS INVOICE_NO, QUANTITY, (CSI.AMOUNT + COALESCE(CSI.VAT_AMOUNT, 0)) AS AMOUNT
 FROM CASH_SALE_ITEM CSI
  INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
  INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
  INNER JOIN COMPANY C ON C.COMPANY_ID = CS.COMPANY_ID
  INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CS.FORM_WORKFLOW_ID
  INNER JOIN WAREHOUSE W ON CSI.WAREHOUSE_ID = W.WAREHOUSE_ID
 WHERE IS_COMPLETE = 1
  AND C.COMPANY_ID = IN_COMPANY_ID
  AND I.STOCK_CODE = IN_STOCK_CODE
  AND CS.SALE_INVOICE_NO LIKE CONCAT('%', IN_INVOICE_NO, '%')
  AND (RECEIPT_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO)
  AND (CASE WHEN IN_ITEM_CATEGORY_ID != -1 THEN I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID
   ELSE I.ITEM_CATEGORY_ID = I.ITEM_CATEGORY_ID END)
  AND (CASE WHEN IN_WAREHOUSE_ID != -1 THEN CSI.WAREHOUSE_ID = IN_WAREHOUSE_ID
  ELSE CSI.WAREHOUSE_ID = CSI.WAREHOUSE_ID END)
  AND CS.CASH_SALE_TYPE_ID=1

 UNION ALL

 
 SELECT 'CASH SALES' AS SOURCE, CONCAT('CS ', CS.CS_NUMBER) AS SEQUENCE_NO,
  CS.SALE_INVOICE_NO AS INVOICE_NO, QUANTITY,  AMOUNT
 FROM CASH_SALE_ITEM CSI
  INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
  INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
  INNER JOIN COMPANY C ON C.COMPANY_ID = CS.COMPANY_ID
  INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CS.FORM_WORKFLOW_ID
  INNER JOIN WAREHOUSE W ON CSI.WAREHOUSE_ID = W.WAREHOUSE_ID
 WHERE IS_COMPLETE = 1
  AND C.COMPANY_ID = IN_COMPANY_ID
  AND I.STOCK_CODE = IN_STOCK_CODE
  AND CS.SALE_INVOICE_NO LIKE CONCAT('%', IN_INVOICE_NO, '%')
  AND (RECEIPT_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO)
  AND (CASE WHEN IN_ITEM_CATEGORY_ID != -1 THEN I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID
   ELSE I.ITEM_CATEGORY_ID = I.ITEM_CATEGORY_ID END)
  AND (CASE WHEN IN_WAREHOUSE_ID != -1 THEN CSI.WAREHOUSE_ID = IN_WAREHOUSE_ID
  ELSE CSI.WAREHOUSE_ID = CSI.WAREHOUSE_ID END)
  AND CS.CASH_SALE_TYPE_ID=5

 UNION ALL

 SELECT 'CASH SALES' AS SOURCE, CONCAT('CS-W ', CS.CS_NUMBER) AS SEQUENCE_NO,
   CS.SALE_INVOICE_NO AS INVOICE_NO, QUANTITY,  AMOUNT
 FROM CASH_SALE_ITEM CSI
  INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
  INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
  INNER JOIN COMPANY C ON C.COMPANY_ID = CS.COMPANY_ID
  INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CS.FORM_WORKFLOW_ID
  INNER JOIN WAREHOUSE W ON CSI.WAREHOUSE_ID = W.WAREHOUSE_ID
 WHERE IS_COMPLETE = 1
  AND C.COMPANY_ID = IN_COMPANY_ID
  AND I.STOCK_CODE = IN_STOCK_CODE
  AND CS.SALE_INVOICE_NO LIKE CONCAT('%', IN_INVOICE_NO, '%')
  AND (RECEIPT_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO)
  AND (CASE WHEN IN_ITEM_CATEGORY_ID != -1 THEN I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID
   ELSE I.ITEM_CATEGORY_ID = I.ITEM_CATEGORY_ID END)
  AND (CASE WHEN IN_WAREHOUSE_ID != -1 THEN CSI.WAREHOUSE_ID = IN_WAREHOUSE_ID
   ELSE CSI.WAREHOUSE_ID = CSI.WAREHOUSE_ID END)
  AND CS.CASH_SALE_TYPE_ID=2
 UNION ALL
 
 SELECT 'CASH SALES' AS SOURCE, CONCAT('CS-IS ', CS.CS_NUMBER) AS SEQUENCE_NO,
   CS.SALE_INVOICE_NO AS INVOICE_NO, QUANTITY,  AMOUNT
 FROM CASH_SALE_ITEM CSI
  INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
  INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
  INNER JOIN COMPANY C ON C.COMPANY_ID = CS.COMPANY_ID
  INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CS.FORM_WORKFLOW_ID
  INNER JOIN WAREHOUSE W ON CSI.WAREHOUSE_ID = W.WAREHOUSE_ID
 WHERE IS_COMPLETE = 1
  AND C.COMPANY_ID = IN_COMPANY_ID
  AND I.STOCK_CODE = IN_STOCK_CODE
  AND CS.SALE_INVOICE_NO LIKE CONCAT('%', IN_INVOICE_NO, '%')
  AND (RECEIPT_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO)
  AND (CASE WHEN IN_ITEM_CATEGORY_ID != -1 THEN I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID
   ELSE I.ITEM_CATEGORY_ID = I.ITEM_CATEGORY_ID END)
  AND (CASE WHEN IN_WAREHOUSE_ID != -1 THEN CSI.WAREHOUSE_ID = IN_WAREHOUSE_ID
   ELSE CSI.WAREHOUSE_ID = CSI.WAREHOUSE_ID END)
  AND CS.CASH_SALE_TYPE_ID=3
 UNION ALL
 
 SELECT 'CASH SALES' AS SOURCE, CONCAT('CS-POS ', CS.CS_NUMBER) AS SEQUENCE_NO,
   '' AS INVOICE_NO, QUANTITY,  AMOUNT
 FROM CASH_SALE_ITEM CSI
  INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
  INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
  INNER JOIN COMPANY C ON C.COMPANY_ID = CS.COMPANY_ID
  INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CS.FORM_WORKFLOW_ID
  INNER JOIN WAREHOUSE W ON CSI.WAREHOUSE_ID = W.WAREHOUSE_ID
 WHERE IS_COMPLETE = 1
  AND C.COMPANY_ID = IN_COMPANY_ID
  AND I.STOCK_CODE = IN_STOCK_CODE
  AND (RECEIPT_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO)
  AND (CASE WHEN IN_ITEM_CATEGORY_ID != -1 THEN I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID
   ELSE I.ITEM_CATEGORY_ID = I.ITEM_CATEGORY_ID END)
  AND (CASE WHEN IN_WAREHOUSE_ID != -1 THEN CSI.WAREHOUSE_ID = IN_WAREHOUSE_ID
   ELSE CSI.WAREHOUSE_ID = CSI.WAREHOUSE_ID END)
  AND CS.CASH_SALE_TYPE_ID=4

 UNION ALL

 
 SELECT 'CASH SALES' AS SOURCE, CONCAT('CS ', CS.CS_NUMBER) AS SEQUENCE_NO,
  CS.SALE_INVOICE_NO AS INVOICE_NO, QUANTITY,  AMOUNT
 FROM CASH_SALE_ITEM CSI
  INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
  INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
  INNER JOIN COMPANY C ON C.COMPANY_ID = CS.COMPANY_ID
  INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CS.FORM_WORKFLOW_ID
  INNER JOIN WAREHOUSE W ON CSI.WAREHOUSE_ID = W.WAREHOUSE_ID
 WHERE IS_COMPLETE = 1
  AND C.COMPANY_ID = IN_COMPANY_ID
  AND I.STOCK_CODE = IN_STOCK_CODE
  AND CS.SALE_INVOICE_NO LIKE CONCAT('%', IN_INVOICE_NO, '%')
  AND (RECEIPT_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO)
  AND (CASE WHEN IN_ITEM_CATEGORY_ID != -1 THEN I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID
   ELSE I.ITEM_CATEGORY_ID = I.ITEM_CATEGORY_ID END)
  AND (CASE WHEN IN_WAREHOUSE_ID != -1 THEN CSI.WAREHOUSE_ID = IN_WAREHOUSE_ID
  ELSE CSI.WAREHOUSE_ID = CSI.WAREHOUSE_ID END)
  AND CS.CASH_SALE_TYPE_ID = 6

 UNION ALL


 SELECT 'ACCOUNT SALES' AS SOURCE, CONCAT('AS ', SEQUENCE_NO),
  TRANSACTION_NUMBER AS INVOICE_NO, QUANTITY, (ASI.AMOUNT + COALESCE(ASI.VAT_AMOUNT, 0)) AS AMOUNT
 FROM ACCOUNT_SALE_ITEM ASI
  INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
  INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
  INNER JOIN COMPANY C ON C.COMPANY_ID = ART.COMPANY_ID
  INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ART.FORM_WORKFLOW_ID
  INNER JOIN WAREHOUSE W ON ASI.WAREHOUSE_ID = W.WAREHOUSE_ID
 WHERE IS_COMPLETE = 1
  AND C.COMPANY_ID = IN_COMPANY_ID
  AND I.STOCK_CODE = IN_STOCK_CODE
  AND TRANSACTION_NUMBER LIKE CONCAT('%', IN_INVOICE_NO, '%')
  AND (TRANSACTION_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO)
  AND AR_TRANSACTION_TYPE_ID = 4
  AND (CASE WHEN IN_ITEM_CATEGORY_ID != -1 THEN I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID
   ELSE I.ITEM_CATEGORY_ID = I.ITEM_CATEGORY_ID END)
  AND (CASE WHEN IN_WAREHOUSE_ID != -1 THEN ASI.WAREHOUSE_ID = IN_WAREHOUSE_ID
   ELSE ASI.WAREHOUSE_ID = ASI.WAREHOUSE_ID END)

 UNION ALL


 SELECT 'ACCOUNT SALES' AS SOURCE, CONCAT('AS ', SEQUENCE_NO),
  TRANSACTION_NUMBER AS INVOICE_NO, QUANTITY, ASI.AMOUNT
 FROM ACCOUNT_SALE_ITEM ASI
  INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
  INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
  INNER JOIN COMPANY C ON C.COMPANY_ID = ART.COMPANY_ID
  INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ART.FORM_WORKFLOW_ID
  INNER JOIN WAREHOUSE W ON ASI.WAREHOUSE_ID = W.WAREHOUSE_ID
 WHERE IS_COMPLETE = 1
  AND C.COMPANY_ID = IN_COMPANY_ID
  AND I.STOCK_CODE = IN_STOCK_CODE
  AND TRANSACTION_NUMBER LIKE CONCAT('%', IN_INVOICE_NO, '%')
  AND (TRANSACTION_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO)
  AND AR_TRANSACTION_TYPE_ID = 12
  AND (CASE WHEN IN_ITEM_CATEGORY_ID != -1 THEN I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID
   ELSE I.ITEM_CATEGORY_ID = I.ITEM_CATEGORY_ID END)
  AND (CASE WHEN IN_WAREHOUSE_ID != -1 THEN ASI.WAREHOUSE_ID = IN_WAREHOUSE_ID
   ELSE ASI.WAREHOUSE_ID = ASI.WAREHOUSE_ID END)

UNION ALL


 SELECT 'ACCOUNT SALES' AS SOURCE, CONCAT('AS/P ', SEQUENCE_NO),
  TRANSACTION_NUMBER AS INVOICE_NO, QUANTITY, ASI.AMOUNT
 FROM ACCOUNT_SALE_ITEM ASI
  INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
  INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
  INNER JOIN COMPANY C ON C.COMPANY_ID = ART.COMPANY_ID
  INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ART.FORM_WORKFLOW_ID
  INNER JOIN WAREHOUSE W ON ASI.WAREHOUSE_ID = W.WAREHOUSE_ID
 WHERE IS_COMPLETE = 1
  AND C.COMPANY_ID = IN_COMPANY_ID
  AND I.STOCK_CODE = IN_STOCK_CODE
  AND TRANSACTION_NUMBER LIKE CONCAT('%', IN_INVOICE_NO, '%')
  AND (TRANSACTION_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO)
  AND AR_TRANSACTION_TYPE_ID = 14
  AND (CASE WHEN IN_ITEM_CATEGORY_ID != -1 THEN I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID
   ELSE I.ITEM_CATEGORY_ID = I.ITEM_CATEGORY_ID END)
  AND (CASE WHEN IN_WAREHOUSE_ID != -1 THEN ASI.WAREHOUSE_ID = IN_WAREHOUSE_ID
   ELSE ASI.WAREHOUSE_ID = ASI.WAREHOUSE_ID END)

 UNION ALL

 SELECT 'ACCOUNT SALES' AS SOURCE, CONCAT('AS-W ', SEQUENCE_NO),
  TRANSACTION_NUMBER AS INVOICE_NO, QUANTITY, ASI.AMOUNT
 FROM ACCOUNT_SALE_ITEM ASI
  INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
  INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
  INNER JOIN COMPANY C ON C.COMPANY_ID = ART.COMPANY_ID
  INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ART.FORM_WORKFLOW_ID
  INNER JOIN WAREHOUSE W ON ASI.WAREHOUSE_ID = W.WAREHOUSE_ID
 WHERE IS_COMPLETE = 1
  AND C.COMPANY_ID = IN_COMPANY_ID
  AND I.STOCK_CODE = IN_STOCK_CODE
  AND TRANSACTION_NUMBER LIKE CONCAT('%', IN_INVOICE_NO, '%')
  AND (TRANSACTION_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO)
  AND AR_TRANSACTION_TYPE_ID = 8
  AND (CASE WHEN IN_ITEM_CATEGORY_ID != -1 THEN I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID
   ELSE I.ITEM_CATEGORY_ID = I.ITEM_CATEGORY_ID END)
  AND (CASE WHEN IN_WAREHOUSE_ID != -1 THEN ASI.WAREHOUSE_ID = IN_WAREHOUSE_ID
   ELSE ASI.WAREHOUSE_ID = ASI.WAREHOUSE_ID END)

  UNION ALL

 SELECT 'ACCOUNT SALES' AS SOURCE, CONCAT('AS-IS ', SEQUENCE_NO),
  TRANSACTION_NUMBER AS INVOICE_NO, QUANTITY, ASI.AMOUNT
 FROM ACCOUNT_SALE_ITEM ASI
  INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
  INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
  INNER JOIN COMPANY C ON C.COMPANY_ID = ART.COMPANY_ID
  INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ART.FORM_WORKFLOW_ID
  INNER JOIN WAREHOUSE W ON ASI.WAREHOUSE_ID = W.WAREHOUSE_ID
 WHERE IS_COMPLETE = 1
  AND C.COMPANY_ID = IN_COMPANY_ID
  AND I.STOCK_CODE = IN_STOCK_CODE
  AND TRANSACTION_NUMBER LIKE CONCAT('%', IN_INVOICE_NO, '%')
  AND (TRANSACTION_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO)
  AND AR_TRANSACTION_TYPE_ID = 10
  AND (CASE WHEN IN_ITEM_CATEGORY_ID != -1 THEN I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID
   ELSE I.ITEM_CATEGORY_ID = I.ITEM_CATEGORY_ID END)
  AND (CASE WHEN IN_WAREHOUSE_ID != -1 THEN ASI.WAREHOUSE_ID = IN_WAREHOUSE_ID
   ELSE ASI.WAREHOUSE_ID = ASI.WAREHOUSE_ID END)

  UNION ALL


  SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE,
  CONCAT('PIAD', CAP_DEL.CAPD_NUMBER) AS SEQUENCE_NO , CAP_DEL.SALES_INVOICE_NO AS
  INVOICE_NO, CDI.QUANTITY, (CDI.AMOUNT + COALESCE(CDI.VAT_AMOUNT, 0)) AS AMOUNT
  FROM CAP_DELIVERY CAP_DEL
  INNER JOIN CAP_DELIVERY_ITEM CDI ON CDI.CAP_DELIVERY_ID = CAP_DEL.CAP_DELIVERY_ID
  INNER JOIN COMPANY C ON C.COMPANY_ID = CAP_DEL.COMPANY_ID
  INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CAP_DEL.FORM_WORKFLOW_ID
  INNER JOIN ITEM I ON I.ITEM_ID = CDI.ITEM_ID
  INNER JOIN WAREHOUSE W ON CDI.WAREHOUSE_ID = W.WAREHOUSE_ID
 WHERE IS_COMPLETE = 1
  AND C.COMPANY_ID = IN_COMPANY_ID
  AND I.STOCK_CODE = IN_STOCK_CODE
  AND SALES_INVOICE_NO LIKE CONCAT('%', IN_INVOICE_NO, '%')
  AND (DELIVERY_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO)
  AND (CASE WHEN IN_ITEM_CATEGORY_ID != -1 THEN I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID
   ELSE I.ITEM_CATEGORY_ID = I.ITEM_CATEGORY_ID END)
  AND (CASE WHEN IN_WAREHOUSE_ID != -1 THEN CDI.WAREHOUSE_ID = IN_WAREHOUSE_ID
   ELSE CDI.WAREHOUSE_ID = CDI.WAREHOUSE_ID END)
  AND CAP_DEL.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1

UNION ALL


  SELECT 'PAID IN ADVANCE DELIVERY - IS' AS SOURCE,
  CONCAT('PIAD-IS', CAP_DEL.CAPD_NUMBER) AS SEQUENCE_NO , CAP_DEL.SALES_INVOICE_NO AS
  INVOICE_NO, CDI.QUANTITY, CDI.AMOUNT FROM CAP_DELIVERY CAP_DEL
  INNER JOIN CAP_DELIVERY_ITEM CDI ON CDI.CAP_DELIVERY_ID = CAP_DEL.CAP_DELIVERY_ID
  INNER JOIN COMPANY C ON C.COMPANY_ID = CAP_DEL.COMPANY_ID
  INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CAP_DEL.FORM_WORKFLOW_ID
  INNER JOIN ITEM I ON I.ITEM_ID = CDI.ITEM_ID
  INNER JOIN WAREHOUSE W ON CDI.WAREHOUSE_ID = W.WAREHOUSE_ID
 WHERE IS_COMPLETE = 1
  AND C.COMPANY_ID = IN_COMPANY_ID
  AND I.STOCK_CODE = IN_STOCK_CODE
  AND SALES_INVOICE_NO LIKE CONCAT('%', IN_INVOICE_NO, '%')
  AND (DELIVERY_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO)
  AND (CASE WHEN IN_ITEM_CATEGORY_ID != -1 THEN I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID
   ELSE I.ITEM_CATEGORY_ID = I.ITEM_CATEGORY_ID END)
  AND (CASE WHEN IN_WAREHOUSE_ID != -1 THEN CDI.WAREHOUSE_ID = IN_WAREHOUSE_ID
   ELSE CDI.WAREHOUSE_ID = CDI.WAREHOUSE_ID END)
  AND CAP_DEL.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3

UNION ALL


  SELECT 'PAID IN ADVANCE DELIVERY - AS' AS SOURCE,
  CONCAT('PIAD-', CAP_DEL.CAPD_NUMBER) AS SEQUENCE_NO , CAP_DEL.SALES_INVOICE_NO AS
  INVOICE_NO, CDI.QUANTITY, CDI.AMOUNT FROM CAP_DELIVERY CAP_DEL
  INNER JOIN CAP_DELIVERY_ITEM CDI ON CDI.CAP_DELIVERY_ID = CAP_DEL.CAP_DELIVERY_ID
  INNER JOIN COMPANY C ON C.COMPANY_ID = CAP_DEL.COMPANY_ID
  INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CAP_DEL.FORM_WORKFLOW_ID
  INNER JOIN ITEM I ON I.ITEM_ID = CDI.ITEM_ID
  INNER JOIN WAREHOUSE W ON CDI.WAREHOUSE_ID = W.WAREHOUSE_ID
 WHERE IS_COMPLETE = 1
  AND C.COMPANY_ID = IN_COMPANY_ID
  AND I.STOCK_CODE = IN_STOCK_CODE
  AND SALES_INVOICE_NO LIKE CONCAT('%', IN_INVOICE_NO, '%')
  AND (DELIVERY_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO)
  AND (CASE WHEN IN_ITEM_CATEGORY_ID != -1 THEN I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID
   ELSE I.ITEM_CATEGORY_ID = I.ITEM_CATEGORY_ID END)
  AND (CASE WHEN IN_WAREHOUSE_ID != -1 THEN CDI.WAREHOUSE_ID = IN_WAREHOUSE_ID
   ELSE CDI.WAREHOUSE_ID = CDI.WAREHOUSE_ID END)
  AND CAP_DEL.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 4

UNION ALL


  SELECT 'PAID IN ADVANCE DELIVERY - AS' AS SOURCE,
  CONCAT('PIAD-', CAP_DEL.CAPD_NUMBER) AS SEQUENCE_NO , CAP_DEL.SALES_INVOICE_NO AS
  INVOICE_NO, CDI.QUANTITY, CDI.AMOUNT FROM CAP_DELIVERY CAP_DEL
  INNER JOIN CAP_DELIVERY_ITEM CDI ON CDI.CAP_DELIVERY_ID = CAP_DEL.CAP_DELIVERY_ID
  INNER JOIN COMPANY C ON C.COMPANY_ID = CAP_DEL.COMPANY_ID
  INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CAP_DEL.FORM_WORKFLOW_ID
  INNER JOIN ITEM I ON I.ITEM_ID = CDI.ITEM_ID
  INNER JOIN WAREHOUSE W ON CDI.WAREHOUSE_ID = W.WAREHOUSE_ID
 WHERE IS_COMPLETE = 1
  AND C.COMPANY_ID = IN_COMPANY_ID
  AND I.STOCK_CODE = IN_STOCK_CODE
  AND SALES_INVOICE_NO LIKE CONCAT('%', IN_INVOICE_NO, '%')
  AND (DELIVERY_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO)
  AND (CASE WHEN IN_ITEM_CATEGORY_ID != -1 THEN I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID
   ELSE I.ITEM_CATEGORY_ID = I.ITEM_CATEGORY_ID END)
  AND (CASE WHEN IN_WAREHOUSE_ID != -1 THEN CDI.WAREHOUSE_ID = IN_WAREHOUSE_ID
   ELSE CDI.WAREHOUSE_ID = CDI.WAREHOUSE_ID END)
  AND CAP_DEL.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 5

) AS DIS;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GET_FORMS_BY_REF_OBJECT_ID` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_FORMS_BY_REF_OBJECT_ID`(IN IN_REF_OBJECT_ID INT)
BEGIN

SELECT SOURCE, EB_OBJECT_ID FROM (
SELECT CONCAT('AS-IS ', COALESCE(CONCAT(C.COMPANY_CODE,' ',AT.SEQUENCE_NO), AT.SEQUENCE_NO)) AS SOURCE, ASI.EB_OBJECT_ID
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = AT.COMPANY_ID
INNER JOIN OBJECT_TO_OBJECT OTO ON OTO.TO_OBJECT_ID = ASI.EB_OBJECT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = AT.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4 AND AT.AR_TRANSACTION_TYPE_ID = 10 
AND OTO.FROM_OBJECT_ID = IN_REF_OBJECT_ID
UNION ALL
SELECT CONCAT('ASR-IS ', COALESCE(CONCAT(C.COMPANY_CODE,' ',AT.SEQUENCE_NO), AT.SEQUENCE_NO)) AS SOURCE, ASI.EB_OBJECT_ID
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = AT.COMPANY_ID
INNER JOIN OBJECT_TO_OBJECT OTO ON OTO.TO_OBJECT_ID = ASI.EB_OBJECT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = AT.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4 AND AT.AR_TRANSACTION_TYPE_ID = 11
AND OTO.FROM_OBJECT_ID = IN_REF_OBJECT_ID
UNION ALL
SELECT CONCAT('CS-IS ', COALESCE(CONCAT(C.COMPANY_CODE,' ',CS.CS_NUMBER), CS.CS_NUMBER)) AS SOURCE, CSI.EB_OBJECT_ID
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = CS.COMPANY_ID
INNER JOIN OBJECT_TO_OBJECT OTO ON OTO.TO_OBJECT_ID = CSI.EB_OBJECT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CS.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4 AND CS.CASH_SALE_TYPE_ID = 3 
AND OTO.FROM_OBJECT_ID = IN_REF_OBJECT_ID
UNION ALL
SELECT CONCAT('CSR-IS ', COALESCE(CONCAT(C.COMPANY_CODE,' ',CSR.CSR_NUMBER), CSR.CSR_NUMBER)) AS SOURCE, CSRI.EB_OBJECT_ID
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN OBJECT_TO_OBJECT OTO ON OTO.TO_OBJECT_ID = CSRI.EB_OBJECT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CSR.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4 AND CSR.CASH_SALE_TYPE_ID = 3 
AND OTO.FROM_OBJECT_ID = IN_REF_OBJECT_ID
UNION ALL 
SELECT CONCAT('CAP-IS ', COALESCE(CONCAT(C.COMPANY_CODE,' ',CAP.CAP_NUMBER), CAP.CAP_NUMBER)) AS SOURCE, CAPI.EB_OBJECT_ID
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN OBJECT_TO_OBJECT OTO ON OTO.TO_OBJECT_ID = CAPI.EB_OBJECT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CAP.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4 AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3 
AND OTO.FROM_OBJECT_ID = IN_REF_OBJECT_ID
UNION ALL 
SELECT CONCAT('PIAD-IS ', COALESCE(CONCAT(C.COMPANY_CODE,' ',CAPD.CAPD_NUMBER), CAPD.CAPD_NUMBER)) AS SOURCE, CAPDI.EB_OBJECT_ID
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = CAPD.COMPANY_ID
INNER JOIN OBJECT_TO_OBJECT OTO ON OTO.TO_OBJECT_ID = CAPDI.EB_OBJECT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CAPD.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4 AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3 
AND OTO.FROM_OBJECT_ID = IN_REF_OBJECT_ID
UNION ALL
SELECT CONCAT((CASE WHEN PR.PROCESSING_REPORT_TYPE_ID = 1 THEN "PR-MR "
    WHEN PR.PROCESSING_REPORT_TYPE_ID = 2 THEN "PR-MO "
    WHEN PR.PROCESSING_REPORT_TYPE_ID = 3 THEN "PR-PI "
    WHEN PR.PROCESSING_REPORT_TYPE_ID = 4 THEN "PR-PO "
    WHEN PR.PROCESSING_REPORT_TYPE_ID = 5 THEN "WIP-B "
    WHEN PR.PROCESSING_REPORT_TYPE_ID = 6 THEN "PR " END), COALESCE(CONCAT(C.COMPANY_CODE,' ',PR.SEQUENCE_NO), PR.SEQUENCE_NO)) AS SOURCE, RMI.EB_OBJECT_ID
FROM PR_RAW_MATERIALS_ITEM RMI
INNER JOIN PROCESSING_REPORT PR ON PR.PROCESSING_REPORT_ID = RMI.PROCESSING_REPORT_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = PR.COMPANY_ID
INNER JOIN OBJECT_TO_OBJECT OTO ON OTO.TO_OBJECT_ID = RMI.EB_OBJECT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = PR.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND OTO.FROM_OBJECT_ID = IN_REF_OBJECT_ID
UNION ALL 
SELECT CONCAT('PR-MR ', COALESCE(CONCAT(C.COMPANY_CODE,' ',PR.SEQUENCE_NO), PR.SEQUENCE_NO)) AS SOURCE, OMI.EB_OBJECT_ID
FROM PR_OTHER_MATERIALS_ITEM OMI
INNER JOIN PROCESSING_REPORT PR ON PR.PROCESSING_REPORT_ID = OMI.PROCESSING_REPORT_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = PR.COMPANY_ID
INNER JOIN OBJECT_TO_OBJECT OTO ON OTO.TO_OBJECT_ID = OMI.EB_OBJECT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = PR.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4 AND PR.PROCESSING_REPORT_TYPE_ID = 1
AND OTO.FROM_OBJECT_ID = IN_REF_OBJECT_ID
UNION ALL
SELECT CONCAT('PR-MO ', COALESCE(CONCAT(C.COMPANY_CODE,' ',PR.SEQUENCE_NO), PR.SEQUENCE_NO)) AS SOURCE, OMI.EB_OBJECT_ID
FROM PR_OTHER_MATERIALS_ITEM OMI
INNER JOIN PROCESSING_REPORT PR ON PR.PROCESSING_REPORT_ID = OMI.PROCESSING_REPORT_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = PR.COMPANY_ID
INNER JOIN OBJECT_TO_OBJECT OTO ON OTO.TO_OBJECT_ID = OMI.EB_OBJECT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = PR.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4 AND PR.PROCESSING_REPORT_TYPE_ID = 2
AND OTO.FROM_OBJECT_ID = IN_REF_OBJECT_ID
UNION ALL
SELECT CONCAT('PR-PI ', COALESCE(CONCAT(C.COMPANY_CODE,' ',PR.SEQUENCE_NO), PR.SEQUENCE_NO)) AS SOURCE, OMI.EB_OBJECT_ID
FROM PR_OTHER_MATERIALS_ITEM OMI
INNER JOIN PROCESSING_REPORT PR ON PR.PROCESSING_REPORT_ID = OMI.PROCESSING_REPORT_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = PR.COMPANY_ID
INNER JOIN OBJECT_TO_OBJECT OTO ON OTO.TO_OBJECT_ID = OMI.EB_OBJECT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = PR.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4 AND PR.PROCESSING_REPORT_TYPE_ID = 3
AND OTO.FROM_OBJECT_ID = IN_REF_OBJECT_ID
UNION ALL
SELECT CONCAT('PR-PO ', COALESCE(CONCAT(C.COMPANY_CODE,' ',PR.SEQUENCE_NO), PR.SEQUENCE_NO)) AS SOURCE, OMI.EB_OBJECT_ID
FROM PR_OTHER_MATERIALS_ITEM OMI
INNER JOIN PROCESSING_REPORT PR ON PR.PROCESSING_REPORT_ID = OMI.PROCESSING_REPORT_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = PR.COMPANY_ID
INNER JOIN OBJECT_TO_OBJECT OTO ON OTO.TO_OBJECT_ID = OMI.EB_OBJECT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = PR.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4 AND PR.PROCESSING_REPORT_TYPE_ID = 4
AND OTO.FROM_OBJECT_ID = IN_REF_OBJECT_ID
UNION ALL
SELECT CONCAT('SAO-IS ', COALESCE(CONCAT(C.COMPANY_CODE,' ',SA.SA_NUMBER), SA.SA_NUMBER)) AS SOURCE, SAI.EB_OBJECT_ID
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = SA.COMPANY_ID
INNER JOIN OBJECT_TO_OBJECT OTO ON OTO.TO_OBJECT_ID = SAI.EB_OBJECT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = SA.FORM_WORKFLOW_ID
WHERE SAI.QUANTITY < 0 AND FW.CURRENT_STATUS_ID != 4
AND OTO.FROM_OBJECT_ID = IN_REF_OBJECT_ID
UNION ALL 
SELECT CONCAT('TR-IS ', COALESCE(CONCAT(C.COMPANY_CODE,' ',TR.TR_NUMBER), TR.TR_NUMBER)) AS SOURCE, TRI.EB_OBJECT_ID
FROM R_TRANSFER_RECEIPT_ITEM TRI
INNER JOIN R_TRANSFER_RECEIPT TR ON TR.R_TRANSFER_RECEIPT_ID = TRI.R_TRANSFER_RECEIPT_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = TR.COMPANY_ID
INNER JOIN OBJECT_TO_OBJECT OTO ON OTO.TO_OBJECT_ID = TRI.EB_OBJECT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = TR.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4 AND TR.TRANSFER_RECEIPT_TYPE_ID = 2
AND OTO.FROM_OBJECT_ID = IN_REF_OBJECT_ID
UNION ALL
SELECT CONCAT('IC ', COALESCE(CONCAT(C.COMPANY_CODE, ' ', IC.ITEM_CONVERSION_NUMBER),
IC.ITEM_CONVERSION_NUMBER)) AS SOURCE, ICL.EB_OBJECT_ID
FROM ITEM_CONVERSION_LINE ICL
INNER JOIN ITEM_CONVERSION IC ON IC.ITEM_CONVERSION_ID = ICL.ITEM_CONVERSION_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = IC.COMPANY_ID
INNER JOIN OBJECT_TO_OBJECT OTO ON OTO.TO_OBJECT_ID = ICL.EB_OBJECT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = IC.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND OTO.FROM_OBJECT_ID = IN_REF_OBJECT_ID
) AS TBL ORDER BY SOURCE;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GET_GROSS_PROFIT_ANALYSIS` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_GROSS_PROFIT_ANALYSIS`(IN IN_COMPANY_ID INT, IN IN_ITEM_CATEGORY_ID INT, IN IN_DATE_FROM DATE, IN IN_DATE_TO DATE)
BEGIN

IF IN_ITEM_CATEGORY_ID IS NULL THEN

SELECT ITEM_ID, STOCK_CODE, DESCRIPTION, SUM(QTY_SOLD), NAME, SUM(NET_SALES), SUM(COST_OF_SALES) FROM (


SELECT  I.ITEM_ID, I.STOCK_CODE, I.DESCRIPTION, SUM(QUANTITY) AS QTY_SOLD, UM.NAME,
SUM(CSI.AMOUNT) AS NET_SALES, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) AS COST_OF_SALES
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CS.FORM_WORKFLOW_ID
WHERE IS_COMPLETE = 1
AND CS.CASH_SALE_TYPE_ID IN (1, 2)
AND COMPANY_ID = IN_COMPANY_ID
AND RECEIPT_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
GROUP BY I.ITEM_ID

UNION ALL


SELECT  I.ITEM_ID, I.STOCK_CODE, I.DESCRIPTION, SUM(QUANTITY) AS QTY_SOLD, UM.NAME,
SUM((CSI.QUANTITY * CSI.SRP) - COALESCE(CSI.DISCOUNT, 0)) AS NET_SALES, SUM(COALESCE((
SELECT SUM(PLI.QUANTITY * RM.UNIT_COST) AS COS FROM PRODUCT_LINE_ITEM PLI
INNER JOIN PRODUCT_LINE PL ON PL.PRODUCT_LINE_ID = PLI.PRODUCT_LINE_ID
INNER JOIN CSI_RAW_MATERIAL RM ON RM.ITEM_ID = PLI.ITEM_ID
WHERE PL.MAIN_ITEM_ID = CSI.ITEM_ID
AND RM.CASH_SALE_ID = CS.CASH_SALE_ID), 0) * CSI.QUANTITY) AS COST_OF_SALES
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CS.FORM_WORKFLOW_ID
WHERE IS_COMPLETE = 1
AND CS.CASH_SALE_TYPE_ID = 6
AND CS.COMPANY_ID = IN_COMPANY_ID
AND CS.RECEIPT_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
GROUP BY I.ITEM_ID

UNION ALL 


SELECT  I.ITEM_ID, I.STOCK_CODE, I.DESCRIPTION, SUM(QUANTITY) AS QTY_SOLD, UM.NAME,
SUM(ASI.AMOUNT) AS NET_SALES, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) AS COST_OF_SALES
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ART.FORM_WORKFLOW_ID
WHERE IS_COMPLETE = 1
AND COMPANY_ID = IN_COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID IN (4, 8, 12, 14)
AND TRANSACTION_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
GROUP BY I.ITEM_ID

UNION ALL 


SELECT  I.ITEM_ID, I.STOCK_CODE, I.DESCRIPTION, SUM(QUANTITY) AS QTY_SOLD, UM.NAME,
SUM(CSRI.AMOUNT) AS NET_SALES, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) AS COST_OF_SALES
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CSR.FORM_WORKFLOW_ID
WHERE IS_COMPLETE = 1
AND CSR.CASH_SALE_TYPE_ID IN (1, 2)
AND COMPANY_ID = IN_COMPANY_ID
AND DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
GROUP BY I.ITEM_ID

UNION ALL


SELECT  I.ITEM_ID, I.STOCK_CODE, I.DESCRIPTION, SUM(QUANTITY) AS QTY_SOLD, UM.NAME,
SUM(ASI.AMOUNT)  AS NET_SALES, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) AS COST_OF_SALES
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ART.FORM_WORKFLOW_ID
WHERE IS_COMPLETE = 1
AND COMPANY_ID = IN_COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID IN (5, 9)
AND TRANSACTION_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
GROUP BY I.ITEM_ID

UNION ALL


SELECT I.ITEM_ID, I.STOCK_CODE, I.DESCRIPTION, -SUM(QUANTITY) AS QTY_SOLD, UM.NAME,
-SUM(ASI.AMOUNT) AS NET_SALES, -SUM(COALESCE(UNIT_COST, 0) * QUANTITY) AS COST_OF_SALES
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ART.FORM_WORKFLOW_ID
WHERE IS_COMPLETE = 1
AND COMPANY_ID = IN_COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 7
AND TRANSACTION_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
GROUP BY I.ITEM_ID

UNION ALL


SELECT I.ITEM_ID, I.STOCK_CODE, I.DESCRIPTION, SUM(QUANTITY) AS QTY_SOLD, UM.NAME,
SUM(ASI.AMOUNT) AS NET_SALES, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) AS COST_OF_SALES
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ART.FORM_WORKFLOW_ID
WHERE IS_COMPLETE = 1
AND COMPANY_ID = IN_COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 10
AND TRANSACTION_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
GROUP BY I.ITEM_ID

UNION ALL


SELECT I.ITEM_ID, I.STOCK_CODE, I.DESCRIPTION, SUM(QUANTITY) AS QTY_SOLD, UM.NAME,
SUM(ASI.AMOUNT) AS NET_SALES, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) AS COST_OF_SALES
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ART.FORM_WORKFLOW_ID
WHERE IS_COMPLETE = 1
AND COMPANY_ID = IN_COMPANY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 11
AND TRANSACTION_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
GROUP BY I.ITEM_ID

UNION ALL


SELECT  I.ITEM_ID, I.STOCK_CODE, I.DESCRIPTION, SUM(QUANTITY) AS QTY_SOLD, UM.NAME,
SUM(CSI.AMOUNT) AS NET_SALES, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) AS COST_OF_SALES
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CS.FORM_WORKFLOW_ID
WHERE IS_COMPLETE = 1
AND CS.CASH_SALE_TYPE_ID = 3
AND COMPANY_ID = IN_COMPANY_ID
AND RECEIPT_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
GROUP BY I.ITEM_ID

UNION ALL 


SELECT  I.ITEM_ID, I.STOCK_CODE, I.DESCRIPTION, SUM(QUANTITY) AS QTY_SOLD, UM.NAME,
SUM(CSRI.AMOUNT) AS NET_SALES, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) AS COST_OF_SALES
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CSR.FORM_WORKFLOW_ID
WHERE IS_COMPLETE = 1
AND CSR.CASH_SALE_TYPE_ID = 3
AND COMPANY_ID = IN_COMPANY_ID
AND DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
GROUP BY I.ITEM_ID

UNION ALL


SELECT I.ITEM_ID, I.STOCK_CODE, I.DESCRIPTION, SUM(QUANTITY) AS QTY_SOLD, UM.NAME,
SUM(CAPDI.AMOUNT)  AS NET_SALES, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) AS COST_OF_SALES
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CAPD.FORM_WORKFLOW_ID
WHERE IS_COMPLETE = 1
AND COMPANY_ID = IN_COMPANY_ID
AND DELIVERY_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1
GROUP BY I.ITEM_ID

UNION ALL


SELECT I.ITEM_ID, I.STOCK_CODE, I.DESCRIPTION, SUM(QUANTITY) AS QTY_SOLD, UM.NAME,
SUM(CAPDI.AMOUNT) AS NET_SALES, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) AS COST_OF_SALES
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CAPD.FORM_WORKFLOW_ID
WHERE IS_COMPLETE = 1
AND COMPANY_ID = IN_COMPANY_ID
AND DELIVERY_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3
GROUP BY I.ITEM_ID

UNION ALL


SELECT I.ITEM_ID, I.STOCK_CODE, I.DESCRIPTION, SUM(QUANTITY) AS QTY_SOLD, UM.NAME,
SUM(CAPDI.AMOUNT) AS NET_SALES, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) AS COST_OF_SALES
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CAPD.FORM_WORKFLOW_ID
WHERE IS_COMPLETE = 1
AND COMPANY_ID = IN_COMPANY_ID
AND DELIVERY_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 4
GROUP BY I.ITEM_ID

) AS GPA GROUP BY ITEM_ID ORDER BY STOCK_CODE;

ELSE

SELECT ITEM_ID, STOCK_CODE, DESCRIPTION, SUM(QTY_SOLD), NAME, SUM(NET_SALES),  SUM(COST_OF_SALES) FROM (


SELECT  I.ITEM_ID, I.STOCK_CODE, I.DESCRIPTION, SUM(QUANTITY) AS QTY_SOLD, UM.NAME,
SUM(CSI.AMOUNT) AS NET_SALES, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) AS COST_OF_SALES
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CS.FORM_WORKFLOW_ID
WHERE IS_COMPLETE = 1
AND CS.CASH_SALE_TYPE_ID IN (1, 2)
AND COMPANY_ID = IN_COMPANY_ID
AND I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID 
AND RECEIPT_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
GROUP BY I.ITEM_ID

UNION ALL


SELECT  I.ITEM_ID, I.STOCK_CODE, I.DESCRIPTION, SUM(QUANTITY) AS QTY_SOLD, UM.NAME,
SUM((CSI.QUANTITY * CSI.SRP) - COALESCE(CSI.DISCOUNT, 0)) AS NET_SALES,
SUM(COALESCE((SELECT SUM(PLI.QUANTITY * RM.UNIT_COST) AS COS FROM PRODUCT_LINE_ITEM PLI
INNER JOIN PRODUCT_LINE PL ON PL.PRODUCT_LINE_ID = PLI.PRODUCT_LINE_ID
INNER JOIN CSI_RAW_MATERIAL RM ON RM.ITEM_ID = PLI.ITEM_ID
WHERE PL.MAIN_ITEM_ID = CSI.ITEM_ID
AND RM.CASH_SALE_ID = CS.CASH_SALE_ID), 0) * CSI.QUANTITY) AS COST_OF_SALES
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CS.FORM_WORKFLOW_ID
WHERE IS_COMPLETE = 1
AND CS.CASH_SALE_TYPE_ID = 6
AND CS.COMPANY_ID = IN_COMPANY_ID
AND CS.RECEIPT_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID 
GROUP BY I.ITEM_ID

UNION ALL


SELECT  I.ITEM_ID, I.STOCK_CODE, I.DESCRIPTION, SUM(QUANTITY) AS QTY_SOLD, UM.NAME,
SUM(ASI.AMOUNT) AS NET_SALES, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) AS COST_OF_SALES
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ART.FORM_WORKFLOW_ID
WHERE IS_COMPLETE = 1
AND COMPANY_ID = IN_COMPANY_ID
AND I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID 
AND ART.AR_TRANSACTION_TYPE_ID IN (4, 8)
AND TRANSACTION_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
GROUP BY I.ITEM_ID

UNION ALL 


SELECT I.ITEM_ID, I.STOCK_CODE, I.DESCRIPTION, SUM(QUANTITY) AS QTY_SOLD, UM.NAME,
SUM(CSRI.AMOUNT) AS NET_SALES, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) AS COST_OF_SALES
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CSR.FORM_WORKFLOW_ID
WHERE IS_COMPLETE = 1
AND CSR.CASH_SALE_TYPE_ID IN (1, 2)
AND COMPANY_ID = IN_COMPANY_ID
AND I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID 
AND DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
GROUP BY I.ITEM_ID

UNION ALL


SELECT  I.ITEM_ID, I.STOCK_CODE, I.DESCRIPTION, SUM(QUANTITY) AS QTY_SOLD, UM.NAME,
SUM(ASI.AMOUNT) AS NET_SALES, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) AS COST_OF_SALES
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ART.FORM_WORKFLOW_ID
WHERE IS_COMPLETE = 1
AND COMPANY_ID = IN_COMPANY_ID
AND I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID 
AND ART.AR_TRANSACTION_TYPE_ID IN (5, 9)
AND TRANSACTION_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
GROUP BY I.ITEM_ID

UNION ALL


SELECT  I.ITEM_ID, I.STOCK_CODE, I.DESCRIPTION, -SUM(QUANTITY) AS QTY_SOLD, UM.NAME,
-SUM(ASI.AMOUNT) AS NET_SALES, -SUM(COALESCE(UNIT_COST, 0) * QUANTITY) AS COST_OF_SALES
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ART.FORM_WORKFLOW_ID
WHERE IS_COMPLETE = 1
AND COMPANY_ID = IN_COMPANY_ID
AND I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID 
AND ART.AR_TRANSACTION_TYPE_ID = 7
AND TRANSACTION_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
GROUP BY I.ITEM_ID

UNION ALL


SELECT I.ITEM_ID, I.STOCK_CODE, I.DESCRIPTION, SUM(QUANTITY) AS QTY_SOLD, UM.NAME,
SUM(ASI.AMOUNT) AS NET_SALES, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) AS COST_OF_SALES
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ART.FORM_WORKFLOW_ID
WHERE IS_COMPLETE = 1
AND COMPANY_ID = IN_COMPANY_ID
AND I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 10
AND TRANSACTION_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
GROUP BY I.ITEM_ID

UNION ALL


SELECT  I.ITEM_ID, I.STOCK_CODE, I.DESCRIPTION, SUM(QUANTITY) AS QTY_SOLD, UM.NAME,
SUM(ASI.AMOUNT) AS NET_SALES, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) AS COST_OF_SALES
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ART.FORM_WORKFLOW_ID
WHERE IS_COMPLETE = 1
AND COMPANY_ID = IN_COMPANY_ID
AND I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID
AND ART.AR_TRANSACTION_TYPE_ID = 11
AND TRANSACTION_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
GROUP BY I.ITEM_ID

UNION ALL


SELECT  I.ITEM_ID, I.STOCK_CODE, I.DESCRIPTION, SUM(QUANTITY) AS QTY_SOLD, UM.NAME,
SUM(CSI.AMOUNT) AS NET_SALES, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) AS COST_OF_SALES
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CS.FORM_WORKFLOW_ID
WHERE IS_COMPLETE = 1
AND CS.CASH_SALE_TYPE_ID = 3
AND COMPANY_ID = IN_COMPANY_ID
AND I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID
AND RECEIPT_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
GROUP BY I.ITEM_ID

UNION ALL


SELECT  I.ITEM_ID, I.STOCK_CODE, I.DESCRIPTION, SUM(QUANTITY) AS QTY_SOLD, UM.NAME,
SUM(CSRI.AMOUNT) AS NET_SALES, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) AS COST_OF_SALES
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CSR.FORM_WORKFLOW_ID
WHERE IS_COMPLETE = 1
AND CSR.CASH_SALE_TYPE_ID = 3
AND COMPANY_ID = IN_COMPANY_ID
AND I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID
AND DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
GROUP BY I.ITEM_ID

UNION ALL


SELECT I.ITEM_ID, I.STOCK_CODE, I.DESCRIPTION, SUM(QUANTITY) AS QTY_SOLD, UM.NAME,
SUM(CAPDI.AMOUNT) AS NET_SALES, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) AS COST_OF_SALES
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CAPD.FORM_WORKFLOW_ID
WHERE IS_COMPLETE = 1
AND COMPANY_ID = IN_COMPANY_ID
AND I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID
AND DELIVERY_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1
GROUP BY I.ITEM_ID

UNION ALL


SELECT I.ITEM_ID, I.STOCK_CODE, I.DESCRIPTION, SUM(QUANTITY) AS QTY_SOLD, UM.NAME,
SUM(CAPDI.AMOUNT) AS NET_SALES, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) AS COST_OF_SALES
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CAPD.FORM_WORKFLOW_ID
WHERE IS_COMPLETE = 1
AND COMPANY_ID = IN_COMPANY_ID
AND I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID
AND DELIVERY_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3
GROUP BY I.ITEM_ID

UNION ALL


SELECT I.ITEM_ID, I.STOCK_CODE, I.DESCRIPTION, SUM(QUANTITY) AS QTY_SOLD, UM.NAME,
SUM(CAPDI.AMOUNT) AS NET_SALES, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) AS COST_OF_SALES
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CAPD.FORM_WORKFLOW_ID
WHERE IS_COMPLETE = 1
AND COMPANY_ID = IN_COMPANY_ID
AND I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID
AND DELIVERY_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 4
GROUP BY I.ITEM_ID

UNION ALL


SELECT I.ITEM_ID, I.STOCK_CODE, I.DESCRIPTION, SUM(QUANTITY) AS QTY_SOLD, UM.NAME,
SUM(CAPDI.AMOUNT) AS NET_SALES, SUM(COALESCE(UNIT_COST, 0) * QUANTITY) AS COST_OF_SALES
FROM CAP_DELIVERY_ITEM CAPDI
INNER JOIN CAP_DELIVERY CAPD ON CAPD.CAP_DELIVERY_ID = CAPDI.CAP_DELIVERY_ID
INNER JOIN ITEM I ON I.ITEM_ID = CAPDI.ITEM_ID
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID = I.UNIT_MEASUREMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CAPD.FORM_WORKFLOW_ID
WHERE IS_COMPLETE = 1
AND COMPANY_ID = IN_COMPANY_ID
AND I.ITEM_CATEGORY_ID = IN_ITEM_CATEGORY_ID
AND DELIVERY_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 5
GROUP BY I.ITEM_ID

) AS GPA GROUP BY ITEM_ID ORDER BY STOCK_CODE;
END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GET_INCOME_STATEMENT` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_INCOME_STATEMENT`(IN IN_COMPANY_ID INT, IN IN_ACCOUNT_ID INT, 
IN IN_FROM_GL_DATE DATE, IN IN_TO_GL_DATE DATE)
BEGIN 


SELECT A.ACCOUNT_ID, A.ACCOUNT_NAME, sum(DEBIT) as DEBIT, sum(CREDIT) as CREDIT FROM (
SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(GLE.AMOUNT) as DEBIT, 0 as CREDIT
FROM GL_ENTRY GLE
INNER JOIN GENERAL_LEDGER GL ON GL.GENERAL_LEDGER_ID = GLE.GENERAL_LEDGER_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = GLE.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = GL.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FWL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID !=4 
AND FWL.FORM_STATUS_ID=6
AND IS_DEBIT = 1
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND GL.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID

UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 as DEBIT, SUM(GLE.AMOUNT) as CREDIT
FROM GL_ENTRY GLE
INNER JOIN GENERAL_LEDGER GL ON GL.GENERAL_LEDGER_ID = GLE.GENERAL_LEDGER_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = GLE.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON GL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 6
AND IS_DEBIT = 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND GL.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 as DEBIT, SUM(AI.AMOUNT) as CREDIT
FROM AP_INVOICE AI 
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 3
AND AI.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(-AI.AMOUNT) as DEBIT, 0 as CREDIT
FROM AP_INVOICE AI 
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 3
AND AI.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL



SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(AL.AMOUNT) AS DEBIT, 0 as CREDIT 
FROM AP_LINE AL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = AL.AP_INVOICE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = AL.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 3
AND AL.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL 

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(-AL.AMOUNT) as CREDIT 
FROM AP_LINE AL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = AL.AP_INVOICE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = AL.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
INNER JOIN FORM_WORKFLOW_LOG FWL ON FW.FORM_WORKFLOW_ID = FWL.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND FWL.FORM_STATUS_ID = 3
AND AL.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AI.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL


SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(AP.AMOUNT) as CREDIT 
FROM AP_PAYMENT AP
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID=AP.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AP.AMOUNT != 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AP.CHECK_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(-AI.PAID_AMOUNT) as CREDIT
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AP.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AI.PAID_AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AP.CHECK_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL


SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(AI.PAID_AMOUNT) AS DEBIT, 0 as CREDIT
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AP.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AI.PAID_AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AP.CHECK_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL


SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(AM.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_MISCELLANEOUS AM
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AM.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND RM.DEBIT_ACCOUNT_COMBINATION_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AM.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID

UNION ALL 
SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(AM.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_MISCELLANEOUS AM
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AM.RECEIPT_METHOD_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND RM.BANK_ACCOUNT_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AM.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(-AML.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_MISCELLANEOUS_LINE AML
INNER JOIN AR_MISCELLANEOUS AM ON AM.AR_MISCELLANEOUS_ID = AML.AR_MISCELLANEOUS_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AML.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AML.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AM.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(AML.AMOUNT) as CREDIT
FROM AR_MISCELLANEOUS_LINE AML
INNER JOIN AR_MISCELLANEOUS AM ON AM.AR_MISCELLANEOUS_ID = AML.AR_MISCELLANEOUS_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AML.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AML.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AM.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL


SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(AT.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_TRANSACTION AT
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AT.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID = 17
AND AT.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AT.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(-AT.AMOUNT) as CREDIT
FROM AR_TRANSACTION AT
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AT.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID = 17
AND AT.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AT.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL


SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(AL.AMOUNT) as CREDIT
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID=AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID = 17
AND AL.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AT.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(-AL.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID=AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID = 17
AND AL.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AT.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL






SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(AR.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.AMOUNT != 0
AND RM.DEBIT_ACCOUNT_COMBINATION_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID

UNION ALL
SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(AR.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.AMOUNT != 0
AND RM.BANK_ACCOUNT_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL




SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(AR.AMOUNT) as CREDIT
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.AMOUNT != 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL




SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(ART.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(-ART.AMOUNT) as CREDIT
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL




SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(ART.AMOUNT) as CREDIT
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID
UNION ALL

SELECT AC.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(-ART.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AC.ACCOUNT_ID = IN_ACCOUNT_ID
AND AR.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY AC.ACCOUNT_ID

UNION ALL


SELECT ACCT.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(QUANTITY * SRP) as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = ICAS.SALES_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CS.COMPANY_ID = IN_COMPANY_ID
AND ACCT.ACCOUNT_ID = IN_ACCOUNT_ID
AND CS.RECEIPT_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY ACCT.ACCOUNT_ID

UNION ALL

SELECT ACCT.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(COALESCE(DISCOUNT, 0)) AS DEBIT, 0 as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = ICAS.SALES_DISCOUNT_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CS.COMPANY_ID = IN_COMPANY_ID
AND ACCT.ACCOUNT_ID = IN_ACCOUNT_ID
AND CS.RECEIPT_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY ACCT.ACCOUNT_ID

UNION ALL

SELECT ACCT.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 as DEBIT, SUM(QUANTITY * COALESCE(UNIT_COST, 0)) as CREDIT
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = ICAS.COST_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CS.COMPANY_ID = IN_COMPANY_ID
AND ACCT.ACCOUNT_ID = IN_ACCOUNT_ID
AND CS.RECEIPT_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY ACCT.ACCOUNT_ID

UNION ALL 

SELECT ACCT.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(-CSAL.AMOUNT) as DEBIT, 0 as CREDIT
FROM CASH_SALE_AR_LINE CSAL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSAL.CASH_SALE_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = CSAL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CSAL.AMOUNT < 0
AND CS.COMPANY_ID = IN_COMPANY_ID
AND ACCT.ACCOUNT_ID = IN_ACCOUNT_ID
AND CS.RECEIPT_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY ACCT.ACCOUNT_ID

UNION ALL 

SELECT ACCT.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 as DEBIT, SUM(CSAL.AMOUNT) as CREDIT
FROM CASH_SALE_AR_LINE CSAL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSAL.CASH_SALE_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = CSAL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CSAL.AMOUNT >= 0
AND CS.COMPANY_ID = IN_COMPANY_ID
AND ACCT.ACCOUNT_ID = IN_ACCOUNT_ID
AND CS.RECEIPT_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY ACCT.ACCOUNT_ID

UNION ALL


SELECT ACCT.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(QUANTITY * SRP) as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = ICAS.SALES_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ACCT.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 4
GROUP BY ACCT.ACCOUNT_ID

UNION ALL

SELECT ACCT.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(COALESCE(DISCOUNT, 0)) AS DEBIT, 0 as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = ICAS.SALES_DISCOUNT_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ACCT.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 4
GROUP BY ACCT.ACCOUNT_ID

UNION ALL

SELECT ACCT.ACCOUNT_ID, ACCT.ACCOUNT_NAME,  0 as DEBIT, SUM(QUANTITY * COALESCE(UNIT_COST, 0)) as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = ICAS.COST_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ACCT.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 4
GROUP BY ACCT.ACCOUNT_ID

UNION ALL

SELECT ACCT.ACCOUNT_ID, ACCT.ACCOUNT_NAME,  SUM(-AL.AMOUNT) AS DEBIT, 0 as CREDIT
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND AL.AMOUNT < 0
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ACCT.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 4
GROUP BY ACCT.ACCOUNT_ID

UNION ALL

SELECT ACCT.ACCOUNT_ID, ACCT.ACCOUNT_NAME,  0 as DEBIT, SUM(AL.AMOUNT) as CREDIT
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND AL.AMOUNT >= 0
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ACCT.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 4
GROUP BY ACCT.ACCOUNT_ID

UNION ALL


SELECT ACCT.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(QUANTITY * SRP) as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = ICAS.SALES_RETURN_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND ACCT.ACCOUNT_ID = IN_ACCOUNT_ID
AND CSR.DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY ACCT.ACCOUNT_ID

UNION ALL

SELECT ACCT.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(COALESCE(DISCOUNT, 0)) AS DEBIT, 0 as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = ICAS.SALES_DISCOUNT_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND ACCT.ACCOUNT_ID = IN_ACCOUNT_ID
AND CSR.DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY ACCT.ACCOUNT_ID

UNION ALL

SELECT ACCT.ACCOUNT_ID, ACCT.ACCOUNT_NAME,  0 as DEBIT, SUM(QUANTITY * COALESCE(UNIT_COST, 0)) as CREDIT
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = ICAS.COST_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND ACCT.ACCOUNT_ID = IN_ACCOUNT_ID
AND CSR.DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
GROUP BY ACCT.ACCOUNT_ID

UNION ALL


SELECT ACCT.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 AS DEBIT, SUM(QUANTITY * SRP) as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = ICAS.SALES_RETURN_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ACCT.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 5
GROUP BY ACCT.ACCOUNT_ID

UNION ALL

SELECT ACCT.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(COALESCE(DISCOUNT, 0)) AS DEBIT, 0 as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = ICAS.SALES_DISCOUNT_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ACCT.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 5
GROUP BY ACCT.ACCOUNT_ID

UNION ALL

SELECT ACCT.ACCOUNT_ID, ACCT.ACCOUNT_NAME, 0 as DEBIT, SUM(QUANTITY * COALESCE(UNIT_COST, 0)) as CREDIT
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = ICAS.COST_ACCOUNT
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ACCT.ACCOUNT_ID = IN_ACCOUNT_ID
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 5
GROUP BY ACCT.ACCOUNT_ID

UNION ALL 

SELECT ACCT.ACCOUNT_ID, ACCT.ACCOUNT_NAME,  SUM(-(QUANTITY * COALESCE(UNIT_COST, 0))) as DEBIT, 0 as CREDIT
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SAT.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND SA.COMPANY_ID = IN_COMPANY_ID
AND ACCT.ACCOUNT_ID = IN_ACCOUNT_ID
AND SA.SA_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND QUANTITY > 0
GROUP BY ACCT.ACCOUNT_ID

UNION ALL 

SELECT ACCT.ACCOUNT_ID, ACCT.ACCOUNT_NAME, SUM(-(QUANTITY * COALESCE(UNIT_COST, 0))) as DEBIT, 0 as CREDIT
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SAT.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND SA.COMPANY_ID = IN_COMPANY_ID
AND ACCT.ACCOUNT_ID = IN_ACCOUNT_ID
AND SA.SA_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND QUANTITY < 0
GROUP BY ACCT.ACCOUNT_ID

) as ACCOUNT_BALANCES 
INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = ACCOUNT_BALANCES.ACCOUNT_ID
GROUP BY ACCOUNT_BALANCES.ACCOUNT_ID 
ORDER BY A.NUMBER;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GET_INVOICE_AGING` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_INVOICE_AGING`(IN IN_COMPANY_ID INT, IN IN_INVOICE_TYPE_ID INT, IN IN_SUPPLIER_ID INT,
IN IN_SUPPLIER_ACCOUNT_ID INT, IN IN_GROUP_BY_OPTION INT, IN IN_AGE_BASIS INT, IN IN_AS_OF_DATE DATE, IN IN_LIMIT_FROM INT, IN IN_LIMIT_TO INT)
BEGIN

SELECT TYPE, ID, SUPPLIER_NAME, SUPPLIER_ACCOUNT, TYPE_SA, INVOICE_NUMBER, TERM,
 SUM(INVOICE_AMT) AS TOTAL_INVOICE, SUM(PAID_AMT) AS TOTAL_PAYMENT, SUM(INVOICE_AMT - PAID_AMT) AS BALANCE,
 SUM(1_30_DAYS) AS 1_30_DAYS, SUM(31_60_DAYS) AS 31_60_DAYS, SUM(61_90_DAYS) AS 61_90_DAYS, SUM(91_120_DAYS),
 SUM(121_150_DAYS) AS 121_150_DAYS, SUM(151_UP) AS 151_UP FROM (

SELECT TYPE, TYPE_ID, ID, AGE_BASIS, SUPPLIER_NAME, SUPPLIER_ACCOUNT, CONCAT(TYPE_ID, ' ', SUPPLIER_ACCOUNT_ID) AS TYPE_SA, 
 INVOICE_NUMBER, TERM, SUM(INVOICE_AMT) AS INVOICE_AMT, SUM(PAID_AMT) AS PAID_AMT,
 IF(DATEDIFF(IN_AS_OF_DATE, AGE_BASIS) BETWEEN 1 AND 30, SUM(INVOICE_AMT - PAID_AMT), 0) AS 1_30_DAYS,
 IF(DATEDIFF(IN_AS_OF_DATE, AGE_BASIS) BETWEEN 31 AND 60, SUM(INVOICE_AMT - PAID_AMT), 0) AS 31_60_DAYS, 
 IF(DATEDIFF(IN_AS_OF_DATE, AGE_BASIS) BETWEEN 61 AND 90, SUM(INVOICE_AMT - PAID_AMT), 0) AS 61_90_DAYS, 
 IF(DATEDIFF(IN_AS_OF_DATE, AGE_BASIS) BETWEEN 91 AND 120, SUM(INVOICE_AMT - PAID_AMT), 0) AS 91_120_DAYS,
 IF(DATEDIFF(IN_AS_OF_DATE, AGE_BASIS) BETWEEN 121 AND 150, SUM(INVOICE_AMT - PAID_AMT), 0) AS 121_150_DAYS, 
 IF(DATEDIFF(IN_AS_OF_DATE, AGE_BASIS) >= 151, SUM(INVOICE_AMT - PAID_AMT), 0) AS 151_UP
FROM (
 SELECT
  (CASE WHEN AP.INVOICE_TYPE_ID = 1 THEN "REG"
    WHEN AP.INVOICE_TYPE_ID = 2 THEN "PRE"
    WHEN AP.INVOICE_TYPE_ID = 3 THEN "DM"
    WHEN AP.INVOICE_TYPE_ID = 4 THEN "CM"
    WHEN AP.INVOICE_TYPE_ID = 5 THEN "RR"
    WHEN AP.INVOICE_TYPE_ID = 8 THEN "RR-RM"
    WHEN AP.INVOICE_TYPE_ID = 19 THEN "CENTRAL"
    WHEN AP.INVOICE_TYPE_ID = 20 THEN "NSB 3"
    WHEN AP.INVOICE_TYPE_ID = 21 THEN "NSB 4"
    WHEN AP.INVOICE_TYPE_ID = 22 THEN "NSB 5"
    WHEN AP.INVOICE_TYPE_ID = 23 THEN "NSB 8"
    WHEN AP.INVOICE_TYPE_ID = 24 THEN "NSB 8A" END) AS TYPE,
  AP.AP_INVOICE_ID AS ID, AP.INVOICE_TYPE_ID AS TYPE_ID,
  S.NAME AS SUPPLIER_NAME, SA.NAME AS SUPPLIER_ACCOUNT, SA.SUPPLIER_ACCOUNT_ID AS SUPPLIER_ACCOUNT_ID,
  (CASE WHEN AP.INVOICE_TYPE_ID = 5 THEN
    (CASE WHEN AP.DESCRIPTION IS NULL OR AP.DESCRIPTION="" THEN AP.INVOICE_NUMBER
    ELSE CONCAT(AP.INVOICE_NUMBER, ", ", AP.DESCRIPTION) END) ELSE AP.INVOICE_NUMBER END) AS INVOICE_NUMBER,
  AP.SEQUENCE_NO, TRM.NAME AS TERM,
  AP.AMOUNT AS INVOICE_AMT, 0 AS PAID_AMT,
  (CASE WHEN IN_AGE_BASIS = 1 THEN AP.INVOICE_DATE ELSE AP.GL_DATE END) AS AGE_BASIS
  FROM AP_INVOICE AP
  INNER JOIN SUPPLIER S ON S.SUPPLIER_ID = AP.SUPPLIER_ID
  INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AP.SUPPLIER_ACCOUNT_ID
  INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID=AP.FORM_WORKFLOW_ID
  INNER JOIN TERM TRM ON TRM.TERM_ID = AP.TERM_ID
  WHERE AP.INVOICE_TYPE_ID != 6 AND AP.INVOICE_TYPE_ID != 7
  AND FW.IS_COMPLETE = 1
  AND SA.COMPANY_ID = IN_COMPANY_ID
  AND (CASE WHEN IN_INVOICE_TYPE_ID != -1 THEN AP.INVOICE_TYPE_ID = IN_INVOICE_TYPE_ID
  			ELSE AP.INVOICE_TYPE_ID != IN_INVOICE_TYPE_ID END)
  AND (CASE WHEN IN_SUPPLIER_ID != -1 THEN AP.SUPPLIER_ID = IN_SUPPLIER_ID
  			ELSE AP.SUPPLIER_ID != IN_SUPPLIER_ID END)
  AND (CASE WHEN IN_SUPPLIER_ACCOUNT_ID != -1 THEN AP.SUPPLIER_ACCOUNT_ID = IN_SUPPLIER_ACCOUNT_ID
  			ELSE AP.SUPPLIER_ACCOUNT_ID != IN_SUPPLIER_ACCOUNT_ID END)

UNION ALL

SELECT
  (CASE WHEN AP.INVOICE_TYPE_ID = 6 THEN "RTS"
    WHEN AP.INVOICE_TYPE_ID = 7 THEN "RTS-EB" END) AS TYPE,
  AP.AP_INVOICE_ID AS ID, AP.INVOICE_TYPE_ID AS TYPE_ID,
  S.NAME AS SUPPLIER_NAME, SA.NAME AS SUPPLIER_ACCOUNT, SA.SUPPLIER_ACCOUNT_ID AS SUPPLIER_ACCOUNT_ID,
  (CASE WHEN AP.INVOICE_TYPE_ID = 6 THEN
    (CASE WHEN AP.DESCRIPTION IS NULL OR AP.DESCRIPTION="" THEN AP.INVOICE_NUMBER
    ELSE CONCAT(AP.INVOICE_NUMBER, ", ", AP.DESCRIPTION) END)
  WHEN AP.INVOICE_TYPE_ID = 7 THEN
    (CASE WHEN AP.DESCRIPTION IS NULL OR AP.DESCRIPTION="" THEN AP.INVOICE_NUMBER
    ELSE CONCAT(AP.INVOICE_NUMBER, ", ", AP.DESCRIPTION) END) ELSE AP.INVOICE_NUMBER END) AS INVOICE_NUMBER,
  AP.SEQUENCE_NO, TRM.NAME AS TERM,
  -AP.AMOUNT AS INVOICE_AMT, 0 AS PAID_AMT,
  (CASE WHEN IN_AGE_BASIS = 1 THEN AP.INVOICE_DATE ELSE AP.GL_DATE END) AS AGE_BASIS
  FROM AP_INVOICE AP
  INNER JOIN SUPPLIER S ON S.SUPPLIER_ID = AP.SUPPLIER_ID
  INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AP.SUPPLIER_ACCOUNT_ID
  INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID=AP.FORM_WORKFLOW_ID
  INNER JOIN TERM TRM ON TRM.TERM_ID = SA.TERM_ID
  WHERE (AP.INVOICE_TYPE_ID = 6 OR AP.INVOICE_TYPE_ID = 7)
  AND FW.IS_COMPLETE = 1
  AND SA.COMPANY_ID = IN_COMPANY_ID
  AND (CASE WHEN IN_INVOICE_TYPE_ID != -1 THEN AP.INVOICE_TYPE_ID = IN_INVOICE_TYPE_ID
  			ELSE AP.INVOICE_TYPE_ID != IN_INVOICE_TYPE_ID END)
  AND (CASE WHEN IN_SUPPLIER_ID != -1 THEN AP.SUPPLIER_ID = IN_SUPPLIER_ID
  			ELSE AP.SUPPLIER_ID != IN_SUPPLIER_ID END)
  AND (CASE WHEN IN_SUPPLIER_ACCOUNT_ID != -1 THEN AP.SUPPLIER_ACCOUNT_ID = IN_SUPPLIER_ACCOUNT_ID
  			ELSE AP.SUPPLIER_ACCOUNT_ID != IN_SUPPLIER_ACCOUNT_ID END)

UNION ALL

SELECT
  "PAYMENT" AS TYPE, AP.AP_INVOICE_ID AS ID, AP.INVOICE_TYPE_ID AS TYPE_ID,
  S.NAME AS SUPPLIER_NAME, SA.NAME AS SUPPLIER_ACCOUNT, SA.SUPPLIER_ACCOUNT_ID AS SUPPLIER_ACCOUNT_ID,
  '' AS INVOICE_NUMBER, APP.VOUCHER_NO AS SEQUENCE_NO, '' AS TERM,
  0 AS IVOICE_AMT, APPI.PAID_AMOUNT AS PAID_AMT,
  APP.CHECK_DATE AS AGE_BASIS
  FROM AP_PAYMENT_INVOICE APPI
  INNER JOIN AP_PAYMENT APP ON APP.AP_PAYMENT_ID = APPI.AP_PAYMENT_ID
  INNER JOIN AP_INVOICE AP ON AP.AP_INVOICE_ID = APPI.AP_INVOICE_ID
  INNER JOIN SUPPLIER S ON S.SUPPLIER_ID = APP.SUPPLIER_ID
  INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = APP.SUPPLIER_ACCOUNT_ID
  INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID=APP.FORM_WORKFLOW_ID
  WHERE FW.CURRENT_STATUS_ID != 4
  AND SA.COMPANY_ID = IN_COMPANY_ID
  AND APP.CHECK_DATE <= IN_AS_OF_DATE
  AND (CASE WHEN IN_INVOICE_TYPE_ID != -1 THEN AP.INVOICE_TYPE_ID = IN_INVOICE_TYPE_ID
  			ELSE AP.INVOICE_TYPE_ID != IN_INVOICE_TYPE_ID END)
  AND (CASE WHEN IN_SUPPLIER_ID != -1 THEN AP.SUPPLIER_ID = IN_SUPPLIER_ID
  			ELSE AP.SUPPLIER_ID != IN_SUPPLIER_ID END)
  AND (CASE WHEN IN_SUPPLIER_ACCOUNT_ID != -1 THEN AP.SUPPLIER_ACCOUNT_ID = IN_SUPPLIER_ACCOUNT_ID
  			ELSE AP.SUPPLIER_ACCOUNT_ID != IN_SUPPLIER_ACCOUNT_ID END)

 ) AS AGING_INNER_TBL GROUP BY ID 
) AS INVOICE_AGING 
WHERE IN_AS_OF_DATE > AGE_BASIS
GROUP BY CASE WHEN IN_GROUP_BY_OPTION = 1 THEN ID ELSE TYPE_SA END
HAVING (SUM(INVOICE_AMT) - SUM(PAID_AMT)) NOT BETWEEN -0.009 AND 0.009
ORDER BY TYPE_ID, SUPPLIER_NAME, SUPPLIER_ACCOUNT, ID;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GET_ITEM_EXISTING_STOCKS` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_ITEM_EXISTING_STOCKS`(IN IN_ITEM_ID int, IN IN_WAREHOUSE_ID int, IN AS_OF_DATE date, IN IN_COMPANY_ID int)
BEGIN
SELECT sum(QUANTITY) as EXISTING_STOCKS FROM (

SELECT API.AP_INVOICE_ID as ID, API.GL_DATE as DATE,
RRI.QUANTITY - COALESCE((SELECT sum(RTSI.QUANTITY) from R_RETURN_TO_SUPPLIER_ITEM RTSI
INNER JOIN AP_INVOICE API ON RTSI.AP_INVOICE_ID = API.AP_INVOICE_ID
INNER JOIN FORM_WORKFLOW FW ON API.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4 AND RRI.R_RECEIVING_REPORT_ITEM_ID = RTSI.R_RECEIVING_REPORT_ITEM_ID), 0) 
as QUANTITY,
'RR' as FORM FROM R_RECEIVING_REPORT_ITEM RRI
INNER JOIN AP_INVOICE API ON RRI.AP_INVOICE_ID = API.AP_INVOICE_ID
INNER JOIN R_RECEIVING_REPORT RR ON API.AP_INVOICE_ID = RR.AP_INVOICE_ID
INNER JOIN FORM_WORKFLOW FW ON API.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE RRI.ITEM_ID = IN_ITEM_ID AND API.GL_DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN RR.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE RR.WAREHOUSE_ID = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN RR.COMPANY_ID != IN_COMPANY_ID
	ELSE RR.COMPANY_ID = IN_COMPANY_ID END)
AND FW.IS_COMPLETE = 1
UNION ALL

SELECT API.AP_INVOICE_ID as ID, API.GL_DATE as DATE,
-RTSI.QUANTITY,
'RTS-EB' as FORM FROM R_RETURN_TO_SUPPLIER_ITEM RTSI
INNER JOIN AP_INVOICE API ON RTSI.AP_INVOICE_ID = API.AP_INVOICE_ID
INNER JOIN R_RETURN_TO_SUPPLIER RTS ON API.AP_INVOICE_ID = RTS.AP_INVOICE_ID
INNER JOIN FORM_WORKFLOW FW ON API.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE RTSI.ITEM_ID = IN_ITEM_ID AND API.GL_DATE <= AS_OF_DATE
AND RTS.WAREHOUSE_ID = IN_WAREHOUSE_ID
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN RTS.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE RTS.WAREHOUSE_ID = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN RTS.COMPANY_ID != IN_COMPANY_ID
	ELSE RTS.COMPANY_ID = IN_COMPANY_ID END)
AND FW.CURRENT_STATUS_ID != 4
AND API.INVOICE_TYPE_ID = 7
UNION ALL

SELECT TR.R_TRANSFER_RECEIPT_ID, TR.TR_DATE, TRI.QUANTITY, 'TR To' FROM R_TRANSFER_RECEIPT_ITEM TRI
INNER JOIN R_TRANSFER_RECEIPT TR ON TRI.R_TRANSFER_RECEIPT_ID = TR.R_TRANSFER_RECEIPT_ID
INNER JOIN FORM_WORKFLOW FW ON TR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE TRI.ITEM_ID = IN_ITEM_ID AND TR.TR_DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN TR.WAREHOUSE_TO_ID != IN_WAREHOUSE_ID
	ELSE TR.WAREHOUSE_TO_ID = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN TR.COMPANY_ID != IN_COMPANY_ID
	ELSE TR.COMPANY_ID = IN_COMPANY_ID END)
AND FW.IS_COMPLETE = 1
UNION ALL

SELECT RP.REPACKING_ID, RP.R_DATE, RPI.REPACKED_QUANTITY, 'RP To' FROM REPACKING_ITEM RPI
INNER JOIN REPACKING RP ON RP.REPACKING_ID = RPI.REPACKING_ID
INNER JOIN FORM_WORKFLOW FW ON RP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE RPI.TO_ITEM_ID = IN_ITEM_ID AND RP.R_DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN RP.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE RP.WAREHOUSE_ID = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN RP.COMPANY_ID != IN_COMPANY_ID
	ELSE RP.COMPANY_ID = IN_COMPANY_ID END)
AND RP.REPACKING_TYPE_ID = 1
AND FW.IS_COMPLETE = 1

UNION ALL

SELECT ART.AR_TRANSACTION_ID, ART.TRANSACTION_DATE, ASI.QUANTITY*(-1), 'ASR-Ret' FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ASI.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ASI.ITEM_ID = IN_ITEM_ID AND ART.TRANSACTION_DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN ASI.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE ASI.WAREHOUSE_ID  = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN ART.COMPANY_ID != IN_COMPANY_ID
	ELSE ART.COMPANY_ID = IN_COMPANY_ID END)
AND ART.AR_TRANSACTION_TYPE_ID = 5 AND ASI.QUANTITY > 0 AND FW.CURRENT_STATUS_ID != 4
UNION ALL

SELECT ART.AR_TRANSACTION_ID, ART.TRANSACTION_DATE, ASI.QUANTITY*(-1), 'ASR-Ex' FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ASI.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ASI.ITEM_ID = IN_ITEM_ID AND ART.TRANSACTION_DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN ASI.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE ASI.WAREHOUSE_ID  = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN ART.COMPANY_ID != IN_COMPANY_ID
	ELSE ART.COMPANY_ID = IN_COMPANY_ID END)
AND ART.AR_TRANSACTION_TYPE_ID = 5 AND ASI.QUANTITY < 0 AND FW.IS_COMPLETE = 1
UNION ALL

SELECT ART.AR_TRANSACTION_ID, ART.TRANSACTION_DATE, -ASI.QUANTITY, 'ASRW-Ret' FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ASI.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ASI.ITEM_ID = IN_ITEM_ID AND ART.TRANSACTION_DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN ASI.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE ASI.WAREHOUSE_ID  = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN ART.COMPANY_ID != IN_COMPANY_ID
	ELSE ART.COMPANY_ID = IN_COMPANY_ID END)
AND ART.AR_TRANSACTION_TYPE_ID = 9 AND ASI.QUANTITY > 0 AND FW.CURRENT_STATUS_ID != 4
UNION ALL

SELECT ART.AR_TRANSACTION_ID, ART.TRANSACTION_DATE, -ASI.QUANTITY, 'ASRW-Ex' FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ASI.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ASI.ITEM_ID = IN_ITEM_ID AND ART.TRANSACTION_DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN ASI.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE ASI.WAREHOUSE_ID  = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN ART.COMPANY_ID != IN_COMPANY_ID
	ELSE ART.COMPANY_ID = IN_COMPANY_ID END)
AND ART.AR_TRANSACTION_TYPE_ID = 9 AND ASI.QUANTITY < 0 AND FW.IS_COMPLETE = 1
UNION ALL

SELECT ART.AR_TRANSACTION_ID, ART.TRANSACTION_DATE, ASI.QUANTITY, 'ASR-EB' FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ASI.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ASI.ITEM_ID = IN_ITEM_ID AND ART.TRANSACTION_DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN ASI.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE ASI.WAREHOUSE_ID  = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN ART.COMPANY_ID != IN_COMPANY_ID
	ELSE ART.COMPANY_ID = IN_COMPANY_ID END)
AND ART.AR_TRANSACTION_TYPE_ID = 7 AND FW.IS_COMPLETE = 1
UNION ALL

SELECT ART.AR_TRANSACTION_ID, ART.TRANSACTION_DATE, ASI.QUANTITY*(-1), 'ASR-Ret' FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ASI.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ASI.ITEM_ID = IN_ITEM_ID AND ART.TRANSACTION_DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN ASI.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE ASI.WAREHOUSE_ID  = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN ART.COMPANY_ID != IN_COMPANY_ID
	ELSE ART.COMPANY_ID = IN_COMPANY_ID END)
AND ART.AR_TRANSACTION_TYPE_ID = 13 AND ASI.QUANTITY > 0 AND FW.CURRENT_STATUS_ID != 4
UNION ALL

SELECT ART.AR_TRANSACTION_ID, ART.TRANSACTION_DATE, ASI.QUANTITY*(-1), 'ASR-Ex' FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ASI.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ASI.ITEM_ID = IN_ITEM_ID AND ART.TRANSACTION_DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN ASI.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE ASI.WAREHOUSE_ID  = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN ART.COMPANY_ID != IN_COMPANY_ID
	ELSE ART.COMPANY_ID = IN_COMPANY_ID END)
AND ART.AR_TRANSACTION_TYPE_ID = 13 AND ASI.QUANTITY < 0 AND FW.IS_COMPLETE = 1
UNION ALL

SELECT CSR.CASH_SALE_RETURN_ID, CSR.DATE, CSRI.QUANTITY*(-1), 'CSR' FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSRI.CASH_SALE_RETURN_ID = CSR.CASH_SALE_RETURN_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE CSRI.ITEM_ID = IN_ITEM_ID AND CSR.DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN CSRI.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE CSRI.WAREHOUSE_ID  = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN CSR.COMPANY_ID != IN_COMPANY_ID
	ELSE CSR.COMPANY_ID = IN_COMPANY_ID END)
AND CSRI.QUANTITY > 0 AND FW.CURRENT_STATUS_ID != 4
UNION ALL

SELECT CSR.CASH_SALE_RETURN_ID, CSR.DATE, CSRI.QUANTITY*(-1), 'CSR' FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSRI.CASH_SALE_RETURN_ID = CSR.CASH_SALE_RETURN_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE CSRI.ITEM_ID = IN_ITEM_ID AND CSR.DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN CSRI.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE CSRI.WAREHOUSE_ID  = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN CSR.COMPANY_ID != IN_COMPANY_ID
	ELSE CSR.COMPANY_ID = IN_COMPANY_ID END)
AND CSRI.QUANTITY < 0 AND FW.IS_COMPLETE = 1
UNION ALL

SELECT CS.CASH_SALE_ID, CS.RECEIPT_DATE, -CSI.QUANTITY, 'CS' FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CSI.CASH_SALE_ID = CS.CASH_SALE_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE CSI.ITEM_ID = IN_ITEM_ID AND CS.RECEIPT_DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN CSI.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE CSI.WAREHOUSE_ID  = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN CS.COMPANY_ID != IN_COMPANY_ID
	ELSE CS.COMPANY_ID = IN_COMPANY_ID END)
AND FW.CURRENT_STATUS_ID != 4

UNION ALL

SELECT CS.CASH_SALE_ID, CS.RECEIPT_DATE, -CRM.QUANTITY, 'CS-RM' FROM CSI_RAW_MATERIAL CRM
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CRM.CASH_SALE_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE CRM.ITEM_ID = IN_ITEM_ID AND CS.RECEIPT_DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN CRM.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE CRM.WAREHOUSE_ID  = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN CS.COMPANY_ID != IN_COMPANY_ID
	ELSE CS.COMPANY_ID = IN_COMPANY_ID END)
AND CS.CASH_SALE_TYPE_ID = 6
AND FW.CURRENT_STATUS_ID != 4

UNION ALL

SELECT CS.CASH_SALE_ID, CS.RECEIPT_DATE, CFP.QUANTITY, 'CS-FP' FROM CSI_FINISHED_PRODUCT CFP
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CFP.CASH_SALE_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE CFP.ITEM_ID = IN_ITEM_ID AND CS.RECEIPT_DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN CFP.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE CFP.WAREHOUSE_ID  = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN CS.COMPANY_ID != IN_COMPANY_ID
	ELSE CS.COMPANY_ID = IN_COMPANY_ID END)
AND CS.CASH_SALE_TYPE_ID = 6
AND FW.CURRENT_STATUS_ID != 4

UNION ALL

SELECT TR.R_TRANSFER_RECEIPT_ID, TR.TR_DATE, -TRI.QUANTITY, 'TR From' FROM R_TRANSFER_RECEIPT_ITEM TRI
INNER JOIN R_TRANSFER_RECEIPT TR ON TRI.R_TRANSFER_RECEIPT_ID = TR.R_TRANSFER_RECEIPT_ID
INNER JOIN FORM_WORKFLOW FW ON TR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE TRI.ITEM_ID = IN_ITEM_ID AND TR.TR_DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN TR.WAREHOUSE_FROM_ID != IN_WAREHOUSE_ID
	ELSE TR.WAREHOUSE_FROM_ID = IN_WAREHOUSE_ID END) 
AND (CASE WHEN IN_COMPANY_ID = -1 THEN TR.COMPANY_ID != IN_COMPANY_ID
	ELSE TR.COMPANY_ID = IN_COMPANY_ID END)
AND FW.CURRENT_STATUS_ID != 4
UNION ALL

SELECT ART.AR_TRANSACTION_ID, ART.TRANSACTION_DATE, -ASI.QUANTITY, 'AS' FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ASI.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ASI.ITEM_ID = IN_ITEM_ID AND ART.TRANSACTION_DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN ASI.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE ASI.WAREHOUSE_ID = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN ART.COMPANY_ID != IN_COMPANY_ID
	ELSE ART.COMPANY_ID = IN_COMPANY_ID END)
AND ART.AR_TRANSACTION_TYPE_ID = 4 AND FW.CURRENT_STATUS_ID != 4
UNION ALL

SELECT ART.AR_TRANSACTION_ID, ART.TRANSACTION_DATE, -ASI.QUANTITY, 'AS' FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ASI.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ASI.ITEM_ID = IN_ITEM_ID AND ART.TRANSACTION_DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN ASI.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE ASI.WAREHOUSE_ID = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN ART.COMPANY_ID != IN_COMPANY_ID
	ELSE ART.COMPANY_ID = IN_COMPANY_ID END)
AND ART.AR_TRANSACTION_TYPE_ID = 12 AND FW.CURRENT_STATUS_ID != 4
UNION ALL

SELECT ART.AR_TRANSACTION_ID, ART.TRANSACTION_DATE, -ASI.QUANTITY, 'ASW' FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ASI.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ASI.ITEM_ID = IN_ITEM_ID AND ART.TRANSACTION_DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN ASI.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE ASI.WAREHOUSE_ID = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN ART.COMPANY_ID != IN_COMPANY_ID
	ELSE ART.COMPANY_ID = IN_COMPANY_ID END)
AND ART.AR_TRANSACTION_TYPE_ID = 8 AND FW.CURRENT_STATUS_ID != 4
UNION ALL

SELECT ART.AR_TRANSACTION_ID, ART.TRANSACTION_DATE, -ASI.QUANTITY, 'AS' FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ASI.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE ASI.ITEM_ID = IN_ITEM_ID AND ART.TRANSACTION_DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN ASI.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE ASI.WAREHOUSE_ID = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN ART.COMPANY_ID != IN_COMPANY_ID
	ELSE ART.COMPANY_ID = IN_COMPANY_ID END)
AND ART.AR_TRANSACTION_TYPE_ID = 14 AND FW.CURRENT_STATUS_ID != 4

UNION ALL

SELECT RP.REPACKING_ID, RP.R_DATE, -RPI.QUANTITY, 'RP From' FROM REPACKING_ITEM RPI
INNER JOIN REPACKING RP ON RP.REPACKING_ID = RPI.REPACKING_ID
INNER JOIN FORM_WORKFLOW FW ON RP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE RPI.FROM_ITEM_ID = IN_ITEM_ID AND RP.R_DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN RP.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE RP.WAREHOUSE_ID = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN RP.COMPANY_ID != IN_COMPANY_ID
	ELSE RP.COMPANY_ID = IN_COMPANY_ID END)
AND RP.REPACKING_TYPE_ID = 1
AND FW.CURRENT_STATUS_ID != 4

UNION ALL

SELECT SA.STOCK_ADJUSTMENT_ID, SA.SA_DATE, SAI.QUANTITY, 'SA' FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SAI.STOCK_ADJUSTMENT_ID = SA.STOCK_ADJUSTMENT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE SAI.ITEM_ID = IN_ITEM_ID AND SA.SA_DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN SA.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE SA.WAREHOUSE_ID = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN SA.COMPANY_ID != IN_COMPANY_ID
	ELSE SA.COMPANY_ID = IN_COMPANY_ID END)
AND SAI.QUANTITY > 0
AND FW.IS_COMPLETE = 1
UNION ALL

SELECT SA.STOCK_ADJUSTMENT_ID, SA.SA_DATE, SAI.QUANTITY, 'SA' FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SAI.STOCK_ADJUSTMENT_ID = SA.STOCK_ADJUSTMENT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE SAI.ITEM_ID = IN_ITEM_ID AND SA.SA_DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN SA.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE SA.WAREHOUSE_ID = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN SA.COMPANY_ID != IN_COMPANY_ID
	ELSE SA.COMPANY_ID = IN_COMPANY_ID END)
AND SAI.QUANTITY < 0
AND FW.CURRENT_STATUS_ID != 4
UNION ALL

SELECT CD.CAP_DELIVERY_ID, CD.DELIVERY_DATE, -CDI.QUANTITY, 'CAPD' FROM CAP_DELIVERY_ITEM CDI
INNER JOIN CAP_DELIVERY CD ON CDI.CAP_DELIVERY_ID = CD.CAP_DELIVERY_ID
INNER JOIN FORM_WORKFLOW FW ON CD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE CDI.ITEM_ID = IN_ITEM_ID AND CD.DELIVERY_DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN CDI.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE CDI.WAREHOUSE_ID = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN CD.COMPANY_ID != IN_COMPANY_ID
	ELSE CD.COMPANY_ID = IN_COMPANY_ID END)
AND FW.CURRENT_STATUS_ID != 4 AND CD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1

UNION ALL

SELECT CD.CAP_DELIVERY_ID, CD.DELIVERY_DATE, -CDI.QUANTITY, 'CAPD-AS' FROM CAP_DELIVERY_ITEM CDI
INNER JOIN CAP_DELIVERY CD ON CDI.CAP_DELIVERY_ID = CD.CAP_DELIVERY_ID
INNER JOIN FORM_WORKFLOW FW ON CD.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE CDI.ITEM_ID = IN_ITEM_ID AND CD.DELIVERY_DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN CDI.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE CDI.WAREHOUSE_ID = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN CD.COMPANY_ID != IN_COMPANY_ID
	ELSE CD.COMPANY_ID = IN_COMPANY_ID END)
AND FW.CURRENT_STATUS_ID != 4 AND CD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 4

UNION ALL

SELECT WS.WITHDRAWAL_SLIP_ID, WS.DATE, -WSI.QUANTITY, 'WS' FROM WITHDRAWAL_SLIP_ITEM WSI
INNER JOIN OBJECT_TO_OBJECT WSOTO ON WSOTO.TO_OBJECT_ID = WSI.EB_OBJECT_ID
INNER JOIN WITHDRAWAL_SLIP WS ON WS.EB_OBJECT_ID = WSOTO.FROM_OBJECT_ID
INNER JOIN OBJECT_TO_OBJECT WOTO ON (WOTO.TO_OBJECT_ID = WS.EB_OBJECT_ID
	AND WOTO.OR_TYPE_ID = 45)
INNER JOIN WAREHOUSE W ON W.EB_OBJECT_ID = WOTO.FROM_OBJECT_ID
INNER JOIN OBJECT_TO_OBJECT COTO ON COTO.TO_OBJECT_ID = WS.EB_OBJECT_ID
INNER JOIN COMPANY C ON C.EB_OBJECT_ID = COTO.FROM_OBJECT_ID
INNER JOIN FORM_WORKFLOW FW ON WS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE WSI.ITEM_ID = IN_ITEM_ID AND WS.DATE <= AS_OF_DATE
AND WSI.ACTIVE = 1
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN W.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE W.WAREHOUSE_ID = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN C.COMPANY_ID != IN_COMPANY_ID
	ELSE C.COMPANY_ID = IN_COMPANY_ID END)
AND FW.CURRENT_STATUS_ID != 4

UNION ALL

SELECT RP.REPACKING_ID, RP.R_DATE, -RPI.QUANTITY, 'IC - RM' FROM REPACKING_RAW_MATERIAL RPI
INNER JOIN REPACKING RP ON RP.REPACKING_ID = RPI.REPACKING_ID
INNER JOIN FORM_WORKFLOW FW ON RP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE RPI.ITEM_ID = IN_ITEM_ID
AND RP.R_DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN RP.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE RP.WAREHOUSE_ID = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN RP.COMPANY_ID != IN_COMPANY_ID
	ELSE RP.COMPANY_ID = IN_COMPANY_ID END)
AND RP.REPACKING_TYPE_ID = 2
AND FW.CURRENT_STATUS_ID != 4

UNION ALL

SELECT RP.REPACKING_ID, RP.R_DATE, RPI.QUANTITY, 'IC - FG' FROM REPACKING_FINISHED_GOOD RPI
INNER JOIN REPACKING RP ON RP.REPACKING_ID = RPI.REPACKING_ID
INNER JOIN FORM_WORKFLOW FW ON RP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE RPI.ITEM_ID = IN_ITEM_ID
AND RP.R_DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN RP.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE RP.WAREHOUSE_ID = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN RP.COMPANY_ID != IN_COMPANY_ID
	ELSE RP.COMPANY_ID = IN_COMPANY_ID END)
AND RP.REPACKING_TYPE_ID = 2
AND FW.IS_COMPLETE = 1

UNION ALL

SELECT PR.PROCESSING_REPORT_ID, PR.DATE, MPI.QUANTITY, 'PR-MP' FROM PR_MAIN_PRODUCT MPI
INNER JOIN PROCESSING_REPORT PR ON PR.PROCESSING_REPORT_ID = MPI.PROCESSING_REPORT_ID
INNER JOIN FORM_WORKFLOW FW ON PR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE MPI.ITEM_ID = IN_ITEM_ID
AND PR.DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN MPI.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE MPI.WAREHOUSE_ID = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN PR.COMPANY_ID != IN_COMPANY_ID
	ELSE PR.COMPANY_ID = IN_COMPANY_ID END)
AND PR.PROCESSING_REPORT_TYPE_ID = 6
AND FW.IS_COMPLETE = 1
	
UNION ALL

SELECT PR.PROCESSING_REPORT_ID, PR.DATE, -MPI.QUANTITY, 'PR-RM' FROM PR_RAW_MATERIALS_ITEM MPI
INNER JOIN PROCESSING_REPORT PR ON PR.PROCESSING_REPORT_ID = MPI.PROCESSING_REPORT_ID
INNER JOIN FORM_WORKFLOW FW ON PR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE MPI.ITEM_ID = IN_ITEM_ID
AND PR.DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN MPI.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE MPI.WAREHOUSE_ID = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN PR.COMPANY_ID != IN_COMPANY_ID
	ELSE PR.COMPANY_ID = IN_COMPANY_ID END)
AND PR.PROCESSING_REPORT_TYPE_ID = 6
AND FW.CURRENT_STATUS_ID != 4

UNION ALL

SELECT PR.PROCESSING_REPORT_ID, PR.DATE, MPI.QUANTITY, 'PRB-MP' FROM PR_MAIN_PRODUCT MPI
INNER JOIN PROCESSING_REPORT PR ON PR.PROCESSING_REPORT_ID = MPI.PROCESSING_REPORT_ID
INNER JOIN FORM_WORKFLOW FW ON PR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE MPI.ITEM_ID = IN_ITEM_ID
AND PR.DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN MPI.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE MPI.WAREHOUSE_ID = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN PR.COMPANY_ID != IN_COMPANY_ID
	ELSE PR.COMPANY_ID = IN_COMPANY_ID END)
AND PR.PROCESSING_REPORT_TYPE_ID = 5
AND FW.IS_COMPLETE = 1
	
UNION ALL

SELECT PR.PROCESSING_REPORT_ID, PR.DATE, -MPI.QUANTITY, 'PRB-RM' FROM PR_RAW_MATERIALS_ITEM MPI
INNER JOIN PROCESSING_REPORT PR ON PR.PROCESSING_REPORT_ID = MPI.PROCESSING_REPORT_ID
INNER JOIN FORM_WORKFLOW FW ON PR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE MPI.ITEM_ID = IN_ITEM_ID
AND PR.DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN MPI.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE MPI.WAREHOUSE_ID = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN PR.COMPANY_ID != IN_COMPANY_ID
	ELSE PR.COMPANY_ID = IN_COMPANY_ID END)
AND PR.PROCESSING_REPORT_TYPE_ID = 5
AND FW.CURRENT_STATUS_ID != 4

UNION ALL

SELECT ACCT_SALE.ACCOUNT_SALE_ID, ACCT_SALE.PO_DATE, -ASPOI.QUANTITY, 'ASPO' FROM ACCOUNT_SALES_PO_ITEM ASPOI
INNER JOIN ACCOUNT_SALE ACCT_SALE ON ASPOI.ACCOUNT_SALE_ID = ACCT_SALE.ACCOUNT_SALE_ID
INNER JOIN FORM_WORKFLOW FW ON ACCT_SALE.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
LEFT JOIN (
SELECT ACCT_SALE.ACCOUNT_SALE_ID FROM AR_TRANSACTION ART 
INNER JOIN FORM_WORKFLOW FW1 ON ART.FORM_WORKFLOW_ID = FW1.FORM_WORKFLOW_ID
AND FW1.CURRENT_STATUS_ID != 4
INNER JOIN OBJECT_TO_OBJECT OTO ON OTO.TO_OBJECT_ID = ART.EB_OBJECT_ID AND OTO.OR_TYPE_ID = 102  
INNER JOIN ACCOUNT_SALE ACCT_SALE ON ACCT_SALE.EB_OBJECT_ID = OTO.FROM_OBJECT_ID
INNER JOIN ACCOUNT_SALES_PO_ITEM ASPOI ON ASPOI.ACCOUNT_SALE_ID = ACCT_SALE.ACCOUNT_SALE_ID
INNER JOIN FORM_WORKFLOW FW ON ACCT_SALE.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
AND FW.CURRENT_STATUS_ID != 4
) TBL ON ACCT_SALE.ACCOUNT_SALE_ID = TBL.ACCOUNT_SALE_ID
WHERE TBL.ACCOUNT_SALE_ID IS NULL
AND ASPOI.ITEM_ID = IN_ITEM_ID AND ACCT_SALE.PO_DATE <= AS_OF_DATE
AND (CASE WHEN IN_WAREHOUSE_ID = -1 THEN ASPOI.WAREHOUSE_ID != IN_WAREHOUSE_ID
	ELSE ASPOI.WAREHOUSE_ID = IN_WAREHOUSE_ID END)
AND (CASE WHEN IN_COMPANY_ID = -1 THEN ACCT_SALE.COMPANY_ID != IN_COMPANY_ID
	ELSE ACCT_SALE.COMPANY_ID = IN_COMPANY_ID END)

) as EXISTING_STOCKS;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GET_JOURNAL_ENTRIES_REGISTER` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_JOURNAL_ENTRIES_REGISTER`(IN IN_COMPANY_ID INT, 
	 IN IN_FROM_GL_DATE DATE, IN IN_TO_GL_DATE DATE, IN IS_COMPLETE_1 INT, IN IS_COMPLETE_2 INT)
BEGIN
	


SELECT TBL.GL_DATE, TBL.SOURCE, TBL.REFERENCE_NUMBER, TBL.ACCOUNT_NO, TBL.ACCOUNT_DESC,
  TBL.DESCRIPTION as DESCRIPTION, TBL.DEBIT, TBL.CREDIT, STATUS FROM (
  
SELECT GL.GL_DATE, 'GENERAL LEDGER' as SOURCE, CONCAT('JV', GL.SEQUENCE_NO) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, 
	GLE.DESCRIPTION, GLE.AMOUNT as DEBIT, 0 as CREDIT, 
	FW.IS_COMPLETE AS STATUS
FROM GL_ENTRY GLE 
INNER JOIN GENERAL_LEDGER GL ON GL.GENERAL_LEDGER_ID = GLE.GENERAL_LEDGER_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = GLE.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID 
INNER JOIN FORM_WORKFLOW FW ON GL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE (FW.IS_COMPLETE = IS_COMPLETE_1 OR FW.IS_COMPLETE = IS_COMPLETE_2)
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND IS_DEBIT = 1
AND GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
  
UNION ALL

SELECT GL.GL_DATE, 'GENERAL LEDGER' as SOURCE, CONCAT('JV', GL.SEQUENCE_NO) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, 
	GLE.DESCRIPTION, 0 as DEBIT, GLE.AMOUNT as CREDIT, 
	FW.IS_COMPLETE AS STATUS
FROM GL_ENTRY GLE 
INNER JOIN GENERAL_LEDGER GL ON GL.GENERAL_LEDGER_ID = GLE.GENERAL_LEDGER_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = GLE.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID 
INNER JOIN FORM_WORKFLOW FW ON GL.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE (FW.IS_COMPLETE = IS_COMPLETE_1 OR FW.IS_COMPLETE = IS_COMPLETE_2)
AND FW.CURRENT_STATUS_ID != 4
AND AC.COMPANY_ID = IN_COMPANY_ID
AND IS_DEBIT = 0
AND GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL



SELECT AI.GL_DATE, 'AP INVOICE' as SOURCE, AI.INVOICE_NUMBER as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, 
	AI.DESCRIPTION, 0 as DEBIT, AI.AMOUNT as CREDIT, 
	FW.IS_COMPLETE AS STATUS
FROM AP_INVOICE AI 
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE (FW.IS_COMPLETE = IS_COMPLETE_1 OR FW.IS_COMPLETE = IS_COMPLETE_2)
AND FW.CURRENT_STATUS_ID != 4
AND AI.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AI.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 

UNION ALL

SELECT  AI.GL_DATE, 'AP INVOICE' as SOURCE, AI.INVOICE_NUMBER as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, 
	AI.DESCRIPTION, -AI.AMOUNT as DEBIT, 0 as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM AP_INVOICE AI 
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID 
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE (FW.IS_COMPLETE = IS_COMPLETE_1 OR FW.IS_COMPLETE = IS_COMPLETE_2)
AND FW.CURRENT_STATUS_ID != 4
AND AI.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AI.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL



SELECT  AI.GL_DATE, 'AP INVOICE' as SOURCE, AI.INVOICE_NUMBER as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, 
	AL.DESCRIPTION, AL.AMOUNT AS DEBIT, 0 as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM AP_LINE AL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = AL.AP_INVOICE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = AL.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE (FW.IS_COMPLETE = IS_COMPLETE_1 OR FW.IS_COMPLETE = IS_COMPLETE_2)
AND FW.CURRENT_STATUS_ID != 4
AND AL.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AI.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL 

SELECT  AI.GL_DATE, 'AP INVOICE' as SOURCE, AI.INVOICE_NUMBER as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, 
	AL.DESCRIPTION, 0 AS DEBIT, -AL.AMOUNT as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM AP_LINE AL
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = AL.AP_INVOICE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = AL.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE (FW.IS_COMPLETE = IS_COMPLETE_1 OR FW.IS_COMPLETE = IS_COMPLETE_2)
AND FW.CURRENT_STATUS_ID != 4
AND AL.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AI.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 

UNION ALL



SELECT AP.CHECK_DATE as GL_DATE,  'AP PAYMENT' as SOURCE, AP.CHECK_NUMBER as REFERENCE_NUMBER,
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, 
	API.INVOICE_NUMBER as DESCRIPTION, 0 AS DEBIT, AI.PAID_AMOUNT as CREDIT,
	1 AS STATUS
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID=AP.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AP_INVOICE API ON API.AP_INVOICE_ID = AI.AP_INVOICE_ID
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AP.AMOUNT != 0
AND AI.PAID_AMOUNT > 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AP.CHECK_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 

UNION ALL

SELECT AP.CHECK_DATE as GL_DATE,  'AP PAYMENT' as SOURCE, AP.CHECK_NUMBER as REFERENCE_NUMBER,
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, 
	API.INVOICE_NUMBER as DESCRIPTION, -AI.PAID_AMOUNT AS DEBIT, 0 as CREDIT,
	1 AS STATUS
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID=AP.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AP_INVOICE API ON API.AP_INVOICE_ID = AI.AP_INVOICE_ID 
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AP.AMOUNT != 0
AND AI.PAID_AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AP.CHECK_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL

SELECT AP.CHECK_DATE as GL_DATE,  'AP PAYMENT' as SOURCE, AP.CHECK_NUMBER as REFERENCE_NUMBER,
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC,  
	API.INVOICE_NUMBER as DESCRIPTION, 0 AS DEBIT, -AI.PAID_AMOUNT as CREDIT,
	1 AS STATUS
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AP.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AP_INVOICE API ON API.AP_INVOICE_ID = AI.AP_INVOICE_ID 
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AI.PAID_AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AP.CHECK_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 

UNION ALL


SELECT AP.CHECK_DATE as GL_DATE,  'AP PAYMENT' as SOURCE, AP.CHECK_NUMBER as REFERENCE_NUMBER,
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC,  
	API.INVOICE_NUMBER as DESCRIPTION, AI.PAID_AMOUNT AS DEBIT, 0 as CREDIT,
	1 AS STATUS
FROM AP_PAYMENT_INVOICE AI
INNER JOIN AP_PAYMENT AP ON AP.AP_PAYMENT_ID = AI.AP_PAYMENT_ID
INNER JOIN SUPPLIER_ACCOUNT SA ON SA.SUPPLIER_ACCOUNT_ID = AP.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SA.DEFAULT_CREDIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AP_INVOICE API ON API.AP_INVOICE_ID = AI.AP_INVOICE_ID 
INNER JOIN FORM_WORKFLOW FW ON AP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AI.PAID_AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AP.CHECK_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL



SELECT AM.MATURITY_DATE as GL_DATE,  'AR MISCELLANEOUS' as SOURCE, AM.RECEIPT_NUMBER AS REFERENCE_NUMBER,
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC,
	AM.DESCRIPTION AS DESCRIPTION, AM.AMOUNT AS DEBIT, 0 as CREDIT,
	1 AS STATUS
FROM AR_MISCELLANEOUS AM
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AM.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND RM.DEBIT_ACCOUNT_COMBINATION_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AM.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 

UNION ALL 
SELECT AM.MATURITY_DATE as GL_DATE,  'AR MISCELLANEOUS' as SOURCE, AM.RECEIPT_NUMBER AS REFERENCE_NUMBER,
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC,
	AM.DESCRIPTION AS DESCRIPTION, AM.AMOUNT AS DEBIT, 0 as CREDIT,
	1 AS STATUS
FROM AR_MISCELLANEOUS AM
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AM.RECEIPT_METHOD_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND RM.BANK_ACCOUNT_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AM.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
UNION ALL

SELECT AM.MATURITY_DATE as GL_DATE,  'AR MISCELLANEOUS' as SOURCE, AM.RECEIPT_NUMBER AS REFERENCE_NUMBER,
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC,
	AM.DESCRIPTION AS DESCRIPTION, -AML.AMOUNT AS DEBIT, 0 as CREDIT,
	1 AS STATUS
FROM AR_MISCELLANEOUS_LINE AML
INNER JOIN AR_MISCELLANEOUS AM ON AM.AR_MISCELLANEOUS_ID = AML.AR_MISCELLANEOUS_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AML.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AML.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AM.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
UNION ALL

SELECT AM.MATURITY_DATE as GL_DATE,  'AR MISCELLANEOUS' as SOURCE, AM.RECEIPT_NUMBER AS REFERENCE_NUMBER,
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC,
	AM.DESCRIPTION AS DESCRIPTION, 0 AS DEBIT, AML.AMOUNT as CREDIT,
	1 AS STATUS
FROM AR_MISCELLANEOUS_LINE AML
INNER JOIN AR_MISCELLANEOUS AM ON AM.AR_MISCELLANEOUS_ID = AML.AR_MISCELLANEOUS_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AML.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AM.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AML.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AM.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL


SELECT AT.GL_DATE,  'AR TRANSACTION' as SOURCE, AT.TRANSACTION_NUMBER as REFERENCE_NUMBER,
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC,
	AT.DESCRIPTION, AT.AMOUNT AS DEBIT, 0 as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM AR_TRANSACTION AT
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AT.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE (FW.IS_COMPLETE = IS_COMPLETE_1 OR FW.IS_COMPLETE = IS_COMPLETE_2)
AND FW.CURRENT_STATUS_ID != 4
AND AT.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AT.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
UNION ALL

SELECT AT.GL_DATE, 'AR TRANSACTION' as SOURCE, AT.TRANSACTION_NUMBER as REFERENCE_NUMBER,
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC,
	AT.DESCRIPTION, 0 AS DEBIT, -AT.AMOUNT as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM AR_TRANSACTION AT
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AT.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE (FW.IS_COMPLETE = IS_COMPLETE_1 OR FW.IS_COMPLETE = IS_COMPLETE_2)
AND FW.CURRENT_STATUS_ID != 4
AND AT.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AT.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
UNION ALL


SELECT AT.GL_DATE, 'AR TRANSACTION' as SOURCE, AT.TRANSACTION_NUMBER as REFERENCE_NUMBER,
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC,
	AT.DESCRIPTION, 0 AS DEBIT, AL.AMOUNT as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID=AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE (FW.IS_COMPLETE = IS_COMPLETE_1 OR FW.IS_COMPLETE = IS_COMPLETE_2)
AND FW.CURRENT_STATUS_ID != 4
AND AL.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AT.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
UNION ALL

SELECT AT.GL_DATE, 'AR TRANSACTION' as SOURCE, AT.TRANSACTION_NUMBER as REFERENCE_NUMBER,
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC,
	AT.DESCRIPTION, -AL.AMOUNT AS DEBIT, 0 as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID=AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AT.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE (FW.IS_COMPLETE = IS_COMPLETE_1 OR FW.IS_COMPLETE = IS_COMPLETE_2)
AND FW.CURRENT_STATUS_ID != 4
AND AL.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AT.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL






SELECT AR.MATURITY_DATE as GL_DATE, 'ACCOUNT COLLECTION' as SOURCE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER,
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC,
	'' as DESCRIPTION, AR.AMOUNT AS DEBIT, 0 as CREDIT,
	1 AS STATUS
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND RM.DEBIT_ACCOUNT_COMBINATION_ID IS NOT NULL
AND AR.AMOUNT != 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AR.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL
SELECT AR.MATURITY_DATE as GL_DATE, 'ACCOUNT COLLECTION' as SOURCE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER,
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, 
	'' AS DESCRIPTION, AR.AMOUNT AS DEBIT, 0 as CREDIT,
	1 AS STATUS
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.AMOUNT != 0
AND RM.BANK_ACCOUNT_ID IS NOT NULL
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AR.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
UNION ALL




SELECT AR.MATURITY_DATE as GL_DATE, 'ACCOUNT COLLECTION' as SOURCE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER,
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC,
	'' AS DESCRIPTION, 0 AS DEBIT, AR.AMOUNT as CREDIT,
	1 AS STATUS
FROM AR_RECEIPT AR
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND AR.AMOUNT != 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AR.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
UNION ALL




SELECT AR.MATURITY_DATE as GL_DATE, 'ACCOUNT COLLECTION' as SOURCE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER,
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC,
	AT.TRANSACTION_NUMBER AS DESCRIPTION, ART.AMOUNT AS DEBIT, 0 as CREDIT,
	1 AS STATUS
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AR.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
UNION ALL

SELECT AR.MATURITY_DATE as GL_DATE, 'ACCOUNT COLLECTION' as SOURCE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER,
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC,
	AT.TRANSACTION_NUMBER AS DESCRIPTION, 0 AS DEBIT, -ART.AMOUNT as CREDIT,
	1 AS STATUS
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = AR.RECEIPT_METHOD_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AR.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
UNION ALL




SELECT AR.MATURITY_DATE as GL_DATE, 'ACCOUNT COLLECTION' as SOURCE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER,
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC,
	AT.TRANSACTION_NUMBER AS DESCRIPTION, 0 AS DEBIT, ART.AMOUNT as CREDIT,
	1 AS STATUS
FROM AR_RECEIPT_TRANSACTION ART
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT >= 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AR.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
UNION ALL

SELECT AR.MATURITY_DATE as GL_DATE, 'ACCOUNT COLLECTION' as SOURCE, AR.RECEIPT_NUMBER as REFERENCE_NUMBER,
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC,
	AT.TRANSACTION_NUMBER AS DESCRIPTION, -ART.AMOUNT AS DEBIT, 0 as CREDIT,
	1 AS STATUS
FROM AR_RECEIPT_TRANSACTION ART 
INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = AR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN AR_TRANSACTION AT ON AT.AR_TRANSACTION_ID = ART.AR_TRANSACTION_ID
INNER JOIN FORM_WORKFLOW FW ON AR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4
AND ART.AMOUNT < 0
AND AC.COMPANY_ID = IN_COMPANY_ID
AND AR.MATURITY_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL


SELECT CS.RECEIPT_DATE as GL_DATE, 'CASH SALES' as SOURCE, CONCAT('CS-', CS_NUMBER) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, CS.SALE_INVOICE_NO AS DESCRIPTION, 
	COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND CS.COMPANY_ID = IN_COMPANY_ID
AND CS.RECEIPT_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL


SELECT CS.RECEIPT_DATE as GL_DATE, 'CASH SALES' as SOURCE, CONCAT('CS-', CS_NUMBER) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, CS.SALE_INVOICE_NO AS DESCRIPTION, 
 	0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT,
 	FW.IS_COMPLETE AS STATUS
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND CS.COMPANY_ID = IN_COMPANY_ID
AND CS.RECEIPT_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL


SELECT CS.RECEIPT_DATE as GL_DATE, 'CASH SALES' as SOURCE, CONCAT('CS-', CS_NUMBER) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, CS.SALE_INVOICE_NO AS DESCRIPTION,
	0 AS DEBIT, QUANTITY * SRP as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND CS.COMPANY_ID = IN_COMPANY_ID
AND CS.RECEIPT_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL


SELECT CS.RECEIPT_DATE as GL_DATE, 'CASH SALES' as SOURCE, CONCAT('CS-', CS_NUMBER) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, CS.SALE_INVOICE_NO AS DESCRIPTION,
	0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CS.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND CS.COMPANY_ID = IN_COMPANY_ID
AND CS.RECEIPT_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL


SELECT CS.RECEIPT_DATE as GL_DATE, 'CASH SALES' as SOURCE, CONCAT('CS-', CS_NUMBER) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, CS.SALE_INVOICE_NO AS DESCRIPTION,
	CSI.AMOUNT AS DEBIT, 0 as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CS.COMPANY_ID = IN_COMPANY_ID
AND CS.RECEIPT_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL


SELECT CS.RECEIPT_DATE as GL_DATE, 'CASH SALES' as SOURCE, CONCAT('CS-', CS_NUMBER) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, CS.SALE_INVOICE_NO AS DESCRIPTION,
	AL.AMOUNT AS DEBIT, 0 as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CS.COMPANY_ID = IN_COMPANY_ID
AND CS.RECEIPT_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL


SELECT CS.RECEIPT_DATE as GL_DATE, 'CASH SALES' as SOURCE, CONCAT('CS-', CS_NUMBER) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, CS.SALE_INVOICE_NO AS DESCRIPTION, 
	AMOUNT AS DEBIT, 0 as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM CASH_SALE_ITEM CSI
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSI.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CS.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CS.COMPANY_ID = IN_COMPANY_ID
AND CS.RECEIPT_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL


SELECT CS.RECEIPT_DATE as GL_DATE, 'CASH SALES' as SOURCE, CONCAT('CS-', CS_NUMBER) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, CS.SALE_INVOICE_NO AS DESCRIPTION, 
	0 AS DEBIT, AL.AMOUNT as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM CASH_SALE_AR_LINE AL
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = AL.CASH_SALE_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CS.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CS.COMPANY_ID = IN_COMPANY_ID
AND CS.RECEIPT_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL 


SELECT ART.TRANSACTION_DATE AS GL_DATE, 'ACCOUNT SALES' as SOURCE, CONCAT('AS-', SEQUENCE_NO) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, ART.DESCRIPTION,
	COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 4

UNION ALL 


SELECT ART.TRANSACTION_DATE AS GL_DATE, 'ACCOUNT SALES' as SOURCE, CONCAT('AS-', SEQUENCE_NO) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, ART.DESCRIPTION,
	0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 4

UNION ALL


SELECT ART.TRANSACTION_DATE AS GL_DATE, 'ACCOUNT SALES' as SOURCE, CONCAT('AS-', SEQUENCE_NO) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, ART.DESCRIPTION,
	0 as DEBIT, QUANTITY * SRP as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_ACCOUNT
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 4

UNION ALL


SELECT ART.TRANSACTION_DATE AS GL_DATE, 'ACCOUNT SALES' as SOURCE, CONCAT('AS-', SEQUENCE_NO) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, ART.DESCRIPTION,
	0 as DEBIT, -COALESCE(DISCOUNT, 0) as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 4

UNION ALL


SELECT ART.TRANSACTION_DATE AS GL_DATE, 'ACCOUNT SALES' as SOURCE, CONCAT('AS-', SEQUENCE_NO) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, ART.DESCRIPTION,
	ASI.AMOUNT as DEBIT, 0 as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 4

UNION ALL


SELECT ART.TRANSACTION_DATE AS GL_DATE, 'ACCOUNT SALES' as SOURCE, CONCAT('AS-', SEQUENCE_NO) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, ART.DESCRIPTION,
	AL.AMOUNT as DEBIT, 0 as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 4

UNION ALL


SELECT ART.TRANSACTION_DATE AS GL_DATE, 'ACCOUNT SALES' as SOURCE, CONCAT('AS-', SEQUENCE_NO) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, ART.DESCRIPTION,
	0 as DEBIT, AL.AMOUNT as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM AR_LINE AL
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = AL.AR_TRANSACTION_ID
INNER JOIN AR_LINE_SETUP ALS ON ALS.AR_LINE_SETUP_ID = AL.AR_LINE_SETUP_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ALS.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 4

UNION ALL


SELECT AI.GL_DATE, 'RECEIVING REPORT' as SOURCE, CONCAT('RR-', AI.SEQUENCE_NO) as REFERENCE_NUMBER,
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, 
	COALESCE(AI.INVOICE_NUMBER, RR.DELIVERY_RECEIPT_NO) as DESCRIPTION,
	COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM R_RECEIVING_REPORT_ITEM RRI
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN ITEM I ON I.ITEM_ID = RRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND RR.COMPANY_ID = IN_COMPANY_ID
AND AI.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
AND AI.INVOICE_TYPE_ID = 5

UNION ALL 


SELECT AI.GL_DATE, 'RECEIVING REPORT' as SOURCE, CONCAT('RR-', AI.SEQUENCE_NO) as REFERENCE_NUMBER,
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC,
	COALESCE(AI.INVOICE_NUMBER, RR.DELIVERY_RECEIPT_NO) as DESCRIPTION,
	0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM R_RECEIVING_REPORT_ITEM RRI
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = RRI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RR.AP_INVOICE_ID
INNER JOIN SUPPLIER_ACCOUNT SPA ON SPA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SPA.DEFAULT_CREDIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND RR.COMPANY_ID = IN_COMPANY_ID
AND AI.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
AND AI.INVOICE_TYPE_ID = 5

UNION ALL


SELECT  AI.GL_DATE, 'RETURN TO SUPPLIER' as SOURCE, CONCAT('RTS-', AI.SEQUENCE_NO) as REFERENCE_NUMBER,  
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, 'RETURN TO SUPPLIER' as DESCRIPTION,
	0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM R_RETURN_TO_SUPPLIER_ITEM RTSI
INNER JOIN R_RETURN_TO_SUPPLIER RTS ON RTS.AP_INVOICE_ID = RTSI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RTS.AP_INVOICE_ID
INNER JOIN ITEM I ON I.ITEM_ID = RTSI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND RTS.COMPANY_ID = IN_COMPANY_ID
AND AI.GL_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
AND AI.INVOICE_TYPE_ID = 6

UNION ALL


SELECT  AI.GL_DATE, 'RETURN TO SUPPLIER' as SOURCE, CONCAT('RTS-', AI.SEQUENCE_NO) as REFERENCE_NUMBER,  
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, 'RETURN TO SUPPLIER' as DESCRIPTION,
	COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM R_RETURN_TO_SUPPLIER_ITEM RTSI
INNER JOIN R_RETURN_TO_SUPPLIER RTS ON RTS.AP_INVOICE_ID = RTSI.AP_INVOICE_ID
INNER JOIN AP_INVOICE AI ON AI.AP_INVOICE_ID = RTS.AP_INVOICE_ID
INNER JOIN SUPPLIER_ACCOUNT SPA ON SPA.SUPPLIER_ACCOUNT_ID = AI.SUPPLIER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SPA.DEFAULT_CREDIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON AI.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND RTS.COMPANY_ID = IN_COMPANY_ID
AND AI.INVOICE_TYPE_ID = 6

UNION ALL


SELECT CSR.DATE as GL_DATE, 'CASH SALES RETURN' as SOURCE,  CONCAT('CSR-', CSR_NUMBER) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, CONCAT('CS-', CS_NUMBER) AS DESCRIPTION, 
	COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND CSR.DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 

UNION ALL


SELECT CSR.DATE as GL_DATE, 'CASH SALES RETURN' as SOURCE,  CONCAT('CSR-', CSR_NUMBER) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, CONCAT('CS-', CS_NUMBER) AS DESCRIPTION,
	0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND CSR.DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 

UNION ALL


SELECT CSR.DATE as GL_DATE, 'CASH SALES RETURN' as SOURCE,  CONCAT('CSR-', CSR_NUMBER) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, CONCAT('CS-', CS_NUMBER) AS DESCRIPTION,
	0 as DEBIT, (QUANTITY * SRP) as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND CSR.DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 

UNION ALL


SELECT CSR.DATE as GL_DATE, 'CASH SALES RETURN' as SOURCE,  CONCAT('CSR-', CSR_NUMBER) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, CONCAT('CS-', CS_NUMBER) AS DESCRIPTION,
	0 AS DEBIT, COALESCE(DISCOUNT, 0) as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = CSR.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = CSRI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND CSR.DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 

UNION ALL


SELECT CSR.DATE as GL_DATE, 'CASH SALES RETURN' as SOURCE,  CONCAT('CSR-', CSR_NUMBER) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, CONCAT('CS-', CS_NUMBER) AS DESCRIPTION,
	AMOUNT as DEBIT, 0 as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND CSR.DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE

UNION ALL


SELECT CSR.DATE as GL_DATE, 'CASH SALES RETURN' as SOURCE,  CONCAT('CSR-', CSR_NUMBER) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, CONCAT('CS-', CS_NUMBER) AS DESCRIPTION,
	AMOUNT as DEBIT, 0 as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM CASH_SALE_RETURN_ITEM CSRI
INNER JOIN CASH_SALE_RETURN CSR ON CSR.CASH_SALE_RETURN_ID = CSRI.CASH_SALE_RETURN_ID
INNER JOIN CASH_SALE CS ON CS.CASH_SALE_ID = CSR.CASH_SALE_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CASH_SALES_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CSR.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CSR.COMPANY_ID = IN_COMPANY_ID
AND CSR.DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 

UNION ALL


SELECT ART.TRANSACTION_DATE AS GL_DATE, 'ACCOUNT SALES RETURN' as SOURCE, CONCAT('ASR-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, CONCAT('AS-', ASR.SEQUENCE_NO) as DESCRIPTION,
	COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.COST_ACCOUNT
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 5
AND ASR.AR_TRANSACTION_TYPE_ID = 4

UNION ALL


SELECT ART.TRANSACTION_DATE AS GL_DATE, 'ACCOUNT SALES RETURN' as SOURCE, CONCAT('ASR-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, CONCAT('AS-', ASR.SEQUENCE_NO) as DESCRIPTION,
	0 as DEBIT, (COALESCE(UNIT_COST, 0) * QUANTITY) as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 5
AND ASR.AR_TRANSACTION_TYPE_ID = 4

UNION ALL


SELECT ART.TRANSACTION_DATE AS GL_DATE, 'ACCOUNT SALES RETURN' as SOURCE, CONCAT('ASR-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, CONCAT('AS-', ASR.SEQUENCE_NO) as DESCRIPTION,
	0 as DEBIT, (QUANTITY * SRP) as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_RETURN_ACCOUNT
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 5
AND ASR.AR_TRANSACTION_TYPE_ID = 4

UNION ALL


SELECT ART.TRANSACTION_DATE AS GL_DATE, 'ACCOUNT SALES RETURN' as SOURCE, CONCAT('ASR-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, CONCAT('AS-', ASR.SEQUENCE_NO) as DESCRIPTION,
	0 as DEBIT, COALESCE(DISCOUNT, 0) as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ITEM I ON I.ITEM_ID = ASI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.SALES_DISCOUNT_ACCOUNT
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ICAS.ACTIVE = 1
AND ICAS.COMPANY_ID = IN_COMPANY_ID
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 5

UNION ALL


SELECT ART.TRANSACTION_DATE AS GL_DATE, 'ACCOUNT SALES RETURN' as SOURCE, CONCAT('ASR-', ART.SEQUENCE_NO) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, CONCAT('AS-', ASR.SEQUENCE_NO) as DESCRIPTION,
	ASI.AMOUNT as DEBIT, 0 as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM ACCOUNT_SALE_ITEM ASI
INNER JOIN AR_TRANSACTION ART ON ART.AR_TRANSACTION_ID = ASI.AR_TRANSACTION_ID
INNER JOIN AR_TRANSACTION ASR ON ASR.AR_TRANSACTION_ID = ART.ACCOUNT_SALE_ID
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ART.CUSTOMER_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ACA.DEFAULT_DEBIT_AC_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON ART.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND ART.COMPANY_ID = IN_COMPANY_ID
AND ART.TRANSACTION_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND ART.AR_TRANSACTION_TYPE_ID = 5

UNION ALL 


SELECT CAP.RECEIPT_DATE as GL_DATE, 'CUSTOMER ADVANCE PAYMENT' as SOURCE, CONCAT('CAP-', CAP_NUMBER) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, CAP.SALE_INVOICE_NO AS DESCRIPTION, 
	AMOUNT as DEBIT, 0 as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.DEBIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CAP.COMPANY_ID = IN_COMPANY_ID
AND CAP.RECEIPT_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 

UNION ALL 


SELECT CAP.RECEIPT_DATE as GL_DATE, 'CUSTOMER ADVANCE PAYMENT' as SOURCE, CONCAT('CAP-', CAP_NUMBER) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, CAP.SALE_INVOICE_NO AS DESCRIPTION, 
	AMOUNT as DEBIT, 0 as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN BANK_ACCOUNT BA ON BA.BANK_ACCOUNT_ID = RM.BANK_ACCOUNT_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = BA.CASH_IN_BANK_ACCT_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CAP.COMPANY_ID = IN_COMPANY_ID
AND CAP.RECEIPT_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 

UNION ALL 


SELECT CAP.RECEIPT_DATE as GL_DATE, 'CUSTOMER ADVANCE PAYMENT' as SOURCE, CONCAT('CAP-', CAP_NUMBER) as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, CAP.SALE_INVOICE_NO AS DESCRIPTION, 
	0 as DEBIT, AMOUNT as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM CUSTOMER_ADVANCE_PAYMENT_ITEM CAPI
INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.CUSTOMER_ADVANCE_PAYMENT_ID = CAPI.CUSTOMER_ADVANCE_PAYMENT_ID
INNER JOIN INVENTORY_ACCOUNT IA ON IA.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN RECEIPT_METHOD RM ON RM.RECEIPT_METHOD_ID = IA.CUSTOMER_ADV_PAYMENT_RM_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = RM.CREDIT_ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON CAP.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND CAP.COMPANY_ID = IN_COMPANY_ID
AND CAP.RECEIPT_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 

UNION ALL


SELECT SA.SA_DATE as GL_DATE, 'STOCK ADJUSTMENT IN' as SOURCE, SA.SA_NUMBER as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, SA.REMARKS AS DESCRIPTION,  
	COALESCE(UNIT_COST, 0) * QUANTITY as DEBIT, 0 as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ITEM I ON I.ITEM_ID = SAI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND SA.COMPANY_ID = IN_COMPANY_ID
AND SA.SA_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE 
AND QUANTITY > 0

UNION ALL


SELECT SA.SA_DATE as GL_DATE, 'STOCK ADJUSTMENT IN' as SOURCE, SA.SA_NUMBER as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, SA.REMARKS AS DESCRIPTION,  
	0 as DEBIT, COALESCE(UNIT_COST, 0) * QUANTITY as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SAT.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND SA.COMPANY_ID = IN_COMPANY_ID
AND SA.SA_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND QUANTITY > 0

UNION ALL 


SELECT SA.SA_DATE as GL_DATE, 'STOCK ADJUSTMENT OUT' as SOURCE, SA.SA_NUMBER as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, SA.REMARKS AS DESCRIPTION,  
	COALESCE(UNIT_COST, 0) * -QUANTITY as DEBIT, 0 as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = SAT.ACCOUNT_COMBINATION_ID
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND SA.COMPANY_ID = IN_COMPANY_ID
AND SA.SA_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND QUANTITY < 0

UNION ALL


SELECT SA.SA_DATE as GL_DATE, 'STOCK ADJUSTMENT OUT' as SOURCE, SA.SA_NUMBER as REFERENCE_NUMBER, 
	ACCT.NUMBER AS ACCOUNT_NO, ACCT.DESCRIPTION AS ACCOUNT_DESC, SA.REMARKS AS DESCRIPTION,
	0 as DEBIT, COALESCE(UNIT_COST, 0) * -QUANTITY as CREDIT,
	FW.IS_COMPLETE AS STATUS
FROM STOCK_ADJUSTMENT_ITEM SAI
INNER JOIN STOCK_ADJUSTMENT SA ON SA.STOCK_ADJUSTMENT_ID = SAI.STOCK_ADJUSTMENT_ID
INNER JOIN STOCK_ADJUSTMENT_TYPE SAT ON SAT.STOCK_ADJUSTMENT_TYPE_ID = SA.STOCK_ADJUSTMENT_TYPE_ID
INNER JOIN ITEM I ON I.ITEM_ID = SAI.ITEM_ID
INNER JOIN ITEM_CATEGORY_ACCOUNT_SETUP ICAS ON I.ITEM_CATEGORY_ID = ICAS.ITEM_CATEGORY_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = ICAS.INVENTORY_ACCOUNT
INNER JOIN ACCOUNT ACCT ON ACCT.ACCOUNT_ID = AC.ACCOUNT_ID
INNER JOIN FORM_WORKFLOW FW ON SA.FORM_WORKFLOW_ID = FW.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 1
AND SA.COMPANY_ID = IN_COMPANY_ID
AND SA.SA_DATE BETWEEN IN_FROM_GL_DATE and IN_TO_GL_DATE
AND QUANTITY < 0


) as TBL ORDER BY TBL.GL_DATE, TBL.REFERENCE_NUMBER;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GET_TRANSACTION_AGING` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_TRANSACTION_AGING`(IN IN_COMPANY_ID INT, IN IN_TRANSACTION_TYPE_ID INT, IN IN_AR_CUSTOMER_ID INT,
IN IN_AR_CUSTOMER_ACCOUNT_ID INT, IN IN_GROUP_BY_OPTION INT, IN IN_AGE_BASIS INT, IN IN_AS_OF_DATE DATE, IN IN_LIMIT_FROM INT, IN IN_LIMIT_TO INT)
BEGIN

SELECT TYPE, ID, CUSTOMER_NAME, CUSTOMER_ACCOUNT, TYPE_CA, TRANSACTION_NUMBER, TRANSACTION_DATE, TERM,
 SUM(TRANSACTION_AMT) AS TOTAL_TRANSACTION, SUM(PAID_AMT) AS TOTAL_TRANSACTION, SUM(TRANSACTION_AMT - PAID_AMT) AS BALANCE,
 SUM(1_30_DAYS) AS 1_30_DAYS, SUM(31_60_DAYS) AS 31_60_DAYS, SUM(61_90_DAYS) AS 61_90_DAYS, SUM(91_120_DAYS),
 SUM(121_150_DAYS) AS 121_150_DAYS, SUM(151_UP) AS 151_UP FROM (

SELECT TYPE, TYPE_ID, ID, AGE_BASIS, CUSTOMER_NAME, CUSTOMER_ACCOUNT, CONCAT(TYPE_ID, ' ', AR_CUSTOMER_ACCOUNT_ID) AS TYPE_CA, 
 TRANSACTION_NUMBER, TERM, SUM(TRANSACTION_AMT) AS TRANSACTION_AMT, SUM(PAID_AMT) AS PAID_AMT, TRANSACTION_DATE,
 IF(DATEDIFF(IN_AS_OF_DATE, AGE_BASIS) BETWEEN 1 AND 30, SUM(TRANSACTION_AMT - PAID_AMT), 0) AS 1_30_DAYS,
 IF(DATEDIFF(IN_AS_OF_DATE, AGE_BASIS) BETWEEN 31 AND 60, SUM(TRANSACTION_AMT - PAID_AMT), 0) AS 31_60_DAYS, 
 IF(DATEDIFF(IN_AS_OF_DATE, AGE_BASIS) BETWEEN 61 AND 90, SUM(TRANSACTION_AMT - PAID_AMT), 0) AS 61_90_DAYS, 
 IF(DATEDIFF(IN_AS_OF_DATE, AGE_BASIS) BETWEEN 91 AND 120, SUM(TRANSACTION_AMT - PAID_AMT), 0) AS 91_120_DAYS,
 IF(DATEDIFF(IN_AS_OF_DATE, AGE_BASIS) BETWEEN 121 AND 150, SUM(TRANSACTION_AMT - PAID_AMT), 0) AS 121_150_DAYS, 
 IF(DATEDIFF(IN_AS_OF_DATE, AGE_BASIS) >= 151, SUM(TRANSACTION_AMT - PAID_AMT), 0) AS 151_UP
FROM (
 SELECT
  (CASE WHEN T.AR_TRANSACTION_TYPE_ID = 1 THEN "REG"
    WHEN T.AR_TRANSACTION_TYPE_ID = 2 THEN "DM"
    WHEN T.AR_TRANSACTION_TYPE_ID = 3 THEN "CM"
    WHEN T.AR_TRANSACTION_TYPE_ID = 4 THEN "AS"
    WHEN T.AR_TRANSACTION_TYPE_ID = 5 THEN "ASR"
    WHEN T.AR_TRANSACTION_TYPE_ID = 10 THEN "AS-IS"
    WHEN T.AR_TRANSACTION_TYPE_ID = 11 THEN "ASR-IS" END) AS TYPE,
  T.AR_TRANSACTION_ID AS ID, T.AR_TRANSACTION_TYPE_ID AS TYPE_ID,
  (CASE WHEN IN_AGE_BASIS = 1 THEN (
  	(CASE WHEN T.DUE_DATE IS NULL THEN T.TRANSACTION_DATE ELSE T.DUE_DATE END))
    WHEN IN_AGE_BASIS = 2 THEN T.TRANSACTION_DATE 
    ELSE (CASE WHEN T.GL_DATE IS NULL THEN T.TRANSACTION_DATE ELSE T.GL_DATE END) END) AS AGE_BASIS,
  C.NAME AS CUSTOMER_NAME, CA.NAME AS CUSTOMER_ACCOUNT, TRM.NAME AS TERM,
  (CASE WHEN T.AR_TRANSACTION_TYPE_ID = 4 OR T.AR_TRANSACTION_TYPE_ID = 12 THEN
    (CASE WHEN T.DESCRIPTION IS NULL OR T.DESCRIPTION="" THEN T.TRANSACTION_NUMBER
    ELSE CONCAT(T.TRANSACTION_NUMBER, ", ", T.DESCRIPTION) END)
    WHEN T.AR_TRANSACTION_TYPE_ID = 5 OR T.AR_TRANSACTION_TYPE_ID = 13 THEN
  (CASE WHEN T.DESCRIPTION IS NULL OR T.DESCRIPTION="" THEN T.TRANSACTION_NUMBER
    ELSE CONCAT(T.TRANSACTION_NUMBER, ", ", T.DESCRIPTION) END)
    WHEN T.AR_TRANSACTION_TYPE_ID = 7 THEN
  (CASE WHEN T.DESCRIPTION IS NULL OR T.DESCRIPTION="" THEN T.TRANSACTION_NUMBER
    ELSE CONCAT(T.TRANSACTION_NUMBER, ", ", T.DESCRIPTION) END)
    ELSE T.TRANSACTION_NUMBER END) AS TRANSACTION_NUMBER,
  T.CUSTOMER_ACCOUNT_ID AS AR_CUSTOMER_ACCOUNT_ID,
  (CASE WHEN T.AR_TRANSACTION_TYPE_ID = 7 THEN -T.AMOUNT ELSE T.AMOUNT END) TRANSACTION_AMT, 0 AS PAID_AMT,
  T.TRANSACTION_DATE as TRANSACTION_DATE
  FROM AR_TRANSACTION T
  INNER JOIN AR_CUSTOMER C ON C.AR_CUSTOMER_ID=T.CUSTOMER_ID
  INNER JOIN AR_CUSTOMER_ACCOUNT CA ON CA.AR_CUSTOMER_ACCOUNT_ID=T.CUSTOMER_ACCOUNT_ID
  INNER JOIN TERM TRM ON TRM.TERM_ID=T.TERM_ID
  INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID=T.FORM_WORKFLOW_ID
  WHERE FW.IS_COMPLETE = 1
  AND T.AR_TRANSACTION_TYPE_ID != 15
  AND CA.COMPANY_ID = IN_COMPANY_ID
  AND (CASE WHEN IN_TRANSACTION_TYPE_ID != -1 THEN T.AR_TRANSACTION_TYPE_ID = IN_TRANSACTION_TYPE_ID
  			ELSE T.AR_TRANSACTION_TYPE_ID != IN_TRANSACTION_TYPE_ID END)
  AND (CASE WHEN IN_AR_CUSTOMER_ID != -1 THEN T.CUSTOMER_ID = IN_AR_CUSTOMER_ID
  			ELSE T.CUSTOMER_ID != IN_AR_CUSTOMER_ID END)
  AND (CASE WHEN IN_AR_CUSTOMER_ACCOUNT_ID != -1 THEN T.CUSTOMER_ACCOUNT_ID = IN_AR_CUSTOMER_ACCOUNT_ID
  			ELSE T.CUSTOMER_ACCOUNT_ID != IN_AR_CUSTOMER_ACCOUNT_ID END)

UNION ALL

SELECT
  'ACC-COL' AS TYPE, T.AR_TRANSACTION_ID AS ID, T.AR_TRANSACTION_TYPE_ID AS TYPE_ID, AR.MATURITY_DATE AS AGE_BASIS,
  C.NAME AS CUSTOMER_NAME, CA.NAME AS CUSTOMER_ACCOUNT, '' AS TERM, 
  '' AS TRANSACTION_NUMBER, T.CUSTOMER_ACCOUNT_ID AS AR_CUSTOMER_ACCOUNT_ID,
  0 AS TRANSACTION_AMT, ART.AMOUNT AS PAID_AMT,
  T.TRANSACTION_DATE as TRANSACTION_DATE
  FROM AR_RECEIPT_TRANSACTION ART
  INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
  INNER JOIN AR_TRANSACTION T ON ART.AR_TRANSACTION_ID = T.AR_TRANSACTION_ID
  INNER JOIN AR_CUSTOMER C ON C.AR_CUSTOMER_ID = AR.AR_CUSTOMER_ID
  INNER JOIN AR_CUSTOMER_ACCOUNT CA ON CA.AR_CUSTOMER_ACCOUNT_ID = AR.AR_CUSTOMER_ACCOUNT_ID
  INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID=AR.FORM_WORKFLOW_ID
  WHERE FW.CURRENT_STATUS_ID != 4
  AND AR.MATURITY_DATE <= IN_AS_OF_DATE
  AND T.AR_TRANSACTION_TYPE_ID != 15
  AND CA.COMPANY_ID = IN_COMPANY_ID
  AND (CASE WHEN IN_TRANSACTION_TYPE_ID != -1 THEN T.AR_TRANSACTION_TYPE_ID = IN_TRANSACTION_TYPE_ID
  			ELSE T.AR_TRANSACTION_TYPE_ID != IN_TRANSACTION_TYPE_ID END)
  AND (CASE WHEN IN_AR_CUSTOMER_ID != -1 THEN T.CUSTOMER_ID = IN_AR_CUSTOMER_ID
  			ELSE T.CUSTOMER_ID != IN_AR_CUSTOMER_ID END)
  AND (CASE WHEN IN_AR_CUSTOMER_ACCOUNT_ID != -1 THEN T.CUSTOMER_ACCOUNT_ID = IN_AR_CUSTOMER_ACCOUNT_ID
  			ELSE T.CUSTOMER_ACCOUNT_ID != IN_AR_CUSTOMER_ACCOUNT_ID END)
 ) AS AGING_INNER_TBL GROUP BY ID 
) AS TRANSACTION_AGING
WHERE IN_AS_OF_DATE > AGE_BASIS
GROUP BY CASE WHEN IN_GROUP_BY_OPTION = 1 THEN ID ELSE TYPE_CA END
HAVING (SUM(TRANSACTION_AMT) - SUM(PAID_AMT)) NOT BETWEEN -0.009 AND 0.009
ORDER BY TYPE_ID, CUSTOMER_NAME, CUSTOMER_ACCOUNT, ID
LIMIT IN_LIMIT_FROM, IN_LIMIT_TO;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GET_UNPOSTED_FORMS` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_UNPOSTED_FORMS`(IN IN_DATE_FROM date, IN IN_DATE_TO date)
BEGIN

SELECT SOURCE, ID, SEQUENCE_NO, REF_NUMBER, DATE FROM (
SELECT 'AP INVOICE' AS SOURCE, API.AP_INVOICE_ID AS ID,
CONCAT('API ', COALESCE(CONCAT(C.COMPANY_CODE,' ',API.SEQUENCE_NO), API.SEQUENCE_NO)) AS SEQUENCE_NO,
CONCAT('Invoice No. ', API.INVOICE_NUMBER) AS REF_NUMBER,
INVOICE_DATE AS DATE FROM AP_INVOICE API
INNER JOIN AP_LINE APL ON APL.AP_INVOICE_ID = API.AP_INVOICE_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = APL.ACCOUNT_COMBINATION_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = API.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND API.INVOICE_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND API.INVOICE_TYPE_ID <= 4

UNION ALL

SELECT 'RECEIVING REPORT' AS SOURCE, API.AP_INVOICE_ID AS ID,
CONCAT('RR ', COALESCE(CONCAT(C.COMPANY_CODE,' ', API.SEQUENCE_NO), API.SEQUENCE_NO)) AS SEQUENCE_NO,
(CASE WHEN API.INVOICE_NUMBER != '' THEN CONCAT('SI No. ', API.INVOICE_NUMBER)
ELSE CONCAT('DR No. ', RR.DELIVERY_RECEIPT_NO) END) AS REF_NUMBER,
INVOICE_DATE AS DATE FROM AP_INVOICE API
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = API.AP_INVOICE_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = RR.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = API.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND API.INVOICE_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND API.INVOICE_TYPE_ID = 5

UNION ALL

SELECT 'RETURN TO SUPPLIER' AS SOURCE, API.AP_INVOICE_ID AS ID, 
CONCAT('RTS ', COALESCE(CONCAT(C.COMPANY_CODE,' ',API.SEQUENCE_NO), API.SEQUENCE_NO)) AS SEQUENCE_NO,
(CASE WHEN API.INVOICE_NUMBER != '' THEN CONCAT('Invoice No. ', API.INVOICE_NUMBER)
ELSE '' END) AS REF_NUMBER,
INVOICE_DATE AS DATE FROM AP_INVOICE API
INNER JOIN R_RETURN_TO_SUPPLIER RTS ON RTS.AP_INVOICE_ID = API.AP_INVOICE_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = RTS.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = API.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND API.INVOICE_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND API.INVOICE_TYPE_ID = 6

UNION ALL

SELECT 'RTS - EB' AS SOURCE, API.AP_INVOICE_ID AS ID,
CONCAT('RTS-EB ', COALESCE(CONCAT(C.COMPANY_CODE,' ',API.SEQUENCE_NO), API.SEQUENCE_NO)) AS SEQUENCE_NO,
CONCAT('Invoice No. ', API.INVOICE_NUMBER) AS REF_NUMBER,
INVOICE_DATE AS DATE FROM AP_INVOICE API
INNER JOIN R_RETURN_TO_SUPPLIER RTS ON RTS.AP_INVOICE_ID = API.AP_INVOICE_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = RTS.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = API.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND API.INVOICE_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND API.INVOICE_TYPE_ID = 7

UNION ALL

SELECT 'RECEIVING REPORT - RM IS' AS SOURCE, API.AP_INVOICE_ID AS ID,
CONCAT('RR-RM IS ', COALESCE(CONCAT(C.COMPANY_CODE,' ',API.SEQUENCE_NO), API.SEQUENCE_NO)) AS SEQUENCE_NO,
(CASE WHEN API.INVOICE_NUMBER != '' THEN CONCAT('SI No. ', API.INVOICE_NUMBER)
ELSE CONCAT('DR No. ', RR.DELIVERY_RECEIPT_NO) END) AS REF_NUMBER,
INVOICE_DATE AS DATE FROM AP_INVOICE API
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = API.AP_INVOICE_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = RR.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = API.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND API.INVOICE_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND API.INVOICE_TYPE_ID = 8

UNION ALL

SELECT 'RECEIVING REPORT - RM P' AS SOURCE, API.AP_INVOICE_ID AS ID,
CONCAT('RR-RM P ', COALESCE(CONCAT(C.COMPANY_CODE,' ',API.SEQUENCE_NO), API.SEQUENCE_NO)) AS SEQUENCE_NO,
CONCAT('SS No. ', API.INVOICE_NUMBER) AS REF_NUMBER,
INVOICE_DATE AS DATE FROM AP_INVOICE API
INNER JOIN R_RECEIVING_REPORT RR ON RR.AP_INVOICE_ID = API.AP_INVOICE_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = RR.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = API.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND API.INVOICE_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND API.INVOICE_TYPE_ID = 9

UNION ALL

SELECT 'AR TRANSACTION' AS SOURCE, ART.AR_TRANSACTION_ID AS ID,
CONCAT('ART ', COALESCE(CONCAT(C.COMPANY_CODE,' ',ART.SEQUENCE_NO), ART.SEQUENCE_NO)) AS SEQUENCE_NO,
CONCAT('Transaction No. ', ART.TRANSACTION_NUMBER) AS REF_NUMBER,
TRANSACTION_DATE AS DATE FROM AR_TRANSACTION ART
INNER JOIN COMPANY C ON C.COMPANY_ID = ART.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ART.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND ART.TRANSACTION_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND AR_TRANSACTION_TYPE_ID <= 3

UNION ALL

SELECT 'ACCOUNT SALES' AS SOURCE, ART.AR_TRANSACTION_ID AS ID,
CONCAT('AS ', COALESCE(CONCAT(C.COMPANY_CODE,' ',ART.SEQUENCE_NO), ART.SEQUENCE_NO)) AS SEQUENCE_NO,
'' AS REF_NUMBER, TRANSACTION_DATE AS DATE FROM AR_TRANSACTION ART
INNER JOIN COMPANY C ON C.COMPANY_ID = ART.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ART.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND ART.TRANSACTION_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND AR_TRANSACTION_TYPE_ID = 4

UNION ALL

SELECT 'ACCOUNT SALES RETURN' AS SOURCE, ART.AR_TRANSACTION_ID AS ID,
CONCAT('ASR ', COALESCE(CONCAT(C.COMPANY_CODE,' ',ART.SEQUENCE_NO), ART.SEQUENCE_NO)) AS SEQUENCE_NO,
'' AS REF_NUMBER, TRANSACTION_DATE AS DATE FROM AR_TRANSACTION ART
INNER JOIN COMPANY C ON C.COMPANY_ID = ART.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ART.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND ART.TRANSACTION_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND AR_TRANSACTION_TYPE_ID = 5

UNION ALL

SELECT 'ASR - EB' AS SOURCE, ART.AR_TRANSACTION_ID AS ID,
CONCAT('ASR-EB ', COALESCE(CONCAT(C.COMPANY_CODE,' ',ART.SEQUENCE_NO), ART.SEQUENCE_NO)) AS SEQUENCE_NO,
'' AS REF_NUMBER, TRANSACTION_DATE AS DATE FROM AR_TRANSACTION ART
INNER JOIN COMPANY C ON C.COMPANY_ID = ART.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ART.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND ART.TRANSACTION_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND AR_TRANSACTION_TYPE_ID = 7

UNION ALL

SELECT 'ACCOUNT SALES - WHOLESALE' AS SOURCE, ART.AR_TRANSACTION_ID AS ID,
CONCAT('AS-W ', COALESCE(CONCAT(C.COMPANY_CODE,' ',ART.SEQUENCE_NO), ART.SEQUENCE_NO)) AS SEQUENCE_NO,
'' AS REF_NUMBER, TRANSACTION_DATE AS DATE FROM AR_TRANSACTION ART
INNER JOIN COMPANY C ON C.COMPANY_ID = ART.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ART.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND ART.TRANSACTION_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND AR_TRANSACTION_TYPE_ID = 8

UNION ALL

SELECT 'ACCOUNT SALES RETURN - WHOLESALE' AS SOURCE, ART.AR_TRANSACTION_ID AS ID,
CONCAT('ASR-W ', COALESCE(CONCAT(C.COMPANY_CODE,' ',ART.SEQUENCE_NO), ART.SEQUENCE_NO)) AS SEQUENCE_NO,
'' AS REF_NUMBER, TRANSACTION_DATE AS DATE FROM AR_TRANSACTION ART
INNER JOIN COMPANY C ON C.COMPANY_ID = ART.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ART.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND ART.TRANSACTION_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND AR_TRANSACTION_TYPE_ID = 9

UNION ALL

SELECT 'ACCOUNT SALES - IS' AS SOURCE, ART.AR_TRANSACTION_ID AS ID,
CONCAT('AS-IS ', COALESCE(CONCAT(C.COMPANY_CODE,' ',ART.SEQUENCE_NO), ART.SEQUENCE_NO)) AS SEQUENCE_NO,
'' AS REF_NUMBER, TRANSACTION_DATE AS DATE FROM AR_TRANSACTION ART
INNER JOIN COMPANY C ON C.COMPANY_ID = ART.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ART.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND ART.TRANSACTION_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND AR_TRANSACTION_TYPE_ID = 10

UNION ALL

SELECT 'ACCOUNT SALES RETURN - IS' AS SOURCE, ART.AR_TRANSACTION_ID AS ID,
CONCAT('ASR-IS ', COALESCE(CONCAT(C.COMPANY_CODE,' ',ART.SEQUENCE_NO), ART.SEQUENCE_NO)) AS SEQUENCE_NO,
'' AS REF_NUMBER, TRANSACTION_DATE AS DATE FROM AR_TRANSACTION ART
INNER JOIN COMPANY C ON C.COMPANY_ID = ART.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ART.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND ART.TRANSACTION_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND AR_TRANSACTION_TYPE_ID = 11

UNION ALL

SELECT 'CASH SALES' AS SOURCE, CS.CASH_SALE_ID AS ID,
CONCAT('CS ', COALESCE(CONCAT(C.COMPANY_CODE,' ',CS.CS_NUMBER), CS.CS_NUMBER)) AS SEQUENCE_NO,
(CASE WHEN CS.SALE_INVOICE_NO != '' THEN 
CONCAT('SI No. ', CS.SALE_INVOICE_NO) ELSE '' END) AS REF_NUMBER,
RECEIPT_DATE AS DATE FROM CASH_SALE CS
INNER JOIN COMPANY C ON C.COMPANY_ID = CS.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CS.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND CS.RECEIPT_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND CS.CASH_SALE_TYPE_ID = 1

UNION ALL

SELECT 'CASH SALES - WHOLESALE' AS SOURCE, CS.CASH_SALE_ID AS ID, 
CONCAT('CS-W ', COALESCE(CONCAT(C.COMPANY_CODE,' ',CS.CS_NUMBER), CS.CS_NUMBER)) AS SEQUENCE_NO,
(CASE WHEN CS.SALE_INVOICE_NO != '' THEN 
CONCAT('SI No. ', CS.SALE_INVOICE_NO) ELSE '' END) AS REF_NUMBER,
RECEIPT_DATE AS DATE FROM CASH_SALE CS
INNER JOIN COMPANY C ON C.COMPANY_ID = CS.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CS.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND CS.RECEIPT_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND CS.CASH_SALE_TYPE_ID = 2

UNION ALL

SELECT 'CASH SALES - IS' AS SOURCE, CS.CASH_SALE_ID AS ID,
CONCAT('CS-IS ', COALESCE(CONCAT(C.COMPANY_CODE,' ',CS.CS_NUMBER), CS.CS_NUMBER)) AS SEQUENCE_NO,
(CASE WHEN CS.SALE_INVOICE_NO != '' THEN 
CONCAT('SI No. ', CS.SALE_INVOICE_NO) ELSE '' END) AS REF_NUMBER,
RECEIPT_DATE AS DATE FROM CASH_SALE CS
INNER JOIN COMPANY C ON C.COMPANY_ID = CS.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CS.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND CS.RECEIPT_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND CS.CASH_SALE_TYPE_ID = 3

UNION ALL

SELECT 'CASH SALES - CONSOLIDATED POS' AS SOURCE, CS.CASH_SALE_ID AS ID,
CONCAT('CS-POS ', COALESCE(CONCAT(C.COMPANY_CODE,' ',CS.CS_NUMBER), CS.CS_NUMBER)) AS SEQUENCE_NO,
'' AS REF_NUMBER, RECEIPT_DATE AS DATE FROM CASH_SALE CS
INNER JOIN COMPANY C ON C.COMPANY_ID = CS.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CS.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND CS.RECEIPT_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND CS.CASH_SALE_TYPE_ID = 4

UNION ALL

SELECT 'CASH SALES RETURN' AS SOURCE, CSR.CASH_SALE_RETURN_ID AS ID,
CONCAT('CSR ', COALESCE(CONCAT(C.COMPANY_CODE,' ',CSR.CSR_NUMBER), CSR.CSR_NUMBER)) AS SEQUENCE_NO,
(CASE WHEN CSR.SALE_INVOICE_NO != '' THEN
CONCAT('SI No. ', CSR.SALE_INVOICE_NO) ELSE '' END) AS REF_NUMBER,
DATE FROM CASH_SALE_RETURN CSR
INNER JOIN COMPANY C ON C.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CSR.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND CSR.DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND CSR.CASH_SALE_TYPE_ID = 1

UNION ALL

SELECT 'CASH SALES RETURN - WHOLESALE' AS SOURCE, CSR.CASH_SALE_RETURN_ID AS ID,
CONCAT('CSR-W ', COALESCE(CONCAT(C.COMPANY_CODE,' ',CSR.CSR_NUMBER), CSR.CSR_NUMBER)) AS SEQUENCE_NO,
(CASE WHEN CSR.SALE_INVOICE_NO != '' THEN
CONCAT('SI No. ', CSR.SALE_INVOICE_NO) ELSE '' END) AS REF_NUMBER,
DATE FROM CASH_SALE_RETURN CSR
INNER JOIN COMPANY C ON C.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CSR.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND CSR.DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND CSR.CASH_SALE_TYPE_ID = 2

UNION ALL

SELECT 'CASH SALES RETURN - IS' AS SOURCE, CSR.CASH_SALE_RETURN_ID AS ID,
CONCAT('CSR-IS ', COALESCE(CONCAT(C.COMPANY_CODE,' ',CSR.CSR_NUMBER), CSR.CSR_NUMBER)) AS SEQUENCE_NO,
(CASE WHEN CSR.SALE_INVOICE_NO != '' THEN
CONCAT('SI No. ', CSR.SALE_INVOICE_NO) ELSE '' END) AS REF_NUMBER,
DATE FROM CASH_SALE_RETURN CSR
INNER JOIN COMPANY C ON C.COMPANY_ID = CSR.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CSR.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND CSR.DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND CSR.CASH_SALE_TYPE_ID = 3

UNION ALL

SELECT 'CUSTOMER ADVANCE PAYMENT' AS SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID AS ID,
CONCAT('CAP ', COALESCE(CONCAT(C.COMPANY_CODE,' ',CAP.CAP_NUMBER), CAP.CAP_NUMBER)) AS SEQUENCE_NO,
(CASE WHEN CAP.SALE_INVOICE_NO != '' THEN
CONCAT('SI No. ', CAP.SALE_INVOICE_NO) ELSE '' END) AS REF_NUMBER,
RECEIPT_DATE AS DATE FROM CUSTOMER_ADVANCE_PAYMENT CAP
INNER JOIN COMPANY C ON C.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CAP.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND CAP.RECEIPT_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1

UNION ALL

SELECT 'CUSTOMER ADVANCE PAYMENT-IS' AS SOURCE, CAP.CUSTOMER_ADVANCE_PAYMENT_ID AS ID,
CONCAT('CAP-IS ', COALESCE(CONCAT(C.COMPANY_CODE,' ',CAP.CAP_NUMBER), CAP.CAP_NUMBER)) AS SEQUENCE_NO,
(CASE WHEN CAP.SALE_INVOICE_NO != '' THEN
CONCAT('SI No. ', CAP.SALE_INVOICE_NO) ELSE '' END) AS REF_NUMBER,
RECEIPT_DATE AS DATE FROM CUSTOMER_ADVANCE_PAYMENT CAP
INNER JOIN COMPANY C ON C.COMPANY_ID = CAP.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CAP.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND CAP.RECEIPT_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND CAP.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3

UNION ALL

SELECT 'GENERAL LEDGER' AS SOURCE, GL.GENERAL_LEDGER_ID AS ID,
CONCAT('JV ', COALESCE(CONCAT(C.COMPANY_CODE,' ',GL.SEQUENCE_NO), GL.SEQUENCE_NO)) AS SEQUENCE_NO,
'' AS REF_NUMBER, GL_DATE AS DATE FROM GENERAL_LEDGER GL
INNER JOIN GL_ENTRY GLE ON GLE.GENERAL_LEDGER_ID = GL.GENERAL_LEDGER_ID
INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = GLE.ACCOUNT_COMBINATION_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = AC.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = GL.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND GL.GL_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
GROUP BY GL.GENERAL_LEDGER_ID

UNION ALL

SELECT 'AR MISCELLANEOUS' AS SOURCE, ARM.AR_MISCELLANEOUS_ID AS ID,
CONCAT('OR ', COALESCE(CONCAT(C.COMPANY_CODE,' ',ARM.SEQUENCE_NO), ARM.SEQUENCE_NO)) AS SEQUENCE_NO,
CONCAT('Receipt No. ', ARM.RECEIPT_NUMBER) AS REF_NUMBER, MATURITY_DATE AS DATE
FROM AR_MISCELLANEOUS ARM
INNER JOIN AR_CUSTOMER_ACCOUNT ACA ON ACA.AR_CUSTOMER_ACCOUNT_ID = ARM.AR_CUSTOMER_ACCOUNT_ID
INNER JOIN COMPANY C ON C.COMPANY_ID = ACA.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ARM.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND ARM.MATURITY_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO

UNION ALL

SELECT 'PAID IN ADVANCE DELIVERY' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID,
CONCAT('PIAD ', COALESCE(CONCAT(C.COMPANY_CODE,' ',CAPD.CAPD_NUMBER), CAPD.CAPD_NUMBER)) AS SEQUENCE_NO,
(CASE WHEN CAPD.SALES_INVOICE_NO != '' THEN
CONCAT('SI No. ', CAPD.SALES_INVOICE_NO) ELSE '' END) AS REF_NUMBER, DELIVERY_DATE AS DATE
FROM CAP_DELIVERY CAPD
INNER JOIN COMPANY C ON C.COMPANY_ID = CAPD.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CAPD.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND CAPD.DELIVERY_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 1

UNION ALL

SELECT 'PAID IN ADVANCE DELIVERY - IS' AS SOURCE, CAPD.CAP_DELIVERY_ID AS ID,
CONCAT('PIAD-IS ', COALESCE(CONCAT(C.COMPANY_CODE,' ',CAPD.CAPD_NUMBER), CAPD.CAPD_NUMBER)) AS SEQUENCE_NO,
(CASE WHEN CAPD.SALES_INVOICE_NO != '' THEN
CONCAT('SI No. ', CAPD.SALES_INVOICE_NO) ELSE '' END) AS REF_NUMBER, DELIVERY_DATE AS DATE
FROM CAP_DELIVERY CAPD
INNER JOIN COMPANY C ON C.COMPANY_ID = CAPD.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CAPD.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND CAPD.DELIVERY_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND CAPD.CUSTOMER_ADVANCE_PAYMENT_TYPE_ID = 3

UNION ALL

SELECT 'PROCESSING REPORT' AS SOURCE, PR.PROCESSING_REPORT_ID AS ID,
CONCAT('PR-MR ', COALESCE(CONCAT(C.COMPANY_CODE,' ',PR.SEQUENCE_NO), PR.SEQUENCE_NO)) AS SEQUENCE_NO,
(CASE WHEN PR.REF_NUMBER != '' THEN
CONCAT('Ref. No. ', PR.REF_NUMBER) ELSE '' END) AS REF_NUMBER, DATE
FROM PROCESSING_REPORT PR
INNER JOIN COMPANY C ON C.COMPANY_ID = PR.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = PR.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND PR.DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND PR.PROCESSING_REPORT_TYPE_ID = 1

UNION ALL

SELECT 'PROCESSING REPORT' AS SOURCE, PR.PROCESSING_REPORT_ID AS ID, 
CONCAT('PR-MO ', COALESCE(CONCAT(C.COMPANY_CODE,' ',PR.SEQUENCE_NO), PR.SEQUENCE_NO)) AS SEQUENCE_NO,
(CASE WHEN PR.REF_NUMBER != '' THEN
CONCAT('Ref. No. ', PR.REF_NUMBER) ELSE '' END) AS REF_NUMBER, DATE
FROM PROCESSING_REPORT PR
INNER JOIN COMPANY C ON C.COMPANY_ID = PR.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = PR.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND PR.DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND PR.PROCESSING_REPORT_TYPE_ID = 2

UNION ALL

SELECT 'PROCESSING REPORT' AS SOURCE, PR.PROCESSING_REPORT_ID AS ID,
CONCAT('PR-PI ', COALESCE(CONCAT(C.COMPANY_CODE,' ',PR.SEQUENCE_NO), PR.SEQUENCE_NO)) AS SEQUENCE_NO,
(CASE WHEN PR.REF_NUMBER != '' THEN
CONCAT('Ref. No. ', PR.REF_NUMBER) ELSE '' END) AS REF_NUMBER, DATE
FROM PROCESSING_REPORT PR
INNER JOIN COMPANY C ON C.COMPANY_ID = PR.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = PR.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND PR.DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND PR.PROCESSING_REPORT_TYPE_ID = 3

UNION ALL

SELECT 'PROCESSING REPORT' AS SOURCE, PR.PROCESSING_REPORT_ID AS ID,
CONCAT('PR-PO ', COALESCE(CONCAT(C.COMPANY_CODE,' ',PR.SEQUENCE_NO), PR.SEQUENCE_NO)) AS SEQUENCE_NO,
(CASE WHEN PR.REF_NUMBER != '' THEN
CONCAT('Ref. No. ', PR.REF_NUMBER) ELSE '' END) AS REF_NUMBER, DATE
FROM PROCESSING_REPORT PR
INNER JOIN COMPANY C ON C.COMPANY_ID = PR.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = PR.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND PR.DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND PR.PROCESSING_REPORT_TYPE_ID = 4

UNION ALL

SELECT 'PURCHASE ORDER' AS SOURCE, PO.R_PURCHASE_ORDER_ID AS ID,
CONCAT('P0 ', COALESCE(CONCAT(C.COMPANY_CODE,' ',PO.PO_NUMBER), PO.PO_NUMBER)) AS SEQUENCE_NO,
'' AS REF_NUMBER, PO_DATE AS DATE FROM R_PURCHASE_ORDER PO
INNER JOIN COMPANY C ON C.COMPANY_ID = PO.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = PO.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND PO.PO_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO

UNION ALL

SELECT 'REPACKING' AS SOURCE, RP.REPACKING_ID AS ID,
CONCAT('RP ', COALESCE(CONCAT(C.COMPANY_CODE,' ',RP.R_NUMBER), RP.R_NUMBER)) AS SEQUENCE_NO,
'' AS REF_NUMBER, R_DATE AS DATE FROM REPACKING RP
INNER JOIN COMPANY C ON C.COMPANY_ID = RP.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = RP.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND RP.R_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO

UNION ALL

SELECT 'STOCK ADJUSTMENT IN' AS SOURCE, SA.STOCK_ADJUSTMENT_ID AS ID,
CONCAT('SA-IN ', COALESCE(CONCAT(C.COMPANY_CODE,' ',SA.SA_NUMBER), SA.SA_NUMBER)) AS SEQUENCE_NO,
'' AS REF_NUMBER, SA_DATE AS DATE FROM STOCK_ADJUSTMENT SA
INNER JOIN COMPANY C ON C.COMPANY_ID = SA.COMPANY_ID
INNER JOIN STOCK_ADJUSTMENT_ITEM SAI ON SAI.STOCK_ADJUSTMENT_ID = SA.STOCK_ADJUSTMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = SA.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND SA.SA_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND SAI.QUANTITY > 0 AND SAI.EB_OBJECT_ID IS NULL
GROUP BY SA.STOCK_ADJUSTMENT_ID

UNION ALL

SELECT 'STOCK ADJUSTMENT OUT' AS SOURCE, SA.STOCK_ADJUSTMENT_ID AS ID, 
CONCAT('SA-OUT ', COALESCE(CONCAT(C.COMPANY_CODE,' ',SA.SA_NUMBER), SA.SA_NUMBER)) AS SEQUENCE_NO,
'' AS REF_NUMBER, SA_DATE AS DATE FROM STOCK_ADJUSTMENT SA
INNER JOIN COMPANY C ON C.COMPANY_ID = SA.COMPANY_ID
INNER JOIN STOCK_ADJUSTMENT_ITEM SAI ON SAI.STOCK_ADJUSTMENT_ID = SA.STOCK_ADJUSTMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = SA.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND SA.SA_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND SAI.QUANTITY < 0 AND SAI.EB_OBJECT_ID IS NULL
GROUP BY SA.STOCK_ADJUSTMENT_ID

UNION ALL

SELECT 'STOCK ADJUSTMENT IN - IS' AS SOURCE, SA.STOCK_ADJUSTMENT_ID AS ID,
CONCAT('SAI-IS ', COALESCE(CONCAT(C.COMPANY_CODE,' ',SA.SA_NUMBER), SA.SA_NUMBER)) AS SEQUENCE_NO,
'' AS REF_NUMBER, SA_DATE AS DATE FROM STOCK_ADJUSTMENT SA
INNER JOIN COMPANY C ON C.COMPANY_ID = SA.COMPANY_ID
INNER JOIN STOCK_ADJUSTMENT_ITEM SAI ON SAI.STOCK_ADJUSTMENT_ID = SA.STOCK_ADJUSTMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = SA.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND SA.SA_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND SAI.QUANTITY > 0 AND SAI.EB_OBJECT_ID IS NOT NULL
GROUP BY SA.STOCK_ADJUSTMENT_ID

UNION ALL

SELECT 'STOCK ADJUSTMENT OUT - IS' AS SOURCE, SA.STOCK_ADJUSTMENT_ID AS ID,
CONCAT('SAO-IS ', COALESCE(CONCAT(C.COMPANY_CODE,' ',SA.SA_NUMBER), SA.SA_NUMBER)) AS SEQUENCE_NO,
'' AS REF_NUMBER, SA_DATE AS DATE FROM STOCK_ADJUSTMENT SA
INNER JOIN COMPANY C ON C.COMPANY_ID = SA.COMPANY_ID
INNER JOIN STOCK_ADJUSTMENT_ITEM SAI ON SAI.STOCK_ADJUSTMENT_ID = SA.STOCK_ADJUSTMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = SA.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND SA.SA_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND SAI.QUANTITY < 0 AND SAI.EB_OBJECT_ID IS NOT NULL
GROUP BY SA.STOCK_ADJUSTMENT_ID

UNION ALL

SELECT 'TRANSFER RECEIPT' AS SOURCE, TR.R_TRANSFER_RECEIPT_ID AS ID,
CONCAT('TR ', COALESCE(CONCAT(C.COMPANY_CODE,' ',TR.TR_NUMBER), TR.TR_NUMBER)) AS SEQUENCE_NO,
(CASE WHEN TR.DR_NUMBER != '' THEN
CONCAT('DR No. ', TR.DR_NUMBER) ELSE '' END) AS REF_NUMBER, TR_DATE AS DATE
FROM R_TRANSFER_RECEIPT TR
INNER JOIN COMPANY C ON C.COMPANY_ID = TR.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = TR.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND TR.TR_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND TR.TRANSFER_RECEIPT_TYPE_ID = 1

UNION ALL

SELECT 'TRANSFER RECEIPT - IS' AS SOURCE, TR.R_TRANSFER_RECEIPT_ID AS ID, 
CONCAT('TR-IS ', COALESCE(CONCAT(C.COMPANY_CODE,' ',TR.TR_NUMBER), TR.TR_NUMBER)) AS SEQUENCE_NO,
(CASE WHEN TR.DR_NUMBER != '' THEN
CONCAT('DR No. ', TR.DR_NUMBER) ELSE '' END) AS REF_NUMBER, TR_DATE AS DATE
FROM R_TRANSFER_RECEIPT TR
INNER JOIN COMPANY C ON C.COMPANY_ID = TR.COMPANY_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = TR.FORM_WORKFLOW_ID
WHERE FW.IS_COMPLETE = 0 AND FW.CURRENT_STATUS_ID != 4
AND TR.TR_DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
AND TR.TRANSFER_RECEIPT_TYPE_ID = 2

) AS TBL LIMIT 10;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Final view structure for view `V_AR_LINE_ANALYSIS`
--

/*!50001 DROP VIEW IF EXISTS `V_AR_LINE_ANALYSIS`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `V_AR_LINE_ANALYSIS` AS select 'AR Transaction' AS `SOURCE`,concat('ART-',`AL`.`AR_LINE_ID`) AS `ID`,1 AS `SOURCE_ID`,`ART`.`SEQUENCE_NO` AS `SEQ_NO`,`FW`.`CURRENT_STATUS_ID` AS `STATUS_ID`,`FS`.`DESCRIPTION` AS `STATUS`,`FW`.`IS_COMPLETE` AS `COMPLETE`,`ACA`.`COMPANY_ID` AS `COMPANY_ID`,`AL`.`AR_LINE_SETUP_ID` AS `AL_SETUP_ID`,coalesce(`AL`.`UNITOFMEASUREMENT_ID`,0) AS `UOM_ID`,`ART`.`TRANSACTION_DATE` AS `RECEIPT_DATE`,`ART`.`GL_DATE` AS `MATURITY_DATE`,`ART`.`CUSTOMER_ID` AS `CUSTOMER_ID`,`ART`.`CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCT_ID`,`ART`.`TRANSACTION_DATE` AS `REF_DATE`,`ART`.`TRANSACTION_NUMBER` AS `REF_NUMBER`,`AC`.`NAME` AS `CUSTOMER`,`ACA`.`NAME` AS `CUSTOMER_ACCT`,coalesce(`AL`.`QUANTITY`,0) AS `QUANTITY`,coalesce(`AL`.`UP_AMOUNT`,0) AS `UNIT_PRICE`,`AL`.`AMOUNT` AS `AMOUNT`,0 AS `VAT_AMOUNT` from (((((`AR_LINE` `AL` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `AL`.`AR_TRANSACTION_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `ART`.`CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `ART`.`FORM_WORKFLOW_ID`))) join `FORM_STATUS` `FS` on((`FS`.`FORM_STATUS_ID` = `FW`.`CURRENT_STATUS_ID`))) where ((`ART`.`AR_TRANSACTION_TYPE_ID` <> 4) and (`ART`.`AR_TRANSACTION_TYPE_ID` <> 5) and (`ART`.`AR_TRANSACTION_TYPE_ID` <> 7) and (`ART`.`AR_TRANSACTION_TYPE_ID` <> 8) and (`ART`.`AR_TRANSACTION_TYPE_ID` <> 9)) union all select 'Account Sales' AS `SOURCE`,concat('AS-',`AL`.`AR_LINE_ID`) AS `ID`,3 AS `SOURCE_ID`,`ART`.`SEQUENCE_NO` AS `SEQ_NO`,`FW`.`CURRENT_STATUS_ID` AS `STATUS_ID`,`FS`.`DESCRIPTION` AS `STATUS`,`FW`.`IS_COMPLETE` AS `COMPLETE`,`ACA`.`COMPANY_ID` AS `COMPANY_ID`,`AL`.`AR_LINE_SETUP_ID` AS `AL_SETUP_ID`,coalesce(`AL`.`UNITOFMEASUREMENT_ID`,0) AS `UOM_ID`,`ART`.`TRANSACTION_DATE` AS `RECEIPT_DATE`,`ART`.`DUE_DATE` AS `MATURITY_DATE`,`ART`.`CUSTOMER_ID` AS `CUSTOMER_ID`,`ART`.`CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCT_ID`,`ART`.`TRANSACTION_DATE` AS `REF_DATE`,`ART`.`TRANSACTION_NUMBER` AS `REF_NUMBER`,`AC`.`NAME` AS `CUSTOMER`,`ACA`.`NAME` AS `CUSTOMER_ACCT`,coalesce(`AL`.`QUANTITY`,0) AS `QUANTITY`,coalesce(`AL`.`UP_AMOUNT`,0) AS `UNIT_PRICE`,`AL`.`AMOUNT` AS `AMOUNT`,0 AS `VAT_AMOUNT` from (((((`AR_LINE` `AL` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `AL`.`AR_TRANSACTION_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `ART`.`CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `ART`.`FORM_WORKFLOW_ID`))) join `FORM_STATUS` `FS` on((`FS`.`FORM_STATUS_ID` = `FW`.`CURRENT_STATUS_ID`))) where (`ART`.`AR_TRANSACTION_TYPE_ID` = 4) union all select 'Cash Sales' AS `SOURCE`,concat('CS-',`CSAL`.`CASH_SALE_AR_LINE_ID`) AS `ID`,4 AS `SOURCE_ID`,`CS`.`CS_NUMBER` AS `SEQ_NO`,`FW`.`CURRENT_STATUS_ID` AS `STATUS_ID`,`FS`.`DESCRIPTION` AS `STATUS`,`FW`.`IS_COMPLETE` AS `COMPLETE`,`CS`.`COMPANY_ID` AS `COMPANY_ID`,`CSAL`.`AR_LINE_SETUP_ID` AS `AL_SETUP_ID`,coalesce(`CSAL`.`UNITOFMEASUREMENT_ID`,0) AS `UOM_ID`,`CS`.`RECEIPT_DATE` AS `RECEIPT_DATE`,`CS`.`MATURITY_DATE` AS `MATURITY_DATE`,`CS`.`AR_CUSTOMER_ID` AS `CUSTOMER_ID`,`CS`.`AR_CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCT_ID`,`CS`.`RECEIPT_DATE` AS `REF_DATE`,`CS`.`SALE_INVOICE_NO` AS `REF_NUMBER`,`AC`.`NAME` AS `CUSTOMER`,`ACA`.`NAME` AS `CUSTOMER_ACCT`,coalesce(`CSAL`.`QUANTITY`,0) AS `QUANTITY`,coalesce(`CSAL`.`UP_AMOUNT`,0) AS `UNIT_PRICE`,(`CSAL`.`AMOUNT` + (coalesce(`CSAL`.`QUANTITY`,0) * coalesce(`CSAL`.`VAT_AMOUNT`,0))) AS `AMOUNT`,0 AS `VAT_AMOUNT` from (((((`CASH_SALE_AR_LINE` `CSAL` join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSAL`.`CASH_SALE_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `CS`.`AR_CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CS`.`AR_CUSTOMER_ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `CS`.`FORM_WORKFLOW_ID`))) join `FORM_STATUS` `FS` on((`FS`.`FORM_STATUS_ID` = `FW`.`CURRENT_STATUS_ID`))) where (`CS`.`CASH_SALE_TYPE_ID` = 1) union all select 'Paid in Advance Delivery' AS `SOURCE`,concat('CAPD-',`CAPDAL`.`CAP_DELIVERY_AR_LINE_ID`) AS `ID`,5 AS `SOURCE_ID`,`CAPD`.`CAPD_NUMBER` AS `SEQ_NO`,`FW`.`CURRENT_STATUS_ID` AS `STATUS_ID`,`FS`.`DESCRIPTION` AS `STATUS`,`FW`.`IS_COMPLETE` AS `COMPLETE`,`CAPD`.`COMPANY_ID` AS `COMPANY_ID`,`CAPDAL`.`AR_LINE_SETUP_ID` AS `AL_SETUP_ID`,coalesce(`CAPDAL`.`UNITOFMEASUREMENT_ID`,0) AS `UOM_ID`,`CAP`.`RECEIPT_DATE` AS `RECEIPT_DATE`,`CAP`.`MATURITY_DATE` AS `MATURITY_DATE`,`CAPD`.`AR_CUSTOMER_ID` AS `CUSTOMER_ID`,`CAPD`.`AR_CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCT_ID`,`CAP`.`RECEIPT_DATE` AS `REF_DATE`,`CAPD`.`SALES_INVOICE_NO` AS `REF_NUMBER`,`AC`.`NAME` AS `CUSTOMER`,`ACA`.`NAME` AS `CUSTOMER_ACCT`,coalesce(`CAPDAL`.`QUANTITY`,0) AS `QUANTITY`,coalesce(`CAPDAL`.`UP_AMOUNT`,0) AS `UNIT_PRICE`,`CAPDAL`.`AMOUNT` AS `AMOUNT`,0 AS `VAT_AMOUNT` from ((((((`CAP_DELIVERY_AR_LINE` `CAPDAL` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CAPDAL`.`CAP_DELIVERY_ID`))) join `CUSTOMER_ADVANCE_PAYMENT` `CAP` on((`CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID` = `CAPD`.`CUSTOMER_ADVANCE_PAYMENT_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `CAPD`.`AR_CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CAPD`.`AR_CUSTOMER_ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `CAPD`.`FORM_WORKFLOW_ID`))) join `FORM_STATUS` `FS` on((`FS`.`FORM_STATUS_ID` = `FW`.`CURRENT_STATUS_ID`))) where (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 1) union all select 'Account Collection' AS `SOURCE`,concat('AC-',`ACARLINE`.`AC_AR_LINE_ID`) AS `ID`,6 AS `SOURCE_ID`,`ARR`.`REF_NUMBER` AS `SEQ_NO`,`FW`.`CURRENT_STATUS_ID` AS `STATUS_ID`,`FS`.`DESCRIPTION` AS `STATUS`,`FW`.`IS_COMPLETE` AS `COMPLETE`,`ARR`.`COMPANY_ID` AS `COMPANY_ID`,`ACARLINE`.`AR_LINE_SETUP_ID` AS `AL_SETUP_ID`,coalesce(`ACARLINE`.`UNITOFMEASUREMENT_ID`,0) AS `UOM_ID`,`ARR`.`RECEIPT_DATE` AS `RECEIPT_DATE`,`ARR`.`MATURITY_DATE` AS `MATURITY_DATE`,`ARR`.`AR_CUSTOMER_ID` AS `CUSTOMER_ID`,`ARR`.`AR_CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCT_ID`,`ARR`.`RECEIPT_DATE` AS `REF_DATE`,`ARR`.`RECEIPT_NUMBER` AS `REF_NUMBER`,`AC`.`NAME` AS `CUSTOMER`,`ACA`.`NAME` AS `CUSTOMER_ACCT`,coalesce(`ACARLINE`.`QUANTITY`,0) AS `QUANTITY`,coalesce(`ACARLINE`.`UP_AMOUNT`,0) AS `UNIT_PRICE`,`ACARLINE`.`AMOUNT` AS `AMOUNT`,0 AS `VAT_AMOUNT` from (((((`AC_AR_LINE` `ACARLINE` join `AR_RECEIPT` `ARR` on((`ARR`.`AR_RECEIPT_ID` = `ACARLINE`.`AR_RECEIPT_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `ARR`.`AR_CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ARR`.`AR_CUSTOMER_ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `ARR`.`FORM_WORKFLOW_ID`))) join `FORM_STATUS` `FS` on((`FS`.`FORM_STATUS_ID` = `FW`.`CURRENT_STATUS_ID`))) union all select 'Cash Sales - IS' AS `SOURCE`,concat('CS-IS-',`CSAL`.`CASH_SALE_AR_LINE_ID`) AS `ID`,9 AS `SOURCE_ID`,`CSW`.`CS_NUMBER` AS `SEQ_NO`,`FW`.`CURRENT_STATUS_ID` AS `STATUS_ID`,`FS`.`DESCRIPTION` AS `STATUS`,`FW`.`IS_COMPLETE` AS `COMPLETE`,`CSW`.`COMPANY_ID` AS `COMPANY_ID`,`CSAL`.`AR_LINE_SETUP_ID` AS `AL_SETUP_ID`,coalesce(`CSAL`.`UNITOFMEASUREMENT_ID`,0) AS `UOM_ID`,`CSW`.`RECEIPT_DATE` AS `RECEIPT_DATE`,`CSW`.`MATURITY_DATE` AS `MATURITY_DATE`,`CSW`.`AR_CUSTOMER_ID` AS `CUSTOMER_ID`,`CSW`.`AR_CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCT_ID`,`CSW`.`RECEIPT_DATE` AS `REF_DATE`,`CSW`.`SALE_INVOICE_NO` AS `REF_NUMBER`,`AC`.`NAME` AS `CUSTOMER`,`ACA`.`NAME` AS `CUSTOMER_ACCT`,coalesce(`CSAL`.`QUANTITY`,0) AS `QUANTITY`,coalesce(`CSAL`.`UP_AMOUNT`,0) AS `UNIT_PRICE`,`CSAL`.`AMOUNT` AS `AMOUNT`,0 AS `VAT_AMOUNT` from (((((`CASH_SALE_AR_LINE` `CSAL` join `CASH_SALE` `CSW` on((`CSW`.`CASH_SALE_ID` = `CSAL`.`CASH_SALE_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `CSW`.`AR_CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CSW`.`AR_CUSTOMER_ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `CSW`.`FORM_WORKFLOW_ID`))) join `FORM_STATUS` `FS` on((`FS`.`FORM_STATUS_ID` = `FW`.`CURRENT_STATUS_ID`))) where (`CSW`.`CASH_SALE_TYPE_ID` = 3) union all select 'Account Sales - IS' AS `SOURCE`,concat('AS-IS-',`AL`.`AR_LINE_ID`) AS `ID`,10 AS `SOURCE_ID`,`ART`.`SEQUENCE_NO` AS `SEQ_NO`,`FW`.`CURRENT_STATUS_ID` AS `STATUS_ID`,`FS`.`DESCRIPTION` AS `STATUS`,`FW`.`IS_COMPLETE` AS `COMPLETE`,`ACA`.`COMPANY_ID` AS `COMPANY_ID`,`AL`.`AR_LINE_SETUP_ID` AS `AL_SETUP_ID`,coalesce(`AL`.`UNITOFMEASUREMENT_ID`,0) AS `UOM_ID`,`ART`.`TRANSACTION_DATE` AS `RECEIPT_DATE`,`ART`.`DUE_DATE` AS `MATURITY_DATE`,`ART`.`CUSTOMER_ID` AS `CUSTOMER_ID`,`ART`.`CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCT_ID`,`ART`.`TRANSACTION_DATE` AS `REF_DATE`,`ART`.`TRANSACTION_NUMBER` AS `REF_NUMBER`,`AC`.`NAME` AS `CUSTOMER`,`ACA`.`NAME` AS `CUSTOMER_ACCT`,coalesce(`AL`.`QUANTITY`,0) AS `QUANTITY`,coalesce(`AL`.`UP_AMOUNT`,0) AS `UNIT_PRICE`,`AL`.`AMOUNT` AS `AMOUNT`,0 AS `VAT_AMOUNT` from (((((`AR_LINE` `AL` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `AL`.`AR_TRANSACTION_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `ART`.`CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `ART`.`FORM_WORKFLOW_ID`))) join `FORM_STATUS` `FS` on((`FS`.`FORM_STATUS_ID` = `FW`.`CURRENT_STATUS_ID`))) where (`ART`.`AR_TRANSACTION_TYPE_ID` = 10) union all select 'Processing Report' AS `SOURCE`,concat('PR-',`OC`.`PR_OTHER_CHARGE_ID`) AS `ID`,11 AS `SOURCE_ID`,`PR`.`SEQUENCE_NO` AS `SEQ_NO`,`FW`.`CURRENT_STATUS_ID` AS `STATUS_ID`,`FS`.`DESCRIPTION` AS `STATUS`,`FW`.`IS_COMPLETE` AS `COMPLETE`,`PR`.`COMPANY_ID` AS `COMPANY_ID`,`OC`.`AR_LINE_SETUP_ID` AS `AL_SETUP_ID`,coalesce(`OC`.`UNITOFMEASUREMENT_ID`,0) AS `UOM_ID`,`PR`.`DATE` AS `RECEIPT_DATE`,`PR`.`DATE` AS `MATURITY_DATE`,-(1) AS `CUSTOMER_ID`,-(1) AS `CUSTOMER_ACCT_ID`,`PR`.`DATE` AS `REF_DATE`,`PR`.`REF_NUMBER` AS `REF_NUMBER`,'' AS `CUSTOMER`,'' AS `CUSTOMER_ACCT`,coalesce(`OC`.`QUANTITY`,0) AS `QUANTITY`,coalesce(`OC`.`UP_AMOUNT`,0) AS `UNIT_PRICE`,`OC`.`AMOUNT` AS `AMOUNT`,0 AS `VAT_AMOUNT` from (((`PR_OTHER_CHARGE` `OC` join `PROCESSING_REPORT` `PR` on((`PR`.`PROCESSING_REPORT_ID` = `OC`.`PROCESSING_REPORT_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `PR`.`FORM_WORKFLOW_ID`))) join `FORM_STATUS` `FS` on((`FS`.`FORM_STATUS_ID` = `FW`.`CURRENT_STATUS_ID`))) union all select 'Cash Sales Return' AS `SOURCE`,concat('CSR-',`CSAL`.`CASH_SALE_RETURN_AR_LINE_ID`) AS `ID`,12 AS `SOURCE_ID`,`CSR`.`CSR_NUMBER` AS `SEQ_NO`,`FW`.`CURRENT_STATUS_ID` AS `STATUS_ID`,`FS`.`DESCRIPTION` AS `STATUS`,`FW`.`IS_COMPLETE` AS `COMPLETE`,`CSR`.`COMPANY_ID` AS `COMPANY_ID`,`CSAL`.`AR_LINE_SETUP_ID` AS `AL_SETUP_ID`,coalesce(`CSAL`.`UNITOFMEASUREMENT_ID`,0) AS `UOM_ID`,`CSR`.`DATE` AS `RECEIPT_DATE`,`CSR`.`DATE` AS `MATURITY_DATE`,`CSR`.`AR_CUSTOMER_ID` AS `CUSTOMER_ID`,`CSR`.`AR_CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCT_ID`,`CSR`.`DATE` AS `REF_DATE`,`CSR`.`SALE_INVOICE_NO` AS `REF_NUMBER`,`AC`.`NAME` AS `CUSTOMER`,`ACA`.`NAME` AS `CUSTOMER_ACCT`,coalesce(`CSAL`.`QUANTITY`,0) AS `QUANTITY`,coalesce(`CSAL`.`UP_AMOUNT`,0) AS `UNIT_PRICE`,(`CSAL`.`AMOUNT` + (coalesce(`CSAL`.`QUANTITY`,0) * coalesce(`CSAL`.`VAT_AMOUNT`,0))) AS `AMOUNT`,0 AS `VAT_AMOUNT` from (((((`CASH_SALE_RETURN_AR_LINE` `CSAL` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `CSAL`.`CASH_SALE_RETURN_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `CSR`.`AR_CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CSR`.`AR_CUSTOMER_ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `CSR`.`FORM_WORKFLOW_ID`))) join `FORM_STATUS` `FS` on((`FS`.`FORM_STATUS_ID` = `FW`.`CURRENT_STATUS_ID`))) where (`CSR`.`CASH_SALE_TYPE_ID` = 1) union all select 'Account Sales Return' AS `SOURCE`,concat('ASR-',`AL`.`AR_LINE_ID`) AS `ID`,13 AS `SOURCE_ID`,`ART`.`SEQUENCE_NO` AS `SEQ_NO`,`FW`.`CURRENT_STATUS_ID` AS `STATUS_ID`,`FS`.`DESCRIPTION` AS `STATUS`,`FW`.`IS_COMPLETE` AS `COMPLETE`,`ACA`.`COMPANY_ID` AS `COMPANY_ID`,`AL`.`AR_LINE_SETUP_ID` AS `AL_SETUP_ID`,coalesce(`AL`.`UNITOFMEASUREMENT_ID`,0) AS `UOM_ID`,`ART`.`TRANSACTION_DATE` AS `RECEIPT_DATE`,`ART`.`TRANSACTION_DATE` AS `MATURITY_DATE`,`ART`.`CUSTOMER_ID` AS `CUSTOMER_ID`,`ART`.`CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCT_ID`,`ART`.`TRANSACTION_DATE` AS `REF_DATE`,`ART`.`TRANSACTION_NUMBER` AS `REF_NUMBER`,`AC`.`NAME` AS `CUSTOMER`,`ACA`.`NAME` AS `CUSTOMER_ACCT`,coalesce(`AL`.`QUANTITY`,0) AS `QUANTITY`,coalesce(`AL`.`UP_AMOUNT`,0) AS `UNIT_PRICE`,`AL`.`AMOUNT` AS `AMOUNT`,0 AS `VAT_AMOUNT` from (((((`AR_LINE` `AL` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `AL`.`AR_TRANSACTION_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `ART`.`CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `ART`.`FORM_WORKFLOW_ID`))) join `FORM_STATUS` `FS` on((`FS`.`FORM_STATUS_ID` = `FW`.`CURRENT_STATUS_ID`))) where (`ART`.`AR_TRANSACTION_TYPE_ID` = 5) union all select 'Paid in Advance Delivery - IS' AS `SOURCE`,concat('CAPD-IS-',`CAPDAL`.`CAP_DELIVERY_AR_LINE_ID`) AS `ID`,14 AS `SOURCE_ID`,`CAPD`.`CAPD_NUMBER` AS `SEQ_NO`,`FW`.`CURRENT_STATUS_ID` AS `STATUS_ID`,`FS`.`DESCRIPTION` AS `STATUS`,`FW`.`IS_COMPLETE` AS `COMPLETE`,`CAPD`.`COMPANY_ID` AS `COMPANY_ID`,`CAPDAL`.`AR_LINE_SETUP_ID` AS `AL_SETUP_ID`,coalesce(`CAPDAL`.`UNITOFMEASUREMENT_ID`,0) AS `UOM_ID`,`CAP`.`RECEIPT_DATE` AS `RECEIPT_DATE`,`CAP`.`MATURITY_DATE` AS `MATURITY_DATE`,`CAPD`.`AR_CUSTOMER_ID` AS `CUSTOMER_ID`,`CAPD`.`AR_CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCT_ID`,`CAP`.`RECEIPT_DATE` AS `REF_DATE`,`CAPD`.`SALES_INVOICE_NO` AS `REF_NUMBER`,`AC`.`NAME` AS `CUSTOMER`,`ACA`.`NAME` AS `CUSTOMER_ACCT`,coalesce(`CAPDAL`.`QUANTITY`,0) AS `QUANTITY`,coalesce(`CAPDAL`.`UP_AMOUNT`,0) AS `UNIT_PRICE`,`CAPDAL`.`AMOUNT` AS `AMOUNT`,0 AS `VAT_AMOUNT` from ((((((`CAP_DELIVERY_AR_LINE` `CAPDAL` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CAPDAL`.`CAP_DELIVERY_ID`))) join `CUSTOMER_ADVANCE_PAYMENT` `CAP` on((`CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID` = `CAPD`.`CUSTOMER_ADVANCE_PAYMENT_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `CAPD`.`AR_CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CAPD`.`AR_CUSTOMER_ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `CAPD`.`FORM_WORKFLOW_ID`))) join `FORM_STATUS` `FS` on((`FS`.`FORM_STATUS_ID` = `FW`.`CURRENT_STATUS_ID`))) where (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 3) union all select 'Paid in Advance Delivery - WIPSO' AS `SOURCE`,concat('CAPD-',`CAPDAL`.`CAP_DELIVERY_AR_LINE_ID`) AS `ID`,23 AS `SOURCE_ID`,`CAPD`.`CAPD_NUMBER` AS `SEQ_NO`,`FW`.`CURRENT_STATUS_ID` AS `STATUS_ID`,`FS`.`DESCRIPTION` AS `STATUS`,`FW`.`IS_COMPLETE` AS `COMPLETE`,`CAPD`.`COMPANY_ID` AS `COMPANY_ID`,`CAPDAL`.`AR_LINE_SETUP_ID` AS `AL_SETUP_ID`,coalesce(`CAPDAL`.`UNITOFMEASUREMENT_ID`,0) AS `UOM_ID`,`AR`.`RECEIPT_DATE` AS `RECEIPT_DATE`,`AR`.`MATURITY_DATE` AS `MATURITY_DATE`,`CAPD`.`AR_CUSTOMER_ID` AS `CUSTOMER_ID`,`CAPD`.`AR_CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCT_ID`,`AR`.`RECEIPT_DATE` AS `REF_DATE`,`CAPD`.`SALES_INVOICE_NO` AS `REF_NUMBER`,`AC`.`NAME` AS `CUSTOMER`,`ACA`.`NAME` AS `CUSTOMER_ACCT`,coalesce(`CAPDAL`.`QUANTITY`,0) AS `QUANTITY`,coalesce(`CAPDAL`.`UP_AMOUNT`,0) AS `UNIT_PRICE`,`CAPDAL`.`AMOUNT` AS `AMOUNT`,0 AS `VAT_AMOUNT` from ((((((((`CAP_DELIVERY_AR_LINE` `CAPDAL` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CAPDAL`.`CAP_DELIVERY_ID`))) join `CAP_DELIVERY_TRANSACTION` `CAPDT` on((`CAPDT`.`CAP_DELIVERY_ID` = `CAPD`.`CAP_DELIVERY_ID`))) join `AR_RECEIPT_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `CAPDT`.`AR_TRANSACTION_ID`))) join `AR_RECEIPT` `AR` on((`AR`.`AR_RECEIPT_ID` = `ART`.`AR_RECEIPT_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `CAPD`.`AR_CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CAPD`.`AR_CUSTOMER_ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `CAPD`.`FORM_WORKFLOW_ID`))) join `FORM_STATUS` `FS` on((`FS`.`FORM_STATUS_ID` = `FW`.`CURRENT_STATUS_ID`))) where (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 5) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `V_AR_RECEIPT_REGISTER`
--

/*!50001 DROP VIEW IF EXISTS `V_AR_RECEIPT_REGISTER`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `V_AR_RECEIPT_REGISTER` AS select 'Account Collection' AS `SOURCE`,concat('AC ',`ARR`.`AR_RECEIPT_ID`) AS `ID`,1 AS `SOURCE_ID`,coalesce(concat(`C`.`COMPANY_CODE`,' ',`ARR`.`SEQUENCE_NO`),`ARR`.`SEQUENCE_NO`) AS `SEQ_NO`,`ARR`.`COMPANY_ID` AS `COMPANY_ID`,`ARR`.`AR_RECEIPT_TYPE_ID` AS `RECEIPT_TYPE_ID`,`ARR`.`RECEIPT_METHOD_ID` AS `RECEIPT_METHOD_ID`,`ARR`.`AR_CUSTOMER_ID` AS `CUSTOMER_ID`,`ARR`.`AR_CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCT_ID`,`FW`.`CURRENT_STATUS_ID` AS `STATUS_ID`,`RT`.`NAME` AS `RECEIPT_TYPE`,`ARR`.`RECEIPT_DATE` AS `RECEIPT_DATE`,`ARR`.`MATURITY_DATE` AS `MATURITY_DATE`,`ARR`.`RECEIPT_NUMBER` AS `RECEIPT_NO`,if((`ARR`.`AR_RECEIPT_TYPE_ID` = 1),'N/A',`ARR`.`REF_NUMBER`) AS `CHECK_NO`,`AC`.`NAME` AS `CUSTOMER`,`ACA`.`NAME` AS `CUSTOMER_ACCT`,`RM`.`NAME` AS `RECEIPT_METHOD`,if((`FW`.`CURRENT_STATUS_ID` = 4),0.0,`ARR`.`AMOUNT`) AS `AMOUNT`,coalesce((select sum(`ARRT`.`AMOUNT`) from `AR_RECEIPT_TRANSACTION` `ARRT` where (`ARRT`.`AR_RECEIPT_ID` = `ARR`.`AR_RECEIPT_ID`)),0) AS `PAID_AMOUNT`,0.0 AS `BALANCE`,`FS`.`DESCRIPTION` AS `STATUS` from (((((((`AR_RECEIPT` `ARR` join `COMPANY` `C` on((`C`.`COMPANY_ID` = `ARR`.`COMPANY_ID`))) join `AR_RECEIPT_TYPE` `RT` on((`RT`.`AR_RECEIPT_TYPE_ID` = `ARR`.`AR_RECEIPT_TYPE_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `ARR`.`AR_CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ARR`.`AR_CUSTOMER_ACCOUNT_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `ARR`.`RECEIPT_METHOD_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `ARR`.`FORM_WORKFLOW_ID`))) join `FORM_STATUS` `FS` on((`FW`.`CURRENT_STATUS_ID` = `FS`.`FORM_STATUS_ID`))) union all select 'AR Miscellaneous' AS `SOURCE`,concat('ARM ',`ARM`.`AR_MISCELLANEOUS_ID`) AS `ID`,2 AS `SOURCE_ID`,coalesce(concat(`C`.`COMPANY_CODE`,' ',`ARM`.`SEQUENCE_NO`),`ARM`.`SEQUENCE_NO`) AS `SEQ_NO`,`RM`.`COMPANY_ID` AS `COMPANY_ID`,`ARM`.`AR_MISCELLANEOUS_TYPE_ID` AS `RECEIPT_TYPE_ID`,`ARM`.`RECEIPT_METHOD_ID` AS `RECEIPT_METHOD_ID`,`ARM`.`AR_CUSTOMER_ID` AS `CUSTOMER_ID`,`ARM`.`AR_CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCT_ID`,`FW`.`CURRENT_STATUS_ID` AS `STATUS_ID`,`MT`.`NAME` AS `RECEIPT_TYPE`,`ARM`.`RECEIPT_DATE` AS `RECEIPT_DATE`,`ARM`.`MATURITY_DATE` AS `MATURITY_DATE`,`ARM`.`RECEIPT_NUMBER` AS `RECEIPT_NO`,if((`ARM`.`AR_MISCELLANEOUS_TYPE_ID` = 1),'N/A',`ARM`.`REF_NUMBER`) AS `CHECK_NO`,`AC`.`NAME` AS `CUSTOMER`,`ACA`.`NAME` AS `CUSTOMER_ACCT`,`RM`.`NAME` AS `RECEIPT_METHOD`,if((`FW`.`CURRENT_STATUS_ID` = 4),0.0,`ARM`.`AMOUNT`) AS `AMOUNT`,0.0 AS `PAID_AMOUNT`,0.0 AS `BALANCE`,`FS`.`DESCRIPTION` AS `STATUS` from (((((((`AR_MISCELLANEOUS` `ARM` join `AR_MISCELLANEOUS_TYPE` `MT` on((`MT`.`AR_MISCELLANEOUS_TYPE_ID` = `ARM`.`AR_MISCELLANEOUS_TYPE_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `ARM`.`AR_CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ARM`.`AR_CUSTOMER_ACCOUNT_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `ARM`.`RECEIPT_METHOD_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `ARM`.`FORM_WORKFLOW_ID`))) join `FORM_STATUS` `FS` on((`FW`.`CURRENT_STATUS_ID` = `FS`.`FORM_STATUS_ID`))) join `COMPANY` `C` on((`RM`.`COMPANY_ID` = `C`.`COMPANY_ID`))) union all select distinct 'Cash Sales' AS `SOURCE`,concat('CS ',`CS`.`CASH_SALE_ID`) AS `ID`,3 AS `SOURCE_ID`,coalesce(concat(`C`.`COMPANY_CODE`,' ',`CS`.`CS_NUMBER`),`CS`.`CS_NUMBER`) AS `SEQ_NO`,`CS`.`COMPANY_ID` AS `COMPANY_ID`,`CS`.`AR_RECEIPT_TYPE_ID` AS `RECEIPT_TYPE_ID`,`IA`.`CASH_SALES_RM_ID` AS `RECEIPT_METHOD_ID`,`CS`.`AR_CUSTOMER_ID` AS `CUSTOMER_ID`,`CS`.`AR_CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCT_ID`,`FW`.`CURRENT_STATUS_ID` AS `STATUS_ID`,`RT`.`NAME` AS `RECEIPT_TYPE`,`CS`.`RECEIPT_DATE` AS `RECEIPT_DATE`,`CS`.`MATURITY_DATE` AS `MATURITY_DATE`,if((`CS`.`SALE_INVOICE_NO` = ''),concat('CS ',`CS`.`CS_NUMBER`),concat('CS ',`CS`.`CS_NUMBER`,', ',`CS`.`SALE_INVOICE_NO`)) AS `RECEIPT_NO`,if((`CS`.`AR_RECEIPT_TYPE_ID` = 1),'N/A',`CS`.`REF_NUMBER`) AS `CHECK_NO`,`AC`.`NAME` AS `CUSTOMER`,`ACA`.`NAME` AS `CUSTOMER_ACCT`,`RM`.`NAME` AS `RECEIPT_METHOD`,if((`FW`.`CURRENT_STATUS_ID` = 4),0.0,((coalesce((select sum((`CSI`.`AMOUNT` + coalesce(`CSI`.`VAT_AMOUNT`,0))) from `CASH_SALE_ITEM` `CSI` where (`CSI`.`CASH_SALE_ID` = `CS`.`CASH_SALE_ID`)),0) + coalesce((select sum((`CAL`.`AMOUNT` + coalesce(`CAL`.`VAT_AMOUNT`,0))) from `CASH_SALE_AR_LINE` `CAL` where (`CAL`.`CASH_SALE_ID` = `CS`.`CASH_SALE_ID`)),0)) + (`CS`.`WT_AMOUNT` * -(1)))) AS `AMOUNT`,0.0 AS `PAID_AMOUNT`,0.0 AS `BALANCE`,`FS`.`DESCRIPTION` AS `STATUS` from ((((((((`CASH_SALE` `CS` join `AR_RECEIPT_TYPE` `RT` on((`RT`.`AR_RECEIPT_TYPE_ID` = `CS`.`AR_RECEIPT_TYPE_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `CS`.`AR_CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CS`.`AR_CUSTOMER_ACCOUNT_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CS`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CASH_SALES_RM_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `CS`.`FORM_WORKFLOW_ID`))) join `FORM_STATUS` `FS` on((`FW`.`CURRENT_STATUS_ID` = `FS`.`FORM_STATUS_ID`))) join `COMPANY` `C` on((`CS`.`COMPANY_ID` = `C`.`COMPANY_ID`))) where ((`IA`.`ACTIVE` = 1) and (`CS`.`CASH_SALE_TYPE_ID` = 1)) union all select distinct 'Customer Advance Payment' AS `SOURCE`,concat('CAP ',`CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID`) AS `ID`,4 AS `SOURCE_ID`,coalesce(concat(`C`.`COMPANY_CODE`,' ',`CAP`.`CAP_NUMBER`),`CAP`.`CAP_NUMBER`) AS `SEQ_NO`,`CAP`.`COMPANY_ID` AS `COMPANY_ID`,`CAP`.`AR_RECEIPT_TYPE_ID` AS `RECEIPT_TYPE_ID`,`IA`.`CUSTOMER_ADV_PAYMENT_RM_ID` AS `RECEIPT_METHOD_ID`,`CAP`.`AR_CUSTOMER_ID` AS `CUSTOMER_ID`,`CAP`.`AR_CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCT_ID`,`FW`.`CURRENT_STATUS_ID` AS `STATUS_ID`,`RT`.`NAME` AS `RECEIPT_TYPE`,`CAP`.`RECEIPT_DATE` AS `RECEIPT_DATE`,`CAP`.`MATURITY_DATE` AS `MATURITY_DATE`,if((`CAP`.`SALE_INVOICE_NO` = ''),concat('CAP ',`CAP`.`CAP_NUMBER`),concat('CAP ',`CAP`.`CAP_NUMBER`,', ',`CAP`.`SALE_INVOICE_NO`)) AS `RECEIPT_NO`,if((`CAP`.`AR_RECEIPT_TYPE_ID` = 1),'N/A',`CAP`.`REF_NUMBER`) AS `CHECK_NO`,`AC`.`NAME` AS `CUSTOMER`,`ACA`.`NAME` AS `CUSTOMER_ACCT`,`RM`.`NAME` AS `RECEIPT_METHOD`,if((`FW`.`CURRENT_STATUS_ID` = 4),0.0,(coalesce((select sum(`CAPI`.`AMOUNT`) from `CUSTOMER_ADVANCE_PAYMENT_ITEM` `CAPI` where (`CAPI`.`CUSTOMER_ADVANCE_PAYMENT_ID` = `CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID`)),0) + coalesce((select sum(`CPAL`.`AMOUNT`) from `CAP_AR_LINE` `CPAL` where (`CPAL`.`CUSTOMER_ADVANCE_PAYMENT_ID` = `CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID`)),0))) AS `AMOUNT`,0.0 AS `PAID_AMOUNT`,0.0 AS `BALANCE`,`FS`.`DESCRIPTION` AS `STATUS` from ((((((((`CUSTOMER_ADVANCE_PAYMENT` `CAP` join `AR_RECEIPT_TYPE` `RT` on((`RT`.`AR_RECEIPT_TYPE_ID` = `CAP`.`AR_RECEIPT_TYPE_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `CAP`.`AR_CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CAP`.`AR_CUSTOMER_ACCOUNT_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CAP`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CUSTOMER_ADV_PAYMENT_RM_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `CAP`.`FORM_WORKFLOW_ID`))) join `FORM_STATUS` `FS` on((`FW`.`CURRENT_STATUS_ID` = `FS`.`FORM_STATUS_ID`))) join `COMPANY` `C` on((`CAP`.`COMPANY_ID` = `C`.`COMPANY_ID`))) where ((`IA`.`ACTIVE` = 1) and (`CAP`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 1)) union all select distinct 'Cash Sales - IS' AS `SOURCE`,concat('CS-IS ',`CS`.`CASH_SALE_ID`) AS `ID`,6 AS `SOURCE_ID`,coalesce(concat(`C`.`COMPANY_CODE`,' ',`CS`.`CS_NUMBER`),`CS`.`CS_NUMBER`) AS `SEQ_NO`,`CS`.`COMPANY_ID` AS `COMPANY_ID`,`CS`.`AR_RECEIPT_TYPE_ID` AS `RECEIPT_TYPE_ID`,`IA`.`CASH_SALES_RM_ID` AS `RECEIPT_METHOD_ID`,`CS`.`AR_CUSTOMER_ID` AS `CUSTOMER_ID`,`CS`.`AR_CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCT_ID`,`FW`.`CURRENT_STATUS_ID` AS `STATUS_ID`,`RT`.`NAME` AS `RECEIPT_TYPE`,`CS`.`RECEIPT_DATE` AS `RECEIPT_DATE`,`CS`.`MATURITY_DATE` AS `MATURITY_DATE`,if((`CS`.`SALE_INVOICE_NO` = ''),concat('CS-IS ',`CS`.`CS_NUMBER`),concat('CS-IS ',`CS`.`CS_NUMBER`,', ',`CS`.`SALE_INVOICE_NO`)) AS `RECEIPT_NO`,if((`CS`.`AR_RECEIPT_TYPE_ID` = 1),'N/A',`CS`.`REF_NUMBER`) AS `CHECK_NO`,`AC`.`NAME` AS `CUSTOMER`,`ACA`.`NAME` AS `CUSTOMER_ACCT`,`RM`.`NAME` AS `RECEIPT_METHOD`,if((`FW`.`CURRENT_STATUS_ID` = 4),0.0,(coalesce((select sum(`CSI`.`AMOUNT`) from `CASH_SALE_ITEM` `CSI` where (`CSI`.`CASH_SALE_ID` = `CS`.`CASH_SALE_ID`)),0) + coalesce((select sum(`CAL`.`AMOUNT`) from `CASH_SALE_AR_LINE` `CAL` where (`CAL`.`CASH_SALE_ID` = `CS`.`CASH_SALE_ID`)),0))) AS `AMOUNT`,0.0 AS `PAID_AMOUNT`,0.0 AS `BALANCE`,`FS`.`DESCRIPTION` AS `STATUS` from ((((((((`CASH_SALE` `CS` join `AR_RECEIPT_TYPE` `RT` on((`RT`.`AR_RECEIPT_TYPE_ID` = `CS`.`AR_RECEIPT_TYPE_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `CS`.`AR_CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CS`.`AR_CUSTOMER_ACCOUNT_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CS`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CASH_SALES_RM_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `CS`.`FORM_WORKFLOW_ID`))) join `FORM_STATUS` `FS` on((`FW`.`CURRENT_STATUS_ID` = `FS`.`FORM_STATUS_ID`))) join `COMPANY` `C` on((`CS`.`COMPANY_ID` = `C`.`COMPANY_ID`))) where ((`IA`.`ACTIVE` = 1) and (`CS`.`CASH_SALE_TYPE_ID` = 3)) union all select distinct 'Customer Advance Payment - IS' AS `SOURCE`,concat('CAP-IS ',`CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID`) AS `ID`,7 AS `SOURCE_ID`,coalesce(concat(`C`.`COMPANY_CODE`,' ',`CAP`.`CAP_NUMBER`),`CAP`.`CAP_NUMBER`) AS `SEQ_NO`,`CAP`.`COMPANY_ID` AS `COMPANY_ID`,`CAP`.`AR_RECEIPT_TYPE_ID` AS `RECEIPT_TYPE_ID`,`IA`.`CUSTOMER_ADV_PAYMENT_RM_ID` AS `RECEIPT_METHOD_ID`,`CAP`.`AR_CUSTOMER_ID` AS `CUSTOMER_ID`,`CAP`.`AR_CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCT_ID`,`FW`.`CURRENT_STATUS_ID` AS `STATUS_ID`,`RT`.`NAME` AS `RECEIPT_TYPE`,`CAP`.`RECEIPT_DATE` AS `RECEIPT_DATE`,`CAP`.`MATURITY_DATE` AS `MATURITY_DATE`,if((`CAP`.`SALE_INVOICE_NO` = ''),concat('CAP-IS ',`CAP`.`CAP_NUMBER`),concat('CAP-IS ',`CAP`.`CAP_NUMBER`,', ',`CAP`.`SALE_INVOICE_NO`)) AS `RECEIPT_NO`,if((`CAP`.`AR_RECEIPT_TYPE_ID` = 1),'N/A',`CAP`.`REF_NUMBER`) AS `CHECK_NO`,`AC`.`NAME` AS `CUSTOMER`,`ACA`.`NAME` AS `CUSTOMER_ACCT`,`RM`.`NAME` AS `RECEIPT_METHOD`,if((`FW`.`CURRENT_STATUS_ID` = 4),0.0,(coalesce((select sum(`CAPI`.`AMOUNT`) from `CUSTOMER_ADVANCE_PAYMENT_ITEM` `CAPI` where (`CAPI`.`CUSTOMER_ADVANCE_PAYMENT_ID` = `CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID`)),0) + coalesce((select sum(`CPAL`.`AMOUNT`) from `CAP_AR_LINE` `CPAL` where (`CPAL`.`CUSTOMER_ADVANCE_PAYMENT_ID` = `CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID`)),0))) AS `AMOUNT`,0.0 AS `PAID_AMOUNT`,0.0 AS `BALANCE`,`FS`.`DESCRIPTION` AS `STATUS` from ((((((((`CUSTOMER_ADVANCE_PAYMENT` `CAP` join `AR_RECEIPT_TYPE` `RT` on((`RT`.`AR_RECEIPT_TYPE_ID` = `CAP`.`AR_RECEIPT_TYPE_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `CAP`.`AR_CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CAP`.`AR_CUSTOMER_ACCOUNT_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CAP`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CUSTOMER_ADV_PAYMENT_RM_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `CAP`.`FORM_WORKFLOW_ID`))) join `FORM_STATUS` `FS` on((`FW`.`CURRENT_STATUS_ID` = `FS`.`FORM_STATUS_ID`))) join `COMPANY` `C` on((`CAP`.`COMPANY_ID` = `C`.`COMPANY_ID`))) where ((`IA`.`ACTIVE` = 1) and (`CAP`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 3)) union all select distinct 'Cash Sales - Processing' AS `SOURCE`,concat('CS ',`CS`.`CASH_SALE_ID`) AS `ID`,9 AS `SOURCE_ID`,coalesce(concat(`C`.`COMPANY_CODE`,' ',`CS`.`CS_NUMBER`),`CS`.`CS_NUMBER`) AS `SEQ_NO`,`CS`.`COMPANY_ID` AS `COMPANY_ID`,`CS`.`AR_RECEIPT_TYPE_ID` AS `RECEIPT_TYPE_ID`,`IA`.`CASH_SALES_RM_ID` AS `RECEIPT_METHOD_ID`,`CS`.`AR_CUSTOMER_ID` AS `CUSTOMER_ID`,`CS`.`AR_CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCT_ID`,`FW`.`CURRENT_STATUS_ID` AS `STATUS_ID`,`RT`.`NAME` AS `RECEIPT_TYPE`,`CS`.`RECEIPT_DATE` AS `RECEIPT_DATE`,`CS`.`MATURITY_DATE` AS `MATURITY_DATE`,if((`CS`.`SALE_INVOICE_NO` = ''),concat('CS ',`CS`.`CS_NUMBER`),concat('CS ',`CS`.`CS_NUMBER`,', ',`CS`.`SALE_INVOICE_NO`)) AS `RECEIPT_NO`,if((`CS`.`AR_RECEIPT_TYPE_ID` = 1),'N/A',`CS`.`REF_NUMBER`) AS `CHECK_NO`,`AC`.`NAME` AS `CUSTOMER`,`ACA`.`NAME` AS `CUSTOMER_ACCT`,`RM`.`NAME` AS `RECEIPT_METHOD`,if((`FW`.`CURRENT_STATUS_ID` = 4),0.0,(coalesce((select sum(`CSI`.`AMOUNT`) from `CASH_SALE_ITEM` `CSI` where (`CSI`.`CASH_SALE_ID` = `CS`.`CASH_SALE_ID`)),0) + coalesce((select sum(`CAL`.`AMOUNT`) from `CASH_SALE_AR_LINE` `CAL` where (`CAL`.`CASH_SALE_ID` = `CS`.`CASH_SALE_ID`)),0))) AS `AMOUNT`,0.0 AS `PAID_AMOUNT`,0.0 AS `BALANCE`,`FS`.`DESCRIPTION` AS `STATUS` from ((((((((`CASH_SALE` `CS` join `AR_RECEIPT_TYPE` `RT` on((`RT`.`AR_RECEIPT_TYPE_ID` = `CS`.`AR_RECEIPT_TYPE_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `CS`.`AR_CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CS`.`AR_CUSTOMER_ACCOUNT_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CS`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CASH_SALES_RM_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `CS`.`FORM_WORKFLOW_ID`))) join `FORM_STATUS` `FS` on((`FW`.`CURRENT_STATUS_ID` = `FS`.`FORM_STATUS_ID`))) join `COMPANY` `C` on((`CS`.`COMPANY_ID` = `C`.`COMPANY_ID`))) where ((`IA`.`ACTIVE` = 1) and (`CS`.`CASH_SALE_TYPE_ID` = 6)) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `V_CUSTOMER_ACCT_HISTORY`
--

/*!50001 DROP VIEW IF EXISTS `V_CUSTOMER_ACCT_HISTORY`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `V_CUSTOMER_ACCT_HISTORY` AS select `AT`.`COMPANY_ID` AS `COMPANY_ID`,`C`.`NAME` AS `NAME`,`AT`.`CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCOUNT_ID`,`AT`.`CUSTOMER_ID` AS `CUSTOMER_ID`,'TRANS' AS `SOURCE`,`AT`.`AR_TRANSACTION_ID` AS `ID`,`AT`.`TRANSACTION_DATE` AS `DATE`,`AT`.`GL_DATE` AS `GL_DATE`,`AT`.`TRANSACTION_NUMBER` AS `REFERENCE_NUMBER`,`AT`.`DESCRIPTION` AS `INVOICE_NUMBER`,`AT`.`AMOUNT` AS `TRANSACTION_AMOUNT`,0 AS `RECEIPT_AMOUNT`,`AT`.`CREATED_DATE` AS `CREATED_DATE`,'' AS `AR_LINE_ID`,`F`.`CURRENT_STATUS_ID` AS `STATUS_ID`,`F`.`IS_COMPLETE` AS `IS_COMPLETE`,`T`.`TERM_ID` AS `TERM_ID`,`T`.`DAYS` AS `TERM_DAYS` from ((((`AR_TRANSACTION` `AT` join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `AT`.`CUSTOMER_ACCOUNT_ID`))) join `TERM` `T` on((`ACA`.`TERM_ID` = `T`.`TERM_ID`))) join `FORM_WORKFLOW` `F` on((`AT`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) join `AR_CUSTOMER` `C` on((`C`.`AR_CUSTOMER_ID` = `ACA`.`AR_CUSTOMER_ID`))) where ((`F`.`IS_COMPLETE` = 1) and (`AT`.`AR_TRANSACTION_TYPE_ID` <> 4) and (`AT`.`AR_TRANSACTION_TYPE_ID` <> 5) and (`AT`.`AR_TRANSACTION_TYPE_ID` <> 7) and (`AT`.`AR_TRANSACTION_TYPE_ID` <> 8) and (`AT`.`AR_TRANSACTION_TYPE_ID` <> 9) and (`AT`.`AR_TRANSACTION_TYPE_ID` <> 15)) union all select `AT`.`COMPANY_ID` AS `COMPANY_ID`,`C`.`NAME` AS `NAME`,`AT`.`CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCOUNT_ID`,`AT`.`CUSTOMER_ID` AS `CUSTOMER_ID`,'AS' AS `SOURCE`,`AT`.`AR_TRANSACTION_ID` AS `ID`,`AT`.`TRANSACTION_DATE` AS `DATE`,`AT`.`TRANSACTION_DATE` AS `TRANSACTION_DATE`,`AT`.`TRANSACTION_NUMBER` AS `REFERENCE_NUMBER`,`AT`.`DESCRIPTION` AS `INVOICE_NUMBER`,`AT`.`AMOUNT` AS `TRANSACTION_AMOUNT`,0 AS `RECEIPT_AMOUNT`,`AT`.`CREATED_DATE` AS `CREATED_DATE`,'' AS `AR_LINE_ID`,`F`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`F`.`IS_COMPLETE` AS `IS_COMPLETE`,`T`.`TERM_ID` AS `TERM_ID`,`T`.`DAYS` AS `TERM_DAYS` from ((((`AR_TRANSACTION` `AT` join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `AT`.`CUSTOMER_ACCOUNT_ID`))) join `TERM` `T` on((`ACA`.`TERM_ID` = `T`.`TERM_ID`))) join `FORM_WORKFLOW` `F` on((`AT`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) join `AR_CUSTOMER` `C` on((`C`.`AR_CUSTOMER_ID` = `ACA`.`AR_CUSTOMER_ID`))) where ((`AT`.`AR_TRANSACTION_TYPE_ID` = 4) and (`F`.`IS_COMPLETE` = 1)) union all select `AT`.`COMPANY_ID` AS `COMPANY_ID`,`C`.`NAME` AS `NAME`,`AT`.`CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCOUNT_ID`,`AT`.`CUSTOMER_ID` AS `CUSTOMER_ID`,'AS' AS `SOURCE`,`AT`.`AR_TRANSACTION_ID` AS `ID`,`AT`.`TRANSACTION_DATE` AS `DATE`,`AT`.`TRANSACTION_DATE` AS `TRANSACTION_DATE`,`AT`.`TRANSACTION_NUMBER` AS `REFERENCE_NUMBER`,`AT`.`DESCRIPTION` AS `INVOICE_NUMBER`,`AT`.`AMOUNT` AS `TRANSACTION_AMOUNT`,0 AS `RECEIPT_AMOUNT`,`AT`.`CREATED_DATE` AS `CREATED_DATE`,'' AS `AR_LINE_ID`,`F`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`F`.`IS_COMPLETE` AS `IS_COMPLETE`,`T`.`TERM_ID` AS `TERM_ID`,`T`.`DAYS` AS `TERM_DAYS` from ((((`AR_TRANSACTION` `AT` join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `AT`.`CUSTOMER_ACCOUNT_ID`))) join `TERM` `T` on((`ACA`.`TERM_ID` = `T`.`TERM_ID`))) join `FORM_WORKFLOW` `F` on((`AT`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) join `AR_CUSTOMER` `C` on((`C`.`AR_CUSTOMER_ID` = `ACA`.`AR_CUSTOMER_ID`))) where ((`AT`.`AR_TRANSACTION_TYPE_ID` = 12) and (`F`.`IS_COMPLETE` = 1)) union all select `AT`.`COMPANY_ID` AS `COMPANY_ID`,`C`.`NAME` AS `NAME`,`AT`.`CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCOUNT_ID`,`AT`.`CUSTOMER_ID` AS `CUSTOMER_ID`,'AS' AS `SOURCE`,`AT`.`AR_TRANSACTION_ID` AS `ID`,`AT`.`TRANSACTION_DATE` AS `DATE`,`AT`.`TRANSACTION_DATE` AS `TRANSACTION_DATE`,`AT`.`TRANSACTION_NUMBER` AS `REFERENCE_NUMBER`,`AT`.`DESCRIPTION` AS `INVOICE_NUMBER`,`AT`.`AMOUNT` AS `TRANSACTION_AMOUNT`,0 AS `RECEIPT_AMOUNT`,`AT`.`CREATED_DATE` AS `CREATED_DATE`,'' AS `AR_LINE_ID`,`F`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`F`.`IS_COMPLETE` AS `IS_COMPLETE`,`T`.`TERM_ID` AS `TERM_ID`,`T`.`DAYS` AS `TERM_DAYS` from ((((`AR_TRANSACTION` `AT` join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `AT`.`CUSTOMER_ACCOUNT_ID`))) join `TERM` `T` on((`ACA`.`TERM_ID` = `T`.`TERM_ID`))) join `FORM_WORKFLOW` `F` on((`AT`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) join `AR_CUSTOMER` `C` on((`C`.`AR_CUSTOMER_ID` = `ACA`.`AR_CUSTOMER_ID`))) where ((`AT`.`AR_TRANSACTION_TYPE_ID` = 14) and (`AT`.`AMOUNT` > 0) and (`F`.`IS_COMPLETE` = 1)) union all select `AT`.`COMPANY_ID` AS `COMPANY_ID`,`C`.`NAME` AS `NAME`,`AT`.`CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCOUNT_ID`,`AT`.`CUSTOMER_ID` AS `CUSTOMER_ID`,'ASR' AS `SOURCE`,`AT`.`AR_TRANSACTION_ID` AS `ID`,`AT`.`TRANSACTION_DATE` AS `DATE`,`AT`.`TRANSACTION_DATE` AS `TRANSACTION_DATE`,`AT`.`TRANSACTION_NUMBER` AS `REFERENCE_NUMBER`,`AT`.`DESCRIPTION` AS `INVOICE_NUMBER`,`AT`.`AMOUNT` AS `TRANSACTION_AMOUNT`,0 AS `RECEIPT_AMOUNT`,`AT`.`CREATED_DATE` AS `CREATED_DATE`,'' AS `AR_LINE_ID`,`F`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`F`.`IS_COMPLETE` AS `IS_COMPLETE`,`T`.`TERM_ID` AS `TERM_ID`,`T`.`DAYS` AS `TERM_DAYS` from (((((`AR_TRANSACTION` `AT` join `ACCOUNT_SALE_ITEM` `ASI` on((`ASI`.`AR_TRANSACTION_ID` = `AT`.`AR_TRANSACTION_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `AT`.`CUSTOMER_ACCOUNT_ID`))) join `TERM` `T` on((`ACA`.`TERM_ID` = `T`.`TERM_ID`))) join `FORM_WORKFLOW` `F` on((`AT`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) join `AR_CUSTOMER` `C` on((`C`.`AR_CUSTOMER_ID` = `ACA`.`AR_CUSTOMER_ID`))) where ((`AT`.`AR_TRANSACTION_TYPE_ID` = 5) and (`F`.`IS_COMPLETE` = 1)) group by `AT`.`AR_TRANSACTION_ID` union all select `AT`.`COMPANY_ID` AS `COMPANY_ID`,`C`.`NAME` AS `NAME`,`AT`.`CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCOUNT_ID`,`AT`.`CUSTOMER_ID` AS `CUSTOMER_ID`,'ASR' AS `SOURCE`,`AT`.`AR_TRANSACTION_ID` AS `ID`,`AT`.`TRANSACTION_DATE` AS `DATE`,`AT`.`TRANSACTION_DATE` AS `TRANSACTION_DATE`,`AT`.`TRANSACTION_NUMBER` AS `REFERENCE_NUMBER`,`AT`.`DESCRIPTION` AS `INVOICE_NUMBER`,`AT`.`AMOUNT` AS `TRANSACTION_AMOUNT`,0 AS `RECEIPT_AMOUNT`,`AT`.`CREATED_DATE` AS `CREATED_DATE`,'' AS `AR_LINE_ID`,`F`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`F`.`IS_COMPLETE` AS `IS_COMPLETE`,`T`.`TERM_ID` AS `TERM_ID`,`T`.`DAYS` AS `TERM_DAYS` from (((((`AR_TRANSACTION` `AT` join `ACCOUNT_SALE_ITEM` `ASI` on((`ASI`.`AR_TRANSACTION_ID` = `AT`.`AR_TRANSACTION_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `AT`.`CUSTOMER_ACCOUNT_ID`))) join `TERM` `T` on((`ACA`.`TERM_ID` = `T`.`TERM_ID`))) join `FORM_WORKFLOW` `F` on((`AT`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) join `AR_CUSTOMER` `C` on((`C`.`AR_CUSTOMER_ID` = `ACA`.`AR_CUSTOMER_ID`))) where ((`AT`.`AR_TRANSACTION_TYPE_ID` = 13) and (`F`.`IS_COMPLETE` = 1)) group by `AT`.`AR_TRANSACTION_ID` union all select `AR`.`COMPANY_ID` AS `COMPANY_ID`,`C`.`NAME` AS `NAME`,`AR`.`AR_CUSTOMER_ACCOUNT_ID` AS `AR_CUSTOMER_ACCOUNT_ID`,`AR`.`AR_CUSTOMER_ID` AS `CUSTOMER_ID`,'ACCOUNT COLLECTION' AS `SOURCE`,`AR`.`AR_RECEIPT_ID` AS `ID`,`AR`.`RECEIPT_DATE` AS `RECEIPT_DATE`,`AR`.`MATURITY_DATE` AS `GL_DATE`,concat('AC-',`AR`.`SEQUENCE_NO`,', ',`AR`.`RECEIPT_NUMBER`) AS `REFERENCE_NUMBER`,'' AS `INVOICE_NUMBER`,0 AS `TRANSACTION_AMOUNT`,`AR`.`AMOUNT` AS `RECEIPT_AMOUNT`,`AR`.`CREATED_DATE` AS `CREATED_DATE`,'' AS `AR_LINE_ID`,`F`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`F`.`IS_COMPLETE` AS `IS_COMPLETE`,`T`.`TERM_ID` AS `TERM_ID`,`T`.`DAYS` AS `TERM_DAYS` from ((((`AR_RECEIPT` `AR` join `FORM_WORKFLOW` `F` on((`AR`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `AR`.`AR_CUSTOMER_ACCOUNT_ID`))) join `TERM` `T` on((`ACA`.`TERM_ID` = `T`.`TERM_ID`))) join `AR_CUSTOMER` `C` on((`C`.`AR_CUSTOMER_ID` = `ACA`.`AR_CUSTOMER_ID`))) where (`F`.`CURRENT_STATUS_ID` <> 4) union all select `AR`.`COMPANY_ID` AS `COMPANY_ID`,`C`.`NAME` AS `NAME`,`AR`.`AR_CUSTOMER_ACCOUNT_ID` AS `AR_CUSTOMER_ACCOUNT_ID`,`AR`.`AR_CUSTOMER_ID` AS `CUSTOMER_ID`,'AC AR LINE' AS `SOURCE`,`AR_AC`.`AR_RECEIPT_ID` AS `ID`,`AR`.`RECEIPT_DATE` AS `RECEIPT_DATE`,`AR`.`MATURITY_DATE` AS `GL_DATE`,concat('AC AR LINE -',`AR`.`SEQUENCE_NO`,', ',`AR`.`RECEIPT_NUMBER`) AS `REFERENCE_NUMBER`,'' AS `INVOICE_NUMBER`,`AR_AC`.`AMOUNT` AS `TRANSACTION_AMOUNT`,0 AS `RECEIPT_AMOUNT`,`AR`.`CREATED_DATE` AS `CREATED_DATE`,`ARLA`.`AR_LINE_SETUP_ID` AS `AR_LINE_ID`,`F`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`F`.`IS_COMPLETE` AS `IS_COMPLETE`,`T`.`TERM_ID` AS `TERM_ID`,`T`.`DAYS` AS `TERM_DAYS` from ((((((`AC_AR_LINE` `AR_AC` join `AR_RECEIPT` `AR` on((`AR`.`AR_RECEIPT_ID` = `AR_AC`.`AR_RECEIPT_ID`))) join `FORM_WORKFLOW` `F` on((`AR`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `AR`.`AR_CUSTOMER_ACCOUNT_ID`))) join `TERM` `T` on((`ACA`.`TERM_ID` = `T`.`TERM_ID`))) join `AR_CUSTOMER` `C` on((`C`.`AR_CUSTOMER_ID` = `ACA`.`AR_CUSTOMER_ID`))) join `AR_LINE_SETUP` `ARLA` on((`ARLA`.`AR_LINE_SETUP_ID` = `AR_AC`.`AR_LINE_SETUP_ID`))) where (`F`.`CURRENT_STATUS_ID` <> 4) union all select `AT`.`COMPANY_ID` AS `COMPANY_ID`,`C`.`NAME` AS `NAME`,`AT`.`CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCOUNT_ID`,`AT`.`CUSTOMER_ID` AS `CUSTOMER_ID`,'AS-IS' AS `SOURCE`,`AT`.`AR_TRANSACTION_ID` AS `ID`,`AT`.`TRANSACTION_DATE` AS `DATE`,`AT`.`TRANSACTION_DATE` AS `TRANSACTION_DATE`,`AT`.`TRANSACTION_NUMBER` AS `REFERENCE_NUMBER`,`AT`.`DESCRIPTION` AS `INVOICE_NUMBER`,`AT`.`AMOUNT` AS `TRANSACTION_AMOUNT`,0 AS `RECEIPT_AMOUNT`,`AT`.`CREATED_DATE` AS `CREATED_DATE`,'' AS `AR_LINE_ID`,`F`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`F`.`IS_COMPLETE` AS `IS_COMPLETE`,`T`.`TERM_ID` AS `TERM_ID`,`T`.`DAYS` AS `TERM_DAYS` from ((((`AR_TRANSACTION` `AT` join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `AT`.`CUSTOMER_ACCOUNT_ID`))) join `TERM` `T` on((`ACA`.`TERM_ID` = `T`.`TERM_ID`))) join `FORM_WORKFLOW` `F` on((`AT`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) join `AR_CUSTOMER` `C` on((`C`.`AR_CUSTOMER_ID` = `ACA`.`AR_CUSTOMER_ID`))) where ((`AT`.`AR_TRANSACTION_TYPE_ID` = 10) and (`F`.`CURRENT_STATUS_ID` <> 4)) union all select `AT`.`COMPANY_ID` AS `COMPANY_ID`,`C`.`NAME` AS `NAME`,`AT`.`CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCOUNT_ID`,`AT`.`CUSTOMER_ID` AS `CUSTOMER_ID`,'ASR-IS' AS `SOURCE`,`AT`.`AR_TRANSACTION_ID` AS `ID`,`AT`.`TRANSACTION_DATE` AS `DATE`,`AT`.`TRANSACTION_DATE` AS `TRANSACTION_DATE`,`AT`.`TRANSACTION_NUMBER` AS `REFERENCE_NUMBER`,`AT`.`DESCRIPTION` AS `INVOICE_NUMBER`,sum(`ASI`.`AMOUNT`) AS `TRANSACTION_AMOUNT`,0 AS `RECEIPT_AMOUNT`,`AT`.`CREATED_DATE` AS `CREATED_DATE`,'' AS `AR_LINE_ID`,`F`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`F`.`IS_COMPLETE` AS `IS_COMPLETE`,`T`.`TERM_ID` AS `TERM_ID`,`T`.`DAYS` AS `TERM_DAYS` from (((((`AR_TRANSACTION` `AT` join `ACCOUNT_SALE_ITEM` `ASI` on((`ASI`.`AR_TRANSACTION_ID` = `AT`.`AR_TRANSACTION_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `AT`.`CUSTOMER_ACCOUNT_ID`))) join `TERM` `T` on((`ACA`.`TERM_ID` = `T`.`TERM_ID`))) join `FORM_WORKFLOW` `F` on((`AT`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) join `AR_CUSTOMER` `C` on((`C`.`AR_CUSTOMER_ID` = `ACA`.`AR_CUSTOMER_ID`))) where ((`AT`.`AR_TRANSACTION_TYPE_ID` = 11) and (`F`.`IS_COMPLETE` = 1)) group by `AT`.`AR_TRANSACTION_ID` union all select `CAP`.`COMPANY_ID` AS `COMPANY_ID`,`C`.`NAME` AS `NAME`,`CAP`.`AR_CUSTOMER_ACCOUNT_ID` AS `AR_CUSTOMER_ACCOUNT_ID`,`CAP`.`AR_CUSTOMER_ID` AS `AR_CUSTOMER_ID`,'CAP' AS `SOURCE`,`CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID` AS `ID`,`CAP`.`RECEIPT_DATE` AS `DATE`,`CAP`.`RECEIPT_DATE` AS `GL_DATE`,`CAP`.`REF_NUMBER` AS `REFERENCE_NUMBER`,`CAP`.`SALE_INVOICE_NO` AS `INVOICE_NUMBER`,0 AS `TRANSACTION_AMOUNT`,`CAP`.`CASH` AS `RECEIPT_AMOUNT`,`CAP`.`CREATED_DATE` AS `CREATED_DATE`,'' AS `AR_LINE_ID`,`F`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`F`.`IS_COMPLETE` AS `IS_COMPLETE`,`T`.`TERM_ID` AS `TERM_ID`,`T`.`DAYS` AS `TERM_DAYS` from ((((`CUSTOMER_ADVANCE_PAYMENT` `CAP` join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CAP`.`AR_CUSTOMER_ACCOUNT_ID`))) join `TERM` `T` on((`ACA`.`TERM_ID` = `T`.`TERM_ID`))) join `FORM_WORKFLOW` `F` on((`CAP`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) join `AR_CUSTOMER` `C` on(((`C`.`AR_CUSTOMER_ID` = `ACA`.`AR_CUSTOMER_ID`) and (`F`.`CURRENT_STATUS_ID` <> 4)))) group by `CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID` union all select `CAPD`.`COMPANY_ID` AS `COMPANY_ID`,`C`.`NAME` AS `NAME`,`CAPD`.`AR_CUSTOMER_ACCOUNT_ID` AS `AR_CUSTOMER_ACCOUNT_ID`,`CAPD`.`AR_CUSTOMER_ID` AS `AR_CUSTOMER_ID`,'PAID IN ADVANCE DELIVERY' AS `SOURCE`,`CAPD`.`CAP_DELIVERY_ID` AS `ID`,`CAPD`.`DELIVERY_DATE` AS `DATE`,`CAPD`.`DELIVERY_DATE` AS `GL_DATE`,`CAPD`.`CAPD_NUMBER` AS `REFERENCE_NUMBER`,`CAPD`.`SALES_INVOICE_NO` AS `INVOICE_NUMBER`,(sum(`CAPDI`.`AMOUNT`) + coalesce((select `AL`.`AMOUNT` from `CAP_DELIVERY_AR_LINE` `AL` where (`AL`.`CAP_DELIVERY_ID` = `CAPDI`.`CAP_DELIVERY_ID`)),0)) AS `TRANSACTION_AMOUNT`,0 AS `RECEIPT_AMOUNT`,`CAPD`.`CREATED_DATE` AS `CREATED_DATE`,'' AS `AR_LINE_ID`,`F`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`F`.`IS_COMPLETE` AS `IS_COMPLETE`,`T`.`TERM_ID` AS `TERM_ID`,`T`.`DAYS` AS `TERM_DAYS` from (((((`CAP_DELIVERY` `CAPD` join `CAP_DELIVERY_ITEM` `CAPDI` on((`CAPDI`.`CAP_DELIVERY_ID` = `CAPD`.`CAP_DELIVERY_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CAPD`.`AR_CUSTOMER_ACCOUNT_ID`))) join `TERM` `T` on((`ACA`.`TERM_ID` = `T`.`TERM_ID`))) join `FORM_WORKFLOW` `F` on((`CAPD`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) join `AR_CUSTOMER` `C` on(((`C`.`AR_CUSTOMER_ID` = `ACA`.`AR_CUSTOMER_ID`) and (`F`.`IS_COMPLETE` = 1) and (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` < 4)))) group by `CAPD`.`CAP_DELIVERY_ID` order by `GL_DATE`,`CREATED_DATE` */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `V_INVOICE_HISTORY`
--

/*!50001 DROP VIEW IF EXISTS `V_INVOICE_HISTORY`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `V_INVOICE_HISTORY` AS select `COM`.`COMPANY_ID` AS `COMPANY_ID`,`COM`.`NAME` AS `COMPANY_NAME`,(case when (`AP`.`INVOICE_TYPE_ID` = 1) then 'REG' when (`AP`.`INVOICE_TYPE_ID` = 2) then 'PRE' when (`AP`.`INVOICE_TYPE_ID` = 3) then 'DM' when (`AP`.`INVOICE_TYPE_ID` = 4) then 'CM' when (`AP`.`INVOICE_TYPE_ID` = 5) then 'RR' when (`AP`.`INVOICE_TYPE_ID` = 8) then 'RR-RM' when (`AP`.`INVOICE_TYPE_ID` = 19) then 'CENTRAL' when (`AP`.`INVOICE_TYPE_ID` = 20) then 'NSB 3' when (`AP`.`INVOICE_TYPE_ID` = 21) then 'NSB 4' when (`AP`.`INVOICE_TYPE_ID` = 22) then 'NSB 5' when (`AP`.`INVOICE_TYPE_ID` = 23) then 'NSB 8' when (`AP`.`INVOICE_TYPE_ID` = 24) then 'NSB 8A' end) AS `TYPE`,`S`.`NAME` AS `SUPPLIER_NAME`,`SA`.`NAME` AS `SUPPLIER_ACCOUNT`,(case when (`AP`.`INVOICE_TYPE_ID` = 5) then (case when (isnull(`AP`.`DESCRIPTION`) or (`AP`.`DESCRIPTION` = '')) then `AP`.`INVOICE_NUMBER` else concat(`AP`.`INVOICE_NUMBER`,', ',`AP`.`DESCRIPTION`) end) else `AP`.`INVOICE_NUMBER` end) AS `INVOICE_NUMBER`,`AP`.`INVOICE_NUMBER` AS `INVOICE_NUM`,`AP`.`SEQUENCE_NO` AS `SEQUENCE_NO`,`AP`.`AMOUNT` AS `AMOUNT`,`AP`.`TERM_ID` AS `TERM_ID`,`TRM`.`NAME` AS `TERM`,`AP`.`AP_INVOICE_ID` AS `AP_INVOICE_ID`,`AP`.`INVOICE_TYPE_ID` AS `INVOICE_TYPE_ID`,`SA`.`SUPPLIER_ACCOUNT_ID` AS `SUPPLIER_ACCOUNT_ID`,coalesce((select sum(`APAY`.`PAID_AMOUNT`) from ((`AP_PAYMENT` `PAY` join `AP_PAYMENT_INVOICE` `APAY` on((`APAY`.`AP_PAYMENT_ID` = `PAY`.`AP_PAYMENT_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `PAY`.`FORM_WORKFLOW_ID`))) where ((`APAY`.`AP_INVOICE_ID` = `AP`.`AP_INVOICE_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`PAY`.`CHECK_DATE` < now()))),0) AS `TOTAL_PAYMENT`,`S`.`SUPPLIER_ID` AS `SUPPLIER_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FS`.`DESCRIPTION` AS `STATUS`,`AP`.`INVOICE_DATE` AS `INVOICE_DATE`,`AP`.`GL_DATE` AS `GL_DATE`,(case when isnull(`AP`.`DUE_DATE`) then `AP`.`INVOICE_DATE` else `AP`.`DUE_DATE` end) AS `DUE_DATE` from ((((((`AP_INVOICE` `AP` join `SUPPLIER` `S` on((`S`.`SUPPLIER_ID` = `AP`.`SUPPLIER_ID`))) join `SUPPLIER_ACCOUNT` `SA` on((`SA`.`SUPPLIER_ACCOUNT_ID` = `AP`.`SUPPLIER_ACCOUNT_ID`))) join `COMPANY` `COM` on((`COM`.`COMPANY_ID` = `SA`.`COMPANY_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `AP`.`FORM_WORKFLOW_ID`))) join `FORM_STATUS` `FS` on((`FS`.`FORM_STATUS_ID` = `FW`.`CURRENT_STATUS_ID`))) join `TERM` `TRM` on((`TRM`.`TERM_ID` = `AP`.`TERM_ID`))) where (`AP`.`INVOICE_TYPE_ID` <> 6) union all select `COM`.`COMPANY_ID` AS `COMPANY_ID`,`COM`.`NAME` AS `COMPANY_NAME`,'RTS' AS `TYPE`,`S`.`NAME` AS `SUPPLIER_NAME`,`SA`.`NAME` AS `SUPPLIER_ACCOUNT`,(case when (`AP`.`INVOICE_TYPE_ID` = 6) then (case when (isnull(`AP`.`DESCRIPTION`) or (`AP`.`DESCRIPTION` = '')) then `AP`.`INVOICE_NUMBER` else concat(`AP`.`INVOICE_NUMBER`,', ',`AP`.`DESCRIPTION`) end) when (`AP`.`INVOICE_TYPE_ID` = 7) then (case when (isnull(`AP`.`DESCRIPTION`) or (`AP`.`DESCRIPTION` = '')) then `AP`.`INVOICE_NUMBER` else concat(`AP`.`INVOICE_NUMBER`,', ',`AP`.`DESCRIPTION`) end) else `AP`.`INVOICE_NUMBER` end) AS `INVOICE_NUMBER`,`AP`.`INVOICE_NUMBER` AS `INVOICE_NUM`,`AP`.`SEQUENCE_NO` AS `SEQUENCE_NO`,-(`AP`.`AMOUNT`) AS `-AP.AMOUNT`,`SA`.`TERM_ID` AS `TERM_ID`,`TRM`.`NAME` AS `TERM`,`AP`.`AP_INVOICE_ID` AS `AP_INVOICE_ID`,`AP`.`INVOICE_TYPE_ID` AS `INVOICE_TYPE_ID`,`SA`.`SUPPLIER_ACCOUNT_ID` AS `SUPPLIER_ACCOUNT_ID`,coalesce((select sum(`APAY`.`PAID_AMOUNT`) from ((`AP_PAYMENT` `PAY` join `AP_PAYMENT_INVOICE` `APAY` on((`APAY`.`AP_PAYMENT_ID` = `PAY`.`AP_PAYMENT_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `PAY`.`FORM_WORKFLOW_ID`))) where ((`APAY`.`AP_INVOICE_ID` = `AP`.`AP_INVOICE_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`PAY`.`CHECK_DATE` < now()))),0) AS `TOTAL_PAYMENT`,`S`.`SUPPLIER_ID` AS `SUPPLIER_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FS`.`DESCRIPTION` AS `STATUS`,`AP`.`INVOICE_DATE` AS `INVOICE_DATE`,`AP`.`GL_DATE` AS `GL_DATE`,(case when isnull(`AP`.`DUE_DATE`) then `AP`.`INVOICE_DATE` else `AP`.`DUE_DATE` end) AS `DUE_DATE` from ((((((`AP_INVOICE` `AP` join `SUPPLIER` `S` on((`S`.`SUPPLIER_ID` = `AP`.`SUPPLIER_ID`))) join `SUPPLIER_ACCOUNT` `SA` on((`SA`.`SUPPLIER_ACCOUNT_ID` = `AP`.`SUPPLIER_ACCOUNT_ID`))) join `COMPANY` `COM` on((`COM`.`COMPANY_ID` = `SA`.`COMPANY_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `AP`.`FORM_WORKFLOW_ID`))) join `FORM_STATUS` `FS` on((`FS`.`FORM_STATUS_ID` = `FW`.`CURRENT_STATUS_ID`))) join `TERM` `TRM` on((`TRM`.`TERM_ID` = `SA`.`TERM_ID`))) where (`AP`.`INVOICE_TYPE_ID` = 6) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `V_ITEM_HISTORY`
--

/*!50001 DROP VIEW IF EXISTS `V_ITEM_HISTORY`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `V_ITEM_HISTORY` AS select `ITS`.`COMPANY_ID` AS `COMPANY_ID`,`API`.`AP_INVOICE_ID` AS `ID`,`RRI`.`R_RECEIVING_REPORT_ITEM_ID` AS `FI_ID`,'RR' AS `FORM`,`API`.`GL_DATE` AS `DATE`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`CURRENT_STATUS_ID` AS `FW_STATUS_ID`,`RR`.`WAREHOUSE_ID` AS `WAREHOUSE_ID`,`RRI`.`ITEM_ID` AS `ITEM_ID`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,`I`.`ITEM_CATEGORY_ID` AS `CATEGORY_ID`,`I`.`ACTIVE` AS `STATUS_ID`,`RRI`.`QUANTITY` AS `QUANTITY`,`RRI`.`UNIT_COST` AS `UNIT_COST`,`UM`.`NAME` AS `UOM`,`ITS`.`SRP` AS `SRP`,`API`.`CREATED_DATE` AS `CREATED_DATE`,`FWL`.`CREATED_DATE` AS `FWL_CD`,(`RRI`.`QUANTITY` * `RRI`.`UNIT_COST`) AS `AMOUNT` from (((((((`R_RECEIVING_REPORT_ITEM` `RRI` join `AP_INVOICE` `API` on((`RRI`.`AP_INVOICE_ID` = `API`.`AP_INVOICE_ID`))) join `R_RECEIVING_REPORT` `RR` on((`API`.`AP_INVOICE_ID` = `RR`.`AP_INVOICE_ID`))) join `FORM_WORKFLOW` `FW` on((`API`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) join `FORM_WORKFLOW_LOG` `FWL` on(((`FWL`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` = `FWL`.`FORM_STATUS_ID`)))) join `ITEM` `I` on((`RRI`.`ITEM_ID` = `I`.`ITEM_ID`))) join `ITEM_SRP` `ITS` on((`RRI`.`ITEM_ID` = `ITS`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`I`.`UNIT_MEASUREMENT_ID` = `UM`.`UNITOFMEASUREMENT_ID`))) where ((`ITS`.`COMPANY_ID` = `RR`.`COMPANY_ID`) and (`ITS`.`ACTIVE` = 1)) group by `FW`.`FORM_WORKFLOW_ID`,`RRI`.`R_RECEIVING_REPORT_ITEM_ID` union all select `TR`.`COMPANY_ID` AS `COMPANY_ID`,`TR`.`R_TRANSFER_RECEIPT_ID` AS `R_TRANSFER_RECEIPT_ID`,`TRI`.`R_TRANSFER_RECEIPT_ITEM_ID` AS `R_TRANSFER_RECEIPT_ITEM_ID`,'TR-TO' AS `TR-TO`,`TR`.`TR_DATE` AS `TR_DATE`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`CURRENT_STATUS_ID` AS `FW_STATUS_ID`,`TR`.`WAREHOUSE_TO_ID` AS `WAREHOUSE_TO_ID`,`TRI`.`ITEM_ID` AS `ITEM_ID`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,`I`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ACTIVE` AS `ACTIVE`,`TRI`.`QUANTITY` AS `QUANTITY`,`TRI`.`UNIT_COST` AS `UNIT_COST`,`UM`.`NAME` AS `NAME`,`ITS`.`SRP` AS `SRP`,`TR`.`CREATED_DATE` AS `CREATED_DATE`,`FWL`.`CREATED_DATE` AS `FWL_CD`,(`TRI`.`QUANTITY` * `TRI`.`UNIT_COST`) AS `AMOUNT` from ((((((`R_TRANSFER_RECEIPT_ITEM` `TRI` join `R_TRANSFER_RECEIPT` `TR` on((`TRI`.`R_TRANSFER_RECEIPT_ID` = `TR`.`R_TRANSFER_RECEIPT_ID`))) join `FORM_WORKFLOW` `FW` on((`TR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) join `FORM_WORKFLOW_LOG` `FWL` on(((`FWL`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` = `FWL`.`FORM_STATUS_ID`)))) join `ITEM` `I` on((`TRI`.`ITEM_ID` = `I`.`ITEM_ID`))) join `ITEM_SRP` `ITS` on((`TRI`.`ITEM_ID` = `ITS`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`I`.`UNIT_MEASUREMENT_ID` = `UM`.`UNITOFMEASUREMENT_ID`))) where ((`TR`.`COMPANY_ID` = `ITS`.`COMPANY_ID`) and (`ITS`.`ACTIVE` = 1)) group by `FW`.`FORM_WORKFLOW_ID`,`TRI`.`R_TRANSFER_RECEIPT_ITEM_ID` union all select `RP`.`COMPANY_ID` AS `COMPANY_ID`,`RP`.`REPACKING_ID` AS `REPACKING_ID`,`RPI`.`REPACKING_ITEM_ID` AS `REPACKING_ITEM_ID`,'RP-TO' AS `RP-TO`,`RP`.`R_DATE` AS `R_DATE`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`CURRENT_STATUS_ID` AS `FW_STATUS_ID`,`RP`.`WAREHOUSE_ID` AS `WAREHOUSE_ID`,`RPI`.`TO_ITEM_ID` AS `TO_ITEM_ID`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,`I`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ACTIVE` AS `ACTIVE`,`RPI`.`REPACKED_QUANTITY` AS `REPACKED_QUANTITY`,`RPI`.`REPACKED_UNIT_COST` AS `REPACKED_UNIT_COST`,`UM`.`NAME` AS `NAME`,`ITS`.`SRP` AS `SRP`,`RP`.`CREATED_DATE` AS `FWL_CD`,`FWL`.`CREATED_DATE` AS `CREATED_DATE`,(`RPI`.`QUANTITY` * `RPI`.`UNIT_COST`) AS `AMOUNT` from ((((((`REPACKING_ITEM` `RPI` join `REPACKING` `RP` on((`RP`.`REPACKING_ID` = `RPI`.`REPACKING_ID`))) join `FORM_WORKFLOW` `FW` on((`RP`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) join `FORM_WORKFLOW_LOG` `FWL` on(((`FWL`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` = `FWL`.`FORM_STATUS_ID`)))) join `ITEM` `I` on((`RPI`.`TO_ITEM_ID` = `I`.`ITEM_ID`))) join `ITEM_SRP` `ITS` on((`RPI`.`TO_ITEM_ID` = `ITS`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`I`.`UNIT_MEASUREMENT_ID` = `UM`.`UNITOFMEASUREMENT_ID`))) where ((`RP`.`COMPANY_ID` = `ITS`.`COMPANY_ID`) and (`ITS`.`ACTIVE` = 1)) group by `FW`.`FORM_WORKFLOW_ID`,`RPI`.`REPACKING_ITEM_ID` union all select `ITS`.`COMPANY_ID` AS `COMPANY_ID`,`ART`.`AR_TRANSACTION_ID` AS `AR_TRANSACTION_ID`,`ASI`.`ACCOUNT_SALE_ITEM_ID` AS `ACCOUNT_SALE_ITEM_ID`,'ASR' AS `ASR`,`ART`.`TRANSACTION_DATE` AS `TRANSACTION_DATE`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`CURRENT_STATUS_ID` AS `FW_STATUS_ID`,`ASI`.`WAREHOUSE_ID` AS `WAREHOUSE_ID`,`ASI`.`ITEM_ID` AS `ITEM_ID`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,`I`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ACTIVE` AS `ACTIVE`,-(`ASI`.`QUANTITY`) AS `-ASI.QUANTITY`,`ASI`.`UNIT_COST` AS `UNIT_COST`,`UM`.`NAME` AS `NAME`,`ITS`.`SRP` AS `SRP`,`ART`.`CREATED_DATE` AS `CREATED_DATE`,`FWL`.`CREATED_DATE` AS `FWL_CD`,-((`ASI`.`QUANTITY` * `ASI`.`UNIT_COST`)) AS `AMOUNT` from ((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ASI`.`AR_TRANSACTION_ID` = `ART`.`AR_TRANSACTION_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) join `FORM_WORKFLOW_LOG` `FWL` on(((`FWL`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` = `FWL`.`FORM_STATUS_ID`)))) join `ITEM` `I` on((`ASI`.`ITEM_ID` = `I`.`ITEM_ID`))) join `ITEM_SRP` `ITS` on((`ASI`.`ITEM_ID` = `ITS`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`I`.`UNIT_MEASUREMENT_ID` = `UM`.`UNITOFMEASUREMENT_ID`))) where ((`ART`.`AR_TRANSACTION_TYPE_ID` = 5) and (`ART`.`COMPANY_ID` = `ITS`.`COMPANY_ID`) and (`ITS`.`ACTIVE` = 1)) group by `FW`.`FORM_WORKFLOW_ID`,`ASI`.`ACCOUNT_SALE_ITEM_ID` union all select `ITS`.`COMPANY_ID` AS `COMPANY_ID`,`ART`.`AR_TRANSACTION_ID` AS `AR_TRANSACTION_ID`,`ASI`.`ACCOUNT_SALE_ITEM_ID` AS `ACCOUNT_SALE_ITEM_ID`,'ASR-W' AS `ASR-W`,`ART`.`TRANSACTION_DATE` AS `TRANSACTION_DATE`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`CURRENT_STATUS_ID` AS `FW_STATUS_ID`,`ASI`.`WAREHOUSE_ID` AS `WAREHOUSE_ID`,`ASI`.`ITEM_ID` AS `ITEM_ID`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,`I`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ACTIVE` AS `ACTIVE`,-(`ASI`.`QUANTITY`) AS `-ASI.QUANTITY`,`ASI`.`UNIT_COST` AS `UNIT_COST`,`UM`.`NAME` AS `NAME`,`ITS`.`SRP` AS `SRP`,`ART`.`CREATED_DATE` AS `CREATED_DATE`,`FWL`.`CREATED_DATE` AS `FWL_CD`,-((`ASI`.`QUANTITY` * `ASI`.`UNIT_COST`)) AS `AMOUNT` from ((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ASI`.`AR_TRANSACTION_ID` = `ART`.`AR_TRANSACTION_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) join `FORM_WORKFLOW_LOG` `FWL` on(((`FWL`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` = `FWL`.`FORM_STATUS_ID`)))) join `ITEM` `I` on((`ASI`.`ITEM_ID` = `I`.`ITEM_ID`))) join `ITEM_SRP` `ITS` on((`ASI`.`ITEM_ID` = `ITS`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`I`.`UNIT_MEASUREMENT_ID` = `UM`.`UNITOFMEASUREMENT_ID`))) where ((`ART`.`AR_TRANSACTION_TYPE_ID` = 9) and (`ART`.`COMPANY_ID` = `ITS`.`COMPANY_ID`) and (`ITS`.`ACTIVE` = 1)) group by `FW`.`FORM_WORKFLOW_ID`,`ASI`.`ACCOUNT_SALE_ITEM_ID` union all select `ITS`.`COMPANY_ID` AS `COMPANY_ID`,`ART`.`AR_TRANSACTION_ID` AS `AR_TRANSACTION_ID`,`ASI`.`ACCOUNT_SALE_ITEM_ID` AS `ACCOUNT_SALE_ITEM_ID`,'ASR-EB' AS `ASR-EB`,`ART`.`TRANSACTION_DATE` AS `TRANSACTION_DATE`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`CURRENT_STATUS_ID` AS `FW_STATUS_ID`,`ASI`.`WAREHOUSE_ID` AS `WAREHOUSE_ID`,`ASI`.`ITEM_ID` AS `ITEM_ID`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,`I`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ACTIVE` AS `ACTIVE`,`ASI`.`QUANTITY` AS `QUANTITY`,`ASI`.`UNIT_COST` AS `UNIT_COST`,`UM`.`NAME` AS `NAME`,`ITS`.`SRP` AS `SRP`,`ART`.`CREATED_DATE` AS `CREATED_DATE`,`FWL`.`CREATED_DATE` AS `FWL_CD`,(`ASI`.`QUANTITY` * `ASI`.`UNIT_COST`) AS `AMOUNT` from ((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ASI`.`AR_TRANSACTION_ID` = `ART`.`AR_TRANSACTION_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) join `FORM_WORKFLOW_LOG` `FWL` on(((`FWL`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` = `FWL`.`FORM_STATUS_ID`)))) join `ITEM` `I` on((`ASI`.`ITEM_ID` = `I`.`ITEM_ID`))) join `ITEM_SRP` `ITS` on((`ASI`.`ITEM_ID` = `ITS`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`I`.`UNIT_MEASUREMENT_ID` = `UM`.`UNITOFMEASUREMENT_ID`))) where ((`ART`.`AR_TRANSACTION_TYPE_ID` = 7) and (`ART`.`COMPANY_ID` = `ITS`.`COMPANY_ID`) and (`ITS`.`ACTIVE` = 1)) group by `FW`.`FORM_WORKFLOW_ID`,`ASI`.`ACCOUNT_SALE_ITEM_ID` union all select `ITS`.`COMPANY_ID` AS `COMPANY_ID`,`ART`.`AR_TRANSACTION_ID` AS `AR_TRANSACTION_ID`,`ASI`.`ACCOUNT_SALE_ITEM_ID` AS `ACCOUNT_SALE_ITEM_ID`,'ASR-IS' AS `ASR-IS`,`ART`.`TRANSACTION_DATE` AS `TRANSACTION_DATE`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`CURRENT_STATUS_ID` AS `FW_STATUS_ID`,`ASI`.`WAREHOUSE_ID` AS `WAREHOUSE_ID`,`ASI`.`ITEM_ID` AS `ITEM_ID`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,`I`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ACTIVE` AS `ACTIVE`,-(`ASI`.`QUANTITY`) AS `-ASI.QUANTITY`,`ASI`.`UNIT_COST` AS `UNIT_COST`,`UM`.`NAME` AS `NAME`,`ITS`.`SRP` AS `SRP`,`ART`.`CREATED_DATE` AS `CREATED_DATE`,`FWL`.`CREATED_DATE` AS `FWL_CD`,-((`ASI`.`QUANTITY` * `ASI`.`UNIT_COST`)) AS `AMOUNT` from ((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ASI`.`AR_TRANSACTION_ID` = `ART`.`AR_TRANSACTION_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) join `FORM_WORKFLOW_LOG` `FWL` on(((`FWL`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` = `FWL`.`FORM_STATUS_ID`)))) join `ITEM` `I` on((`ASI`.`ITEM_ID` = `I`.`ITEM_ID`))) join `ITEM_SRP` `ITS` on((`ASI`.`ITEM_ID` = `ITS`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`I`.`UNIT_MEASUREMENT_ID` = `UM`.`UNITOFMEASUREMENT_ID`))) where ((`ART`.`AR_TRANSACTION_TYPE_ID` = 11) and (`ART`.`COMPANY_ID` = `ITS`.`COMPANY_ID`) and (`ITS`.`ACTIVE` = 1)) group by `FW`.`FORM_WORKFLOW_ID`,`ASI`.`ACCOUNT_SALE_ITEM_ID` union all select `ITS`.`COMPANY_ID` AS `COMPANY_ID`,`CSR`.`CASH_SALE_RETURN_ID` AS `CASH_SALE_RETURN_ID`,`CSRI`.`CASH_SALE_RETURN_ITEM_ID` AS `CASH_SALE_RETURN_ITEM_ID`,'CSR' AS `CSR`,`CSR`.`DATE` AS `DATE`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`CURRENT_STATUS_ID` AS `FW_STATUS_ID`,`CSRI`.`WAREHOUSE_ID` AS `WAREHOUSE_ID`,`CSRI`.`ITEM_ID` AS `ITEM_ID`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,`I`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ACTIVE` AS `ACTIVE`,-(`CSRI`.`QUANTITY`) AS `-CSRI.QUANTITY`,`CSRI`.`UNIT_COST` AS `UNIT_COST`,`UM`.`NAME` AS `NAME`,`ITS`.`SRP` AS `SRP`,`CSR`.`CREATED_DATE` AS `CREATED_DATE`,`FWL`.`CREATED_DATE` AS `FWL_CD`,-((`CSRI`.`QUANTITY` * `CSRI`.`UNIT_COST`)) AS `AMOUNT` from ((((((`CASH_SALE_RETURN_ITEM` `CSRI` join `CASH_SALE_RETURN` `CSR` on((`CSRI`.`CASH_SALE_RETURN_ID` = `CSR`.`CASH_SALE_RETURN_ID`))) join `FORM_WORKFLOW` `FW` on((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) join `FORM_WORKFLOW_LOG` `FWL` on(((`FWL`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` = `FWL`.`FORM_STATUS_ID`)))) join `ITEM` `I` on((`CSRI`.`ITEM_ID` = `I`.`ITEM_ID`))) join `ITEM_SRP` `ITS` on((`CSRI`.`ITEM_ID` = `ITS`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`I`.`UNIT_MEASUREMENT_ID` = `UM`.`UNITOFMEASUREMENT_ID`))) where ((`CSR`.`COMPANY_ID` = `ITS`.`COMPANY_ID`) and (`ITS`.`ACTIVE` = 1) and (`CSR`.`CASH_SALE_TYPE_ID` = 1)) group by `FW`.`FORM_WORKFLOW_ID`,`CSRI`.`CASH_SALE_RETURN_ITEM_ID` union all select `ITS`.`COMPANY_ID` AS `COMPANY_ID`,`CSR`.`CASH_SALE_RETURN_ID` AS `CASH_SALE_RETURN_ID`,`CSRI`.`CASH_SALE_RETURN_ITEM_ID` AS `CASH_SALE_RETURN_ITEM_ID`,'CSR-W' AS `CSR-W`,`CSR`.`DATE` AS `DATE`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`CURRENT_STATUS_ID` AS `FW_STATUS_ID`,`CSRI`.`WAREHOUSE_ID` AS `WAREHOUSE_ID`,`CSRI`.`ITEM_ID` AS `ITEM_ID`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,`I`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ACTIVE` AS `ACTIVE`,-(`CSRI`.`QUANTITY`) AS `-CSRI.QUANTITY`,`CSRI`.`UNIT_COST` AS `UNIT_COST`,`UM`.`NAME` AS `NAME`,`ITS`.`SRP` AS `SRP`,`CSR`.`CREATED_DATE` AS `CREATED_DATE`,`FWL`.`CREATED_DATE` AS `FWL_CD`,-((`CSRI`.`QUANTITY` * `CSRI`.`UNIT_COST`)) AS `AMOUNT` from ((((((`CASH_SALE_RETURN_ITEM` `CSRI` join `CASH_SALE_RETURN` `CSR` on((`CSRI`.`CASH_SALE_RETURN_ID` = `CSR`.`CASH_SALE_RETURN_ID`))) join `FORM_WORKFLOW` `FW` on((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) join `FORM_WORKFLOW_LOG` `FWL` on(((`FWL`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` = `FWL`.`FORM_STATUS_ID`)))) join `ITEM` `I` on((`CSRI`.`ITEM_ID` = `I`.`ITEM_ID`))) join `ITEM_SRP` `ITS` on((`CSRI`.`ITEM_ID` = `ITS`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`I`.`UNIT_MEASUREMENT_ID` = `UM`.`UNITOFMEASUREMENT_ID`))) where ((`CSR`.`COMPANY_ID` = `ITS`.`COMPANY_ID`) and (`ITS`.`ACTIVE` = 1) and (`CSR`.`CASH_SALE_TYPE_ID` = 2)) group by `FW`.`FORM_WORKFLOW_ID`,`CSRI`.`CASH_SALE_RETURN_ITEM_ID` union all select `ITS`.`COMPANY_ID` AS `COMPANY_ID`,`CSR`.`CASH_SALE_RETURN_ID` AS `CASH_SALE_RETURN_ID`,`CSRI`.`CASH_SALE_RETURN_ITEM_ID` AS `CASH_SALE_RETURN_ITEM_ID`,'CSR-IS' AS `CSR-IS`,`CSR`.`DATE` AS `DATE`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`CURRENT_STATUS_ID` AS `FW_STATUS_ID`,`CSRI`.`WAREHOUSE_ID` AS `WAREHOUSE_ID`,`CSRI`.`ITEM_ID` AS `ITEM_ID`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,`I`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ACTIVE` AS `ACTIVE`,-(`CSRI`.`QUANTITY`) AS `-CSRI.QUANTITY`,`CSRI`.`UNIT_COST` AS `UNIT_COST`,`UM`.`NAME` AS `NAME`,`ITS`.`SRP` AS `SRP`,`CSR`.`CREATED_DATE` AS `CREATED_DATE`,`FWL`.`CREATED_DATE` AS `FWL_CD`,-((`CSRI`.`QUANTITY` * `CSRI`.`UNIT_COST`)) AS `AMOUNT` from ((((((`CASH_SALE_RETURN_ITEM` `CSRI` join `CASH_SALE_RETURN` `CSR` on((`CSRI`.`CASH_SALE_RETURN_ID` = `CSR`.`CASH_SALE_RETURN_ID`))) join `FORM_WORKFLOW` `FW` on((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) join `FORM_WORKFLOW_LOG` `FWL` on(((`FWL`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` = `FWL`.`FORM_STATUS_ID`)))) join `ITEM` `I` on((`CSRI`.`ITEM_ID` = `I`.`ITEM_ID`))) join `ITEM_SRP` `ITS` on((`CSRI`.`ITEM_ID` = `ITS`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`I`.`UNIT_MEASUREMENT_ID` = `UM`.`UNITOFMEASUREMENT_ID`))) where ((`CSR`.`COMPANY_ID` = `ITS`.`COMPANY_ID`) and (`ITS`.`ACTIVE` = 1) and (`CSR`.`CASH_SALE_TYPE_ID` = 3)) group by `FW`.`FORM_WORKFLOW_ID`,`CSRI`.`CASH_SALE_RETURN_ITEM_ID` union all select `ITS`.`COMPANY_ID` AS `COMPANY_ID`,`CS`.`CASH_SALE_ID` AS `CASH_SALE_ID`,`CSI`.`CASH_SALE_ITEM_ID` AS `CASH_SALE_ITEM_ID`,'CS' AS `CS`,`CS`.`RECEIPT_DATE` AS `RECEIPT_DATE`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`CURRENT_STATUS_ID` AS `FW_STATUS_ID`,`CSI`.`WAREHOUSE_ID` AS `WAREHOUSE_ID`,`CSI`.`ITEM_ID` AS `ITEM_ID`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,`I`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ACTIVE` AS `ACTIVE`,-(`CSI`.`QUANTITY`) AS `-CSI.QUANTITY`,`CSI`.`UNIT_COST` AS `UNIT_COST`,`UM`.`NAME` AS `NAME`,`ITS`.`SRP` AS `SRP`,`CS`.`CREATED_DATE` AS `CREATED_DATE`,`FWL`.`CREATED_DATE` AS `FWL_CD`,-((`CSI`.`QUANTITY` * `CSI`.`UNIT_COST`)) AS `AMOUNT` from ((((((`CASH_SALE_ITEM` `CSI` join `CASH_SALE` `CS` on((`CSI`.`CASH_SALE_ID` = `CS`.`CASH_SALE_ID`))) join `FORM_WORKFLOW` `FW` on((`CS`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) join `FORM_WORKFLOW_LOG` `FWL` on(((`FWL`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` = `FWL`.`FORM_STATUS_ID`)))) join `ITEM` `I` on((`CSI`.`ITEM_ID` = `I`.`ITEM_ID`))) join `ITEM_SRP` `ITS` on((`CSI`.`ITEM_ID` = `ITS`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`I`.`UNIT_MEASUREMENT_ID` = `UM`.`UNITOFMEASUREMENT_ID`))) where ((`CS`.`COMPANY_ID` = `ITS`.`COMPANY_ID`) and (`ITS`.`ACTIVE` = 1) and (`CS`.`CASH_SALE_TYPE_ID` = 1)) group by `FW`.`FORM_WORKFLOW_ID`,`CSI`.`CASH_SALE_ITEM_ID` union all select `ITS`.`COMPANY_ID` AS `COMPANY_ID`,`CS`.`CASH_SALE_ID` AS `CASH_SALE_ID`,`CSI`.`CASH_SALE_ITEM_ID` AS `CASH_SALE_ITEM_ID`,'CS-W' AS `CS-W`,`CS`.`RECEIPT_DATE` AS `RECEIPT_DATE`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`CURRENT_STATUS_ID` AS `FW_STATUS_ID`,`CSI`.`WAREHOUSE_ID` AS `WAREHOUSE_ID`,`CSI`.`ITEM_ID` AS `ITEM_ID`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,`I`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ACTIVE` AS `ACTIVE`,-(`CSI`.`QUANTITY`) AS `-CSI.QUANTITY`,`CSI`.`UNIT_COST` AS `UNIT_COST`,`UM`.`NAME` AS `NAME`,`ITS`.`SRP` AS `SRP`,`CS`.`CREATED_DATE` AS `CREATED_DATE`,`FWL`.`CREATED_DATE` AS `FWL_CD`,-((`CSI`.`QUANTITY` * `CSI`.`UNIT_COST`)) AS `AMOUNT` from ((((((`CASH_SALE_ITEM` `CSI` join `CASH_SALE` `CS` on((`CSI`.`CASH_SALE_ID` = `CS`.`CASH_SALE_ID`))) join `FORM_WORKFLOW` `FW` on((`CS`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) join `FORM_WORKFLOW_LOG` `FWL` on(((`FWL`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` = `FWL`.`FORM_STATUS_ID`)))) join `ITEM` `I` on((`CSI`.`ITEM_ID` = `I`.`ITEM_ID`))) join `ITEM_SRP` `ITS` on((`CSI`.`ITEM_ID` = `ITS`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`I`.`UNIT_MEASUREMENT_ID` = `UM`.`UNITOFMEASUREMENT_ID`))) where ((`CS`.`COMPANY_ID` = `ITS`.`COMPANY_ID`) and (`ITS`.`ACTIVE` = 1) and (`CS`.`CASH_SALE_TYPE_ID` = 2)) group by `FW`.`FORM_WORKFLOW_ID`,`CSI`.`CASH_SALE_ITEM_ID` union all select `ITS`.`COMPANY_ID` AS `COMPANY_ID`,`CS`.`CASH_SALE_ID` AS `CASH_SALE_ID`,`CSI`.`CASH_SALE_ITEM_ID` AS `CASH_SALE_ITEM_ID`,'CS-IS' AS `CS-IS`,`CS`.`RECEIPT_DATE` AS `RECEIPT_DATE`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`CURRENT_STATUS_ID` AS `FW_STATUS_ID`,`CSI`.`WAREHOUSE_ID` AS `WAREHOUSE_ID`,`CSI`.`ITEM_ID` AS `ITEM_ID`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,`I`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ACTIVE` AS `ACTIVE`,-(`CSI`.`QUANTITY`) AS `-CSI.QUANTITY`,`CSI`.`UNIT_COST` AS `UNIT_COST`,`UM`.`NAME` AS `NAME`,`ITS`.`SRP` AS `SRP`,`CS`.`CREATED_DATE` AS `CREATED_DATE`,`FWL`.`CREATED_DATE` AS `FWL_CD`,-((`CSI`.`QUANTITY` * `CSI`.`UNIT_COST`)) AS `AMOUNT` from ((((((`CASH_SALE_ITEM` `CSI` join `CASH_SALE` `CS` on((`CSI`.`CASH_SALE_ID` = `CS`.`CASH_SALE_ID`))) join `FORM_WORKFLOW` `FW` on((`CS`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) join `FORM_WORKFLOW_LOG` `FWL` on(((`FWL`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` = `FWL`.`FORM_STATUS_ID`)))) join `ITEM` `I` on((`CSI`.`ITEM_ID` = `I`.`ITEM_ID`))) join `ITEM_SRP` `ITS` on((`CSI`.`ITEM_ID` = `ITS`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`I`.`UNIT_MEASUREMENT_ID` = `UM`.`UNITOFMEASUREMENT_ID`))) where ((`CS`.`COMPANY_ID` = `ITS`.`COMPANY_ID`) and (`ITS`.`ACTIVE` = 1) and (`CS`.`CASH_SALE_TYPE_ID` = 3)) group by `FW`.`FORM_WORKFLOW_ID`,`CSI`.`CASH_SALE_ITEM_ID` union all select `ITS`.`COMPANY_ID` AS `COMPANY_ID`,`API`.`AP_INVOICE_ID` AS `ID`,`RTSI`.`R_RETURN_TO_SUPPLIER_ITEM_ID` AS `R_RETURN_TO_SUPPLIER_ITEM_ID`,'RTS' AS `RTS`,`API`.`GL_DATE` AS `GL_DATE`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`CURRENT_STATUS_ID` AS `FW_STATUS_ID`,`RTS`.`WAREHOUSE_ID` AS `WAREHOUSE_ID`,`RTSI`.`ITEM_ID` AS `ITEM_ID`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,`I`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ACTIVE` AS `ACTIVE`,-(`RTSI`.`QUANTITY`) AS `-RTSI.QUANTITY`,`RTSI`.`UNIT_COST` AS `UNIT_COST`,`UM`.`NAME` AS `NAME`,`ITS`.`SRP` AS `SRP`,`API`.`CREATED_DATE` AS `CREATED_DATE`,`FWL`.`CREATED_DATE` AS `FWL_CD`,-((`RTSI`.`QUANTITY` * `RTSI`.`UNIT_COST`)) AS `AMOUNT` from (((((((`R_RETURN_TO_SUPPLIER_ITEM` `RTSI` join `AP_INVOICE` `API` on((`RTSI`.`AP_INVOICE_ID` = `API`.`AP_INVOICE_ID`))) join `R_RETURN_TO_SUPPLIER` `RTS` on((`API`.`AP_INVOICE_ID` = `RTS`.`AP_INVOICE_ID`))) join `FORM_WORKFLOW` `FW` on((`API`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) join `FORM_WORKFLOW_LOG` `FWL` on(((`FWL`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` = `FWL`.`FORM_STATUS_ID`)))) join `ITEM` `I` on((`RTSI`.`ITEM_ID` = `I`.`ITEM_ID`))) join `ITEM_SRP` `ITS` on((`RTSI`.`ITEM_ID` = `ITS`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`I`.`UNIT_MEASUREMENT_ID` = `UM`.`UNITOFMEASUREMENT_ID`))) where ((`RTS`.`COMPANY_ID` = `ITS`.`COMPANY_ID`) and (`ITS`.`ACTIVE` = 1)) group by `FW`.`FORM_WORKFLOW_ID`,`RTSI`.`R_RETURN_TO_SUPPLIER_ITEM_ID` union all select `ITS`.`COMPANY_ID` AS `COMPANY_ID`,`TR`.`R_TRANSFER_RECEIPT_ID` AS `R_TRANSFER_RECEIPT_ID`,`TRI`.`R_TRANSFER_RECEIPT_ITEM_ID` AS `R_TRANSFER_RECEIPT_ITEM_ID`,'TR-FROM' AS `TR-FROM`,`TR`.`TR_DATE` AS `TR_DATE`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`CURRENT_STATUS_ID` AS `FW_STATUS_ID`,`TR`.`WAREHOUSE_FROM_ID` AS `WAREHOUSE_FROM_ID`,`TRI`.`ITEM_ID` AS `ITEM_ID`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,`I`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ACTIVE` AS `ACTIVE`,-(`TRI`.`QUANTITY`) AS `-TRI.QUANTITY`,`TRI`.`UNIT_COST` AS `UNIT_COST`,`UM`.`NAME` AS `NAME`,`ITS`.`SRP` AS `SRP`,`TR`.`CREATED_DATE` AS `CREATED_DATE`,`FWL`.`CREATED_DATE` AS `FWL_CD`,-((`TRI`.`QUANTITY` * `TRI`.`UNIT_COST`)) AS `AMOUNT` from ((((((`R_TRANSFER_RECEIPT_ITEM` `TRI` join `R_TRANSFER_RECEIPT` `TR` on((`TRI`.`R_TRANSFER_RECEIPT_ID` = `TR`.`R_TRANSFER_RECEIPT_ID`))) join `FORM_WORKFLOW` `FW` on((`TR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) join `FORM_WORKFLOW_LOG` `FWL` on(((`FWL`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` = `FWL`.`FORM_STATUS_ID`)))) join `ITEM` `I` on((`TRI`.`ITEM_ID` = `I`.`ITEM_ID`))) join `ITEM_SRP` `ITS` on((`TRI`.`ITEM_ID` = `ITS`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`I`.`UNIT_MEASUREMENT_ID` = `UM`.`UNITOFMEASUREMENT_ID`))) where ((`TR`.`COMPANY_ID` = `ITS`.`COMPANY_ID`) and (`ITS`.`ACTIVE` = 1)) group by `FW`.`FORM_WORKFLOW_ID`,`TRI`.`R_TRANSFER_RECEIPT_ITEM_ID` union all select `ITS`.`COMPANY_ID` AS `COMPANY_ID`,`ART`.`AR_TRANSACTION_ID` AS `AR_TRANSACTION_ID`,`ASI`.`ACCOUNT_SALE_ITEM_ID` AS `ACCOUNT_SALE_ITEM_ID`,'AS' AS `AS`,`ART`.`TRANSACTION_DATE` AS `TRANSACTION_DATE`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`CURRENT_STATUS_ID` AS `FW_STATUS_ID`,`ASI`.`WAREHOUSE_ID` AS `WAREHOUSE_ID`,`ASI`.`ITEM_ID` AS `ITEM_ID`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,`I`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ACTIVE` AS `ACTIVE`,-(`ASI`.`QUANTITY`) AS `-ASI.QUANTITY`,`ASI`.`UNIT_COST` AS `UNIT_COST`,`UM`.`NAME` AS `NAME`,`ITS`.`SRP` AS `SRP`,`ART`.`CREATED_DATE` AS `CREATED_DATE`,`FWL`.`CREATED_DATE` AS `FWL_CD`,-((`ASI`.`QUANTITY` * `ASI`.`UNIT_COST`)) AS `AMOUNT` from ((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ASI`.`AR_TRANSACTION_ID` = `ART`.`AR_TRANSACTION_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) join `FORM_WORKFLOW_LOG` `FWL` on(((`FWL`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` = `FWL`.`FORM_STATUS_ID`)))) join `ITEM` `I` on((`ASI`.`ITEM_ID` = `I`.`ITEM_ID`))) join `ITEM_SRP` `ITS` on((`ASI`.`ITEM_ID` = `ITS`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`I`.`UNIT_MEASUREMENT_ID` = `UM`.`UNITOFMEASUREMENT_ID`))) where ((`ART`.`AR_TRANSACTION_TYPE_ID` = 4) and (`ART`.`COMPANY_ID` = `ITS`.`COMPANY_ID`) and (`ITS`.`ACTIVE` = 1)) group by `FW`.`FORM_WORKFLOW_ID`,`ASI`.`ACCOUNT_SALE_ITEM_ID` union all select `ITS`.`COMPANY_ID` AS `COMPANY_ID`,`ART`.`AR_TRANSACTION_ID` AS `AR_TRANSACTION_ID`,`ASI`.`ACCOUNT_SALE_ITEM_ID` AS `ACCOUNT_SALE_ITEM_ID`,'AS-W' AS `AS-W`,`ART`.`TRANSACTION_DATE` AS `TRANSACTION_DATE`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`CURRENT_STATUS_ID` AS `FW_STATUS_ID`,`ASI`.`WAREHOUSE_ID` AS `WAREHOUSE_ID`,`ASI`.`ITEM_ID` AS `ITEM_ID`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,`I`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ACTIVE` AS `ACTIVE`,-(`ASI`.`QUANTITY`) AS `-ASI.QUANTITY`,`ASI`.`UNIT_COST` AS `UNIT_COST`,`UM`.`NAME` AS `NAME`,`ITS`.`SRP` AS `SRP`,`ART`.`CREATED_DATE` AS `CREATED_DATE`,`FWL`.`CREATED_DATE` AS `FWL_CD`,-((`ASI`.`QUANTITY` * `ASI`.`UNIT_COST`)) AS `AMOUNT` from ((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ASI`.`AR_TRANSACTION_ID` = `ART`.`AR_TRANSACTION_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) join `FORM_WORKFLOW_LOG` `FWL` on(((`FWL`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` = `FWL`.`FORM_STATUS_ID`)))) join `ITEM` `I` on((`ASI`.`ITEM_ID` = `I`.`ITEM_ID`))) join `ITEM_SRP` `ITS` on((`ASI`.`ITEM_ID` = `ITS`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`I`.`UNIT_MEASUREMENT_ID` = `UM`.`UNITOFMEASUREMENT_ID`))) where ((`ART`.`AR_TRANSACTION_TYPE_ID` = 8) and (`ART`.`COMPANY_ID` = `ITS`.`COMPANY_ID`) and (`ITS`.`ACTIVE` = 1)) group by `FW`.`FORM_WORKFLOW_ID`,`ASI`.`ACCOUNT_SALE_ITEM_ID` union all select `ITS`.`COMPANY_ID` AS `COMPANY_ID`,`ART`.`AR_TRANSACTION_ID` AS `AR_TRANSACTION_ID`,`ASI`.`ACCOUNT_SALE_ITEM_ID` AS `ACCOUNT_SALE_ITEM_ID`,'AS-IS' AS `AS-IS`,`ART`.`TRANSACTION_DATE` AS `TRANSACTION_DATE`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`CURRENT_STATUS_ID` AS `FW_STATUS_ID`,`ASI`.`WAREHOUSE_ID` AS `WAREHOUSE_ID`,`ASI`.`ITEM_ID` AS `ITEM_ID`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,`I`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ACTIVE` AS `ACTIVE`,-(`ASI`.`QUANTITY`) AS `-ASI.QUANTITY`,`ASI`.`UNIT_COST` AS `UNIT_COST`,`UM`.`NAME` AS `NAME`,`ITS`.`SRP` AS `SRP`,`ART`.`CREATED_DATE` AS `CREATED_DATE`,`FWL`.`CREATED_DATE` AS `FWL_CD`,-((`ASI`.`QUANTITY` * `ASI`.`UNIT_COST`)) AS `AMOUNT` from ((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ASI`.`AR_TRANSACTION_ID` = `ART`.`AR_TRANSACTION_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) join `FORM_WORKFLOW_LOG` `FWL` on(((`FWL`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` = `FWL`.`FORM_STATUS_ID`)))) join `ITEM` `I` on((`ASI`.`ITEM_ID` = `I`.`ITEM_ID`))) join `ITEM_SRP` `ITS` on((`ASI`.`ITEM_ID` = `ITS`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`I`.`UNIT_MEASUREMENT_ID` = `UM`.`UNITOFMEASUREMENT_ID`))) where ((`ART`.`AR_TRANSACTION_TYPE_ID` = 10) and (`ART`.`COMPANY_ID` = `ITS`.`COMPANY_ID`) and (`ITS`.`ACTIVE` = 1)) group by `FW`.`FORM_WORKFLOW_ID`,`ASI`.`ACCOUNT_SALE_ITEM_ID` union all select `ITS`.`COMPANY_ID` AS `COMPANY_ID`,`RP`.`REPACKING_ID` AS `REPACKING_ID`,`RPI`.`REPACKING_ITEM_ID` AS `REPACKING_ITEM_ID`,'RP-FROM' AS `RP-FROM`,`RP`.`R_DATE` AS `R_DATE`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`CURRENT_STATUS_ID` AS `FW_STATUS_ID`,`RP`.`WAREHOUSE_ID` AS `WAREHOUSE_ID`,`RPI`.`FROM_ITEM_ID` AS `FROM_ITEM_ID`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,`I`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ACTIVE` AS `ACTIVE`,-(`RPI`.`QUANTITY`) AS `-RPI.QUANTITY`,`RPI`.`UNIT_COST` AS `UNIT_COST`,`UM`.`NAME` AS `NAME`,`ITS`.`SRP` AS `SRP`,`RP`.`CREATED_DATE` AS `CREATED_DATE`,`FWL`.`CREATED_DATE` AS `FWL_CD`,-((`RPI`.`QUANTITY` * `RPI`.`UNIT_COST`)) AS `AMOUNT` from ((((((`REPACKING_ITEM` `RPI` join `REPACKING` `RP` on((`RP`.`REPACKING_ID` = `RPI`.`REPACKING_ID`))) join `FORM_WORKFLOW` `FW` on((`RP`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) join `FORM_WORKFLOW_LOG` `FWL` on(((`FWL`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` = `FWL`.`FORM_STATUS_ID`)))) join `ITEM` `I` on((`RPI`.`FROM_ITEM_ID` = `I`.`ITEM_ID`))) join `ITEM_SRP` `ITS` on((`RPI`.`FROM_ITEM_ID` = `ITS`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`I`.`UNIT_MEASUREMENT_ID` = `UM`.`UNITOFMEASUREMENT_ID`))) where ((`RP`.`COMPANY_ID` = `ITS`.`COMPANY_ID`) and (`ITS`.`ACTIVE` = 1)) group by `FW`.`FORM_WORKFLOW_ID`,`RPI`.`REPACKING_ITEM_ID` union all select `ITS`.`COMPANY_ID` AS `COMPANY_ID`,`SA`.`STOCK_ADJUSTMENT_ID` AS `STOCK_ADJUSTMENT_ID`,`SAI`.`STOCK_ADJUSTMENT_ITEM_ID` AS `STOCK_ADJUSTMENT_ITEM_ID`,'SA' AS `SA`,`SA`.`SA_DATE` AS `SA_DATE`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`CURRENT_STATUS_ID` AS `FW_STATUS_ID`,`SA`.`WAREHOUSE_ID` AS `WAREHOUSE_ID`,`SAI`.`ITEM_ID` AS `ITEM_ID`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,`I`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ACTIVE` AS `ACTIVE`,`SAI`.`QUANTITY` AS `QUANTITY`,`SAI`.`UNIT_COST` AS `UNIT_COST`,`UM`.`NAME` AS `NAME`,`ITS`.`SRP` AS `SRP`,`SA`.`CREATED_DATE` AS `CREATED_DATE`,`FWL`.`CREATED_DATE` AS `FWL_CD`,(`SAI`.`QUANTITY` * `SAI`.`UNIT_COST`) AS `AMOUNT` from ((((((`STOCK_ADJUSTMENT_ITEM` `SAI` join `STOCK_ADJUSTMENT` `SA` on((`SAI`.`STOCK_ADJUSTMENT_ID` = `SA`.`STOCK_ADJUSTMENT_ID`))) join `FORM_WORKFLOW` `FW` on((`SA`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) join `FORM_WORKFLOW_LOG` `FWL` on(((`FWL`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` = `FWL`.`FORM_STATUS_ID`)))) join `ITEM` `I` on((`SAI`.`ITEM_ID` = `I`.`ITEM_ID`))) join `ITEM_SRP` `ITS` on((`SAI`.`ITEM_ID` = `ITS`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`I`.`UNIT_MEASUREMENT_ID` = `UM`.`UNITOFMEASUREMENT_ID`))) where ((`SA`.`COMPANY_ID` = `ITS`.`COMPANY_ID`) and (`ITS`.`ACTIVE` = 1)) group by `FW`.`FORM_WORKFLOW_ID`,`SAI`.`STOCK_ADJUSTMENT_ITEM_ID` union all select `ITS`.`COMPANY_ID` AS `COMPANY_ID`,`CAPD`.`CAP_DELIVERY_ID` AS `CAP_DELIVERY_ID`,`CAPDI`.`CAP_DELIVERY_ITEM_ID` AS `CAP_DELIVERY_ITEM_ID`,'CAPD' AS `CAPD`,`CAPD`.`DELIVERY_DATE` AS `DELIVERY_DATE`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`CURRENT_STATUS_ID` AS `FW_STATUS_ID`,`CAPDI`.`WAREHOUSE_ID` AS `WAREHOUSE_ID`,`CAPDI`.`ITEM_ID` AS `ITEM_ID`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,`I`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ACTIVE` AS `ACTIVE`,-(`CAPDI`.`QUANTITY`) AS `-CAPDI.QUANTITY`,`CAPDI`.`UNIT_COST` AS `UNIT_COST`,`UM`.`NAME` AS `NAME`,`ITS`.`SRP` AS `SRP`,`CAPD`.`CREATED_DATE` AS `CREATED_DATE`,`FWL`.`CREATED_DATE` AS `FWL_CD`,(`CAPDI`.`QUANTITY` * `CAPDI`.`UNIT_COST`) AS `AMOUNT` from ((((((`CAP_DELIVERY_ITEM` `CAPDI` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CAPDI`.`CAP_DELIVERY_ID`))) join `FORM_WORKFLOW` `FW` on((`CAPD`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) join `FORM_WORKFLOW_LOG` `FWL` on(((`FWL`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` = `FWL`.`FORM_STATUS_ID`)))) join `ITEM` `I` on((`CAPDI`.`ITEM_ID` = `I`.`ITEM_ID`))) join `ITEM_SRP` `ITS` on((`CAPDI`.`ITEM_ID` = `ITS`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`I`.`UNIT_MEASUREMENT_ID` = `UM`.`UNITOFMEASUREMENT_ID`))) where ((`CAPD`.`COMPANY_ID` = `ITS`.`COMPANY_ID`) and (`ITS`.`ACTIVE` = 1)) group by `FW`.`FORM_WORKFLOW_ID`,`CAPDI`.`CAP_DELIVERY_ITEM_ID` union all select `PR`.`COMPANY_ID` AS `COMPANY_ID`,`PR`.`PROCESSING_REPORT_ID` AS `PROCESSING_REPORT_ID`,`PRRM`.`PR_RAW_MATERIALS_ITEM_ID` AS `PR_RAW_MATERIALS_ITEM_ID`,'PR-RM' AS `PR-RM`,`PR`.`DATE` AS `DATE`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`CURRENT_STATUS_ID` AS `FW_STATUS_ID`,`PRRM`.`WAREHOUSE_ID` AS `WAREHOUSE_ID`,`PRRM`.`ITEM_ID` AS `ITEM_ID`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,`I`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ACTIVE` AS `ACTIVE`,-(`PRRM`.`QUANTITY`) AS `-PRRM.QUANTITY`,`PRRM`.`UNIT_COST` AS `UNIT_COST`,`UM`.`NAME` AS `NAME`,coalesce((select `ISRP`.`SRP` from `ITEM_SRP` `ISRP` where ((`ISRP`.`ITEM_ID` = `PRRM`.`ITEM_ID`) and (`ISRP`.`COMPANY_ID` = `PR`.`COMPANY_ID`) and (`ISRP`.`ACTIVE` = 1))),0) AS `SRP`,`PR`.`CREATED_DATE` AS `CREATED_DATE`,`FWL`.`CREATED_DATE` AS `FWL_CD`,-((`PRRM`.`QUANTITY` * `PRRM`.`UNIT_COST`)) AS `AMOUNT` from (((((`PR_RAW_MATERIALS_ITEM` `PRRM` join `PROCESSING_REPORT` `PR` on((`PR`.`PROCESSING_REPORT_ID` = `PRRM`.`PROCESSING_REPORT_ID`))) join `FORM_WORKFLOW` `FW` on((`PR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) join `FORM_WORKFLOW_LOG` `FWL` on(((`FWL`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` = `FWL`.`FORM_STATUS_ID`)))) join `ITEM` `I` on((`PRRM`.`ITEM_ID` = `I`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`I`.`UNIT_MEASUREMENT_ID` = `UM`.`UNITOFMEASUREMENT_ID`))) group by `FW`.`FORM_WORKFLOW_ID`,`PRRM`.`PR_RAW_MATERIALS_ITEM_ID` union all select `PR`.`COMPANY_ID` AS `COMPANY_ID`,`PR`.`PROCESSING_REPORT_ID` AS `PROCESSING_REPORT_ID`,`PROM`.`PR_OTHER_MATERIALS_ITEM_ID` AS `PR_OTHER_MATERIALS_ITEM_ID`,'PR-OM' AS `PR-OM`,`PR`.`DATE` AS `DATE`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`CURRENT_STATUS_ID` AS `FW_STATUS_ID`,`PROM`.`WAREHOUSE_ID` AS `WAREHOUSE_ID`,`PROM`.`ITEM_ID` AS `ITEM_ID`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,`I`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ACTIVE` AS `ACTIVE`,-(`PROM`.`QUANTITY`) AS `-PROM.QUANTITY`,`PROM`.`UNIT_COST` AS `UNIT_COST`,`UM`.`NAME` AS `NAME`,coalesce((select `ISRP`.`SRP` from `ITEM_SRP` `ISRP` where ((`ISRP`.`ITEM_ID` = `PROM`.`ITEM_ID`) and (`ISRP`.`COMPANY_ID` = `PR`.`COMPANY_ID`) and (`ISRP`.`ACTIVE` = 1))),0) AS `SRP`,`PR`.`CREATED_DATE` AS `CREATED_DATE`,`FWL`.`CREATED_DATE` AS `FWL_CD`,-((`PROM`.`QUANTITY` * `PROM`.`UNIT_COST`)) AS `AMOUNT` from (((((`PR_OTHER_MATERIALS_ITEM` `PROM` join `PROCESSING_REPORT` `PR` on((`PR`.`PROCESSING_REPORT_ID` = `PROM`.`PROCESSING_REPORT_ID`))) join `FORM_WORKFLOW` `FW` on((`PR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) join `FORM_WORKFLOW_LOG` `FWL` on(((`FWL`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` = `FWL`.`FORM_STATUS_ID`)))) join `ITEM` `I` on((`PROM`.`ITEM_ID` = `I`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`I`.`UNIT_MEASUREMENT_ID` = `UM`.`UNITOFMEASUREMENT_ID`))) group by `FW`.`FORM_WORKFLOW_ID`,`PROM`.`PR_OTHER_MATERIALS_ITEM_ID` union all select `PR`.`COMPANY_ID` AS `COMPANY_ID`,`PR`.`PROCESSING_REPORT_ID` AS `PROCESSING_REPORT_ID`,`PRMP`.`PR_MAIN_PRODUCT_ID` AS `PR_MAIN_PRODUCT_ID`,'PR-MP' AS `PR-MP`,`PR`.`DATE` AS `DATE`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`CURRENT_STATUS_ID` AS `FW_STATUS_ID`,`PRMP`.`WAREHOUSE_ID` AS `WAREHOUSE_ID`,`PRMP`.`ITEM_ID` AS `ITEM_ID`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,`I`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ACTIVE` AS `ACTIVE`,`PRMP`.`QUANTITY` AS `QUANTITY`,`PRMP`.`UNIT_COST` AS `UNIT_COST`,`UM`.`NAME` AS `NAME`,coalesce((select `ISRP`.`SRP` from `ITEM_SRP` `ISRP` where ((`ISRP`.`ITEM_ID` = `PRMP`.`ITEM_ID`) and (`ISRP`.`COMPANY_ID` = `PR`.`COMPANY_ID`) and (`ISRP`.`ACTIVE` = 1))),0) AS `SRP`,`PR`.`CREATED_DATE` AS `CREATED_DATE`,`FWL`.`CREATED_DATE` AS `FWL_CD`,(`PRMP`.`QUANTITY` * `PRMP`.`UNIT_COST`) AS `AMOUNT` from (((((`PR_MAIN_PRODUCT` `PRMP` join `PROCESSING_REPORT` `PR` on((`PR`.`PROCESSING_REPORT_ID` = `PRMP`.`PROCESSING_REPORT_ID`))) join `FORM_WORKFLOW` `FW` on((`PR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) join `FORM_WORKFLOW_LOG` `FWL` on(((`FWL`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` = `FWL`.`FORM_STATUS_ID`)))) join `ITEM` `I` on((`PRMP`.`ITEM_ID` = `I`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`I`.`UNIT_MEASUREMENT_ID` = `UM`.`UNITOFMEASUREMENT_ID`))) group by `FW`.`FORM_WORKFLOW_ID`,`PRMP`.`PR_MAIN_PRODUCT_ID` union all select `PR`.`COMPANY_ID` AS `COMPANY_ID`,`PR`.`PROCESSING_REPORT_ID` AS `PROCESSING_REPORT_ID`,`PRBP`.`PR_BY_PRODUCT_ID` AS `PR_BY_PRODUCT_ID`,'PR-BP' AS `PR-BP`,`PR`.`DATE` AS `DATE`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`CURRENT_STATUS_ID` AS `FW_STATUS_ID`,`PRBP`.`WAREHOUSE_ID` AS `WAREHOUSE_ID`,`PRBP`.`ITEM_ID` AS `ITEM_ID`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,`I`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ACTIVE` AS `ACTIVE`,`PRBP`.`QUANTITY` AS `QUANTITY`,`PRBP`.`UNIT_COST` AS `UNIT_COST`,`UM`.`NAME` AS `NAME`,coalesce((select `ISRP`.`SRP` from `ITEM_SRP` `ISRP` where ((`ISRP`.`ITEM_ID` = `PRBP`.`ITEM_ID`) and (`ISRP`.`COMPANY_ID` = `PR`.`COMPANY_ID`) and (`ISRP`.`ACTIVE` = 1))),0) AS `SRP`,`PR`.`CREATED_DATE` AS `CREATED_DATE`,`FWL`.`CREATED_DATE` AS `FWL_CD`,0 AS `AMOUNT` from (((((`PR_BY_PRODUCT` `PRBP` join `PROCESSING_REPORT` `PR` on((`PR`.`PROCESSING_REPORT_ID` = `PRBP`.`PROCESSING_REPORT_ID`))) join `FORM_WORKFLOW` `FW` on((`PR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) join `FORM_WORKFLOW_LOG` `FWL` on(((`FWL`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` = `FWL`.`FORM_STATUS_ID`)))) join `ITEM` `I` on((`PRBP`.`ITEM_ID` = `I`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`I`.`UNIT_MEASUREMENT_ID` = `UM`.`UNITOFMEASUREMENT_ID`))) group by `FW`.`FORM_WORKFLOW_ID`,`PRBP`.`PR_BY_PRODUCT_ID` */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `V_ITEM_SALES_CUSTOMER`
--

/*!50001 DROP VIEW IF EXISTS `V_ITEM_SALES_CUSTOMER`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `V_ITEM_SALES_CUSTOMER` AS select `C`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`AR_CUSTOMER_ID` AS `AR_CUSTOMER_ID`,`ACA`.`AR_CUSTOMER_ACCOUNT_ID` AS `AR_CUSTOMER_ACCOUNT_ID`,`IC`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ITEM_ID` AS `ITEM_ID`,`CS`.`RECEIPT_DATE` AS `DATE`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,concat('CS ',`CS`.`CS_NUMBER`) AS `REF_NO`,`CSI`.`QUANTITY` AS `QUANTITY`,`UM`.`NAME` AS `UOM`,`CSI`.`SRP` AS `SRP`,(`CSI`.`QUANTITY` * `CSI`.`SRP`) AS `AMOUNT`,coalesce(`CSI`.`DISCOUNT`,0) AS `DISCOUNT`,((`CSI`.`QUANTITY` * `CSI`.`SRP`) - coalesce(`CSI`.`DISCOUNT`,0)) AS `NET_AMOUNT` from ((((((((`CASH_SALE_ITEM` `CSI` join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSI`.`CASH_SALE_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSI`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`UM`.`UNITOFMEASUREMENT_ID` = `I`.`UNIT_MEASUREMENT_ID`))) join `COMPANY` `C` on((`C`.`COMPANY_ID` = `CS`.`COMPANY_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `CS`.`AR_CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CS`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM_CATEGORY` `IC` on((`IC`.`ITEM_CATEGORY_ID` = `I`.`ITEM_CATEGORY_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `CS`.`FORM_WORKFLOW_ID`))) where ((`FW`.`IS_COMPLETE` = 1) and (`CS`.`CASH_SALE_TYPE_ID` = 1)) union all select `C`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`AR_CUSTOMER_ID` AS `AR_CUSTOMER_ID`,`ACA`.`AR_CUSTOMER_ACCOUNT_ID` AS `AR_CUSTOMER_ACCOUNT_ID`,`IC`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ITEM_ID` AS `ITEM_ID`,`CS`.`RECEIPT_DATE` AS `DATE`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,concat('CS-IS ',`CS`.`CS_NUMBER`) AS `REF_NO`,`CSI`.`QUANTITY` AS `QUANTITY`,`UM`.`NAME` AS `UOM`,`CSI`.`SRP` AS `SRP`,(`CSI`.`QUANTITY` * `CSI`.`SRP`) AS `AMOUNT`,coalesce(`CSI`.`DISCOUNT`,0) AS `DISCOUNT`,((`CSI`.`QUANTITY` * `CSI`.`SRP`) - coalesce(`CSI`.`DISCOUNT`,0)) AS `NET_AMOUNT` from ((((((((`CASH_SALE_ITEM` `CSI` join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSI`.`CASH_SALE_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSI`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`UM`.`UNITOFMEASUREMENT_ID` = `I`.`UNIT_MEASUREMENT_ID`))) join `COMPANY` `C` on((`C`.`COMPANY_ID` = `CS`.`COMPANY_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `CS`.`AR_CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CS`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM_CATEGORY` `IC` on((`IC`.`ITEM_CATEGORY_ID` = `I`.`ITEM_CATEGORY_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `CS`.`FORM_WORKFLOW_ID`))) where ((`FW`.`IS_COMPLETE` = 1) and (`CS`.`CASH_SALE_TYPE_ID` = 3)) union all select `C`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`AR_CUSTOMER_ID` AS `AR_CUSTOMER_ID`,`ACA`.`AR_CUSTOMER_ACCOUNT_ID` AS `AR_CUSTOMER_ACCOUNT_ID`,`IC`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ITEM_ID` AS `ITEM_ID`,`CS`.`RECEIPT_DATE` AS `DATE`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,concat('CS-P ',`CS`.`CS_NUMBER`) AS `REF_NO`,`CSI`.`QUANTITY` AS `QUANTITY`,`UM`.`NAME` AS `UOM`,`CSI`.`SRP` AS `SRP`,(`CSI`.`QUANTITY` * `CSI`.`SRP`) AS `AMOUNT`,coalesce(`CSI`.`DISCOUNT`,0) AS `DISCOUNT`,((`CSI`.`QUANTITY` * `CSI`.`SRP`) - coalesce(`CSI`.`DISCOUNT`,0)) AS `NET_AMOUNT` from ((((((((`CASH_SALE_ITEM` `CSI` join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSI`.`CASH_SALE_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSI`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`UM`.`UNITOFMEASUREMENT_ID` = `I`.`UNIT_MEASUREMENT_ID`))) join `COMPANY` `C` on((`C`.`COMPANY_ID` = `CS`.`COMPANY_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `CS`.`AR_CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CS`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM_CATEGORY` `IC` on((`IC`.`ITEM_CATEGORY_ID` = `I`.`ITEM_CATEGORY_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `CS`.`FORM_WORKFLOW_ID`))) where ((`FW`.`IS_COMPLETE` = 1) and (`CS`.`CASH_SALE_TYPE_ID` = 6)) union all select `C`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`AR_CUSTOMER_ID` AS `AR_CUSTOMER_ID`,`ACA`.`AR_CUSTOMER_ACCOUNT_ID` AS `AR_CUSTOMER_ACCOUNT_ID`,`IC`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ITEM_ID` AS `ITEM_ID`,`ART`.`TRANSACTION_DATE` AS `DATE`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,concat('AS ',`ART`.`SEQUENCE_NO`) AS `REF_NO`,`ASI`.`QUANTITY` AS `QUANTITY`,`UM`.`NAME` AS `UOM`,`ASI`.`SRP` AS `SRP`,(`ASI`.`QUANTITY` * `ASI`.`SRP`) AS `AMOUNT`,coalesce(`ASI`.`DISCOUNT`,0) AS `DISCOUNT`,((`ASI`.`QUANTITY` * `ASI`.`SRP`) - coalesce(`ASI`.`DISCOUNT`,0)) AS `NET_AMOUNT` from ((((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `ASI`.`AR_TRANSACTION_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `ASI`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`UM`.`UNITOFMEASUREMENT_ID` = `I`.`UNIT_MEASUREMENT_ID`))) join `COMPANY` `C` on((`C`.`COMPANY_ID` = `ART`.`COMPANY_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `ART`.`CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `ITEM_CATEGORY` `IC` on((`IC`.`ITEM_CATEGORY_ID` = `I`.`ITEM_CATEGORY_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `ART`.`FORM_WORKFLOW_ID`))) where ((`ART`.`AR_TRANSACTION_TYPE_ID` = 4) and (`FW`.`IS_COMPLETE` = 1)) union all select `C`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`AR_CUSTOMER_ID` AS `AR_CUSTOMER_ID`,`ACA`.`AR_CUSTOMER_ACCOUNT_ID` AS `AR_CUSTOMER_ACCOUNT_ID`,`IC`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ITEM_ID` AS `ITEM_ID`,`ART`.`TRANSACTION_DATE` AS `DATE`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,concat('AS ',`ART`.`SEQUENCE_NO`) AS `REF_NO`,`ASI`.`QUANTITY` AS `QUANTITY`,`UM`.`NAME` AS `UOM`,`ASI`.`SRP` AS `SRP`,(`ASI`.`QUANTITY` * `ASI`.`SRP`) AS `AMOUNT`,coalesce(`ASI`.`DISCOUNT`,0) AS `DISCOUNT`,((`ASI`.`QUANTITY` * `ASI`.`SRP`) - coalesce(`ASI`.`DISCOUNT`,0)) AS `NET_AMOUNT` from ((((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `ASI`.`AR_TRANSACTION_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `ASI`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`UM`.`UNITOFMEASUREMENT_ID` = `I`.`UNIT_MEASUREMENT_ID`))) join `COMPANY` `C` on((`C`.`COMPANY_ID` = `ART`.`COMPANY_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `ART`.`CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `ITEM_CATEGORY` `IC` on((`IC`.`ITEM_CATEGORY_ID` = `I`.`ITEM_CATEGORY_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `ART`.`FORM_WORKFLOW_ID`))) where ((`ART`.`AR_TRANSACTION_TYPE_ID` = 12) and (`FW`.`IS_COMPLETE` = 1)) union all select `C`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`AR_CUSTOMER_ID` AS `AR_CUSTOMER_ID`,`ACA`.`AR_CUSTOMER_ACCOUNT_ID` AS `AR_CUSTOMER_ACCOUNT_ID`,`IC`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ITEM_ID` AS `ITEM_ID`,`ART`.`TRANSACTION_DATE` AS `DATE`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,concat('AS-IS ',`ART`.`SEQUENCE_NO`) AS `REF_NO`,`ASI`.`QUANTITY` AS `QUANTITY`,`UM`.`NAME` AS `UOM`,`ASI`.`SRP` AS `SRP`,(`ASI`.`QUANTITY` * `ASI`.`SRP`) AS `AMOUNT`,coalesce(`ASI`.`DISCOUNT`,0) AS `DISCOUNT`,((`ASI`.`QUANTITY` * `ASI`.`SRP`) - coalesce(`ASI`.`DISCOUNT`,0)) AS `NET_AMOUNT` from ((((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `ASI`.`AR_TRANSACTION_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `ASI`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`UM`.`UNITOFMEASUREMENT_ID` = `I`.`UNIT_MEASUREMENT_ID`))) join `COMPANY` `C` on((`C`.`COMPANY_ID` = `ART`.`COMPANY_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `ART`.`CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `ITEM_CATEGORY` `IC` on((`IC`.`ITEM_CATEGORY_ID` = `I`.`ITEM_CATEGORY_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `ART`.`FORM_WORKFLOW_ID`))) where ((`ART`.`AR_TRANSACTION_TYPE_ID` = 10) and (`FW`.`IS_COMPLETE` = 1)) union all select `C`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`AR_CUSTOMER_ID` AS `AR_CUSTOMER_ID`,`ACA`.`AR_CUSTOMER_ACCOUNT_ID` AS `AR_CUSTOMER_ACCOUNT_ID`,`IC`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ITEM_ID` AS `ITEM_ID`,`CSR`.`DATE` AS `DATE`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,concat('CSR ',`CSR`.`CSR_NUMBER`) AS `REF_NO`,`CSRI`.`QUANTITY` AS `QUANTITY`,`UM`.`NAME` AS `UOM`,`CSRI`.`SRP` AS `SRP`,(`CSRI`.`QUANTITY` * `CSRI`.`SRP`) AS `AMOUNT`,coalesce(`CSRI`.`DISCOUNT`,0) AS `DISCOUNT`,((`CSRI`.`QUANTITY` * `CSRI`.`SRP`) - coalesce(`CSRI`.`DISCOUNT`,0)) AS `NET_AMOUNT` from ((((((((`CASH_SALE_RETURN_ITEM` `CSRI` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `CSRI`.`CASH_SALE_RETURN_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSRI`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`UM`.`UNITOFMEASUREMENT_ID` = `I`.`UNIT_MEASUREMENT_ID`))) join `COMPANY` `C` on((`C`.`COMPANY_ID` = `CSR`.`COMPANY_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `CSR`.`AR_CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CSR`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM_CATEGORY` `IC` on((`IC`.`ITEM_CATEGORY_ID` = `I`.`ITEM_CATEGORY_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `CSR`.`FORM_WORKFLOW_ID`))) where ((`FW`.`IS_COMPLETE` = 1) and (`CSR`.`CASH_SALE_TYPE_ID` = 1)) union all select `C`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`AR_CUSTOMER_ID` AS `AR_CUSTOMER_ID`,`ACA`.`AR_CUSTOMER_ACCOUNT_ID` AS `AR_CUSTOMER_ACCOUNT_ID`,`IC`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ITEM_ID` AS `ITEM_ID`,`CSR`.`DATE` AS `DATE`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,concat('CSR-IS ',`CSR`.`CSR_NUMBER`) AS `REF_NO`,`CSRI`.`QUANTITY` AS `QUANTITY`,`UM`.`NAME` AS `UOM`,`CSRI`.`SRP` AS `SRP`,(`CSRI`.`QUANTITY` * `CSRI`.`SRP`) AS `AMOUNT`,coalesce(`CSRI`.`DISCOUNT`,0) AS `DISCOUNT`,((`CSRI`.`QUANTITY` * `CSRI`.`SRP`) - coalesce(`CSRI`.`DISCOUNT`,0)) AS `NET_AMOUNT` from ((((((((`CASH_SALE_RETURN_ITEM` `CSRI` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `CSRI`.`CASH_SALE_RETURN_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSRI`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`UM`.`UNITOFMEASUREMENT_ID` = `I`.`UNIT_MEASUREMENT_ID`))) join `COMPANY` `C` on((`C`.`COMPANY_ID` = `CSR`.`COMPANY_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `CSR`.`AR_CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CSR`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM_CATEGORY` `IC` on((`IC`.`ITEM_CATEGORY_ID` = `I`.`ITEM_CATEGORY_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `CSR`.`FORM_WORKFLOW_ID`))) where ((`FW`.`IS_COMPLETE` = 1) and (`CSR`.`CASH_SALE_TYPE_ID` = 3)) union all select `C`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`AR_CUSTOMER_ID` AS `AR_CUSTOMER_ID`,`ACA`.`AR_CUSTOMER_ACCOUNT_ID` AS `AR_CUSTOMER_ACCOUNT_ID`,`IC`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ITEM_ID` AS `ITEM_ID`,`ART`.`TRANSACTION_DATE` AS `DATE`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,concat('ASR ',`ART`.`SEQUENCE_NO`) AS `REF_NO`,`ASI`.`QUANTITY` AS `QUANTITY`,`UM`.`NAME` AS `UOM`,`ASI`.`SRP` AS `SRP`,(`ASI`.`QUANTITY` * `ASI`.`SRP`) AS `AMOUNT`,coalesce(`ASI`.`DISCOUNT`,0) AS `DISCOUNT`,((`ASI`.`QUANTITY` * `ASI`.`SRP`) - coalesce(`ASI`.`DISCOUNT`,0)) AS `NET_AMOUNT` from ((((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `ASI`.`AR_TRANSACTION_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `ASI`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`UM`.`UNITOFMEASUREMENT_ID` = `I`.`UNIT_MEASUREMENT_ID`))) join `COMPANY` `C` on((`C`.`COMPANY_ID` = `ART`.`COMPANY_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `ART`.`CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `ITEM_CATEGORY` `IC` on((`IC`.`ITEM_CATEGORY_ID` = `I`.`ITEM_CATEGORY_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `ART`.`FORM_WORKFLOW_ID`))) where ((`ART`.`AR_TRANSACTION_TYPE_ID` = 5) and (`FW`.`IS_COMPLETE` = 1)) union all select `C`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`AR_CUSTOMER_ID` AS `AR_CUSTOMER_ID`,`ACA`.`AR_CUSTOMER_ACCOUNT_ID` AS `AR_CUSTOMER_ACCOUNT_ID`,`IC`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ITEM_ID` AS `ITEM_ID`,`ART`.`TRANSACTION_DATE` AS `DATE`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,concat('ASR-IS',`ART`.`SEQUENCE_NO`) AS `REF_NO`,`ASI`.`QUANTITY` AS `QUANTITY`,`UM`.`NAME` AS `UOM`,`ASI`.`SRP` AS `SRP`,(`ASI`.`QUANTITY` * `ASI`.`SRP`) AS `AMOUNT`,coalesce(`ASI`.`DISCOUNT`,0) AS `DISCOUNT`,((`ASI`.`QUANTITY` * `ASI`.`SRP`) - coalesce(`ASI`.`DISCOUNT`,0)) AS `NET_AMOUNT` from ((((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `ASI`.`AR_TRANSACTION_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `ASI`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`UM`.`UNITOFMEASUREMENT_ID` = `I`.`UNIT_MEASUREMENT_ID`))) join `COMPANY` `C` on((`C`.`COMPANY_ID` = `ART`.`COMPANY_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `ART`.`CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `ITEM_CATEGORY` `IC` on((`IC`.`ITEM_CATEGORY_ID` = `I`.`ITEM_CATEGORY_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `ART`.`FORM_WORKFLOW_ID`))) where ((`ART`.`AR_TRANSACTION_TYPE_ID` = 11) and (`FW`.`IS_COMPLETE` = 1)) union all select `C`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`AR_CUSTOMER_ID` AS `AR_CUSTOMER_ID`,`ACA`.`AR_CUSTOMER_ACCOUNT_ID` AS `AR_CUSTOMER_ACCOUNT_ID`,`IC`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ITEM_ID` AS `ITEM_ID`,`ART`.`TRANSACTION_DATE` AS `DATE`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,concat('ASR ',`ART`.`SEQUENCE_NO`) AS `REF_NO`,`ASI`.`QUANTITY` AS `QUANTITY`,`UM`.`NAME` AS `UOM`,`ASI`.`SRP` AS `SRP`,(`ASI`.`QUANTITY` * `ASI`.`SRP`) AS `AMOUNT`,coalesce(`ASI`.`DISCOUNT`,0) AS `DISCOUNT`,((`ASI`.`QUANTITY` * `ASI`.`SRP`) - coalesce(`ASI`.`DISCOUNT`,0)) AS `NET_AMOUNT` from ((((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `ASI`.`AR_TRANSACTION_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `ASI`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`UM`.`UNITOFMEASUREMENT_ID` = `I`.`UNIT_MEASUREMENT_ID`))) join `COMPANY` `C` on((`C`.`COMPANY_ID` = `ART`.`COMPANY_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `ART`.`CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `ITEM_CATEGORY` `IC` on((`IC`.`ITEM_CATEGORY_ID` = `I`.`ITEM_CATEGORY_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `ART`.`FORM_WORKFLOW_ID`))) where ((`ART`.`AR_TRANSACTION_TYPE_ID` = 13) and (`FW`.`IS_COMPLETE` = 1)) union all select `C`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`AR_CUSTOMER_ID` AS `AR_CUSTOMER_ID`,`ACA`.`AR_CUSTOMER_ACCOUNT_ID` AS `AR_CUSTOMER_ACCOUNT_ID`,`IC`.`ITEM_CATEGORY_ID` AS `ITEM_CATEGORY_ID`,`I`.`ITEM_ID` AS `ITEM_ID`,`CAPD`.`DELIVERY_DATE` AS `DATE`,`I`.`STOCK_CODE` AS `STOCK_CODE`,`I`.`DESCRIPTION` AS `DESCRIPTION`,concat((case when (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 1) then 'PIAD ' when (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 3) then 'PIAD - IS ' when (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 5) then 'PIAD - WIPSO ' end),`CAPD`.`SALES_INVOICE_NO`) AS `REF_NO`,`CAPDI`.`QUANTITY` AS `QUANTITY`,`UM`.`NAME` AS `UOM`,`CAPDI`.`SRP` AS `SRP`,(`CAPDI`.`QUANTITY` * `CAPDI`.`SRP`) AS `AMOUNT`,coalesce(`CAPDI`.`DISCOUNT`,0) AS `DISCOUNT`,((`CAPDI`.`QUANTITY` * `CAPDI`.`SRP`) - coalesce(`CAPDI`.`DISCOUNT`,0)) AS `NET_AMOUNT` from ((((((((`CAP_DELIVERY_ITEM` `CAPDI` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CAPDI`.`CAP_DELIVERY_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CAPDI`.`ITEM_ID`))) join `UNIT_MEASUREMENT` `UM` on((`UM`.`UNITOFMEASUREMENT_ID` = `I`.`UNIT_MEASUREMENT_ID`))) join `COMPANY` `C` on((`C`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`))) join `AR_CUSTOMER` `AC` on((`AC`.`AR_CUSTOMER_ID` = `CAPD`.`AR_CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CAPD`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM_CATEGORY` `IC` on((`IC`.`ITEM_CATEGORY_ID` = `I`.`ITEM_CATEGORY_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `CAPD`.`FORM_WORKFLOW_ID`))) where (`FW`.`IS_COMPLETE` = 1) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `V_JOURNAL_ENTRY`
--

/*!50001 DROP VIEW IF EXISTS `V_JOURNAL_ENTRY`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `V_JOURNAL_ENTRY` AS select 'GENERAL LEDGER' AS `SOURCE`,`GL`.`GENERAL_LEDGER_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`GL`.`GL_DATE` AS `GL_DATE`,concat('JV',`GL`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,`GLE`.`DESCRIPTION` AS `DESCRIPTION`,`GLE`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((`GL_ENTRY` `GLE` join `GENERAL_LEDGER` `GL` on((`GL`.`GENERAL_LEDGER_ID` = `GLE`.`GENERAL_LEDGER_ID`))) join `ACCOUNT_COMBINATION` `AC` on((`AC`.`ACCOUNT_COMBINATION_ID` = `GLE`.`ACCOUNT_COMBINATION_ID`))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`GL`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`GLE`.`IS_DEBIT` = 1) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'GENERAL LEDGER' AS `SOURCE`,`GL`.`GENERAL_LEDGER_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`GL`.`GL_DATE` AS `GL_DATE`,concat('JV',`GL`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,`GLE`.`DESCRIPTION` AS `DESCRIPTION`,0 AS `DEBIT`,`GLE`.`AMOUNT` AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((`GL_ENTRY` `GLE` join `GENERAL_LEDGER` `GL` on((`GL`.`GENERAL_LEDGER_ID` = `GLE`.`GENERAL_LEDGER_ID`))) join `ACCOUNT_COMBINATION` `AC` on((`AC`.`ACCOUNT_COMBINATION_ID` = `GLE`.`ACCOUNT_COMBINATION_ID`))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`GL`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`GLE`.`IS_DEBIT` = 0) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'AP INVOICE' AS `SOURCE`,`AI`.`AP_INVOICE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AI`.`GL_DATE` AS `GL_DATE`,`AI`.`INVOICE_NUMBER` AS `REFERENCE_NUMBER`,`AI`.`DESCRIPTION` AS `DESCRIPTION`,0 AS `DEBIT`,`AI`.`AMOUNT` AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((`AP_INVOICE` `AI` join `SUPPLIER_ACCOUNT` `SA` on((`SA`.`SUPPLIER_ACCOUNT_ID` = `AI`.`SUPPLIER_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on((`AC`.`ACCOUNT_COMBINATION_ID` = `SA`.`DEFAULT_CREDIT_AC_ID`))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`AI`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`AI`.`AMOUNT` >= 0) and (`AI`.`INVOICE_TYPE_ID` <> 5) and (`AI`.`INVOICE_TYPE_ID` <> 6) and (`AI`.`INVOICE_TYPE_ID` <> 7) and (`AI`.`INVOICE_TYPE_ID` <> 8) and (`AC`.`COMPANY_ID` = `SA`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'AP INVOICE' AS `SOURCE`,`AI`.`AP_INVOICE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AI`.`GL_DATE` AS `GL_DATE`,`AI`.`INVOICE_NUMBER` AS `REFERENCE_NUMBER`,`AI`.`DESCRIPTION` AS `DESCRIPTION`,-(`AI`.`AMOUNT`) AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((`AP_INVOICE` `AI` join `SUPPLIER_ACCOUNT` `SA` on((`SA`.`SUPPLIER_ACCOUNT_ID` = `AI`.`SUPPLIER_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on((`AC`.`ACCOUNT_COMBINATION_ID` = `SA`.`DEFAULT_CREDIT_AC_ID`))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`AI`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`AI`.`AMOUNT` < 0) and (`AI`.`INVOICE_TYPE_ID` <> 5) and (`AI`.`INVOICE_TYPE_ID` <> 6) and (`AI`.`INVOICE_TYPE_ID` <> 7) and (`AI`.`INVOICE_TYPE_ID` <> 8) and (`AC`.`COMPANY_ID` = `SA`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'AP INVOICE' AS `SOURCE`,`AI`.`AP_INVOICE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AI`.`GL_DATE` AS `GL_DATE`,`AI`.`INVOICE_NUMBER` AS `REFERENCE_NUMBER`,`AL`.`DESCRIPTION` AS `DESCRIPTION`,`AL`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((`AP_LINE` `AL` join `AP_INVOICE` `AI` on((`AI`.`AP_INVOICE_ID` = `AL`.`AP_INVOICE_ID`))) join `ACCOUNT_COMBINATION` `AC` on((`AC`.`ACCOUNT_COMBINATION_ID` = `AL`.`ACCOUNT_COMBINATION_ID`))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`AI`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`AL`.`AMOUNT` >= 0) and (`AI`.`INVOICE_TYPE_ID` <> 5) and (`AI`.`INVOICE_TYPE_ID` <> 6) and (`AI`.`INVOICE_TYPE_ID` <> 7) and (`AI`.`INVOICE_TYPE_ID` <> 8) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'AP INVOICE' AS `SOURCE`,`AI`.`AP_INVOICE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AI`.`GL_DATE` AS `GL_DATE`,`AI`.`INVOICE_NUMBER` AS `REFERENCE_NUMBER`,`AL`.`DESCRIPTION` AS `DESCRIPTION`,0 AS `DEBIT`,-(`AL`.`AMOUNT`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((`AP_LINE` `AL` join `AP_INVOICE` `AI` on((`AI`.`AP_INVOICE_ID` = `AL`.`AP_INVOICE_ID`))) join `ACCOUNT_COMBINATION` `AC` on((`AC`.`ACCOUNT_COMBINATION_ID` = `AL`.`ACCOUNT_COMBINATION_ID`))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`AI`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`AL`.`AMOUNT` < 0) and (`AI`.`INVOICE_TYPE_ID` <> 5) and (`AI`.`INVOICE_TYPE_ID` <> 6) and (`AI`.`INVOICE_TYPE_ID` <> 7) and (`AI`.`INVOICE_TYPE_ID` <> 8) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'AP PAYMENT' AS `SOURCE`,`AI`.`AP_PAYMENT_INVOICE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AP`.`CHECK_DATE` AS `GL_DATE`,`AP`.`CHECK_NUMBER` AS `REFERENCE_NUMBER`,concat((case `API`.`INVOICE_TYPE_ID` when 5 then concat('RR-',`API`.`SEQUENCE_NO`) when 6 then concat('RTS-',`API`.`SEQUENCE_NO`) when 8 then concat('RR-RM ',`API`.`SEQUENCE_NO`) else `API`.`INVOICE_NUMBER` end)) AS `DESCSRIPTION`,0 AS `DEBIT`,`AI`.`PAID_AMOUNT` AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,1 AS `IS_POSTED` from ((((((`AP_PAYMENT_INVOICE` `AI` join `AP_PAYMENT` `AP` on((`AP`.`AP_PAYMENT_ID` = `AI`.`AP_PAYMENT_ID`))) join `BANK_ACCOUNT` `BA` on((`BA`.`BANK_ACCOUNT_ID` = `AP`.`BANK_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on((`AC`.`ACCOUNT_COMBINATION_ID` = `BA`.`CASH_IN_BANK_ACCT_ID`))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `AP_INVOICE` `API` on((`API`.`AP_INVOICE_ID` = `AI`.`AP_INVOICE_ID`))) join `FORM_WORKFLOW` `FW` on((`AP`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`AP`.`AMOUNT` <> 0) and (`AI`.`PAID_AMOUNT` > 0) and (`AP`.`COMPANY_ID` = `AC`.`COMPANY_ID`)) union all select 'AP PAYMENT' AS `SOURCE`,`AI`.`AP_PAYMENT_INVOICE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AP`.`CHECK_DATE` AS `GL_DATE`,`AP`.`CHECK_NUMBER` AS `REFERENCE_NUMBER`,concat((case `API`.`INVOICE_TYPE_ID` when 5 then concat('RR-',`API`.`SEQUENCE_NO`) when 6 then concat('RTS-',`API`.`SEQUENCE_NO`) when 8 then concat('RR-RM ',`API`.`SEQUENCE_NO`) else `API`.`INVOICE_NUMBER` end)) AS `DESCSRIPTION`,-(`AI`.`PAID_AMOUNT`) AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,1 AS `IS_POSTED` from ((((((`AP_PAYMENT_INVOICE` `AI` join `AP_PAYMENT` `AP` on((`AP`.`AP_PAYMENT_ID` = `AI`.`AP_PAYMENT_ID`))) join `BANK_ACCOUNT` `BA` on((`BA`.`BANK_ACCOUNT_ID` = `AP`.`BANK_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on((`AC`.`ACCOUNT_COMBINATION_ID` = `BA`.`CASH_IN_BANK_ACCT_ID`))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `AP_INVOICE` `API` on((`API`.`AP_INVOICE_ID` = `AI`.`AP_INVOICE_ID`))) join `FORM_WORKFLOW` `FW` on((`AP`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`AP`.`AMOUNT` <> 0) and (`AI`.`PAID_AMOUNT` < 0) and (`AP`.`COMPANY_ID` = `AC`.`COMPANY_ID`)) union all select 'AP PAYMENT' AS `SOURCE`,`AI`.`AP_PAYMENT_INVOICE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AP`.`CHECK_DATE` AS `GL_DATE`,`AP`.`CHECK_NUMBER` AS `REFERENCE_NUMBER`,concat((case `API`.`INVOICE_TYPE_ID` when 5 then concat('RR-',`API`.`SEQUENCE_NO`) when 6 then concat('RTS-',`API`.`SEQUENCE_NO`) when 8 then concat('RR-RM ',`API`.`SEQUENCE_NO`) else `API`.`INVOICE_NUMBER` end)) AS `DESCSRIPTION`,0 AS `DEBIT`,-(`AI`.`PAID_AMOUNT`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,1 AS `IS_POSTED` from ((((((`AP_PAYMENT_INVOICE` `AI` join `AP_PAYMENT` `AP` on((`AP`.`AP_PAYMENT_ID` = `AI`.`AP_PAYMENT_ID`))) join `SUPPLIER_ACCOUNT` `SA` on((`SA`.`SUPPLIER_ACCOUNT_ID` = `AP`.`SUPPLIER_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on((`AC`.`ACCOUNT_COMBINATION_ID` = `SA`.`DEFAULT_CREDIT_AC_ID`))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `AP_INVOICE` `API` on((`API`.`AP_INVOICE_ID` = `AI`.`AP_INVOICE_ID`))) join `FORM_WORKFLOW` `FW` on((`AP`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`AI`.`PAID_AMOUNT` < 0) and (`AP`.`COMPANY_ID` = `AC`.`COMPANY_ID`)) union all select 'AP PAYMENT' AS `SOURCE`,`AI`.`AP_PAYMENT_INVOICE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AP`.`CHECK_DATE` AS `GL_DATE`,`AP`.`CHECK_NUMBER` AS `REFERENCE_NUMBER`,concat((case `API`.`INVOICE_TYPE_ID` when 5 then concat('RR-',`API`.`SEQUENCE_NO`) when 6 then concat('RTS-',`API`.`SEQUENCE_NO`) when 8 then concat('RR-RM ',`API`.`SEQUENCE_NO`) else `API`.`INVOICE_NUMBER` end)) AS `DESCSRIPTION`,`AI`.`PAID_AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,1 AS `IS_POSTED` from ((((((`AP_PAYMENT_INVOICE` `AI` join `AP_PAYMENT` `AP` on((`AP`.`AP_PAYMENT_ID` = `AI`.`AP_PAYMENT_ID`))) join `SUPPLIER_ACCOUNT` `SA` on((`SA`.`SUPPLIER_ACCOUNT_ID` = `AP`.`SUPPLIER_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on((`AC`.`ACCOUNT_COMBINATION_ID` = `SA`.`DEFAULT_CREDIT_AC_ID`))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `AP_INVOICE` `API` on((`API`.`AP_INVOICE_ID` = `AI`.`AP_INVOICE_ID`))) join `FORM_WORKFLOW` `FW` on((`AP`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`AI`.`PAID_AMOUNT` >= 0) and (`AP`.`COMPANY_ID` = `AC`.`COMPANY_ID`)) union all select 'AR MISCELLANEOUS' AS `SOURCE`,`AM`.`AR_MISCELLANEOUS_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AM`.`MATURITY_DATE` AS `GL_DATE`,`AM`.`RECEIPT_NUMBER` AS `REFERENCE_NUMBER`,`AM`.`DESCRIPTION` AS `DESCRIPTION`,`AM`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,1 AS `IS_POSTED` from ((((`AR_MISCELLANEOUS` `AM` join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `AM`.`RECEIPT_METHOD_ID`))) join `ACCOUNT_COMBINATION` `AC` on((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`DEBIT_ACCOUNT_COMBINATION_ID`))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`AM`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`RM`.`DEBIT_ACCOUNT_COMBINATION_ID` is not null) and (`AC`.`COMPANY_ID` = `RM`.`COMPANY_ID`)) union all select 'AR MISCELLANEOUS' AS `SOURCE`,`AM`.`AR_MISCELLANEOUS_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AM`.`MATURITY_DATE` AS `GL_DATE`,`AM`.`RECEIPT_NUMBER` AS `REFERENCE_NUMBER`,`AM`.`DESCRIPTION` AS `DESCRIPTION`,`AM`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,1 AS `IS_POSTED` from (((((`AR_MISCELLANEOUS` `AM` join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `AM`.`RECEIPT_METHOD_ID`))) join `BANK_ACCOUNT` `BA` on((`BA`.`BANK_ACCOUNT_ID` = `RM`.`BANK_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on((`AC`.`ACCOUNT_COMBINATION_ID` = `BA`.`CASH_IN_BANK_ACCT_ID`))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`AM`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`RM`.`BANK_ACCOUNT_ID` is not null) and (`AC`.`COMPANY_ID` = `RM`.`COMPANY_ID`)) union all select 'AR MISCELLANEOUS' AS `SOURCE`,`AM`.`AR_MISCELLANEOUS_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AM`.`MATURITY_DATE` AS `GL_DATE`,`AM`.`RECEIPT_NUMBER` AS `REFERENCE_NUMBER`,`AM`.`DESCRIPTION` AS `DESCRIPTION`,-(`AML`.`AMOUNT`) AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,1 AS `IS_POSTED` from (((((`AR_MISCELLANEOUS_LINE` `AML` join `AR_MISCELLANEOUS` `AM` on((`AM`.`AR_MISCELLANEOUS_ID` = `AML`.`AR_MISCELLANEOUS_ID`))) join `SERVICE_SETTING` `ALS` on((`ALS`.`SERVICE_SETTING_ID` = `AML`.`SERVICE_SETTING_ID`))) join `ACCOUNT_COMBINATION` `AC` on((`AC`.`ACCOUNT_COMBINATION_ID` = `ALS`.`ACCOUNT_COMBINATION_ID`))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`AM`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`AML`.`AMOUNT` < 0)) union all select 'AR MISCELLANEOUS' AS `SOURCE`,`AM`.`AR_MISCELLANEOUS_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AM`.`MATURITY_DATE` AS `GL_DATE`,`AM`.`RECEIPT_NUMBER` AS `REFERENCE_NUMBER`,`AM`.`DESCRIPTION` AS `DESCRIPTION`,0 AS `DEBIT`,`AML`.`AMOUNT` AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,1 AS `IS_POSTED` from (((((`AR_MISCELLANEOUS_LINE` `AML` join `AR_MISCELLANEOUS` `AM` on((`AM`.`AR_MISCELLANEOUS_ID` = `AML`.`AR_MISCELLANEOUS_ID`))) join `SERVICE_SETTING` `ALS` on((`ALS`.`SERVICE_SETTING_ID` = `AML`.`SERVICE_SETTING_ID`))) join `ACCOUNT_COMBINATION` `AC` on((`AC`.`ACCOUNT_COMBINATION_ID` = `ALS`.`ACCOUNT_COMBINATION_ID`))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`AM`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`AML`.`AMOUNT` >= 0)) union all select 'AR TRANSACTION' AS `SOURCE`,`AT`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AT`.`GL_DATE` AS `GL_DATE`,`AT`.`TRANSACTION_NUMBER` AS `REFERENCE_NUMBER`,`AT`.`DESCRIPTION` AS `DESCRIPTION`,`AT`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((`AR_TRANSACTION` `AT` join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `AT`.`CUSTOMER_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on((`AC`.`ACCOUNT_COMBINATION_ID` = `ACA`.`DEFAULT_DEBIT_AC_ID`))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`AT`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`AT`.`AMOUNT` >= 0) and (`AT`.`AR_TRANSACTION_TYPE_ID` between 1 and 3) and (`AT`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'AR TRANSACTION' AS `SOURCE`,`AT`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AT`.`GL_DATE` AS `GL_DATE`,`AT`.`TRANSACTION_NUMBER` AS `REFERENCE_NUMBER`,`AT`.`DESCRIPTION` AS `DESCRIPTION`,0 AS `DEBIT`,-(`AT`.`AMOUNT`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((`AR_TRANSACTION` `AT` join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `AT`.`CUSTOMER_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on((`AC`.`ACCOUNT_COMBINATION_ID` = `ACA`.`DEFAULT_DEBIT_AC_ID`))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`AT`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`AT`.`AMOUNT` < 0) and (`AT`.`AR_TRANSACTION_TYPE_ID` between 1 and 3) and (`AT`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'AR TRANSACTION' AS `SOURCE`,`AT`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AT`.`GL_DATE` AS `GL_DATE`,`AT`.`TRANSACTION_NUMBER` AS `REFERENCE_NUMBER`,`AT`.`DESCRIPTION` AS `DESCRIPTION`,0 AS `DEBIT`,`AL`.`AMOUNT` AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((`AR_LINE` `AL` join `AR_TRANSACTION` `AT` on((`AT`.`AR_TRANSACTION_ID` = `AL`.`AR_TRANSACTION_ID`))) join `AR_LINE_SETUP` `ALS` on((`ALS`.`AR_LINE_SETUP_ID` = `AL`.`AR_LINE_SETUP_ID`))) join `ACCOUNT_COMBINATION` `AC` on((`AC`.`ACCOUNT_COMBINATION_ID` = `ALS`.`ACCOUNT_COMBINATION_ID`))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`AT`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`AL`.`AMOUNT` >= 0) and (`AT`.`AR_TRANSACTION_TYPE_ID` = 1) and (`AT`.`AR_TRANSACTION_TYPE_ID` = 2) and (`AT`.`AR_TRANSACTION_TYPE_ID` = 3) and (`AT`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'AR TRANSACTION' AS `SOURCE`,`AT`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AT`.`GL_DATE` AS `GL_DATE`,`AT`.`TRANSACTION_NUMBER` AS `REFERENCE_NUMBER`,`AT`.`DESCRIPTION` AS `DESCRIPTION`,-(`AL`.`AMOUNT`) AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((`AR_LINE` `AL` join `AR_TRANSACTION` `AT` on((`AT`.`AR_TRANSACTION_ID` = `AL`.`AR_TRANSACTION_ID`))) join `AR_LINE_SETUP` `ALS` on((`ALS`.`AR_LINE_SETUP_ID` = `AL`.`AR_LINE_SETUP_ID`))) join `ACCOUNT_COMBINATION` `AC` on((`AC`.`ACCOUNT_COMBINATION_ID` = `ALS`.`ACCOUNT_COMBINATION_ID`))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`AT`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`AL`.`AMOUNT` < 0) and (`AT`.`AR_TRANSACTION_TYPE_ID` between 1 and 3) and (`AT`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'ACCOUNT COLLECTION' AS `SOURCE`,concat(`AR`.`AR_RECEIPT_ID`,`RM`.`RECEIPT_METHOD_ID`) AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AR`.`MATURITY_DATE` AS `GL_DATE`,`AR`.`RECEIPT_NUMBER` AS `REFERENCE_NUMBER`,'' AS `DESCRIPTION`,`AR`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,1 AS `IS_POSTED` from ((((`AR_RECEIPT` `AR` join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `AR`.`RECEIPT_METHOD_ID`))) join `ACCOUNT_COMBINATION` `AC` on((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`DEBIT_ACCOUNT_COMBINATION_ID`))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`AR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`RM`.`DEBIT_ACCOUNT_COMBINATION_ID` is not null) and (`AR`.`AMOUNT` <> 0) and (`AR`.`COMPANY_ID` = `AC`.`COMPANY_ID`)) union all select 'ACCOUNT COLLECTION' AS `SOURCE`,concat(`AR`.`AR_RECEIPT_ID`,`BA`.`CASH_IN_BANK_ACCT_ID`) AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AR`.`MATURITY_DATE` AS `GL_DATE`,`AR`.`RECEIPT_NUMBER` AS `REFERENCE_NUMBER`,'' AS `DESCRIPTION`,`AR`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,1 AS `IS_POSTED` from (((((`AR_RECEIPT` `AR` join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `AR`.`RECEIPT_METHOD_ID`))) join `BANK_ACCOUNT` `BA` on((`BA`.`BANK_ACCOUNT_ID` = `RM`.`BANK_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on((`AC`.`ACCOUNT_COMBINATION_ID` = `BA`.`CASH_IN_BANK_ACCT_ID`))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`AR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`AR`.`AMOUNT` <> 0) and (`AR`.`COMPANY_ID` = `AC`.`COMPANY_ID`)) union all select 'ACCOUNT COLLECTION' AS `SOURCE`,`AR`.`AR_RECEIPT_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AR`.`MATURITY_DATE` AS `GL_DATE`,`AR`.`RECEIPT_NUMBER` AS `REFERENCE_NUMBER`,'' AS `DESCRIPTION`,0 AS `DEBIT`,`AR`.`AMOUNT` AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,1 AS `IS_POSTED` from ((((`AR_RECEIPT` `AR` join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `AR`.`RECEIPT_METHOD_ID`))) join `ACCOUNT_COMBINATION` `AC` on((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`CREDIT_ACCOUNT_COMBINATION_ID`))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`AR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`AR`.`AMOUNT` <> 0) and (`AR`.`COMPANY_ID` = `AC`.`COMPANY_ID`)) union all select 'ACCOUNT COLLECTION' AS `SOURCE`,`ART`.`AR_RECEIPT_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AR`.`MATURITY_DATE` AS `GL_DATE`,`AR`.`RECEIPT_NUMBER` AS `REFERENCE_NUMBER`,`AT`.`TRANSACTION_NUMBER` AS `DESCRIPTION`,`ART`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,1 AS `IS_POSTED` from ((((((`AR_RECEIPT_TRANSACTION` `ART` join `AR_RECEIPT` `AR` on((`AR`.`AR_RECEIPT_ID` = `ART`.`AR_RECEIPT_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `AR`.`RECEIPT_METHOD_ID`))) join `ACCOUNT_COMBINATION` `AC` on((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`CREDIT_ACCOUNT_COMBINATION_ID`))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `AR_TRANSACTION` `AT` on((`AT`.`AR_TRANSACTION_ID` = `ART`.`AR_TRANSACTION_ID`))) join `FORM_WORKFLOW` `FW` on((`AR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`ART`.`AMOUNT` >= 0) and (`AR`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`AT`.`AR_TRANSACTION_TYPE_ID` <> 15)) union all select 'ACCOUNT COLLECTION' AS `SOURCE`,`ART`.`AR_RECEIPT_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AR`.`MATURITY_DATE` AS `GL_DATE`,`AR`.`RECEIPT_NUMBER` AS `REFERENCE_NUMBER`,`AT`.`TRANSACTION_NUMBER` AS `DESCRIPTION`,0 AS `DEBIT`,-(`ART`.`AMOUNT`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,1 AS `IS_POSTED` from ((((((`AR_RECEIPT_TRANSACTION` `ART` join `AR_RECEIPT` `AR` on((`AR`.`AR_RECEIPT_ID` = `ART`.`AR_RECEIPT_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `AR`.`RECEIPT_METHOD_ID`))) join `ACCOUNT_COMBINATION` `AC` on((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`CREDIT_ACCOUNT_COMBINATION_ID`))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `AR_TRANSACTION` `AT` on((`AT`.`AR_TRANSACTION_ID` = `ART`.`AR_TRANSACTION_ID`))) join `FORM_WORKFLOW` `FW` on((`AR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`ART`.`AMOUNT` < 0) and (`AR`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`AT`.`AR_TRANSACTION_TYPE_ID` <> 15)) union all select 'ACCOUNT COLLECTION' AS `SOURCE`,`ART`.`AR_RECEIPT_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AR`.`MATURITY_DATE` AS `GL_DATE`,`AR`.`RECEIPT_NUMBER` AS `REFERENCE_NUMBER`,`AT`.`TRANSACTION_NUMBER` AS `DESCRIPTION`,0 AS `DEBIT`,`ART`.`AMOUNT` AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,1 AS `IS_POSTED` from ((((((`AR_RECEIPT_TRANSACTION` `ART` join `AR_RECEIPT` `AR` on((`AR`.`AR_RECEIPT_ID` = `ART`.`AR_RECEIPT_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `AR`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on((`AC`.`ACCOUNT_COMBINATION_ID` = `ACA`.`DEFAULT_DEBIT_AC_ID`))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `AR_TRANSACTION` `AT` on((`AT`.`AR_TRANSACTION_ID` = `ART`.`AR_TRANSACTION_ID`))) join `FORM_WORKFLOW` `FW` on((`AR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`ART`.`AMOUNT` >= 0) and (`AR`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`AT`.`AR_TRANSACTION_TYPE_ID` <> 15)) union all select 'ACCOUNT COLLECTION' AS `SOURCE`,`ART`.`AR_RECEIPT_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AR`.`MATURITY_DATE` AS `GL_DATE`,`AR`.`RECEIPT_NUMBER` AS `REFERENCE_NUMBER`,`AT`.`TRANSACTION_NUMBER` AS `DESCRIPTION`,-(`ART`.`AMOUNT`) AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,1 AS `IS_POSTED` from ((((((`AR_RECEIPT_TRANSACTION` `ART` join `AR_RECEIPT` `AR` on((`AR`.`AR_RECEIPT_ID` = `ART`.`AR_RECEIPT_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `AR`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on((`AC`.`ACCOUNT_COMBINATION_ID` = `ACA`.`DEFAULT_DEBIT_AC_ID`))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `AR_TRANSACTION` `AT` on((`AT`.`AR_TRANSACTION_ID` = `ART`.`AR_TRANSACTION_ID`))) join `FORM_WORKFLOW` `FW` on((`AR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`ART`.`AMOUNT` < 0) and (`AR`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`AT`.`AR_TRANSACTION_TYPE_ID` <> 15)) union all select 'ACCOUNT COLLECTION' AS `SOURCE`,`ACL`.`AC_AR_LINE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AR`.`MATURITY_DATE` AS `GL_DATE`,`AR`.`RECEIPT_NUMBER` AS `REFERENCE_NUMBER`,`ALS`.`NAME` AS `DESCRIPTION`,`ACL`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,1 AS `IS_POSTED` from ((((((`AC_AR_LINE` `ACL` join `AR_RECEIPT` `AR` on((`AR`.`AR_RECEIPT_ID` = `ACL`.`AR_RECEIPT_ID`))) join `AR_LINE_SETUP` `ALS` on((`ALS`.`AR_LINE_SETUP_ID` = `ACL`.`AR_LINE_SETUP_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `AR`.`RECEIPT_METHOD_ID`))) join `ACCOUNT_COMBINATION` `AC` on((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`CREDIT_ACCOUNT_COMBINATION_ID`))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`AR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`AR`.`COMPANY_ID` = `AC`.`COMPANY_ID`)) union all select 'ACCOUNT COLLECTION' AS `SOURCE`,`ACL`.`AC_AR_LINE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AR`.`MATURITY_DATE` AS `GL_DATE`,`AR`.`RECEIPT_NUMBER` AS `REFERENCE_NUMBER`,`ALS`.`NAME` AS `DESCRIPTION`,0 AS `DEBIT`,`ACL`.`AMOUNT` AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,1 AS `IS_POSTED` from (((((`AC_AR_LINE` `ACL` join `AR_RECEIPT` `AR` on((`AR`.`AR_RECEIPT_ID` = `ACL`.`AR_RECEIPT_ID`))) join `AR_LINE_SETUP` `ALS` on((`ALS`.`AR_LINE_SETUP_ID` = `ACL`.`AR_LINE_SETUP_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ALS`.`ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `AR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`AR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`AR`.`COMPANY_ID` = `AC`.`COMPANY_ID`)) union all select 'CASH SALES' AS `SOURCE`,`CS`.`CASH_SALE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CS`.`RECEIPT_DATE` AS `GL_DATE`,concat('CS ',`CS`.`CS_NUMBER`) AS `REFERENCE_NUMBER`,`CS`.`SALE_INVOICE_NO` AS `DESCRIPTION`,(coalesce(`CSI`.`UNIT_COST`,0) * `CSI`.`QUANTITY`) AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`CASH_SALE_ITEM` `CSI` join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSI`.`CASH_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CS`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`COST_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CS`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CS`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CS`.`CASH_SALE_TYPE_ID` = 1)) union all select 'CASH SALES - PROCESSING' AS `SOURCE`,`CS`.`CASH_SALE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CS`.`RECEIPT_DATE` AS `GL_DATE`,concat('CS ',`CS`.`CS_NUMBER`) AS `REFERENCE_NUMBER`,`CS`.`SALE_INVOICE_NO` AS `DESCRIPTION`,(coalesce(`CSI`.`UNIT_COST`,0) * `CSI`.`QUANTITY`) AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`CASH_SALE_ITEM` `CSI` join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSI`.`CASH_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CS`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`COST_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CS`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CS`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CS`.`CASH_SALE_TYPE_ID` = 6)) union all select 'CASH SALES - IS' AS `SOURCE`,`CS`.`CASH_SALE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CS`.`RECEIPT_DATE` AS `GL_DATE`,concat('CS-IS ',`CS`.`CS_NUMBER`) AS `REFERENCE_NUMBER`,`CS`.`SALE_INVOICE_NO` AS `DESCRIPTION`,(coalesce(`CSI`.`UNIT_COST`,0) * `CSI`.`QUANTITY`) AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`CASH_SALE_ITEM` `CSI` join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSI`.`CASH_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CS`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`COST_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CS`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CS`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CS`.`CASH_SALE_TYPE_ID` = 3)) union all select 'CASH SALES' AS `SOURCE`,`CS`.`CASH_SALE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CS`.`RECEIPT_DATE` AS `GL_DATE`,concat('CS ',`CS`.`CS_NUMBER`) AS `REFERENCE_NUMBER`,`CS`.`SALE_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,(coalesce(`CSI`.`UNIT_COST`,0) * `CSI`.`QUANTITY`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`CASH_SALE_ITEM` `CSI` join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSI`.`CASH_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CS`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`INVENTORY_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CS`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CS`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CS`.`CASH_SALE_TYPE_ID` = 1)) union all select 'CASH SALES - PROCESSING' AS `SOURCE`,`CS`.`CASH_SALE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CS`.`RECEIPT_DATE` AS `GL_DATE`,concat('CS ',`CS`.`CS_NUMBER`) AS `REFERENCE_NUMBER`,`CS`.`SALE_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,(coalesce(`CSI`.`UNIT_COST`,0) * `CSI`.`QUANTITY`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`CASH_SALE_ITEM` `CSI` join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSI`.`CASH_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CS`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`INVENTORY_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CS`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CS`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CS`.`CASH_SALE_TYPE_ID` = 6)) union all select 'CASH SALES - IS' AS `SOURCE`,`CS`.`CASH_SALE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CS`.`RECEIPT_DATE` AS `GL_DATE`,concat('CS-IS ',`CS`.`CS_NUMBER`) AS `REFERENCE_NUMBER`,`CS`.`SALE_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,(coalesce(`CSI`.`UNIT_COST`,0) * `CSI`.`QUANTITY`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`CASH_SALE_ITEM` `CSI` join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSI`.`CASH_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CS`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`INVENTORY_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CS`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CS`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CS`.`CASH_SALE_TYPE_ID` = 3)) union all select 'CASH SALES' AS `SOURCE`,`CS`.`CASH_SALE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CS`.`RECEIPT_DATE` AS `GL_DATE`,concat('CS ',`CS`.`CS_NUMBER`) AS `REFERENCE_NUMBER`,`CS`.`SALE_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,(`CSI`.`QUANTITY` * `CSI`.`SRP`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`CASH_SALE_ITEM` `CSI` join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSI`.`CASH_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CS`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`SALES_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CS`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CS`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CS`.`CASH_SALE_TYPE_ID` = 1)) union all select 'CASH SALES - PROCESSING' AS `SOURCE`,`CS`.`CASH_SALE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CS`.`RECEIPT_DATE` AS `GL_DATE`,concat('CS ',`CS`.`CS_NUMBER`) AS `REFERENCE_NUMBER`,`CS`.`SALE_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,(`CSI`.`QUANTITY` * `CSI`.`SRP`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`CASH_SALE_ITEM` `CSI` join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSI`.`CASH_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CS`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`SALES_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CS`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CS`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CS`.`CASH_SALE_TYPE_ID` = 6)) union all select 'CASH SALES - IS' AS `SOURCE`,`CS`.`CASH_SALE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CS`.`RECEIPT_DATE` AS `GL_DATE`,concat('CS-IS ',`CS`.`CS_NUMBER`) AS `REFERENCE_NUMBER`,`CS`.`SALE_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,(`CSI`.`QUANTITY` * `CSI`.`SRP`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`CASH_SALE_ITEM` `CSI` join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSI`.`CASH_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CS`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`SALES_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CS`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CS`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CS`.`CASH_SALE_TYPE_ID` = 3)) union all select 'CASH SALES' AS `SOURCE`,`CS`.`CASH_SALE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CS`.`RECEIPT_DATE` AS `GL_DATE`,concat('CS ',`CS`.`CS_NUMBER`) AS `REFERENCE_NUMBER`,`CS`.`SALE_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,-(coalesce(`CSI`.`DISCOUNT`,0)) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`CASH_SALE_ITEM` `CSI` join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSI`.`CASH_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CS`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`SALES_DISCOUNT_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CS`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `DIVISION` `D` on((`D`.`DIVISION_ID` = `AC`.`DIVISION_ID`))) join `FORM_WORKFLOW` `FW` on((`CS`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`CSI`.`DISCOUNT` is not null) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CS`.`CASH_SALE_TYPE_ID` = 1)) union all select 'CASH SALES - IS' AS `SOURCE`,`CS`.`CASH_SALE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CS`.`RECEIPT_DATE` AS `GL_DATE`,concat('CS-IS ',`CS`.`CS_NUMBER`) AS `REFERENCE_NUMBER`,`CS`.`SALE_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,-(coalesce(`CSI`.`DISCOUNT`,0)) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`CASH_SALE_ITEM` `CSI` join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSI`.`CASH_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CS`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`SALES_DISCOUNT_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CS`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `DIVISION` `D` on((`D`.`DIVISION_ID` = `AC`.`DIVISION_ID`))) join `FORM_WORKFLOW` `FW` on((`CS`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`CSI`.`DISCOUNT` is not null) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CS`.`CASH_SALE_TYPE_ID` = 3)) union all select 'CASH SALES' AS `SOURCE`,`CS`.`CASH_SALE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CS`.`RECEIPT_DATE` AS `GL_DATE`,concat('CS ',`CS`.`CS_NUMBER`) AS `REFERENCE_NUMBER`,`CS`.`SALE_INVOICE_NO` AS `DESCRIPTION`,`CSI`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CASH_SALE_ITEM` `CSI` join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSI`.`CASH_SALE_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CS`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CASH_SALES_RM_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`DEBIT_ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CS`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CS`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`CS`.`CASH_SALE_TYPE_ID` = 1)) union all select 'CASH SALES - PROCESSING' AS `SOURCE`,`CS`.`CASH_SALE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CS`.`RECEIPT_DATE` AS `GL_DATE`,concat('CS ',`CS`.`CS_NUMBER`) AS `REFERENCE_NUMBER`,`CS`.`SALE_INVOICE_NO` AS `DESCRIPTION`,`CSI`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CASH_SALE_ITEM` `CSI` join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSI`.`CASH_SALE_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CS`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CASH_SALES_RM_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`DEBIT_ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CS`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CS`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`CS`.`CASH_SALE_TYPE_ID` = 6)) union all select 'CASH SALES - IS' AS `SOURCE`,`CS`.`CASH_SALE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CS`.`RECEIPT_DATE` AS `GL_DATE`,concat('CS-IS ',`CS`.`CS_NUMBER`) AS `REFERENCE_NUMBER`,`CS`.`SALE_INVOICE_NO` AS `DESCRIPTION`,`CSI`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CASH_SALE_ITEM` `CSI` join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSI`.`CASH_SALE_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CS`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CASH_SALES_RM_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`DEBIT_ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CS`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CS`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`CS`.`CASH_SALE_TYPE_ID` = 3)) union all select 'CASH SALES' AS `SOURCE`,`CS`.`CASH_SALE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CS`.`RECEIPT_DATE` AS `GL_DATE`,concat('CS ',`CS`.`CS_NUMBER`) AS `REFERENCE_NUMBER`,`CS`.`SALE_INVOICE_NO` AS `DESCRIPTION`,`AL`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CASH_SALE_AR_LINE` `AL` join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `AL`.`CASH_SALE_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CS`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CASH_SALES_RM_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`DEBIT_ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CS`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CS`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`CS`.`CASH_SALE_TYPE_ID` = 1)) union all select 'CASH SALES - IS' AS `SOURCE`,`CS`.`CASH_SALE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CS`.`RECEIPT_DATE` AS `GL_DATE`,concat('CS-IS ',`CS`.`CS_NUMBER`) AS `REFERENCE_NUMBER`,`CS`.`SALE_INVOICE_NO` AS `DESCRIPTION`,`AL`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CASH_SALE_AR_LINE` `AL` join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `AL`.`CASH_SALE_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CS`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CASH_SALES_RM_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`DEBIT_ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CS`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CS`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`CS`.`CASH_SALE_TYPE_ID` = 3)) union all select 'CASH SALES' AS `SOURCE`,`CS`.`CASH_SALE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CS`.`RECEIPT_DATE` AS `GL_DATE`,concat('CS ',`CS`.`CS_NUMBER`) AS `REFERENCE_NUMBER`,`CS`.`SALE_INVOICE_NO` AS `DESCRIPTION`,`CSI`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`CASH_SALE_ITEM` `CSI` join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSI`.`CASH_SALE_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CS`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CASH_SALES_RM_ID`))) join `BANK_ACCOUNT` `BA` on((`BA`.`BANK_ACCOUNT_ID` = `RM`.`BANK_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `BA`.`CASH_IN_BANK_ACCT_ID`) and (`AC`.`COMPANY_ID` = `CS`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CS`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`CS`.`CASH_SALE_TYPE_ID` = 1)) union all select 'CASH SALES - PROCESSING' AS `SOURCE`,`CS`.`CASH_SALE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CS`.`RECEIPT_DATE` AS `GL_DATE`,concat('CS ',`CS`.`CS_NUMBER`) AS `REFERENCE_NUMBER`,`CS`.`SALE_INVOICE_NO` AS `DESCRIPTION`,`CSI`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`CASH_SALE_ITEM` `CSI` join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSI`.`CASH_SALE_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CS`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CASH_SALES_RM_ID`))) join `BANK_ACCOUNT` `BA` on((`BA`.`BANK_ACCOUNT_ID` = `RM`.`BANK_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `BA`.`CASH_IN_BANK_ACCT_ID`) and (`AC`.`COMPANY_ID` = `CS`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CS`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`CS`.`CASH_SALE_TYPE_ID` = 6)) union all select 'CASH SALES - IS' AS `SOURCE`,`CS`.`CASH_SALE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CS`.`RECEIPT_DATE` AS `GL_DATE`,concat('CS-IS ',`CS`.`CS_NUMBER`) AS `REFERENCE_NUMBER`,`CS`.`SALE_INVOICE_NO` AS `DESCRIPTION`,`CSI`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`CASH_SALE_ITEM` `CSI` join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSI`.`CASH_SALE_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CS`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CASH_SALES_RM_ID`))) join `BANK_ACCOUNT` `BA` on((`BA`.`BANK_ACCOUNT_ID` = `RM`.`BANK_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `BA`.`CASH_IN_BANK_ACCT_ID`) and (`AC`.`COMPANY_ID` = `CS`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CS`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`CS`.`CASH_SALE_TYPE_ID` = 3)) union all select 'CASH SALES' AS `SOURCE`,`CS`.`CASH_SALE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CS`.`RECEIPT_DATE` AS `GL_DATE`,concat('CS-',`CS`.`CS_NUMBER`) AS `REFERENCE_NUMBER`,`CS`.`SALE_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,`AL`.`AMOUNT` AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((`CASH_SALE_AR_LINE` `AL` join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `AL`.`CASH_SALE_ID`))) join `AR_LINE_SETUP` `ALS` on((`ALS`.`AR_LINE_SETUP_ID` = `AL`.`AR_LINE_SETUP_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ALS`.`ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CS`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CS`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`CS`.`CASH_SALE_TYPE_ID` = 1)) union all select 'CASH SALES - IS' AS `SOURCE`,`CS`.`CASH_SALE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CS`.`RECEIPT_DATE` AS `GL_DATE`,concat('CS-IS ',`CS`.`CS_NUMBER`) AS `REFERENCE_NUMBER`,`CS`.`SALE_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,`AL`.`AMOUNT` AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((`CASH_SALE_AR_LINE` `AL` join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `AL`.`CASH_SALE_ID`))) join `AR_LINE_SETUP` `ALS` on((`ALS`.`AR_LINE_SETUP_ID` = `AL`.`AR_LINE_SETUP_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ALS`.`ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CS`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CS`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`CS`.`CASH_SALE_TYPE_ID` = 3)) union all select 'ACCOUNT SALES' AS `SOURCE`,`ART`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`ART`.`TRANSACTION_DATE` AS `GL_DATE`,concat('AS ',`ART`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,`ART`.`DESCRIPTION` AS `DESCRIPTION`,(coalesce(`ASI`.`UNIT_COST`,0) * `ASI`.`QUANTITY`) AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `ASI`.`AR_TRANSACTION_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `ASI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`COST_ACCOUNT`) and (`AC`.`COMPANY_ID` = `ART`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`ART`.`AR_TRANSACTION_TYPE_ID` = 4) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'ACCOUNT SALES - IS' AS `SOURCE`,`ART`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`ART`.`TRANSACTION_DATE` AS `GL_DATE`,concat('AS-IS ',`ART`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,`ART`.`DESCRIPTION` AS `DESCRIPTION`,(coalesce(`ASI`.`UNIT_COST`,0) * `ASI`.`QUANTITY`) AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `ASI`.`AR_TRANSACTION_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `ASI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`COST_ACCOUNT`) and (`AC`.`COMPANY_ID` = `ART`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`ART`.`AR_TRANSACTION_TYPE_ID` = 10) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'ACCOUNT SALES' AS `SOURCE`,`ART`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`ART`.`TRANSACTION_DATE` AS `GL_DATE`,concat('AS ',`ART`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,`ART`.`DESCRIPTION` AS `DESCRIPTION`,0 AS `DEBIT`,(coalesce(`ASI`.`UNIT_COST`,0) * `ASI`.`QUANTITY`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `ASI`.`AR_TRANSACTION_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `ASI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`INVENTORY_ACCOUNT`) and (`AC`.`COMPANY_ID` = `ART`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`ART`.`AR_TRANSACTION_TYPE_ID` = 4) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'ACCOUNT SALES - IS' AS `SOURCE`,`ART`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`ART`.`TRANSACTION_DATE` AS `GL_DATE`,concat('AS-IS ',`ART`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,`ART`.`DESCRIPTION` AS `DESCRIPTION`,0 AS `DEBIT`,(coalesce(`ASI`.`UNIT_COST`,0) * `ASI`.`QUANTITY`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `ASI`.`AR_TRANSACTION_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `ASI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`INVENTORY_ACCOUNT`) and (`AC`.`COMPANY_ID` = `ART`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`ART`.`AR_TRANSACTION_TYPE_ID` = 10) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'ACCOUNT SALES' AS `SOURCE`,`ART`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`ART`.`TRANSACTION_DATE` AS `GL_DATE`,concat('AS ',`ART`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,`ART`.`DESCRIPTION` AS `DESCRIPTION`,0 AS `DEBIT`,(`ASI`.`QUANTITY` * `ASI`.`SRP`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `ASI`.`AR_TRANSACTION_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `ASI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`SALES_ACCOUNT`) and (`AC`.`COMPANY_ID` = `ART`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`ART`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`ART`.`AR_TRANSACTION_TYPE_ID` = 4) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'ACCOUNT SALES - IS' AS `SOURCE`,`ART`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`ART`.`TRANSACTION_DATE` AS `GL_DATE`,concat('AS-IS ',`ART`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,`ART`.`DESCRIPTION` AS `DESCRIPTION`,0 AS `DEBIT`,(`ASI`.`QUANTITY` * `ASI`.`SRP`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `ASI`.`AR_TRANSACTION_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `ASI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`SALES_ACCOUNT`) and (`AC`.`COMPANY_ID` = `ART`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`ART`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`ART`.`AR_TRANSACTION_TYPE_ID` = 10) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'ACCOUNT SALES' AS `SOURCE`,`ART`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`ART`.`TRANSACTION_DATE` AS `GL_DATE`,concat('AS ',`ART`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,`ART`.`DESCRIPTION` AS `DESCRIPTION`,0 AS `DEBIT`,-(coalesce(`ASI`.`DISCOUNT`,0)) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `ASI`.`AR_TRANSACTION_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `ASI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`SALES_DISCOUNT_ACCOUNT`) and (`AC`.`COMPANY_ID` = `ART`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`ASI`.`DISCOUNT` is not null) and (`ART`.`AR_TRANSACTION_TYPE_ID` = 4) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'ACCOUNT SALES - IS' AS `SOURCE`,`ART`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`ART`.`TRANSACTION_DATE` AS `GL_DATE`,concat('AS-IS ',`ART`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,`ART`.`DESCRIPTION` AS `DESCRIPTION`,0 AS `DEBIT`,-(coalesce(`ASI`.`DISCOUNT`,0)) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `ASI`.`AR_TRANSACTION_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `ASI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`SALES_DISCOUNT_ACCOUNT`) and (`AC`.`COMPANY_ID` = `ART`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`ASI`.`DISCOUNT` is not null) and (`ART`.`AR_TRANSACTION_TYPE_ID` = 10) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'ACCOUNT SALES' AS `SOURCE`,`ART`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`ART`.`TRANSACTION_DATE` AS `GL_DATE`,concat('AS ',`ART`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,`ART`.`DESCRIPTION` AS `DESCRIPTION`,`ASI`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `ASI`.`AR_TRANSACTION_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ACA`.`DEFAULT_DEBIT_AC_ID`) and (`AC`.`COMPANY_ID` = `ART`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ART`.`AR_TRANSACTION_TYPE_ID` = 4) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'ACCOUNT SALES - IS' AS `SOURCE`,`ART`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`ART`.`TRANSACTION_DATE` AS `GL_DATE`,concat('AS-IS ',`ART`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,`ART`.`DESCRIPTION` AS `DESCRIPTION`,`ASI`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `ASI`.`AR_TRANSACTION_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ACA`.`DEFAULT_DEBIT_AC_ID`) and (`AC`.`COMPANY_ID` = `ART`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ART`.`AR_TRANSACTION_TYPE_ID` = 10) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'ACCOUNT SALES' AS `SOURCE`,`ART`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`ART`.`TRANSACTION_DATE` AS `GL_DATE`,concat('AS ',`ART`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,`ART`.`DESCRIPTION` AS `DESCRIPTION`,`AL`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((`AR_LINE` `AL` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `AL`.`AR_TRANSACTION_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ACA`.`DEFAULT_DEBIT_AC_ID`) and (`AC`.`COMPANY_ID` = `ART`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ART`.`AR_TRANSACTION_TYPE_ID` = 4) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'ACCOUNT SALES - IS' AS `SOURCE`,`ART`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`ART`.`TRANSACTION_DATE` AS `GL_DATE`,concat('AS-IS ',`ART`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,`ART`.`DESCRIPTION` AS `DESCRIPTION`,`AL`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((`AR_LINE` `AL` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `AL`.`AR_TRANSACTION_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ACA`.`DEFAULT_DEBIT_AC_ID`) and (`AC`.`COMPANY_ID` = `ART`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ART`.`AR_TRANSACTION_TYPE_ID` = 10) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'ACCOUNT SALES' AS `SOURCE`,`ART`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`ART`.`TRANSACTION_DATE` AS `GL_DATE`,concat('AS ',`ART`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,`ART`.`DESCRIPTION` AS `DESCRIPTION`,0 AS `DEBIT`,`AL`.`AMOUNT` AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((`AR_LINE` `AL` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `AL`.`AR_TRANSACTION_ID`))) join `AR_LINE_SETUP` `ALS` on((`ALS`.`AR_LINE_SETUP_ID` = `AL`.`AR_LINE_SETUP_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ALS`.`ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `ART`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ART`.`AR_TRANSACTION_TYPE_ID` = 4) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'ACCOUNT SALES - IS' AS `SOURCE`,`ART`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`ART`.`TRANSACTION_DATE` AS `GL_DATE`,concat('AS-IS ',`ART`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,`ART`.`DESCRIPTION` AS `DESCRIPTION`,0 AS `DEBIT`,`AL`.`AMOUNT` AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((`AR_LINE` `AL` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `AL`.`AR_TRANSACTION_ID`))) join `AR_LINE_SETUP` `ALS` on((`ALS`.`AR_LINE_SETUP_ID` = `AL`.`AR_LINE_SETUP_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ALS`.`ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `ART`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ART`.`AR_TRANSACTION_TYPE_ID` = 10) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'RECEIVING REPORT' AS `SOURCE`,`AI`.`AP_INVOICE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AI`.`GL_DATE` AS `GL_DATE`,concat('RR-',`AI`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,coalesce(`AI`.`INVOICE_NUMBER`,`RR`.`DELIVERY_RECEIPT_NO`) AS `DESCRIPTION`,(coalesce(`RRI`.`UNIT_COST`,0) * `RRI`.`QUANTITY`) AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`R_RECEIVING_REPORT_ITEM` `RRI` join `R_RECEIVING_REPORT` `RR` on((`RR`.`AP_INVOICE_ID` = `RRI`.`AP_INVOICE_ID`))) join `AP_INVOICE` `AI` on((`AI`.`AP_INVOICE_ID` = `RRI`.`AP_INVOICE_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `RRI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`INVENTORY_ACCOUNT`) and (`AC`.`COMPANY_ID` = `RR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`AI`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`RRI`.`UNIT_COST` is not null) and (`AI`.`INVOICE_TYPE_ID` = 5) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'RECEIVING REPORT' AS `SOURCE`,`AI`.`AP_INVOICE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AI`.`GL_DATE` AS `GL_DATE`,concat('RR-',`AI`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,coalesce(`AI`.`INVOICE_NUMBER`,`RR`.`DELIVERY_RECEIPT_NO`) AS `DESCRIPTION`,0 AS `DEBIT`,(coalesce(`RRI`.`UNIT_COST`,0) * `RRI`.`QUANTITY`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`R_RECEIVING_REPORT_ITEM` `RRI` join `R_RECEIVING_REPORT` `RR` on((`RR`.`AP_INVOICE_ID` = `RRI`.`AP_INVOICE_ID`))) join `AP_INVOICE` `AI` on((`AI`.`AP_INVOICE_ID` = `RR`.`AP_INVOICE_ID`))) join `SUPPLIER_ACCOUNT` `SPA` on((`SPA`.`SUPPLIER_ACCOUNT_ID` = `AI`.`SUPPLIER_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `SPA`.`DEFAULT_CREDIT_AC_ID`) and (`AC`.`COMPANY_ID` = `RR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`AI`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`RRI`.`UNIT_COST` is not null) and (`AI`.`INVOICE_TYPE_ID` = 5) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'RECEIVING REPORT' AS `SOURCE`,`AI`.`AP_INVOICE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AI`.`GL_DATE` AS `GL_DATE`,concat('RR-',`AI`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,coalesce(`AI`.`INVOICE_NUMBER`,`RR`.`DELIVERY_RECEIPT_NO`) AS `DESCRIPTION`,0 AS `DEBIT`,`APL`.`AMOUNT` AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`AP_INVOICE_LINE` `APL` join `AP_INVOICE` `AI` on((`AI`.`AP_INVOICE_ID` = `APL`.`AP_INVOICE_ID`))) join `R_RECEIVING_REPORT` `RR` on((`RR`.`AP_INVOICE_ID` = `APL`.`AP_INVOICE_ID`))) join `SUPPLIER_ACCOUNT` `SPA` on((`SPA`.`SUPPLIER_ACCOUNT_ID` = `AI`.`SUPPLIER_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `SPA`.`DEFAULT_CREDIT_AC_ID`) and (`AC`.`COMPANY_ID` = `RR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on(((`AI`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`AI`.`INVOICE_TYPE_ID` = 5)))) union all select 'RECEIVING REPORT' AS `SOURCE`,`AI`.`AP_INVOICE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AI`.`GL_DATE` AS `GL_DATE`,concat('RR-',`AI`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,coalesce(`AI`.`INVOICE_NUMBER`,`RR`.`DELIVERY_RECEIPT_NO`) AS `DESCRIPTION`,`APL`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`AP_INVOICE_LINE` `APL` join `AP_INVOICE` `AI` on((`AI`.`AP_INVOICE_ID` = `APL`.`AP_INVOICE_ID`))) join `R_RECEIVING_REPORT` `RR` on((`RR`.`AP_INVOICE_ID` = `APL`.`AP_INVOICE_ID`))) join `AP_LINE_SETUP` `ALS` on((`ALS`.`AP_LINE_SETUP_ID` = `APL`.`AP_LINE_SETUP_ID`))) join `ACCOUNT_COMBINATION` `AC` on((`AC`.`ACCOUNT_COMBINATION_ID` = `ALS`.`ACCOUNT_COMBINATION_ID`))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on(((`AI`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`AI`.`INVOICE_TYPE_ID` = 5) and (`ALS`.`ACTIVE` = 1)))) union all select 'RECEIVING REPORT - RM' AS `SOURCE`,`AI`.`AP_INVOICE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AI`.`GL_DATE` AS `GL_DATE`,concat('RR-RM ',`AI`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,coalesce(`AI`.`INVOICE_NUMBER`,`RR`.`DELIVERY_RECEIPT_NO`) AS `DESCRIPTION`,`RRMI`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`R_RECEIVING_REPORT_ITEM` `RRI` join `R_RECEIVING_REPORT_RM_ITEM` `RRMI` on((`RRMI`.`R_RECEIVING_REPORT_ITEM_ID` = `RRI`.`R_RECEIVING_REPORT_ITEM_ID`))) join `R_RECEIVING_REPORT` `RR` on((`RR`.`AP_INVOICE_ID` = `RRI`.`AP_INVOICE_ID`))) join `AP_INVOICE` `AI` on((`AI`.`AP_INVOICE_ID` = `RRI`.`AP_INVOICE_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `RRI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`INVENTORY_ACCOUNT`) and (`AC`.`COMPANY_ID` = `RR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`AI`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`RRI`.`UNIT_COST` is not null) and (`AI`.`INVOICE_TYPE_ID` = 8) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'RECEIVING REPORT - RM' AS `SOURCE`,`AI`.`AP_INVOICE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AI`.`GL_DATE` AS `GL_DATE`,concat('RR-RM ',`AI`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,coalesce(`AI`.`INVOICE_NUMBER`,`RR`.`DELIVERY_RECEIPT_NO`) AS `DESCRIPTION`,`APL`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`AP_INVOICE_LINE` `APL` join `AP_INVOICE` `AI` on((`AI`.`AP_INVOICE_ID` = `APL`.`AP_INVOICE_ID`))) join `R_RECEIVING_REPORT` `RR` on((`RR`.`AP_INVOICE_ID` = `APL`.`AP_INVOICE_ID`))) join `AP_LINE_SETUP` `ALS` on((`ALS`.`AP_LINE_SETUP_ID` = `APL`.`AP_LINE_SETUP_ID`))) join `ACCOUNT_COMBINATION` `AC` on((`AC`.`ACCOUNT_COMBINATION_ID` = `ALS`.`ACCOUNT_COMBINATION_ID`))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on(((`AI`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`AI`.`INVOICE_TYPE_ID` = 8) and (`ALS`.`ACTIVE` = 1)))) union all select 'RECEIVING REPORT - RM' AS `SOURCE`,`AI`.`AP_INVOICE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AI`.`GL_DATE` AS `GL_DATE`,concat('RR-RM ',`AI`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,coalesce(`AI`.`INVOICE_NUMBER`,`RR`.`DELIVERY_RECEIPT_NO`) AS `DESCRIPTION`,0 AS `DEBIT`,`AI`.`AMOUNT` AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((`AP_INVOICE` `AI` join `R_RECEIVING_REPORT` `RR` on((`RR`.`AP_INVOICE_ID` = `AI`.`AP_INVOICE_ID`))) join `SUPPLIER_ACCOUNT` `SPA` on((`SPA`.`SUPPLIER_ACCOUNT_ID` = `AI`.`SUPPLIER_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `SPA`.`DEFAULT_CREDIT_AC_ID`) and (`AC`.`COMPANY_ID` = `RR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`AI`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`AI`.`INVOICE_TYPE_ID` = 8) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'RETURN TO SUPPLIER' AS `SOURCE`,`AI`.`AP_INVOICE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AI`.`GL_DATE` AS `GL_DATE`,concat('RTS-',`AI`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,concat('RR-',`RRAI`.`SEQUENCE_NO`) AS `DESCRIPTION`,0 AS `DEBIT`,(coalesce(`RTSI`.`UNIT_COST`,0) * `RTSI`.`QUANTITY`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((((`R_RETURN_TO_SUPPLIER_ITEM` `RTSI` join `R_RETURN_TO_SUPPLIER` `RTS` on((`RTS`.`AP_INVOICE_ID` = `RTSI`.`AP_INVOICE_ID`))) join `AP_INVOICE` `AI` on((`AI`.`AP_INVOICE_ID` = `RTS`.`AP_INVOICE_ID`))) join `R_RECEIVING_REPORT_ITEM` `RRI` on((`RRI`.`R_RECEIVING_REPORT_ITEM_ID` = `RTSI`.`R_RECEIVING_REPORT_ITEM_ID`))) join `AP_INVOICE` `RRAI` on((`RRAI`.`AP_INVOICE_ID` = `RRI`.`AP_INVOICE_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `RTSI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`INVENTORY_ACCOUNT`) and (`AC`.`COMPANY_ID` = `RTS`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`AI`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`RTSI`.`UNIT_COST` is not null) and (`AI`.`INVOICE_TYPE_ID` = 6) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'RETURN TO SUPPLIER' AS `SOURCE`,`AI`.`AP_INVOICE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`AI`.`GL_DATE` AS `GL_DATE`,concat('RTS-',`AI`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,concat('RR-',`RRAI`.`SEQUENCE_NO`) AS `DESCRIPTION`,(coalesce(`RTSI`.`UNIT_COST`,0) * `RTSI`.`QUANTITY`) AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`R_RETURN_TO_SUPPLIER_ITEM` `RTSI` join `R_RETURN_TO_SUPPLIER` `RTS` on((`RTS`.`AP_INVOICE_ID` = `RTSI`.`AP_INVOICE_ID`))) join `AP_INVOICE` `AI` on((`AI`.`AP_INVOICE_ID` = `RTS`.`AP_INVOICE_ID`))) join `R_RECEIVING_REPORT_ITEM` `RRI` on((`RRI`.`R_RECEIVING_REPORT_ITEM_ID` = `RTSI`.`R_RECEIVING_REPORT_ITEM_ID`))) join `AP_INVOICE` `RRAI` on((`RRAI`.`AP_INVOICE_ID` = `RRI`.`AP_INVOICE_ID`))) join `SUPPLIER_ACCOUNT` `SPA` on((`SPA`.`SUPPLIER_ACCOUNT_ID` = `AI`.`SUPPLIER_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `SPA`.`DEFAULT_CREDIT_AC_ID`) and (`AC`.`COMPANY_ID` = `RTS`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`AI`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`RTSI`.`UNIT_COST` is not null) and (`AI`.`INVOICE_TYPE_ID` = 6) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'CASH SALES RETURN' AS `SOURCE`,`CSR`.`CASH_SALE_RETURN_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CSR`.`DATE` AS `GL_DATE`,concat('CSR ',`CSR`.`CSR_NUMBER`) AS `REFERENCE_NUMBER`,concat('CS-',`CS`.`CS_NUMBER`) AS `DESCRIPTION`,(coalesce(`CSRI`.`UNIT_COST`,0) * `CSRI`.`QUANTITY`) AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`CASH_SALE_RETURN_ITEM` `CSRI` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `CSRI`.`CASH_SALE_RETURN_ID`))) join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSR`.`CASH_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CSR`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSRI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`COST_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CSR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`CSRI`.`UNIT_COST` is not null) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CSR`.`CASH_SALE_TYPE_ID` = 1)) union all select 'CASH SALES RETURN' AS `SOURCE`,`CSR`.`CASH_SALE_RETURN_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CSR`.`DATE` AS `GL_DATE`,concat('CSR ',`CSR`.`CSR_NUMBER`) AS `REFERENCE_NUMBER`,concat('CSR-',`CS`.`CSR_NUMBER`) AS `DESCRIPTION`,(coalesce(`CSRI`.`UNIT_COST`,0) * `CSRI`.`QUANTITY`) AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`CASH_SALE_RETURN_ITEM` `CSRI` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `CSRI`.`CASH_SALE_RETURN_ID`))) join `CASH_SALE_RETURN` `CS` on((`CS`.`CASH_SALE_RETURN_ID` = `CSR`.`REF_CASH_SALE_RETURN_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CSR`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSRI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`COST_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CSR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`CSRI`.`UNIT_COST` is not null) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CSR`.`CASH_SALE_TYPE_ID` = 1)) union all select 'CASH SALES RETURN - IS' AS `SOURCE`,`CSR`.`CASH_SALE_RETURN_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CSR`.`DATE` AS `GL_DATE`,concat('CSR-IS ',`CSR`.`CSR_NUMBER`) AS `REFERENCE_NUMBER`,concat('CS-IS ',`CS`.`CS_NUMBER`) AS `DESCRIPTION`,(coalesce(`CSRI`.`UNIT_COST`,0) * `CSRI`.`QUANTITY`) AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`CASH_SALE_RETURN_ITEM` `CSRI` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `CSRI`.`CASH_SALE_RETURN_ID`))) join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSR`.`CASH_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CSR`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSRI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`COST_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CSR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`CSRI`.`UNIT_COST` is not null) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CSR`.`CASH_SALE_TYPE_ID` = 3)) union all select 'CASH SALES RETURN - IS' AS `SOURCE`,`CSR`.`CASH_SALE_RETURN_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CSR`.`DATE` AS `GL_DATE`,concat('CSR-IS ',`CSR`.`CSR_NUMBER`) AS `REFERENCE_NUMBER`,concat('CSR-IS ',`CS`.`CSR_NUMBER`) AS `DESCRIPTION`,(coalesce(`CSRI`.`UNIT_COST`,0) * `CSRI`.`QUANTITY`) AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`CASH_SALE_RETURN_ITEM` `CSRI` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `CSRI`.`CASH_SALE_RETURN_ID`))) join `CASH_SALE_RETURN` `CS` on((`CS`.`CASH_SALE_RETURN_ID` = `CSR`.`REF_CASH_SALE_RETURN_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CSR`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSRI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`COST_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CSR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`CSRI`.`UNIT_COST` is not null) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CSR`.`CASH_SALE_TYPE_ID` = 3)) union all select 'CASH SALES RETURN' AS `SOURCE`,`CSR`.`CASH_SALE_RETURN_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CSR`.`DATE` AS `GL_DATE`,concat('CSR ',`CSR`.`CSR_NUMBER`) AS `REFERENCE_NUMBER`,concat('CS-',`CS`.`CS_NUMBER`) AS `DESCRIPTION`,0 AS `DEBIT`,(coalesce(`CSRI`.`UNIT_COST`,0) * `CSRI`.`QUANTITY`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`CASH_SALE_RETURN_ITEM` `CSRI` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `CSRI`.`CASH_SALE_RETURN_ID`))) join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSR`.`CASH_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CSR`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSRI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`INVENTORY_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CSR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`CSRI`.`UNIT_COST` is not null) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CSR`.`CASH_SALE_TYPE_ID` = 1)) union all select 'CASH SALES RETURN' AS `SOURCE`,`CSR`.`CASH_SALE_RETURN_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CSR`.`DATE` AS `GL_DATE`,concat('CSR ',`CSR`.`CSR_NUMBER`) AS `REFERENCE_NUMBER`,concat('CSR-',`CS`.`CSR_NUMBER`) AS `DESCRIPTION`,0 AS `DEBIT`,(coalesce(`CSRI`.`UNIT_COST`,0) * `CSRI`.`QUANTITY`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`CASH_SALE_RETURN_ITEM` `CSRI` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `CSRI`.`CASH_SALE_RETURN_ID`))) join `CASH_SALE_RETURN` `CS` on((`CS`.`CASH_SALE_RETURN_ID` = `CSR`.`REF_CASH_SALE_RETURN_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CSR`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSRI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`INVENTORY_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CSR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`CSRI`.`UNIT_COST` is not null) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CSR`.`CASH_SALE_TYPE_ID` = 1)) union all select 'CASH SALES RETURN - IS' AS `SOURCE`,`CSR`.`CASH_SALE_RETURN_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CSR`.`DATE` AS `GL_DATE`,concat('CSR-IS ',`CSR`.`CSR_NUMBER`) AS `REFERENCE_NUMBER`,concat('CS-IS ',`CS`.`CS_NUMBER`) AS `DESCRIPTION`,0 AS `DEBIT`,(coalesce(`CSRI`.`UNIT_COST`,0) * `CSRI`.`QUANTITY`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`CASH_SALE_RETURN_ITEM` `CSRI` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `CSRI`.`CASH_SALE_RETURN_ID`))) join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSR`.`CASH_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CSR`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSRI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`INVENTORY_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CSR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`CSRI`.`UNIT_COST` is not null) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CSR`.`CASH_SALE_TYPE_ID` = 3)) union all select 'CASH SALES RETURN - IS' AS `SOURCE`,`CSR`.`CASH_SALE_RETURN_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CSR`.`DATE` AS `GL_DATE`,concat('CSR-IS ',`CSR`.`CSR_NUMBER`) AS `REFERENCE_NUMBER`,concat('CS-IS ',`CS`.`CSR_NUMBER`) AS `DESCRIPTION`,0 AS `DEBIT`,(coalesce(`CSRI`.`UNIT_COST`,0) * `CSRI`.`QUANTITY`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`CASH_SALE_RETURN_ITEM` `CSRI` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `CSRI`.`CASH_SALE_RETURN_ID`))) join `CASH_SALE_RETURN` `CS` on((`CS`.`CASH_SALE_RETURN_ID` = `CSR`.`REF_CASH_SALE_RETURN_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CSR`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSRI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`INVENTORY_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CSR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`CSRI`.`UNIT_COST` is not null) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CSR`.`CASH_SALE_TYPE_ID` = 3)) union all select 'CASH SALES RETURN' AS `SOURCE`,`CSR`.`CASH_SALE_RETURN_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CSR`.`DATE` AS `GL_DATE`,concat('CSR ',`CSR`.`CSR_NUMBER`) AS `REFERENCE_NUMBER`,concat('CS-',`CS`.`CS_NUMBER`) AS `DESCRIPTION`,0 AS `DEBIT`,(`CSRI`.`QUANTITY` * `CSRI`.`SRP`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`CASH_SALE_RETURN_ITEM` `CSRI` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `CSRI`.`CASH_SALE_RETURN_ID`))) join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSR`.`CASH_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CSR`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSRI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`SALES_RETURN_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CSR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CSR`.`CASH_SALE_TYPE_ID` = 1)) union all select 'CASH SALES RETURN' AS `SOURCE`,`CSR`.`CASH_SALE_RETURN_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CSR`.`DATE` AS `GL_DATE`,concat('CSR ',`CSR`.`CSR_NUMBER`) AS `REFERENCE_NUMBER`,concat('CSR-',`CS`.`CSR_NUMBER`) AS `DESCRIPTION`,0 AS `DEBIT`,(`CSRI`.`QUANTITY` * `CSRI`.`SRP`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`CASH_SALE_RETURN_ITEM` `CSRI` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `CSRI`.`CASH_SALE_RETURN_ID`))) join `CASH_SALE_RETURN` `CS` on((`CS`.`CASH_SALE_RETURN_ID` = `CSR`.`REF_CASH_SALE_RETURN_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CSR`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSRI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`SALES_RETURN_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CSR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CSR`.`CASH_SALE_TYPE_ID` = 1)) union all select 'CASH SALES RETURN - IS' AS `SOURCE`,`CSR`.`CASH_SALE_RETURN_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CSR`.`DATE` AS `GL_DATE`,concat('CSR-IS ',`CSR`.`CSR_NUMBER`) AS `REFERENCE_NUMBER`,concat('CS-IS ',`CS`.`CS_NUMBER`) AS `DESCRIPTION`,0 AS `DEBIT`,(`CSRI`.`QUANTITY` * `CSRI`.`SRP`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`CASH_SALE_RETURN_ITEM` `CSRI` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `CSRI`.`CASH_SALE_RETURN_ID`))) join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSR`.`CASH_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CSR`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSRI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`SALES_RETURN_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CSR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CSR`.`CASH_SALE_TYPE_ID` = 3)) union all select 'CASH SALES RETURN - IS' AS `SOURCE`,`CSR`.`CASH_SALE_RETURN_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CSR`.`DATE` AS `GL_DATE`,concat('CSR-IS ',`CSR`.`CSR_NUMBER`) AS `REFERENCE_NUMBER`,concat('CSR-IS ',`CS`.`CSR_NUMBER`) AS `DESCRIPTION`,0 AS `DEBIT`,(`CSRI`.`QUANTITY` * `CSRI`.`SRP`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`CASH_SALE_RETURN_ITEM` `CSRI` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `CSRI`.`CASH_SALE_RETURN_ID`))) join `CASH_SALE_RETURN` `CS` on((`CS`.`CASH_SALE_RETURN_ID` = `CSR`.`REF_CASH_SALE_RETURN_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CSR`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSRI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`SALES_RETURN_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CSR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CSR`.`CASH_SALE_TYPE_ID` = 3)) union all select 'CASH SALES RETURN' AS `SOURCE`,`CSR`.`CASH_SALE_RETURN_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CSR`.`DATE` AS `GL_DATE`,concat('CSR ',`CSR`.`CSR_NUMBER`) AS `REFERENCE_NUMBER`,concat('CS-',`CS`.`CS_NUMBER`) AS `DESCRIPTION`,0 AS `DEBIT`,coalesce(-(`CSRI`.`DISCOUNT`),0) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`CASH_SALE_RETURN_ITEM` `CSRI` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `CSRI`.`CASH_SALE_RETURN_ID`))) join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSR`.`CASH_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CSR`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSRI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`SALES_DISCOUNT_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CSR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`CSRI`.`DISCOUNT` is not null) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CSR`.`CASH_SALE_TYPE_ID` = 1)) union all select 'CASH SALES RETURN' AS `SOURCE`,`CSR`.`CASH_SALE_RETURN_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CSR`.`DATE` AS `GL_DATE`,concat('CSR ',`CSR`.`CSR_NUMBER`) AS `REFERENCE_NUMBER`,concat('CSR-',`CS`.`CSR_NUMBER`) AS `DESCRIPTION`,0 AS `DEBIT`,coalesce(-(`CSRI`.`DISCOUNT`),0) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`CASH_SALE_RETURN_ITEM` `CSRI` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `CSRI`.`CASH_SALE_RETURN_ID`))) join `CASH_SALE_RETURN` `CS` on((`CS`.`CASH_SALE_RETURN_ID` = `CSR`.`REF_CASH_SALE_RETURN_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CSR`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSRI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`SALES_DISCOUNT_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CSR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`CSRI`.`DISCOUNT` is not null) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CSR`.`CASH_SALE_TYPE_ID` = 1)) union all select 'CASH SALES RETURN - IS' AS `SOURCE`,`CSR`.`CASH_SALE_RETURN_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CSR`.`DATE` AS `GL_DATE`,concat('CSR-IS ',`CSR`.`CSR_NUMBER`) AS `REFERENCE_NUMBER`,concat('CS-IS ',`CS`.`CS_NUMBER`) AS `DESCRIPTION`,0 AS `DEBIT`,coalesce(-(`CSRI`.`DISCOUNT`),0) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`CASH_SALE_RETURN_ITEM` `CSRI` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `CSRI`.`CASH_SALE_RETURN_ID`))) join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSR`.`CASH_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CSR`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSRI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`SALES_DISCOUNT_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CSR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`CSRI`.`DISCOUNT` is not null) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CSR`.`CASH_SALE_TYPE_ID` = 3)) union all select 'CASH SALES RETURN - IS' AS `SOURCE`,`CSR`.`CASH_SALE_RETURN_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CSR`.`DATE` AS `GL_DATE`,concat('CSR-IS ',`CSR`.`CSR_NUMBER`) AS `REFERENCE_NUMBER`,concat('CSR-IS ',`CS`.`CSR_NUMBER`) AS `DESCRIPTION`,0 AS `DEBIT`,coalesce(-(`CSRI`.`DISCOUNT`),0) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`CASH_SALE_RETURN_ITEM` `CSRI` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `CSRI`.`CASH_SALE_RETURN_ID`))) join `CASH_SALE_RETURN` `CS` on((`CS`.`CASH_SALE_RETURN_ID` = `CSR`.`REF_CASH_SALE_RETURN_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `CSR`.`AR_CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CSRI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`SALES_DISCOUNT_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CSR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`CSRI`.`DISCOUNT` is not null) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CSR`.`CASH_SALE_TYPE_ID` = 3)) union all select 'CASH SALES RETURN' AS `SOURCE`,`CSR`.`CASH_SALE_RETURN_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CSR`.`DATE` AS `GL_DATE`,concat('CSR ',`CSR`.`CSR_NUMBER`) AS `REFERENCE_NUMBER`,concat('CS-',`CS`.`CS_NUMBER`) AS `DESCRIPTION`,`CSRI`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`CASH_SALE_RETURN_ITEM` `CSRI` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `CSRI`.`CASH_SALE_RETURN_ID`))) join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSR`.`CASH_SALE_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CSR`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CASH_SALES_RM_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`DEBIT_ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CSR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on(((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CSR`.`CASH_SALE_TYPE_ID` = 1)))) union all select 'CASH SALES RETURN' AS `SOURCE`,`CSR`.`CASH_SALE_RETURN_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CSR`.`DATE` AS `GL_DATE`,concat('CSR ',`CSR`.`CSR_NUMBER`) AS `REFERENCE_NUMBER`,concat('CSR-',`CS`.`CSR_NUMBER`) AS `DESCRIPTION`,`CSRI`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`CASH_SALE_RETURN_ITEM` `CSRI` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `CSRI`.`CASH_SALE_RETURN_ID`))) join `CASH_SALE_RETURN` `CS` on((`CS`.`CASH_SALE_RETURN_ID` = `CSR`.`REF_CASH_SALE_RETURN_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CSR`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CASH_SALES_RM_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`DEBIT_ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CSR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on(((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CSR`.`CASH_SALE_TYPE_ID` = 1)))) union all select 'CASH SALES RETURN - IS' AS `SOURCE`,`CSR`.`CASH_SALE_RETURN_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CSR`.`DATE` AS `GL_DATE`,concat('CSR-IS ',`CSR`.`CSR_NUMBER`) AS `REFERENCE_NUMBER`,concat('CS-IS',`CS`.`CS_NUMBER`) AS `DESCRIPTION`,`CSRI`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`CASH_SALE_RETURN_ITEM` `CSRI` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `CSRI`.`CASH_SALE_RETURN_ID`))) join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSR`.`CASH_SALE_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CSR`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CASH_SALES_RM_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`DEBIT_ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CSR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on(((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CSR`.`CASH_SALE_TYPE_ID` = 3)))) union all select 'CASH SALES RETURN - IS' AS `SOURCE`,`CSR`.`CASH_SALE_RETURN_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CSR`.`DATE` AS `GL_DATE`,concat('CSR-IS ',`CSR`.`CSR_NUMBER`) AS `REFERENCE_NUMBER`,concat('CSR-IS',`CS`.`CSR_NUMBER`) AS `DESCRIPTION`,`CSRI`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`CASH_SALE_RETURN_ITEM` `CSRI` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `CSRI`.`CASH_SALE_RETURN_ID`))) join `CASH_SALE_RETURN` `CS` on((`CS`.`CASH_SALE_RETURN_ID` = `CSR`.`REF_CASH_SALE_RETURN_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CSR`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CASH_SALES_RM_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`DEBIT_ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CSR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on(((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CSR`.`CASH_SALE_TYPE_ID` = 3)))) union all select 'CASH SALES RETURN' AS `SOURCE`,`CSR`.`CASH_SALE_RETURN_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CSR`.`DATE` AS `GL_DATE`,concat('CSR ',`CSR`.`CSR_NUMBER`) AS `REFERENCE_NUMBER`,concat('CS-',`CS`.`CS_NUMBER`) AS `DESCRIPTION`,`CSRI`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`CASH_SALE_RETURN_ITEM` `CSRI` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `CSRI`.`CASH_SALE_RETURN_ID`))) join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSR`.`CASH_SALE_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CSR`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CASH_SALES_RM_ID`))) join `BANK_ACCOUNT` `BA` on((`BA`.`BANK_ACCOUNT_ID` = `RM`.`BANK_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `BA`.`CASH_IN_BANK_ACCT_ID`) and (`AC`.`COMPANY_ID` = `CSR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on(((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CSR`.`CASH_SALE_TYPE_ID` = 1)))) union all select 'CASH SALES RETURN' AS `SOURCE`,`CSR`.`CASH_SALE_RETURN_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CSR`.`DATE` AS `GL_DATE`,concat('CSR ',`CSR`.`CSR_NUMBER`) AS `REFERENCE_NUMBER`,concat('CSR-',`CS`.`CSR_NUMBER`) AS `DESCRIPTION`,`CSRI`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`CASH_SALE_RETURN_ITEM` `CSRI` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `CSRI`.`CASH_SALE_RETURN_ID`))) join `CASH_SALE_RETURN` `CS` on((`CS`.`CASH_SALE_RETURN_ID` = `CSR`.`REF_CASH_SALE_RETURN_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CSR`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CASH_SALES_RM_ID`))) join `BANK_ACCOUNT` `BA` on((`BA`.`BANK_ACCOUNT_ID` = `RM`.`BANK_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `BA`.`CASH_IN_BANK_ACCT_ID`) and (`AC`.`COMPANY_ID` = `CSR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on(((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CSR`.`CASH_SALE_TYPE_ID` = 1)))) union all select 'CASH SALES RETURN - IS' AS `SOURCE`,`CSR`.`CASH_SALE_RETURN_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CSR`.`DATE` AS `GL_DATE`,concat('CSR-IS',`CSR`.`CSR_NUMBER`) AS `REFERENCE_NUMBER`,concat('CS-IS',`CS`.`CS_NUMBER`) AS `DESCRIPTION`,`CSRI`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`CASH_SALE_RETURN_ITEM` `CSRI` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `CSRI`.`CASH_SALE_RETURN_ID`))) join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSR`.`CASH_SALE_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CSR`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CASH_SALES_RM_ID`))) join `BANK_ACCOUNT` `BA` on((`BA`.`BANK_ACCOUNT_ID` = `RM`.`BANK_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `BA`.`CASH_IN_BANK_ACCT_ID`) and (`AC`.`COMPANY_ID` = `CSR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on(((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CSR`.`CASH_SALE_TYPE_ID` = 3)))) union all select 'CASH SALES RETURN - IS' AS `SOURCE`,`CSR`.`CASH_SALE_RETURN_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CSR`.`DATE` AS `GL_DATE`,concat('CSR-IS',`CSR`.`CSR_NUMBER`) AS `REFERENCE_NUMBER`,concat('CSR-IS',`CS`.`CSR_NUMBER`) AS `DESCRIPTION`,`CSRI`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`CASH_SALE_RETURN_ITEM` `CSRI` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `CSRI`.`CASH_SALE_RETURN_ID`))) join `CASH_SALE_RETURN` `CS` on((`CS`.`CASH_SALE_RETURN_ID` = `CSR`.`REF_CASH_SALE_RETURN_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CSR`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CASH_SALES_RM_ID`))) join `BANK_ACCOUNT` `BA` on((`BA`.`BANK_ACCOUNT_ID` = `RM`.`BANK_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `BA`.`CASH_IN_BANK_ACCT_ID`) and (`AC`.`COMPANY_ID` = `CSR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on(((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CSR`.`CASH_SALE_TYPE_ID` = 3)))) union all select 'CASH SALES RETURN' AS `SOURCE`,`CSR`.`CASH_SALE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CSR`.`DATE` AS `GL_DATE`,concat('CSR-',`CSR`.`CSR_NUMBER`) AS `REFERENCE_NUMBER`,concat('CS-',`CS`.`CS_NUMBER`) AS `DESCRIPTION`,0 AS `DEBIT`,`AL`.`AMOUNT` AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CASH_SALE_RETURN_AR_LINE` `AL` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `AL`.`CASH_SALE_RETURN_ID`))) join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSR`.`CASH_SALE_ID`))) join `AR_LINE_SETUP` `ALS` on((`ALS`.`AR_LINE_SETUP_ID` = `AL`.`AR_LINE_SETUP_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ALS`.`ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CSR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`CSR`.`CASH_SALE_TYPE_ID` = 1)) union all select 'CASH SALES RETURN' AS `SOURCE`,`CSR`.`CASH_SALE_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CSR`.`DATE` AS `GL_DATE`,concat('CSR-',`CSR`.`CSR_NUMBER`) AS `REFERENCE_NUMBER`,concat('CSR-',`CS`.`CSR_NUMBER`) AS `DESCRIPTION`,0 AS `DEBIT`,`AL`.`AMOUNT` AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CASH_SALE_RETURN_AR_LINE` `AL` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `AL`.`CASH_SALE_RETURN_ID`))) join `CASH_SALE_RETURN` `CS` on((`CS`.`CASH_SALE_RETURN_ID` = `CSR`.`REF_CASH_SALE_RETURN_ID`))) join `AR_LINE_SETUP` `ALS` on((`ALS`.`AR_LINE_SETUP_ID` = `AL`.`AR_LINE_SETUP_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ALS`.`ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CSR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`CSR`.`CASH_SALE_TYPE_ID` = 1)) union all select 'CASH SALES RETURN' AS `SOURCE`,`CSR`.`CASH_SALE_RETURN_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CSR`.`DATE` AS `GL_DATE`,concat('CSR-',`CSR`.`CSR_NUMBER`) AS `REFERENCE_NUMBER`,concat('CS-',`CS`.`CS_NUMBER`) AS `DESCRIPTION`,`AL`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`CASH_SALE_RETURN_AR_LINE` `AL` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `AL`.`CASH_SALE_RETURN_ID`))) join `CASH_SALE` `CS` on((`CS`.`CASH_SALE_ID` = `CSR`.`CASH_SALE_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CSR`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CASH_SALES_RM_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`DEBIT_ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CSR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`CSR`.`CASH_SALE_TYPE_ID` = 1)) union all select 'CASH SALES RETURN' AS `SOURCE`,`CSR`.`CASH_SALE_RETURN_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CSR`.`DATE` AS `GL_DATE`,concat('CSR-',`CSR`.`CSR_NUMBER`) AS `REFERENCE_NUMBER`,concat('CSR-',`CS`.`CSR_NUMBER`) AS `DESCRIPTION`,`AL`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`CASH_SALE_RETURN_AR_LINE` `AL` join `CASH_SALE_RETURN` `CSR` on((`CSR`.`CASH_SALE_RETURN_ID` = `AL`.`CASH_SALE_RETURN_ID`))) join `CASH_SALE_RETURN` `CS` on((`CS`.`CASH_SALE_RETURN_ID` = `CSR`.`REF_CASH_SALE_RETURN_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CSR`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CASH_SALES_RM_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`DEBIT_ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CSR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CSR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`FW`.`CURRENT_STATUS_ID` <> 4) and (`CSR`.`CASH_SALE_TYPE_ID` = 1)) union all select 'ACCOUNT SALES RETURN' AS `SOURCE`,`ART`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`ART`.`TRANSACTION_DATE` AS `GL_DATE`,concat('ASR-',`ART`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,concat('AS-',`ASR`.`SEQUENCE_NO`) AS `DESCRIPTION`,(coalesce(`ASI`.`UNIT_COST`,0) * `ASI`.`QUANTITY`) AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `ASI`.`AR_TRANSACTION_ID`))) join `AR_TRANSACTION` `ASR` on((`ASR`.`AR_TRANSACTION_ID` = `ART`.`ACCOUNT_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `ASI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`COST_ACCOUNT`) and (`AC`.`COMPANY_ID` = `ART`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`ASI`.`UNIT_COST` is not null) and (`ART`.`AR_TRANSACTION_TYPE_ID` = 5) and (`ASR`.`AR_TRANSACTION_TYPE_ID` = 4) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'ACCOUNT SALES RETURN - IS' AS `SOURCE`,`ART`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`ART`.`TRANSACTION_DATE` AS `GL_DATE`,concat('ASR-IS ',`ART`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,concat('AS-IS ',`ASR`.`SEQUENCE_NO`) AS `DESCRIPTION`,(coalesce(`ASI`.`UNIT_COST`,0) * `ASI`.`QUANTITY`) AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `ASI`.`AR_TRANSACTION_ID`))) join `AR_TRANSACTION` `ASR` on((`ASR`.`AR_TRANSACTION_ID` = `ART`.`ACCOUNT_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `ASI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`COST_ACCOUNT`) and (`AC`.`COMPANY_ID` = `ART`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`ASI`.`UNIT_COST` is not null) and (`ART`.`AR_TRANSACTION_TYPE_ID` = 11) and (`ASR`.`AR_TRANSACTION_TYPE_ID` = 10) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'ACCOUNT SALES RETURN' AS `SOURCE`,`ART`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`ART`.`TRANSACTION_DATE` AS `GL_DATE`,concat('ASR-',`ART`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,concat('AS-',`ASR`.`SEQUENCE_NO`) AS `DESCRIPTION`,0 AS `DEBIT`,(coalesce(`ASI`.`UNIT_COST`,0) * `ASI`.`QUANTITY`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `ASI`.`AR_TRANSACTION_ID`))) join `AR_TRANSACTION` `ASR` on((`ASR`.`AR_TRANSACTION_ID` = `ART`.`ACCOUNT_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `ASI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`INVENTORY_ACCOUNT`) and (`AC`.`COMPANY_ID` = `ART`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`ASI`.`UNIT_COST` is not null) and (`ART`.`AR_TRANSACTION_TYPE_ID` = 5) and (`ASR`.`AR_TRANSACTION_TYPE_ID` = 4) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'ACCOUNT SALES RETURN - IS' AS `SOURCE`,`ART`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`ART`.`TRANSACTION_DATE` AS `GL_DATE`,concat('ASR-IS ',`ART`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,concat('AS-IS ',`ASR`.`SEQUENCE_NO`) AS `DESCRIPTION`,0 AS `DEBIT`,(coalesce(`ASI`.`UNIT_COST`,0) * `ASI`.`QUANTITY`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `ASI`.`AR_TRANSACTION_ID`))) join `AR_TRANSACTION` `ASR` on((`ASR`.`AR_TRANSACTION_ID` = `ART`.`ACCOUNT_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `ASI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`INVENTORY_ACCOUNT`) and (`AC`.`COMPANY_ID` = `ART`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`ASI`.`UNIT_COST` is not null) and (`ART`.`AR_TRANSACTION_TYPE_ID` = 11) and (`ASR`.`AR_TRANSACTION_TYPE_ID` = 10) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'ACCOUNT SALES RETURN' AS `SOURCE`,`ART`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`ART`.`TRANSACTION_DATE` AS `GL_DATE`,concat('ASR-',`ART`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,concat('AS-',`ASR`.`SEQUENCE_NO`) AS `DESCRIPTION`,0 AS `DEBIT`,(`ASI`.`QUANTITY` * `ASI`.`SRP`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `ASI`.`AR_TRANSACTION_ID`))) join `AR_TRANSACTION` `ASR` on((`ASR`.`AR_TRANSACTION_ID` = `ART`.`ACCOUNT_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `ASI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`SALES_RETURN_ACCOUNT`) and (`AC`.`COMPANY_ID` = `ART`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`ART`.`AR_TRANSACTION_TYPE_ID` = 5) and (`ASR`.`AR_TRANSACTION_TYPE_ID` = 4) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'ACCOUNT SALES RETURN - IS' AS `SOURCE`,`ART`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`ART`.`TRANSACTION_DATE` AS `GL_DATE`,concat('ASR-IS ',`ART`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,concat('AS-IS ',`ASR`.`SEQUENCE_NO`) AS `DESCRIPTION`,0 AS `DEBIT`,(`ASI`.`QUANTITY` * `ASI`.`SRP`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `ASI`.`AR_TRANSACTION_ID`))) join `AR_TRANSACTION` `ASR` on((`ASR`.`AR_TRANSACTION_ID` = `ART`.`ACCOUNT_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `ASI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`SALES_RETURN_ACCOUNT`) and (`AC`.`COMPANY_ID` = `ART`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`ART`.`AR_TRANSACTION_TYPE_ID` = 11) and (`ASR`.`AR_TRANSACTION_TYPE_ID` = 10) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'ACCOUNT SALES RETURN' AS `SOURCE`,`ART`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`ART`.`TRANSACTION_DATE` AS `GL_DATE`,concat('ASR-',`ART`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,concat('AS-',`ASR`.`SEQUENCE_NO`) AS `DESCRIPTION`,0 AS `DEBIT`,coalesce(-(`ASI`.`DISCOUNT`),0) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `ASI`.`AR_TRANSACTION_ID`))) join `AR_TRANSACTION` `ASR` on((`ASR`.`AR_TRANSACTION_ID` = `ART`.`ACCOUNT_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `ASI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`SALES_DISCOUNT_ACCOUNT`) and (`AC`.`COMPANY_ID` = `ART`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`ASI`.`DISCOUNT` is not null) and (`ART`.`AR_TRANSACTION_TYPE_ID` = 5) and (`ASR`.`AR_TRANSACTION_TYPE_ID` = 4) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'ACCOUNT SALES RETURN - IS' AS `SOURCE`,`ART`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`ART`.`TRANSACTION_DATE` AS `GL_DATE`,concat('ASR-IS ',`ART`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,concat('AS-IS ',`ASR`.`SEQUENCE_NO`) AS `DESCRIPTION`,0 AS `DEBIT`,coalesce(-(`ASI`.`DISCOUNT`),0) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `ASI`.`AR_TRANSACTION_ID`))) join `AR_TRANSACTION` `ASR` on((`ASR`.`AR_TRANSACTION_ID` = `ART`.`ACCOUNT_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `ASI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`SALES_DISCOUNT_ACCOUNT`) and (`AC`.`COMPANY_ID` = `ART`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`ASI`.`DISCOUNT` is not null) and (`ART`.`AR_TRANSACTION_TYPE_ID` = 11) and (`ASR`.`AR_TRANSACTION_TYPE_ID` = 10) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'ACCOUNT SALES RETURN' AS `SOURCE`,`ART`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`ART`.`TRANSACTION_DATE` AS `GL_DATE`,concat('ASR-',`ART`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,concat('AS-',`ASR`.`SEQUENCE_NO`) AS `DESCRIPTION`,`ASI`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `ASI`.`AR_TRANSACTION_ID`))) join `AR_TRANSACTION` `ASR` on((`ASR`.`AR_TRANSACTION_ID` = `ART`.`ACCOUNT_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ACA`.`DEFAULT_DEBIT_AC_ID`) and (`AC`.`COMPANY_ID` = `ART`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ART`.`AR_TRANSACTION_TYPE_ID` = 5) and (`ASR`.`AR_TRANSACTION_TYPE_ID` = 4) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'ACCOUNT SALES RETURN - IS' AS `SOURCE`,`ART`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`ART`.`TRANSACTION_DATE` AS `GL_DATE`,concat('ASR-IS ',`ART`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,concat('AS-IS ',`ASR`.`SEQUENCE_NO`) AS `DESCRIPTION`,`ASI`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`ACCOUNT_SALE_ITEM` `ASI` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `ASI`.`AR_TRANSACTION_ID`))) join `AR_TRANSACTION` `ASR` on((`ASR`.`AR_TRANSACTION_ID` = `ART`.`ACCOUNT_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ACA`.`DEFAULT_DEBIT_AC_ID`) and (`AC`.`COMPANY_ID` = `ART`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ART`.`AR_TRANSACTION_TYPE_ID` = 11) and (`ASR`.`AR_TRANSACTION_TYPE_ID` = 10) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'ACCOUNT SALES RETURN' AS `SOURCE`,`ART`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`ART`.`TRANSACTION_DATE` AS `GL_DATE`,concat('ASR ',`ART`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,concat((case when (`ASR`.`AR_TRANSACTION_TYPE_ID` = 4) then 'AS-' else 'ASR-' end),`ASR`.`SEQUENCE_NO`) AS `DESCRIPTION`,`AL`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`AR_LINE` `AL` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `AL`.`AR_TRANSACTION_ID`))) join `AR_TRANSACTION` `ASR` on((`ASR`.`AR_TRANSACTION_ID` = `ART`.`ACCOUNT_SALE_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `ART`.`CUSTOMER_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ACA`.`DEFAULT_DEBIT_AC_ID`) and (`AC`.`COMPANY_ID` = `ART`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ART`.`AR_TRANSACTION_TYPE_ID` = 5) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'ACCOUNT SALES RETURN' AS `SOURCE`,`ART`.`AR_TRANSACTION_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`ART`.`TRANSACTION_DATE` AS `GL_DATE`,concat('ASR ',`ART`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,concat((case when (`ASR`.`AR_TRANSACTION_TYPE_ID` = 4) then 'AS-' else 'ASR-' end),`ASR`.`SEQUENCE_NO`) AS `DESCRIPTION`,0 AS `DEBIT`,`AL`.`AMOUNT` AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`AR_LINE` `AL` join `AR_TRANSACTION` `ART` on((`ART`.`AR_TRANSACTION_ID` = `AL`.`AR_TRANSACTION_ID`))) join `AR_TRANSACTION` `ASR` on((`ASR`.`AR_TRANSACTION_ID` = `ART`.`ACCOUNT_SALE_ID`))) join `AR_LINE_SETUP` `ALS` on((`ALS`.`AR_LINE_SETUP_ID` = `AL`.`AR_LINE_SETUP_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ALS`.`ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `ART`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`ART`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ART`.`AR_TRANSACTION_TYPE_ID` = 5) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'CUSTOMER ADVANCE PAYMENT' AS `SOURCE`,`CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAP`.`RECEIPT_DATE` AS `GL_DATE`,concat('CAP-',`CAP`.`CAP_NUMBER`) AS `REFERENCE_NUMBER`,`CAP`.`SALE_INVOICE_NO` AS `DESCRIPTION`,`CAPI`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CUSTOMER_ADVANCE_PAYMENT_ITEM` `CAPI` join `CUSTOMER_ADVANCE_PAYMENT` `CAP` on((`CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID` = `CAPI`.`CUSTOMER_ADVANCE_PAYMENT_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CAP`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CUSTOMER_ADV_PAYMENT_RM_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`DEBIT_ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CAP`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAP`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`CAP`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 1) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'CUSTOMER ADVANCE PAYMENT' AS `SOURCE`,`CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAP`.`RECEIPT_DATE` AS `GL_DATE`,concat('CAP-',`CAP`.`CAP_NUMBER`) AS `REFERENCE_NUMBER`,`CAP`.`SALE_INVOICE_NO` AS `DESCRIPTION`,`CAL`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CAP_AR_LINE` `CAL` join `CUSTOMER_ADVANCE_PAYMENT` `CAP` on((`CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID` = `CAL`.`CUSTOMER_ADVANCE_PAYMENT_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CAP`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CUSTOMER_ADV_PAYMENT_RM_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`DEBIT_ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CAP`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAP`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`CAP`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 1) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'CUSTOMER ADVANCE PAYMENT' AS `SOURCE`,`CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAP`.`RECEIPT_DATE` AS `GL_DATE`,concat('CAP-',`CAP`.`CAP_NUMBER`) AS `REFERENCE_NUMBER`,`CAP`.`SALE_INVOICE_NO` AS `DESCRIPTION`,`CAPI`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`CUSTOMER_ADVANCE_PAYMENT_ITEM` `CAPI` join `CUSTOMER_ADVANCE_PAYMENT` `CAP` on((`CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID` = `CAPI`.`CUSTOMER_ADVANCE_PAYMENT_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CAP`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CUSTOMER_ADV_PAYMENT_RM_ID`))) join `BANK_ACCOUNT` `BA` on((`BA`.`BANK_ACCOUNT_ID` = `RM`.`BANK_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `BA`.`CASH_IN_BANK_ACCT_ID`) and (`AC`.`COMPANY_ID` = `CAP`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAP`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`CAP`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 1) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'CUSTOMER ADVANCE PAYMENT' AS `SOURCE`,`CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAP`.`RECEIPT_DATE` AS `GL_DATE`,concat('CAP-',`CAP`.`CAP_NUMBER`) AS `REFERENCE_NUMBER`,`CAP`.`SALE_INVOICE_NO` AS `DESCRIPTION`,`CAL`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`CAP_AR_LINE` `CAL` join `CUSTOMER_ADVANCE_PAYMENT` `CAP` on((`CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID` = `CAL`.`CUSTOMER_ADVANCE_PAYMENT_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CAP`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CUSTOMER_ADV_PAYMENT_RM_ID`))) join `BANK_ACCOUNT` `BA` on((`BA`.`BANK_ACCOUNT_ID` = `RM`.`BANK_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `BA`.`CASH_IN_BANK_ACCT_ID`) and (`AC`.`COMPANY_ID` = `CAP`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAP`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`CAP`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 1) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'CUSTOMER ADVANCE PAYMENT' AS `SOURCE`,`CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAP`.`RECEIPT_DATE` AS `GL_DATE`,concat('CAP-',`CAP`.`CAP_NUMBER`) AS `REFERENCE_NUMBER`,`CAP`.`SALE_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,`CAPI`.`AMOUNT` AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CUSTOMER_ADVANCE_PAYMENT_ITEM` `CAPI` join `CUSTOMER_ADVANCE_PAYMENT` `CAP` on((`CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID` = `CAPI`.`CUSTOMER_ADVANCE_PAYMENT_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CAP`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CUSTOMER_ADV_PAYMENT_RM_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`CREDIT_ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CAP`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAP`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`CAP`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 1) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'CUSTOMER ADVANCE PAYMENT' AS `SOURCE`,`CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAP`.`RECEIPT_DATE` AS `GL_DATE`,concat('CAP-',`CAP`.`CAP_NUMBER`) AS `REFERENCE_NUMBER`,`CAP`.`SALE_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,`CAL`.`AMOUNT` AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CAP_AR_LINE` `CAL` join `CUSTOMER_ADVANCE_PAYMENT` `CAP` on((`CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID` = `CAL`.`CUSTOMER_ADVANCE_PAYMENT_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CAP`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CUSTOMER_ADV_PAYMENT_RM_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`CREDIT_ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CAP`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAP`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`CAP`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 1) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'CUSTOMER ADVANCE PAYMENT - IS ' AS `SOURCE`,`CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAP`.`RECEIPT_DATE` AS `GL_DATE`,concat('CAP-IS ',`CAP`.`CAP_NUMBER`) AS `REFERENCE_NUMBER`,`CAP`.`SALE_INVOICE_NO` AS `DESCRIPTION`,`CAPI`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CUSTOMER_ADVANCE_PAYMENT_ITEM` `CAPI` join `CUSTOMER_ADVANCE_PAYMENT` `CAP` on((`CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID` = `CAPI`.`CUSTOMER_ADVANCE_PAYMENT_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CAP`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CUSTOMER_ADV_PAYMENT_RM_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`DEBIT_ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CAP`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAP`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`CAP`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 3) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'CUSTOMER ADVANCE PAYMENT - IS' AS `SOURCE`,`CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAP`.`RECEIPT_DATE` AS `GL_DATE`,concat('CAP-IS ',`CAP`.`CAP_NUMBER`) AS `REFERENCE_NUMBER`,`CAP`.`SALE_INVOICE_NO` AS `DESCRIPTION`,`CAL`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CAP_AR_LINE` `CAL` join `CUSTOMER_ADVANCE_PAYMENT` `CAP` on((`CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID` = `CAL`.`CUSTOMER_ADVANCE_PAYMENT_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CAP`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CUSTOMER_ADV_PAYMENT_RM_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`DEBIT_ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CAP`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAP`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`CAP`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 3) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'CUSTOMER ADVANCE PAYMENT - IS' AS `SOURCE`,`CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAP`.`RECEIPT_DATE` AS `GL_DATE`,concat('CAP-IS ',`CAP`.`CAP_NUMBER`) AS `REFERENCE_NUMBER`,`CAP`.`SALE_INVOICE_NO` AS `DESCRIPTION`,`CAPI`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`CUSTOMER_ADVANCE_PAYMENT_ITEM` `CAPI` join `CUSTOMER_ADVANCE_PAYMENT` `CAP` on((`CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID` = `CAPI`.`CUSTOMER_ADVANCE_PAYMENT_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CAP`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CUSTOMER_ADV_PAYMENT_RM_ID`))) join `BANK_ACCOUNT` `BA` on((`BA`.`BANK_ACCOUNT_ID` = `RM`.`BANK_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `BA`.`CASH_IN_BANK_ACCT_ID`) and (`AC`.`COMPANY_ID` = `CAP`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAP`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`CAP`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 3) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'CUSTOMER ADVANCE PAYMENT - IS' AS `SOURCE`,`CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAP`.`RECEIPT_DATE` AS `GL_DATE`,concat('CAP-IS ',`CAP`.`CAP_NUMBER`) AS `REFERENCE_NUMBER`,`CAP`.`SALE_INVOICE_NO` AS `DESCRIPTION`,`CAL`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`CAP_AR_LINE` `CAL` join `CUSTOMER_ADVANCE_PAYMENT` `CAP` on((`CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID` = `CAL`.`CUSTOMER_ADVANCE_PAYMENT_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CAP`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CUSTOMER_ADV_PAYMENT_RM_ID`))) join `BANK_ACCOUNT` `BA` on((`BA`.`BANK_ACCOUNT_ID` = `RM`.`BANK_ACCOUNT_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `BA`.`CASH_IN_BANK_ACCT_ID`) and (`AC`.`COMPANY_ID` = `CAP`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAP`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`CAP`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 3) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'CUSTOMER ADVANCE PAYMENT - IS' AS `SOURCE`,`CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAP`.`RECEIPT_DATE` AS `GL_DATE`,concat('CAP-IS ',`CAP`.`CAP_NUMBER`) AS `REFERENCE_NUMBER`,`CAP`.`SALE_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,`CAPI`.`AMOUNT` AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CUSTOMER_ADVANCE_PAYMENT_ITEM` `CAPI` join `CUSTOMER_ADVANCE_PAYMENT` `CAP` on((`CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID` = `CAPI`.`CUSTOMER_ADVANCE_PAYMENT_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CAP`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CUSTOMER_ADV_PAYMENT_RM_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`CREDIT_ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CAP`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAP`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`CAP`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 3) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'CUSTOMER ADVANCE PAYMENT - IS' AS `SOURCE`,`CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAP`.`RECEIPT_DATE` AS `GL_DATE`,concat('CAP-IS',`CAP`.`CAP_NUMBER`) AS `REFERENCE_NUMBER`,`CAP`.`SALE_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,`CAL`.`AMOUNT` AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CAP_AR_LINE` `CAL` join `CUSTOMER_ADVANCE_PAYMENT` `CAP` on((`CAP`.`CUSTOMER_ADVANCE_PAYMENT_ID` = `CAL`.`CUSTOMER_ADVANCE_PAYMENT_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CAP`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CUSTOMER_ADV_PAYMENT_RM_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`CREDIT_ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CAP`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAP`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`CAP`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 3) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'STOCK ADJUSTMENT IN' AS `SOURCE`,`SA`.`STOCK_ADJUSTMENT_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`SA`.`SA_DATE` AS `GL_DATE`,concat('SA-',`SA`.`SA_NUMBER`) AS `REFERENCE_NUMBER`,`SA`.`REMARKS` AS `DESCRIPTION`,(coalesce(`SAI`.`UNIT_COST`,0) * `SAI`.`QUANTITY`) AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`STOCK_ADJUSTMENT_ITEM` `SAI` join `STOCK_ADJUSTMENT` `SA` on((`SA`.`STOCK_ADJUSTMENT_ID` = `SAI`.`STOCK_ADJUSTMENT_ID`))) join `STOCK_ADJUSTMENT_TYPE` `SAT` on((`SAT`.`STOCK_ADJUSTMENT_TYPE_ID` = `SA`.`STOCK_ADJUSTMENT_TYPE_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `SAI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`INVENTORY_ACCOUNT`) and (`AC`.`COMPANY_ID` = `SA`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`SA`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`SAI`.`QUANTITY` > 0) and (`SAI`.`UNIT_COST` is not null) and isnull(`SAI`.`EB_OBJECT_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'STOCK ADJUSTMENT IN - IS' AS `SOURCE`,`SA`.`STOCK_ADJUSTMENT_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`SA`.`SA_DATE` AS `GL_DATE`,concat('SA-IS ',`SA`.`SA_NUMBER`) AS `REFERENCE_NUMBER`,`SA`.`REMARKS` AS `DESCRIPTION`,(coalesce(`SAI`.`UNIT_COST`,0) * `SAI`.`QUANTITY`) AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`STOCK_ADJUSTMENT_ITEM` `SAI` join `STOCK_ADJUSTMENT` `SA` on((`SA`.`STOCK_ADJUSTMENT_ID` = `SAI`.`STOCK_ADJUSTMENT_ID`))) join `STOCK_ADJUSTMENT_TYPE` `SAT` on((`SAT`.`STOCK_ADJUSTMENT_TYPE_ID` = `SA`.`STOCK_ADJUSTMENT_TYPE_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `SAI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`INVENTORY_ACCOUNT`) and (`AC`.`COMPANY_ID` = `SA`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`SA`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`SAI`.`QUANTITY` > 0) and (`SAI`.`UNIT_COST` is not null) and (`SAI`.`EB_OBJECT_ID` is not null) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'STOCK ADJUSTMENT IN' AS `SOURCE`,`SA`.`STOCK_ADJUSTMENT_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`SA`.`SA_DATE` AS `GL_DATE`,concat('SA-',`SA`.`SA_NUMBER`) AS `REFERENCE_NUMBER`,`SA`.`REMARKS` AS `DESCRIPTION`,0 AS `DEBIT`,(coalesce(`SAI`.`UNIT_COST`,0) * `SAI`.`QUANTITY`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((`STOCK_ADJUSTMENT_ITEM` `SAI` join `STOCK_ADJUSTMENT` `SA` on((`SA`.`STOCK_ADJUSTMENT_ID` = `SAI`.`STOCK_ADJUSTMENT_ID`))) join `STOCK_ADJUSTMENT_TYPE` `SAT` on((`SAT`.`STOCK_ADJUSTMENT_TYPE_ID` = `SA`.`STOCK_ADJUSTMENT_TYPE_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `SAT`.`ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `SA`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`SA`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`SAI`.`QUANTITY` > 0) and (`SAI`.`UNIT_COST` is not null) and isnull(`SAI`.`EB_OBJECT_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'STOCK ADJUSTMENT IN - IS' AS `SOURCE`,`SA`.`STOCK_ADJUSTMENT_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`SA`.`SA_DATE` AS `GL_DATE`,concat('SA-IS ',`SA`.`SA_NUMBER`) AS `REFERENCE_NUMBER`,`SA`.`REMARKS` AS `DESCRIPTION`,0 AS `DEBIT`,(coalesce(`SAI`.`UNIT_COST`,0) * `SAI`.`QUANTITY`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((`STOCK_ADJUSTMENT_ITEM` `SAI` join `STOCK_ADJUSTMENT` `SA` on((`SA`.`STOCK_ADJUSTMENT_ID` = `SAI`.`STOCK_ADJUSTMENT_ID`))) join `STOCK_ADJUSTMENT_TYPE` `SAT` on((`SAT`.`STOCK_ADJUSTMENT_TYPE_ID` = `SA`.`STOCK_ADJUSTMENT_TYPE_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `SAT`.`ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `SA`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`SA`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`SAI`.`QUANTITY` > 0) and (`SAI`.`UNIT_COST` is not null) and (`SAI`.`EB_OBJECT_ID` is not null) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'STOCK ADJUSTMENT OUT' AS `SOURCE`,`SA`.`STOCK_ADJUSTMENT_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`SA`.`SA_DATE` AS `GL_DATE`,concat('SA-',`SA`.`SA_NUMBER`) AS `REFERENCE_NUMBER`,`SA`.`REMARKS` AS `DESCRIPTION`,(coalesce(`SAI`.`UNIT_COST`,0) * -(`SAI`.`QUANTITY`)) AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((`STOCK_ADJUSTMENT_ITEM` `SAI` join `STOCK_ADJUSTMENT` `SA` on((`SA`.`STOCK_ADJUSTMENT_ID` = `SAI`.`STOCK_ADJUSTMENT_ID`))) join `STOCK_ADJUSTMENT_TYPE` `SAT` on((`SAT`.`STOCK_ADJUSTMENT_TYPE_ID` = `SA`.`STOCK_ADJUSTMENT_TYPE_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `SAT`.`ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `SA`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`SA`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`SAI`.`QUANTITY` < 0) and (`SAI`.`UNIT_COST` is not null) and isnull(`SAI`.`EB_OBJECT_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'STOCK ADJUSTMENT OUT - IS' AS `SOURCE`,`SA`.`STOCK_ADJUSTMENT_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`SA`.`SA_DATE` AS `GL_DATE`,concat('SA-IS ',`SA`.`SA_NUMBER`) AS `REFERENCE_NUMBER`,`SA`.`REMARKS` AS `DESCRIPTION`,(coalesce(`SAI`.`UNIT_COST`,0) * -(`SAI`.`QUANTITY`)) AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((`STOCK_ADJUSTMENT_ITEM` `SAI` join `STOCK_ADJUSTMENT` `SA` on((`SA`.`STOCK_ADJUSTMENT_ID` = `SAI`.`STOCK_ADJUSTMENT_ID`))) join `STOCK_ADJUSTMENT_TYPE` `SAT` on((`SAT`.`STOCK_ADJUSTMENT_TYPE_ID` = `SA`.`STOCK_ADJUSTMENT_TYPE_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `SAT`.`ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `SA`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`SA`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`SAI`.`QUANTITY` < 0) and (`SAI`.`UNIT_COST` is not null) and (`SAI`.`EB_OBJECT_ID` is not null) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'STOCK ADJUSTMENT OUT' AS `SOURCE`,`SA`.`STOCK_ADJUSTMENT_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`SA`.`SA_DATE` AS `GL_DATE`,concat('SA-',`SA`.`SA_NUMBER`) AS `REFERENCE_NUMBER`,`SA`.`REMARKS` AS `DESCRIPTION`,0 AS `DEBIT`,(coalesce(`SAI`.`UNIT_COST`,0) * -(`SAI`.`QUANTITY`)) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`STOCK_ADJUSTMENT_ITEM` `SAI` join `STOCK_ADJUSTMENT` `SA` on((`SA`.`STOCK_ADJUSTMENT_ID` = `SAI`.`STOCK_ADJUSTMENT_ID`))) join `STOCK_ADJUSTMENT_TYPE` `SAT` on((`SAT`.`STOCK_ADJUSTMENT_TYPE_ID` = `SA`.`STOCK_ADJUSTMENT_TYPE_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `SAI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`INVENTORY_ACCOUNT`) and (`AC`.`COMPANY_ID` = `SA`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`SA`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`SAI`.`QUANTITY` < 0) and (`SAI`.`UNIT_COST` is not null) and isnull(`SAI`.`EB_OBJECT_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'STOCK ADJUSTMENT OUT - IS' AS `SOURCE`,`SA`.`STOCK_ADJUSTMENT_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`SA`.`SA_DATE` AS `GL_DATE`,concat('SA-IS ',`SA`.`SA_NUMBER`) AS `REFERENCE_NUMBER`,`SA`.`REMARKS` AS `DESCRIPTION`,0 AS `DEBIT`,(coalesce(`SAI`.`UNIT_COST`,0) * -(`SAI`.`QUANTITY`)) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`STOCK_ADJUSTMENT_ITEM` `SAI` join `STOCK_ADJUSTMENT` `SA` on((`SA`.`STOCK_ADJUSTMENT_ID` = `SAI`.`STOCK_ADJUSTMENT_ID`))) join `STOCK_ADJUSTMENT_TYPE` `SAT` on((`SAT`.`STOCK_ADJUSTMENT_TYPE_ID` = `SA`.`STOCK_ADJUSTMENT_TYPE_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `SAI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`INVENTORY_ACCOUNT`) and (`AC`.`COMPANY_ID` = `SA`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`SA`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`SAI`.`QUANTITY` < 0) and (`SAI`.`UNIT_COST` is not null) and (`SAI`.`EB_OBJECT_ID` is not null) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'PAID IN ADVANCE DELIVERY' AS `SOURCE`,`CAPD`.`CAP_DELIVERY_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAPD`.`DELIVERY_DATE` AS `GL_DATE`,concat('PIAD-',`CAPD`.`CAPD_NUMBER`) AS `REFERENCE_NUMBER`,`CAPD`.`SALES_INVOICE_NO` AS `DESCRIPTION`,(coalesce(`CAPDI`.`UNIT_COST`,0) * `CAPDI`.`QUANTITY`) AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CAP_DELIVERY_ITEM` `CAPDI` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CAPDI`.`CAP_DELIVERY_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CAPDI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`COST_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAPD`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 1)) union all select 'PAID IN ADVANCE DELIVERY' AS `SOURCE`,`CAPD`.`CAP_DELIVERY_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAPD`.`DELIVERY_DATE` AS `GL_DATE`,concat('PIAD-',`CAPD`.`CAPD_NUMBER`) AS `REFERENCE_NUMBER`,`CAPD`.`SALES_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,(coalesce(`CAPDI`.`UNIT_COST`,0) * `CAPDI`.`QUANTITY`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CAP_DELIVERY_ITEM` `CAPDI` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CAPDI`.`CAP_DELIVERY_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CAPDI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`INVENTORY_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAPD`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 1)) union all select 'PAID IN ADVANCE DELIVERY' AS `SOURCE`,`CAPD`.`CAP_DELIVERY_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAPD`.`DELIVERY_DATE` AS `GL_DATE`,concat('PIAD-',`CAPD`.`CAPD_NUMBER`) AS `REFERENCE_NUMBER`,`CAPD`.`SALES_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,(`CAPDI`.`QUANTITY` * `CAPDI`.`SRP`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CAP_DELIVERY_ITEM` `CAPDI` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CAPDI`.`CAP_DELIVERY_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CAPDI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`SALES_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAPD`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 1)) union all select 'PAID IN ADVANCE DELIVERY' AS `SOURCE`,`CAPD`.`CAP_DELIVERY_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAPD`.`DELIVERY_DATE` AS `GL_DATE`,concat('PIAD-',`CAPD`.`CAPD_NUMBER`) AS `REFERENCE_NUMBER`,`CAPD`.`SALES_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,-(coalesce(`CAPDI`.`DISCOUNT`,0)) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CAP_DELIVERY_ITEM` `CAPDI` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CAPDI`.`CAP_DELIVERY_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CAPDI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`SALES_DISCOUNT_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAPD`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and ((`CAPDI`.`DISCOUNT` is not null) or (`CAPDI`.`DISCOUNT` <> 0)) and (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 1)) union all select 'PAID IN ADVANCE DELIVERY' AS `SOURCE`,`CAPD`.`CAP_DELIVERY_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAPD`.`DELIVERY_DATE` AS `GL_DATE`,concat('PIAD-',`CAPD`.`CAPD_NUMBER`) AS `REFERENCE_NUMBER`,`CAPD`.`SALES_INVOICE_NO` AS `DESCRIPTION`,`CAPDI`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`CAP_DELIVERY_ITEM` `CAPDI` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CAPDI`.`CAP_DELIVERY_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CAPDI`.`ITEM_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CUSTOMER_ADV_PAYMENT_RM_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`CREDIT_ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAPD`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`IA`.`ACTIVE` = 1) and (`IA`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 1)) union all select 'PAID IN ADVANCE DELIVERY' AS `SOURCE`,`CAPD`.`CAP_DELIVERY_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAPD`.`DELIVERY_DATE` AS `GL_DATE`,concat('PIAD-',`CAPD`.`CAPD_NUMBER`) AS `REFERENCE_NUMBER`,`CAPD`.`SALES_INVOICE_NO` AS `DESCRIPTION`,`CPAL`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CAP_DELIVERY_AR_LINE` `CPAL` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CPAL`.`CAP_DELIVERY_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CUSTOMER_ADV_PAYMENT_RM_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`CREDIT_ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAPD`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`IA`.`ACTIVE` = 1) and (`IA`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 1)) union all select 'PAID IN ADVANCE DELIVERY' AS `SOURCE`,`CAPD`.`CAP_DELIVERY_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAPD`.`DELIVERY_DATE` AS `GL_DATE`,concat('PIAD-',`CAPD`.`CAPD_NUMBER`) AS `REFERENCE_NUMBER`,`CAPD`.`SALES_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,`CPAL`.`AMOUNT` AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((`CAP_DELIVERY_AR_LINE` `CPAL` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CPAL`.`CAP_DELIVERY_ID`))) join `AR_LINE_SETUP` `ALS` on((`ALS`.`AR_LINE_SETUP_ID` = `CPAL`.`AR_LINE_SETUP_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ALS`.`ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAPD`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`CAPD`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 1)) union all select 'PAID IN ADVANCE DELIVERY - IS' AS `SOURCE`,`CAPD`.`CAP_DELIVERY_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAPD`.`DELIVERY_DATE` AS `GL_DATE`,concat('PIAD-IS ',`CAPD`.`CAPD_NUMBER`) AS `REFERENCE_NUMBER`,`CAPD`.`SALES_INVOICE_NO` AS `DESCRIPTION`,(coalesce(`CAPDI`.`UNIT_COST`,0) * `CAPDI`.`QUANTITY`) AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CAP_DELIVERY_ITEM` `CAPDI` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CAPDI`.`CAP_DELIVERY_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CAPDI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`COST_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAPD`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 3)) union all select 'PAID IN ADVANCE DELIVERY - IS' AS `SOURCE`,`CAPD`.`CAP_DELIVERY_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAPD`.`DELIVERY_DATE` AS `GL_DATE`,concat('PIAD-IS ',`CAPD`.`CAPD_NUMBER`) AS `REFERENCE_NUMBER`,`CAPD`.`SALES_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,(coalesce(`CAPDI`.`UNIT_COST`,0) * `CAPDI`.`QUANTITY`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CAP_DELIVERY_ITEM` `CAPDI` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CAPDI`.`CAP_DELIVERY_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CAPDI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`INVENTORY_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAPD`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 3)) union all select 'PAID IN ADVANCE DELIVERY - IS' AS `SOURCE`,`CAPD`.`CAP_DELIVERY_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAPD`.`DELIVERY_DATE` AS `GL_DATE`,concat('PIAD-IS ',`CAPD`.`CAPD_NUMBER`) AS `REFERENCE_NUMBER`,`CAPD`.`SALES_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,(`CAPDI`.`QUANTITY` * `CAPDI`.`SRP`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CAP_DELIVERY_ITEM` `CAPDI` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CAPDI`.`CAP_DELIVERY_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CAPDI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`SALES_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAPD`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 3)) union all select 'PAID IN ADVANCE DELIVERY - IS' AS `SOURCE`,`CAPD`.`CAP_DELIVERY_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAPD`.`DELIVERY_DATE` AS `GL_DATE`,concat('PIAD-IS ',`CAPD`.`CAPD_NUMBER`) AS `REFERENCE_NUMBER`,`CAPD`.`SALES_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,-(coalesce(`CAPDI`.`DISCOUNT`,0)) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CAP_DELIVERY_ITEM` `CAPDI` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CAPDI`.`CAP_DELIVERY_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CAPDI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`SALES_DISCOUNT_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAPD`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and ((`CAPDI`.`DISCOUNT` is not null) or (`CAPDI`.`DISCOUNT` <> 0)) and (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 3)) union all select 'PAID IN ADVANCE DELIVERY - IS' AS `SOURCE`,`CAPD`.`CAP_DELIVERY_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAPD`.`DELIVERY_DATE` AS `GL_DATE`,concat('PIAD-IS ',`CAPD`.`CAPD_NUMBER`) AS `REFERENCE_NUMBER`,`CAPD`.`SALES_INVOICE_NO` AS `DESCRIPTION`,`CAPDI`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`CAP_DELIVERY_ITEM` `CAPDI` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CAPDI`.`CAP_DELIVERY_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CAPDI`.`ITEM_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CUSTOMER_ADV_PAYMENT_RM_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`CREDIT_ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAPD`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`IA`.`ACTIVE` = 1) and (`IA`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 3)) union all select 'PAID IN ADVANCE DELIVERY - IS' AS `SOURCE`,`CAPD`.`CAP_DELIVERY_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAPD`.`DELIVERY_DATE` AS `GL_DATE`,concat('PIAD-IS ',`CAPD`.`CAPD_NUMBER`) AS `REFERENCE_NUMBER`,`CAPD`.`SALES_INVOICE_NO` AS `DESCRIPTION`,`CPAL`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CAP_DELIVERY_AR_LINE` `CPAL` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CPAL`.`CAP_DELIVERY_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CUSTOMER_ADV_PAYMENT_RM_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`CREDIT_ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAPD`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`IA`.`ACTIVE` = 1) and (`IA`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 3)) union all select 'PAID IN ADVANCE DELIVERY - IS' AS `SOURCE`,`CAPD`.`CAP_DELIVERY_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAPD`.`DELIVERY_DATE` AS `GL_DATE`,concat('PIAD-IS ',`CAPD`.`CAPD_NUMBER`) AS `REFERENCE_NUMBER`,`CAPD`.`SALES_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,`CPAL`.`AMOUNT` AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((`CAP_DELIVERY_AR_LINE` `CPAL` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CPAL`.`CAP_DELIVERY_ID`))) join `AR_LINE_SETUP` `ALS` on((`ALS`.`AR_LINE_SETUP_ID` = `CPAL`.`AR_LINE_SETUP_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ALS`.`ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAPD`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`CAPD`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 3)) union all select (case when (`PR`.`PROCESSING_REPORT_TYPE_ID` = 5) then 'WORK IN PROCESS - BAKING' when (`PR`.`PROCESSING_REPORT_TYPE_ID` = 6) then 'WORK IN PROCESS - MIXING' else 'PROCESSING REPORT' end) AS `SOURCE`,concat(`RMI`.`PR_RAW_MATERIALS_ITEM_ID`,`RMI`.`ITEM_ID`) AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`PR`.`DATE` AS `GL_DATE`,concat((case when (`PR`.`PROCESSING_REPORT_TYPE_ID` = 5) then 'WIP-B ' when (`PR`.`PROCESSING_REPORT_TYPE_ID` = 5) then 'WIP-M ' else 'PR ' end),`PR`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,`PR`.`REF_NUMBER` AS `DESCRIPTION`,0 AS `DEBIT`,(coalesce(`RMI`.`UNIT_COST`,0) * `RMI`.`QUANTITY`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`PR_RAW_MATERIALS_ITEM` `RMI` join `PROCESSING_REPORT` `PR` on((`PR`.`PROCESSING_REPORT_ID` = `RMI`.`PROCESSING_REPORT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `RMI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`INVENTORY_ACCOUNT`) and (`AC`.`COMPANY_ID` = `PR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`PR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'PROCESSING REPORT' AS `SOURCE`,concat(`OMI`.`PR_OTHER_MATERIALS_ITEM_ID`,`OMI`.`ITEM_ID`) AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`PR`.`DATE` AS `GL_DATE`,concat('PR ',`PR`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,`PR`.`REF_NUMBER` AS `DESCRIPTION`,0 AS `DEBIT`,(coalesce(`OMI`.`UNIT_COST`,0) * `OMI`.`QUANTITY`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`PR_OTHER_MATERIALS_ITEM` `OMI` join `PROCESSING_REPORT` `PR` on((`PR`.`PROCESSING_REPORT_ID` = `OMI`.`PROCESSING_REPORT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `OMI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`INVENTORY_ACCOUNT`) and (`AC`.`COMPANY_ID` = `PR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`PR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select (case when (`PR`.`PROCESSING_REPORT_TYPE_ID` = 5) then 'WORK IN PROCESS - BAKING' when (`PR`.`PROCESSING_REPORT_TYPE_ID` = 6) then 'WORK IN PROCESS - MIXING' else 'PROCESSING REPORT' end) AS `SOURCE`,concat(`MP`.`PR_MAIN_PRODUCT_ID`,`MP`.`ITEM_ID`) AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`PR`.`DATE` AS `GL_DATE`,concat((case when (`PR`.`PROCESSING_REPORT_TYPE_ID` = 5) then 'WIP-B ' when (`PR`.`PROCESSING_REPORT_TYPE_ID` = 5) then 'WIP-M ' else 'PR ' end),`PR`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,`PR`.`REF_NUMBER` AS `DESCRIPTION`,(coalesce(`MP`.`UNIT_COST`,0) * `MP`.`QUANTITY`) AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`PR_MAIN_PRODUCT` `MP` join `PROCESSING_REPORT` `PR` on((`PR`.`PROCESSING_REPORT_ID` = `MP`.`PROCESSING_REPORT_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `MP`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`INVENTORY_ACCOUNT`) and (`AC`.`COMPANY_ID` = `PR`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`PR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4)) union all select 'PROCESSING REPORT' AS `SOURCE`,concat(`OC`.`PR_OTHER_CHARGE_ID`,`OC`.`AR_LINE_SETUP_ID`) AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`PR`.`DATE` AS `GL_DATE`,concat('PR ',`PR`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,`PR`.`REF_NUMBER` AS `DESCRIPTION`,0 AS `DEBIT`,`OC`.`AMOUNT` AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((`PR_OTHER_CHARGE` `OC` join `PROCESSING_REPORT` `PR` on((`PR`.`PROCESSING_REPORT_ID` = `OC`.`PROCESSING_REPORT_ID`))) join `AR_LINE_SETUP` `ALS` on((`ALS`.`AR_LINE_SETUP_ID` = `OC`.`AR_LINE_SETUP_ID`))) join `ACCOUNT_COMBINATION` `AC` on((`AC`.`ACCOUNT_COMBINATION_ID` = `ALS`.`ACCOUNT_COMBINATION_ID`))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on(((`PR`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`) and (`PR`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4)))) union all select 'PAID IN ADVANCE DELIVERY - AS' AS `SOURCE`,`CAPD`.`CAP_DELIVERY_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAPD`.`DELIVERY_DATE` AS `GL_DATE`,concat('PIAD-AS ',`CAPD`.`CAPD_NUMBER`) AS `REFERENCE_NUMBER`,`CAPD`.`SALES_INVOICE_NO` AS `DESCRIPTION`,(coalesce(`CAPDI`.`UNIT_COST`,0) * `CAPDI`.`QUANTITY`) AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CAP_DELIVERY_ITEM` `CAPDI` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CAPDI`.`CAP_DELIVERY_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CAPDI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`COST_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAPD`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 4)) union all select 'PAID IN ADVANCE DELIVERY - AS' AS `SOURCE`,`CAPD`.`CAP_DELIVERY_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAPD`.`DELIVERY_DATE` AS `GL_DATE`,concat('PIAD-AS ',`CAPD`.`CAPD_NUMBER`) AS `REFERENCE_NUMBER`,`CAPD`.`SALES_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,(coalesce(`CAPDI`.`UNIT_COST`,0) * `CAPDI`.`QUANTITY`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CAP_DELIVERY_ITEM` `CAPDI` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CAPDI`.`CAP_DELIVERY_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CAPDI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`INVENTORY_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAPD`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 4)) union all select 'PAID IN ADVANCE DELIVERY - AS' AS `SOURCE`,`CAPD`.`CAP_DELIVERY_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAPD`.`DELIVERY_DATE` AS `GL_DATE`,concat('PIAD-AS ',`CAPD`.`CAPD_NUMBER`) AS `REFERENCE_NUMBER`,`CAPD`.`SALES_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,(`CAPDI`.`QUANTITY` * `CAPDI`.`SRP`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CAP_DELIVERY_ITEM` `CAPDI` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CAPDI`.`CAP_DELIVERY_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CAPDI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`SALES_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAPD`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 4)) union all select 'PAID IN ADVANCE DELIVERY - AS' AS `SOURCE`,`CAPD`.`CAP_DELIVERY_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAPD`.`DELIVERY_DATE` AS `GL_DATE`,concat('PIAD-AS ',`CAPD`.`CAPD_NUMBER`) AS `REFERENCE_NUMBER`,`CAPD`.`SALES_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,-(coalesce(`CAPDI`.`DISCOUNT`,0)) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CAP_DELIVERY_ITEM` `CAPDI` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CAPDI`.`CAP_DELIVERY_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CAPDI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`SALES_DISCOUNT_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAPD`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and ((`CAPDI`.`DISCOUNT` is not null) or (`CAPDI`.`DISCOUNT` <> 0)) and (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 4)) union all select 'PAID IN ADVANCE DELIVERY - AS' AS `SOURCE`,`CAPD`.`CAP_DELIVERY_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAPD`.`DELIVERY_DATE` AS `GL_DATE`,concat('PIAD-AS ',`CAPD`.`CAPD_NUMBER`) AS `REFERENCE_NUMBER`,`CAPD`.`SALES_INVOICE_NO` AS `DESCRIPTION`,`CAPDI`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`CAP_DELIVERY_ITEM` `CAPDI` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CAPDI`.`CAP_DELIVERY_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CAPDI`.`ITEM_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CUSTOMER_ADV_PAYMENT_RM_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`CREDIT_ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAPD`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`IA`.`ACTIVE` = 1) and (`IA`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 4)) union all select 'PAID IN ADVANCE DELIVERY - AS' AS `SOURCE`,`CAPD`.`CAP_DELIVERY_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAPD`.`DELIVERY_DATE` AS `GL_DATE`,concat('PIAD-AS ',`CAPD`.`CAPD_NUMBER`) AS `REFERENCE_NUMBER`,`CAPD`.`SALES_INVOICE_NO` AS `DESCRIPTION`,`CPAL`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CAP_DELIVERY_AR_LINE` `CPAL` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CPAL`.`CAP_DELIVERY_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CUSTOMER_ADV_PAYMENT_RM_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`CREDIT_ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAPD`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`IA`.`ACTIVE` = 1) and (`IA`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 4)) union all select 'PAID IN ADVANCE DELIVERY - AS' AS `SOURCE`,`CAPD`.`CAP_DELIVERY_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAPD`.`DELIVERY_DATE` AS `GL_DATE`,concat('PIAD-AS ',`CAPD`.`CAPD_NUMBER`) AS `REFERENCE_NUMBER`,`CAPD`.`SALES_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,`CPAL`.`AMOUNT` AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((`CAP_DELIVERY_AR_LINE` `CPAL` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CPAL`.`CAP_DELIVERY_ID`))) join `AR_LINE_SETUP` `ALS` on((`ALS`.`AR_LINE_SETUP_ID` = `CPAL`.`AR_LINE_SETUP_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ALS`.`ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAPD`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`CAPD`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 4)) union all select 'PAID IN ADVANCE DELIVERY - WIPSO' AS `SOURCE`,`CAPD`.`CAP_DELIVERY_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAPD`.`DELIVERY_DATE` AS `GL_DATE`,concat('PIAD-WIPSO ',`CAPD`.`CAPD_NUMBER`) AS `REFERENCE_NUMBER`,`CAPD`.`SALES_INVOICE_NO` AS `DESCRIPTION`,(coalesce(`CAPDI`.`UNIT_COST`,0) * `CAPDI`.`QUANTITY`) AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CAP_DELIVERY_ITEM` `CAPDI` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CAPDI`.`CAP_DELIVERY_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CAPDI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`COST_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAPD`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 5)) union all select 'PAID IN ADVANCE DELIVERY - WIPSO' AS `SOURCE`,`CAPD`.`CAP_DELIVERY_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAPD`.`DELIVERY_DATE` AS `GL_DATE`,concat('PIAD-WIPSO ',`CAPD`.`CAPD_NUMBER`) AS `REFERENCE_NUMBER`,`CAPD`.`SALES_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,(coalesce(`CAPDI`.`UNIT_COST`,0) * `CAPDI`.`QUANTITY`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CAP_DELIVERY_ITEM` `CAPDI` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CAPDI`.`CAP_DELIVERY_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CAPDI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`INVENTORY_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAPD`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 5)) union all select 'PAID IN ADVANCE DELIVERY - WIPSO' AS `SOURCE`,`CAPD`.`CAP_DELIVERY_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAPD`.`DELIVERY_DATE` AS `GL_DATE`,concat('PIAD-WIPSO ',`CAPD`.`CAPD_NUMBER`) AS `REFERENCE_NUMBER`,`CAPD`.`SALES_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,(`CAPDI`.`QUANTITY` * `CAPDI`.`SRP`) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CAP_DELIVERY_ITEM` `CAPDI` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CAPDI`.`CAP_DELIVERY_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CAPDI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`SALES_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAPD`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 5)) union all select 'PAID IN ADVANCE DELIVERY - WIPSO' AS `SOURCE`,`CAPD`.`CAP_DELIVERY_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAPD`.`DELIVERY_DATE` AS `GL_DATE`,concat('PIAD-WIPSO ',`CAPD`.`CAPD_NUMBER`) AS `REFERENCE_NUMBER`,`CAPD`.`SALES_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,-(coalesce(`CAPDI`.`DISCOUNT`,0)) AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CAP_DELIVERY_ITEM` `CAPDI` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CAPDI`.`CAP_DELIVERY_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CAPDI`.`ITEM_ID`))) join `ITEM_CATEGORY_ACCOUNT_SETUP` `ICAS` on((`I`.`ITEM_CATEGORY_ID` = `ICAS`.`ITEM_CATEGORY_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ICAS`.`SALES_DISCOUNT_ACCOUNT`) and (`AC`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAPD`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`ICAS`.`ACTIVE` = 1) and (`ICAS`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and ((`CAPDI`.`DISCOUNT` is not null) or (`CAPDI`.`DISCOUNT` <> 0)) and (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 5)) union all select 'PAID IN ADVANCE DELIVERY - WIPSO' AS `SOURCE`,`CAPD`.`CAP_DELIVERY_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAPD`.`DELIVERY_DATE` AS `GL_DATE`,concat('PIAD-WIPSO ',`CAPD`.`CAPD_NUMBER`) AS `REFERENCE_NUMBER`,`CAPD`.`SALES_INVOICE_NO` AS `DESCRIPTION`,`CAPDI`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((((`CAP_DELIVERY_ITEM` `CAPDI` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CAPDI`.`CAP_DELIVERY_ID`))) join `ITEM` `I` on((`I`.`ITEM_ID` = `CAPDI`.`ITEM_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CUSTOMER_ADV_PAYMENT_RM_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`CREDIT_ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAPD`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`IA`.`ACTIVE` = 1) and (`IA`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 5)) union all select 'PAID IN ADVANCE DELIVERY - WIPSO' AS `SOURCE`,`CAPD`.`CAP_DELIVERY_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAPD`.`DELIVERY_DATE` AS `GL_DATE`,concat('PIAD-WIPSO ',`CAPD`.`CAPD_NUMBER`) AS `REFERENCE_NUMBER`,`CAPD`.`SALES_INVOICE_NO` AS `DESCRIPTION`,`CPAL`.`AMOUNT` AS `DEBIT`,0 AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`CAP_DELIVERY_AR_LINE` `CPAL` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CPAL`.`CAP_DELIVERY_ID`))) join `INVENTORY_ACCOUNT` `IA` on((`IA`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`))) join `RECEIPT_METHOD` `RM` on((`RM`.`RECEIPT_METHOD_ID` = `IA`.`CUSTOMER_ADV_PAYMENT_RM_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `RM`.`CREDIT_ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAPD`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`IA`.`ACTIVE` = 1) and (`IA`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 5)) union all select 'PAID IN ADVANCE DELIVERY - WIPSO' AS `SOURCE`,`CAPD`.`CAP_DELIVERY_ID` AS `ID`,`AC`.`COMPANY_ID` AS `COMPANY_ID`,`AC`.`DIVISION_ID` AS `DIVISION_ID`,`AC`.`ACCOUNT_ID` AS `ACCOUNT_ID`,`A`.`NUMBER` AS `ACCT_NO`,`A`.`ACCOUNT_NAME` AS `ACCOUNT_NAME`,`CAPD`.`DELIVERY_DATE` AS `GL_DATE`,concat('PIAD-WIPSO ',`CAPD`.`CAPD_NUMBER`) AS `REFERENCE_NUMBER`,`CAPD`.`SALES_INVOICE_NO` AS `DESCRIPTION`,0 AS `DEBIT`,`CPAL`.`AMOUNT` AS `CREDIT`,`FW`.`FORM_WORKFLOW_ID` AS `FORM_WORKFLOW_ID`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FW`.`IS_COMPLETE` AS `IS_COMPLETE`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from (((((`CAP_DELIVERY_AR_LINE` `CPAL` join `CAP_DELIVERY` `CAPD` on((`CAPD`.`CAP_DELIVERY_ID` = `CPAL`.`CAP_DELIVERY_ID`))) join `AR_LINE_SETUP` `ALS` on((`ALS`.`AR_LINE_SETUP_ID` = `CPAL`.`AR_LINE_SETUP_ID`))) join `ACCOUNT_COMBINATION` `AC` on(((`AC`.`ACCOUNT_COMBINATION_ID` = `ALS`.`ACCOUNT_COMBINATION_ID`) and (`AC`.`COMPANY_ID` = `CAPD`.`COMPANY_ID`)))) join `ACCOUNT` `A` on((`A`.`ACCOUNT_ID` = `AC`.`ACCOUNT_ID`))) join `FORM_WORKFLOW` `FW` on((`CAPD`.`FORM_WORKFLOW_ID` = `FW`.`FORM_WORKFLOW_ID`))) where ((`CAPD`.`COMPANY_ID` = `AC`.`COMPANY_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4) and (`CAPD`.`CUSTOMER_ADVANCE_PAYMENT_TYPE_ID` = 5)) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `V_STATEMENT_OF_ACCOUNT`
--

/*!50001 DROP VIEW IF EXISTS `V_STATEMENT_OF_ACCOUNT`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `V_STATEMENT_OF_ACCOUNT` AS select `AT`.`COMPANY_ID` AS `COMPANY_ID`,`C`.`NAME` AS `NAME`,`AT`.`CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCOUNT_ID`,`AT`.`CUSTOMER_ID` AS `CUSTOMER_ID`,'TRANS' AS `SOURCE`,`AT`.`AR_TRANSACTION_ID` AS `ID`,`AT`.`TRANSACTION_DATE` AS `DATE`,`AT`.`GL_DATE` AS `GL_DATE`,`AT`.`DUE_DATE` AS `DUE_DATE`,`AT`.`TRANSACTION_NUMBER` AS `REFERENCE_NUMBER`,`AT`.`DESCRIPTION` AS `INVOICE_NUMBER`,`AT`.`AMOUNT` AS `TRANSACTION_AMOUNT`,coalesce((select sum(`RT`.`AMOUNT`) from ((`AR_RECEIPT_TRANSACTION` `RT` join `AR_RECEIPT` `AR` on((`AR`.`AR_RECEIPT_ID` = `RT`.`AR_RECEIPT_ID`))) join `FORM_WORKFLOW` `F` on((`AR`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) where ((`RT`.`AR_TRANSACTION_ID` = `AT`.`AR_TRANSACTION_ID`) and (`F`.`CURRENT_STATUS_ID` <> 4))),0) AS `RECEIPT_AMOUNT`,`AT`.`CREATED_DATE` AS `CREATED_DATE`,'' AS `AR_LINE_ID`,`F`.`CURRENT_STATUS_ID` AS `STATUS_ID`,`F`.`IS_COMPLETE` AS `IS_COMPLETE`,`T`.`TERM_ID` AS `TERM_ID`,`T`.`DAYS` AS `TERM_DAYS` from ((((`AR_TRANSACTION` `AT` join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `AT`.`CUSTOMER_ACCOUNT_ID`))) join `TERM` `T` on((`ACA`.`TERM_ID` = `T`.`TERM_ID`))) join `FORM_WORKFLOW` `F` on((`AT`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) join `AR_CUSTOMER` `C` on((`C`.`AR_CUSTOMER_ID` = `ACA`.`AR_CUSTOMER_ID`))) where ((`F`.`CURRENT_STATUS_ID` <> 4) and (`AT`.`AR_TRANSACTION_TYPE_ID` <= 3)) union all select `AT`.`COMPANY_ID` AS `COMPANY_ID`,`C`.`NAME` AS `NAME`,`AT`.`CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCOUNT_ID`,`AT`.`CUSTOMER_ID` AS `CUSTOMER_ID`,'AS' AS `SOURCE`,`AT`.`AR_TRANSACTION_ID` AS `ID`,`AT`.`TRANSACTION_DATE` AS `DATE`,`AT`.`TRANSACTION_DATE` AS `TRANSACTION_DATE`,`AT`.`DUE_DATE` AS `DUE_DATE`,`AT`.`TRANSACTION_NUMBER` AS `REFERENCE_NUMBER`,`AT`.`DESCRIPTION` AS `INVOICE_NUMBER`,`AT`.`AMOUNT` AS `TRANSACTION_AMOUNT`,coalesce((select sum(`RT`.`AMOUNT`) from ((`AR_RECEIPT_TRANSACTION` `RT` join `AR_RECEIPT` `AR` on((`AR`.`AR_RECEIPT_ID` = `RT`.`AR_RECEIPT_ID`))) join `FORM_WORKFLOW` `F` on((`AR`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) where ((`RT`.`AR_TRANSACTION_ID` = `AT`.`AR_TRANSACTION_ID`) and (`F`.`CURRENT_STATUS_ID` <> 4))),0) AS `RECEIPT_AMOUNT`,`AT`.`CREATED_DATE` AS `CREATED_DATE`,'' AS `AR_LINE_ID`,`F`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`F`.`IS_COMPLETE` AS `IS_COMPLETE`,`T`.`TERM_ID` AS `TERM_ID`,`T`.`DAYS` AS `TERM_DAYS` from ((((`AR_TRANSACTION` `AT` join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `AT`.`CUSTOMER_ACCOUNT_ID`))) join `TERM` `T` on((`ACA`.`TERM_ID` = `T`.`TERM_ID`))) join `FORM_WORKFLOW` `F` on((`AT`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) join `AR_CUSTOMER` `C` on((`C`.`AR_CUSTOMER_ID` = `ACA`.`AR_CUSTOMER_ID`))) where ((`AT`.`AR_TRANSACTION_TYPE_ID` = 4) and (`F`.`CURRENT_STATUS_ID` <> 4)) union all select `AT`.`COMPANY_ID` AS `COMPANY_ID`,`C`.`NAME` AS `NAME`,`AT`.`CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCOUNT_ID`,`AT`.`CUSTOMER_ID` AS `CUSTOMER_ID`,'ASR' AS `SOURCE`,`AT`.`AR_TRANSACTION_ID` AS `ID`,`AT`.`TRANSACTION_DATE` AS `DATE`,`AT`.`TRANSACTION_DATE` AS `TRANSACTION_DATE`,`AT`.`TRANSACTION_DATE` AS `DUE_DATE`,`AT`.`TRANSACTION_NUMBER` AS `REFERENCE_NUMBER`,`AT`.`DESCRIPTION` AS `INVOICE_NUMBER`,`AT`.`AMOUNT` AS `TRANSACTION_AMOUNT`,coalesce((select sum(`RT`.`AMOUNT`) from ((`AR_RECEIPT_TRANSACTION` `RT` join `AR_RECEIPT` `AR` on((`AR`.`AR_RECEIPT_ID` = `RT`.`AR_RECEIPT_ID`))) join `FORM_WORKFLOW` `F` on((`AR`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) where ((`RT`.`AR_TRANSACTION_ID` = `AT`.`AR_TRANSACTION_ID`) and (`F`.`CURRENT_STATUS_ID` <> 4))),0) AS `RECEIPT_AMOUNT`,`AT`.`CREATED_DATE` AS `CREATED_DATE`,'' AS `AR_LINE_ID`,`F`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`F`.`IS_COMPLETE` AS `IS_COMPLETE`,`T`.`TERM_ID` AS `TERM_ID`,`T`.`DAYS` AS `TERM_DAYS` from (((((`AR_TRANSACTION` `AT` join `ACCOUNT_SALE_ITEM` `ASI` on((`ASI`.`AR_TRANSACTION_ID` = `AT`.`AR_TRANSACTION_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `AT`.`CUSTOMER_ACCOUNT_ID`))) join `TERM` `T` on((`ACA`.`TERM_ID` = `T`.`TERM_ID`))) join `FORM_WORKFLOW` `F` on((`AT`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) join `AR_CUSTOMER` `C` on((`C`.`AR_CUSTOMER_ID` = `ACA`.`AR_CUSTOMER_ID`))) where ((`AT`.`AR_TRANSACTION_TYPE_ID` = 5) and (`F`.`CURRENT_STATUS_ID` <> 4)) group by `AT`.`AR_TRANSACTION_ID` union all select `AT`.`COMPANY_ID` AS `COMPANY_ID`,`C`.`NAME` AS `NAME`,`AT`.`CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCOUNT_ID`,`AT`.`CUSTOMER_ID` AS `CUSTOMER_ID`,'AS-IS' AS `SOURCE`,`AT`.`AR_TRANSACTION_ID` AS `ID`,`AT`.`TRANSACTION_DATE` AS `DATE`,`AT`.`TRANSACTION_DATE` AS `TRANSACTION_DATE`,`AT`.`DUE_DATE` AS `DUE_DATE`,`AT`.`TRANSACTION_NUMBER` AS `REFERENCE_NUMBER`,`AT`.`DESCRIPTION` AS `INVOICE_NUMBER`,`AT`.`AMOUNT` AS `TRANSACTION_AMOUNT`,coalesce((select sum(`RT`.`AMOUNT`) from ((`AR_RECEIPT_TRANSACTION` `RT` join `AR_RECEIPT` `AR` on((`AR`.`AR_RECEIPT_ID` = `RT`.`AR_RECEIPT_ID`))) join `FORM_WORKFLOW` `F` on((`AR`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) where ((`RT`.`AR_TRANSACTION_ID` = `AT`.`AR_TRANSACTION_ID`) and (`F`.`CURRENT_STATUS_ID` <> 4))),0) AS `RECEIPT_AMOUNT`,`AT`.`CREATED_DATE` AS `CREATED_DATE`,'' AS `AR_LINE_ID`,`F`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`F`.`IS_COMPLETE` AS `IS_COMPLETE`,`T`.`TERM_ID` AS `TERM_ID`,`T`.`DAYS` AS `TERM_DAYS` from ((((`AR_TRANSACTION` `AT` join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `AT`.`CUSTOMER_ACCOUNT_ID`))) join `TERM` `T` on((`ACA`.`TERM_ID` = `T`.`TERM_ID`))) join `FORM_WORKFLOW` `F` on((`AT`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) join `AR_CUSTOMER` `C` on((`C`.`AR_CUSTOMER_ID` = `ACA`.`AR_CUSTOMER_ID`))) where ((`AT`.`AR_TRANSACTION_TYPE_ID` = 10) and (`F`.`CURRENT_STATUS_ID` <> 4)) union all select `AT`.`COMPANY_ID` AS `COMPANY_ID`,`C`.`NAME` AS `NAME`,`AT`.`CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCOUNT_ID`,`AT`.`CUSTOMER_ID` AS `CUSTOMER_ID`,'ASR-IS' AS `SOURCE`,`AT`.`AR_TRANSACTION_ID` AS `ID`,`AT`.`TRANSACTION_DATE` AS `DATE`,`AT`.`TRANSACTION_DATE` AS `TRANSACTION_DATE`,`AT`.`TRANSACTION_DATE` AS `DUE_DATE`,`AT`.`TRANSACTION_NUMBER` AS `REFERENCE_NUMBER`,`AT`.`DESCRIPTION` AS `INVOICE_NUMBER`,sum(`ASI`.`AMOUNT`) AS `TRANSACTION_AMOUNT`,coalesce((select sum(`RT`.`AMOUNT`) from ((`AR_RECEIPT_TRANSACTION` `RT` join `AR_RECEIPT` `AR` on((`AR`.`AR_RECEIPT_ID` = `RT`.`AR_RECEIPT_ID`))) join `FORM_WORKFLOW` `F` on((`AR`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) where ((`RT`.`AR_TRANSACTION_ID` = `AT`.`AR_TRANSACTION_ID`) and (`F`.`CURRENT_STATUS_ID` <> 4))),0) AS `RECEIPT_AMOUNT`,`AT`.`CREATED_DATE` AS `CREATED_DATE`,'' AS `AR_LINE_ID`,`F`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`F`.`IS_COMPLETE` AS `IS_COMPLETE`,`T`.`TERM_ID` AS `TERM_ID`,`T`.`DAYS` AS `TERM_DAYS` from (((((`AR_TRANSACTION` `AT` join `ACCOUNT_SALE_ITEM` `ASI` on((`ASI`.`AR_TRANSACTION_ID` = `AT`.`AR_TRANSACTION_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `AT`.`CUSTOMER_ACCOUNT_ID`))) join `TERM` `T` on((`ACA`.`TERM_ID` = `T`.`TERM_ID`))) join `FORM_WORKFLOW` `F` on((`AT`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) join `AR_CUSTOMER` `C` on((`C`.`AR_CUSTOMER_ID` = `ACA`.`AR_CUSTOMER_ID`))) where ((`AT`.`AR_TRANSACTION_TYPE_ID` = 11) and (`F`.`CURRENT_STATUS_ID` <> 4)) group by `AT`.`AR_TRANSACTION_ID` union all select `AT`.`COMPANY_ID` AS `COMPANY_ID`,`C`.`NAME` AS `NAME`,`AT`.`CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCOUNT_ID`,`AT`.`CUSTOMER_ID` AS `CUSTOMER_ID`,'AS' AS `SOURCE`,`AT`.`AR_TRANSACTION_ID` AS `ID`,`AT`.`TRANSACTION_DATE` AS `DATE`,`AT`.`TRANSACTION_DATE` AS `TRANSACTION_DATE`,`AT`.`DUE_DATE` AS `DUE_DATE`,`AT`.`TRANSACTION_NUMBER` AS `REFERENCE_NUMBER`,`AT`.`DESCRIPTION` AS `INVOICE_NUMBER`,`AT`.`AMOUNT` AS `TRANSACTION_AMOUNT`,coalesce((select sum(`RT`.`AMOUNT`) from ((`AR_RECEIPT_TRANSACTION` `RT` join `AR_RECEIPT` `AR` on((`AR`.`AR_RECEIPT_ID` = `RT`.`AR_RECEIPT_ID`))) join `FORM_WORKFLOW` `F` on((`AR`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) where ((`RT`.`AR_TRANSACTION_ID` = `AT`.`AR_TRANSACTION_ID`) and (`F`.`CURRENT_STATUS_ID` <> 4))),0) AS `RECEIPT_AMOUNT`,`AT`.`CREATED_DATE` AS `CREATED_DATE`,'' AS `AR_LINE_ID`,`F`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`F`.`IS_COMPLETE` AS `IS_COMPLETE`,`T`.`TERM_ID` AS `TERM_ID`,`T`.`DAYS` AS `TERM_DAYS` from ((((`AR_TRANSACTION` `AT` join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `AT`.`CUSTOMER_ACCOUNT_ID`))) join `TERM` `T` on((`ACA`.`TERM_ID` = `T`.`TERM_ID`))) join `FORM_WORKFLOW` `F` on((`AT`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) join `AR_CUSTOMER` `C` on((`C`.`AR_CUSTOMER_ID` = `ACA`.`AR_CUSTOMER_ID`))) where ((`AT`.`AR_TRANSACTION_TYPE_ID` = 12) and (`F`.`CURRENT_STATUS_ID` <> 4)) union all select `AT`.`COMPANY_ID` AS `COMPANY_ID`,`C`.`NAME` AS `NAME`,`AT`.`CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCOUNT_ID`,`AT`.`CUSTOMER_ID` AS `CUSTOMER_ID`,'ASR' AS `SOURCE`,`AT`.`AR_TRANSACTION_ID` AS `ID`,`AT`.`TRANSACTION_DATE` AS `DATE`,`AT`.`TRANSACTION_DATE` AS `TRANSACTION_DATE`,`AT`.`TRANSACTION_DATE` AS `DUE_DATE`,`AT`.`TRANSACTION_NUMBER` AS `REFERENCE_NUMBER`,`AT`.`DESCRIPTION` AS `INVOICE_NUMBER`,sum(`ASI`.`AMOUNT`) AS `TRANSACTION_AMOUNT`,coalesce((select sum(`RT`.`AMOUNT`) from ((`AR_RECEIPT_TRANSACTION` `RT` join `AR_RECEIPT` `AR` on((`AR`.`AR_RECEIPT_ID` = `RT`.`AR_RECEIPT_ID`))) join `FORM_WORKFLOW` `F` on((`AR`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) where ((`RT`.`AR_TRANSACTION_ID` = `AT`.`AR_TRANSACTION_ID`) and (`F`.`CURRENT_STATUS_ID` <> 4))),0) AS `RECEIPT_AMOUNT`,`AT`.`CREATED_DATE` AS `CREATED_DATE`,'' AS `AR_LINE_ID`,`F`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`F`.`IS_COMPLETE` AS `IS_COMPLETE`,`T`.`TERM_ID` AS `TERM_ID`,`T`.`DAYS` AS `TERM_DAYS` from (((((`AR_TRANSACTION` `AT` join `ACCOUNT_SALE_ITEM` `ASI` on((`ASI`.`AR_TRANSACTION_ID` = `AT`.`AR_TRANSACTION_ID`))) join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `AT`.`CUSTOMER_ACCOUNT_ID`))) join `TERM` `T` on((`ACA`.`TERM_ID` = `T`.`TERM_ID`))) join `FORM_WORKFLOW` `F` on((`AT`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) join `AR_CUSTOMER` `C` on((`C`.`AR_CUSTOMER_ID` = `ACA`.`AR_CUSTOMER_ID`))) where ((`AT`.`AR_TRANSACTION_TYPE_ID` = 13) and (`F`.`CURRENT_STATUS_ID` <> 4)) group by `AT`.`AR_TRANSACTION_ID` union all select `AT`.`COMPANY_ID` AS `COMPANY_ID`,`C`.`NAME` AS `NAME`,`AT`.`CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCOUNT_ID`,`AT`.`CUSTOMER_ID` AS `CUSTOMER_ID`,'AS' AS `SOURCE`,`AT`.`AR_TRANSACTION_ID` AS `ID`,`AT`.`TRANSACTION_DATE` AS `DATE`,`AT`.`TRANSACTION_DATE` AS `TRANSACTION_DATE`,`AT`.`DUE_DATE` AS `DUE_DATE`,`AT`.`TRANSACTION_NUMBER` AS `REFERENCE_NUMBER`,`AT`.`DESCRIPTION` AS `INVOICE_NUMBER`,`AT`.`AMOUNT` AS `TRANSACTION_AMOUNT`,coalesce((select sum(`RT`.`AMOUNT`) from ((`AR_RECEIPT_TRANSACTION` `RT` join `AR_RECEIPT` `AR` on((`AR`.`AR_RECEIPT_ID` = `RT`.`AR_RECEIPT_ID`))) join `FORM_WORKFLOW` `F` on((`AR`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) where ((`RT`.`AR_TRANSACTION_ID` = `AT`.`AR_TRANSACTION_ID`) and (`F`.`CURRENT_STATUS_ID` <> 4))),0) AS `RECEIPT_AMOUNT`,`AT`.`CREATED_DATE` AS `CREATED_DATE`,'' AS `AR_LINE_ID`,`F`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`F`.`IS_COMPLETE` AS `IS_COMPLETE`,`T`.`TERM_ID` AS `TERM_ID`,`T`.`DAYS` AS `TERM_DAYS` from ((((`AR_TRANSACTION` `AT` join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `AT`.`CUSTOMER_ACCOUNT_ID`))) join `TERM` `T` on((`ACA`.`TERM_ID` = `T`.`TERM_ID`))) join `FORM_WORKFLOW` `F` on((`AT`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) join `AR_CUSTOMER` `C` on((`C`.`AR_CUSTOMER_ID` = `ACA`.`AR_CUSTOMER_ID`))) where ((`AT`.`AR_TRANSACTION_TYPE_ID` = 14) and (`F`.`CURRENT_STATUS_ID` <> 4)) union all select `AC`.`COMPANY_ID` AS `COMPANY_ID`,`C`.`NAME` AS `NAME`,`AC`.`AR_CUSTOMER_ACCOUNT_ID` AS `AR_CUSTOMER_ACCOUNT_ID`,`AC`.`AR_CUSTOMER_ID` AS `AR_CUSTOMER_ID`,'AC' AS `SOURCE`,`AC`.`AR_RECEIPT_ID` AS `ID`,`AC`.`MATURITY_DATE` AS `DATE`,`AC`.`RECEIPT_DATE` AS `RECEIPT_DATE`,NULL AS `DUE_DATE`,concat('AC-',`AC`.`SEQUENCE_NO`) AS `REFERENCE_NUMBER`,if((`AC`.`REF_NUMBER` <> ''),concat(`AC`.`RECEIPT_NUMBER`,', ',`AC`.`REF_NUMBER`),`AC`.`RECEIPT_NUMBER`) AS `INVOICE_NUMBER`,0 AS `TRANSACTION_AMOUNT`,`AC`.`AMOUNT` AS `RECEIPT_AMOUNT`,`AC`.`CREATED_DATE` AS `CREATED_DATE`,'' AS `AR_LINE_ID`,`F`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`F`.`IS_COMPLETE` AS `IS_COMPLETE`,1 AS `1`,0 AS `TERM_DAYS` from ((`AR_RECEIPT` `AC` join `FORM_WORKFLOW` `F` on((`AC`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) join `AR_CUSTOMER` `C` on((`C`.`AR_CUSTOMER_ID` = `AC`.`AR_CUSTOMER_ID`))) where ((`F`.`CURRENT_STATUS_ID` <> 4) and (not(`AC`.`AR_RECEIPT_ID` in (select `ART`.`AR_RECEIPT_ID` from ((`AR_RECEIPT_TRANSACTION` `ART` join `AR_RECEIPT` `AR` on((`AR`.`AR_RECEIPT_ID` = `ART`.`AR_RECEIPT_ID`))) join `FORM_WORKFLOW` `F` on((`AR`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) where (`F`.`CURRENT_STATUS_ID` <> 4))))) union all select `AT`.`COMPANY_ID` AS `COMPANY_ID`,`C`.`NAME` AS `NAME`,`AT`.`CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCOUNT_ID`,`AT`.`CUSTOMER_ID` AS `CUSTOMER_ID`,'TRANS' AS `SOURCE`,`AT`.`AR_TRANSACTION_ID` AS `ID`,`AT`.`TRANSACTION_DATE` AS `DATE`,`AT`.`GL_DATE` AS `GL_DATE`,`AT`.`DUE_DATE` AS `DUE_DATE`,`AT`.`TRANSACTION_NUMBER` AS `REFERENCE_NUMBER`,`AT`.`DESCRIPTION` AS `INVOICE_NUMBER`,`AT`.`AMOUNT` AS `TRANSACTION_AMOUNT`,coalesce((select sum(`RT`.`AMOUNT`) from ((`AR_RECEIPT_TRANSACTION` `RT` join `AR_RECEIPT` `AR` on((`AR`.`AR_RECEIPT_ID` = `RT`.`AR_RECEIPT_ID`))) join `FORM_WORKFLOW` `F` on((`AR`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) where ((`RT`.`AR_TRANSACTION_ID` = `AT`.`AR_TRANSACTION_ID`) and (`F`.`CURRENT_STATUS_ID` <> 4))),0) AS `RECEIPT_AMOUNT`,`AT`.`CREATED_DATE` AS `CREATED_DATE`,'' AS `AR_LINE_ID`,`F`.`CURRENT_STATUS_ID` AS `STATUS_ID`,`F`.`IS_COMPLETE` AS `IS_COMPLETE`,`T`.`TERM_ID` AS `TERM_ID`,`T`.`DAYS` AS `TERM_DAYS` from ((((`AR_TRANSACTION` `AT` join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `AT`.`CUSTOMER_ACCOUNT_ID`))) join `TERM` `T` on((`ACA`.`TERM_ID` = `T`.`TERM_ID`))) join `FORM_WORKFLOW` `F` on((`AT`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) join `AR_CUSTOMER` `C` on((`C`.`AR_CUSTOMER_ID` = `ACA`.`AR_CUSTOMER_ID`))) where ((`F`.`CURRENT_STATUS_ID` <> 4) and (`AT`.`AR_TRANSACTION_TYPE_ID` = 17)) union all select `AT`.`COMPANY_ID` AS `COMPANY_ID`,`C`.`NAME` AS `NAME`,`AT`.`CUSTOMER_ACCOUNT_ID` AS `CUSTOMER_ACCOUNT_ID`,`AT`.`CUSTOMER_ID` AS `CUSTOMER_ID`,'TRANS' AS `SOURCE`,`AT`.`AR_TRANSACTION_ID` AS `ID`,`AT`.`TRANSACTION_DATE` AS `DATE`,`AT`.`GL_DATE` AS `GL_DATE`,`AT`.`DUE_DATE` AS `DUE_DATE`,`AT`.`TRANSACTION_NUMBER` AS `REFERENCE_NUMBER`,`AT`.`DESCRIPTION` AS `INVOICE_NUMBER`,`AT`.`AMOUNT` AS `TRANSACTION_AMOUNT`,coalesce((select sum(`RT`.`AMOUNT`) from ((`AR_RECEIPT_TRANSACTION` `RT` join `AR_RECEIPT` `AR` on((`AR`.`AR_RECEIPT_ID` = `RT`.`AR_RECEIPT_ID`))) join `FORM_WORKFLOW` `F` on((`AR`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) where ((`RT`.`AR_TRANSACTION_ID` = `AT`.`AR_TRANSACTION_ID`) and (`F`.`CURRENT_STATUS_ID` <> 4))),0) AS `RECEIPT_AMOUNT`,`AT`.`CREATED_DATE` AS `CREATED_DATE`,'' AS `AR_LINE_ID`,`F`.`CURRENT_STATUS_ID` AS `STATUS_ID`,`F`.`IS_COMPLETE` AS `IS_COMPLETE`,`T`.`TERM_ID` AS `TERM_ID`,`T`.`DAYS` AS `TERM_DAYS` from ((((`AR_TRANSACTION` `AT` join `AR_CUSTOMER_ACCOUNT` `ACA` on((`ACA`.`AR_CUSTOMER_ACCOUNT_ID` = `AT`.`CUSTOMER_ACCOUNT_ID`))) join `TERM` `T` on((`ACA`.`TERM_ID` = `T`.`TERM_ID`))) join `FORM_WORKFLOW` `F` on((`AT`.`FORM_WORKFLOW_ID` = `F`.`FORM_WORKFLOW_ID`))) join `AR_CUSTOMER` `C` on((`C`.`AR_CUSTOMER_ID` = `ACA`.`AR_CUSTOMER_ID`))) where ((`F`.`CURRENT_STATUS_ID` <> 4) and (`AT`.`AR_TRANSACTION_TYPE_ID` = 18)) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `V_TRANSACTION_HISTORY`
--

/*!50001 DROP VIEW IF EXISTS `V_TRANSACTION_HISTORY`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `V_TRANSACTION_HISTORY` AS select `COM`.`COMPANY_ID` AS `COMPANY_ID`,`COM`.`NAME` AS `COMPANY_NAME`,(case when (`T`.`AR_TRANSACTION_TYPE_ID` = 1) then 'REG' when (`T`.`AR_TRANSACTION_TYPE_ID` = 2) then 'DM' when (`T`.`AR_TRANSACTION_TYPE_ID` = 3) then 'CM' when (`T`.`AR_TRANSACTION_TYPE_ID` = 4) then 'AS' when (`T`.`AR_TRANSACTION_TYPE_ID` = 5) then 'ASR' when (`T`.`AR_TRANSACTION_TYPE_ID` = 10) then 'AS-IS' when (`T`.`AR_TRANSACTION_TYPE_ID` = 11) then 'ASR-IS' end) AS `TYPE`,`C`.`NAME` AS `CUSTOMER_NAME`,`CA`.`NAME` AS `CUSTOMER_ACCOUNT`,(case when ((`T`.`AR_TRANSACTION_TYPE_ID` = 4) or (`T`.`AR_TRANSACTION_TYPE_ID` = 12) or (`T`.`AR_TRANSACTION_TYPE_ID` = 14)) then (case when (isnull(`T`.`DESCRIPTION`) or (`T`.`DESCRIPTION` = '')) then `T`.`TRANSACTION_NUMBER` else concat(`T`.`TRANSACTION_NUMBER`,', ',`T`.`DESCRIPTION`) end) when ((`T`.`AR_TRANSACTION_TYPE_ID` = 5) or (`T`.`AR_TRANSACTION_TYPE_ID` = 13)) then (case when (isnull(`T`.`DESCRIPTION`) or (`T`.`DESCRIPTION` = '')) then `T`.`TRANSACTION_NUMBER` else concat(`T`.`TRANSACTION_NUMBER`,', ',`T`.`DESCRIPTION`) end) when (`T`.`AR_TRANSACTION_TYPE_ID` = 7) then (case when (isnull(`T`.`DESCRIPTION`) or (`T`.`DESCRIPTION` = '')) then `T`.`TRANSACTION_NUMBER` else concat(`T`.`TRANSACTION_NUMBER`,', ',`T`.`DESCRIPTION`) end) else `T`.`TRANSACTION_NUMBER` end) AS `TRANSACTION_NUMBER`,`T`.`TRANSACTION_NUMBER` AS `TRANS_NUMBER`,`T`.`SEQUENCE_NO` AS `SEQUENCE_NO`,(case when (`T`.`AR_TRANSACTION_TYPE_ID` = 7) then (-(1) * `T`.`AMOUNT`) else `T`.`AMOUNT` end) AS `AMOUNT`,`TRM`.`NAME` AS `TERM`,(case when isnull(`T`.`DUE_DATE`) then `T`.`TRANSACTION_DATE` else `T`.`DUE_DATE` end) AS `DUE_DATE`,`T`.`TRANSACTION_DATE` AS `TRANSACTION_DATE`,(case when isnull(`T`.`GL_DATE`) then `T`.`TRANSACTION_DATE` else `T`.`GL_DATE` end) AS `GL_DATE`,`TRM`.`TERM_ID` AS `TERM_ID`,`T`.`AR_TRANSACTION_ID` AS `AR_TRANSACTION_ID`,`T`.`AR_TRANSACTION_TYPE_ID` AS `AR_TRANSACTION_TYPE_ID`,`CA`.`AR_CUSTOMER_ACCOUNT_ID` AS `AR_CUSTOMER_ACCOUNT_ID`,`C`.`AR_CUSTOMER_ID` AS `AR_CUSTOMER_ID`,coalesce((select sum(`ARRT`.`AMOUNT`) from ((`AR_RECEIPT_TRANSACTION` `ARRT` join `AR_RECEIPT` `ARR` on((`ARR`.`AR_RECEIPT_ID` = `ARRT`.`AR_RECEIPT_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `ARR`.`FORM_WORKFLOW_ID`))) where ((`ARRT`.`AR_TRANSACTION_ID` = `T`.`AR_TRANSACTION_ID`) and (`FW`.`CURRENT_STATUS_ID` <> 4))),0) AS `TOTAL_PAYMENT`,`FW`.`CURRENT_STATUS_ID` AS `CURRENT_STATUS_ID`,`FS`.`DESCRIPTION` AS `STATUS`,`FW`.`IS_COMPLETE` AS `IS_POSTED` from ((((((`AR_TRANSACTION` `T` join `AR_CUSTOMER` `C` on((`C`.`AR_CUSTOMER_ID` = `T`.`CUSTOMER_ID`))) join `AR_CUSTOMER_ACCOUNT` `CA` on((`CA`.`AR_CUSTOMER_ACCOUNT_ID` = `T`.`CUSTOMER_ACCOUNT_ID`))) join `TERM` `TRM` on((`TRM`.`TERM_ID` = `T`.`TERM_ID`))) join `COMPANY` `COM` on((`COM`.`COMPANY_ID` = `T`.`COMPANY_ID`))) join `FORM_WORKFLOW` `FW` on((`FW`.`FORM_WORKFLOW_ID` = `T`.`FORM_WORKFLOW_ID`))) join `FORM_STATUS` `FS` on((`FS`.`FORM_STATUS_ID` = `FW`.`CURRENT_STATUS_ID`))) where (`T`.`AR_TRANSACTION_TYPE_ID` <> 15) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2021-08-11  9:35:38

DROP TABLE IF EXISTS AP_PAYMENT_LINE;

CREATE TABLE `AP_PAYMENT_LINE` (
  `AP_PAYMENT_LINE_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `AP_PAYMENT_ID` int(10) unsigned NOT NULL,
  `AP_PAYMENT_LINE_TYPE_ID` int(10) unsigned NOT NULL,
  `PAID_AMOUNT` double DEFAULT '0',
  `EB_OBJECT_ID` int(10) unsigned DEFAULT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`AP_PAYMENT_LINE_ID`),
  KEY `FK_AP_PAYMENT_LINE_CREATED_BY` (`CREATED_BY`),
  KEY `FK_AP_PAYMENT_LINE_UPDATED_BY` (`UPDATED_BY`),
  KEY `FK_AP_PAYMENT_LINE_AP_PAYMENT_ID` (`AP_PAYMENT_ID`),
  KEY `FK_AP_PAYMENT_LINE_LINE_TYPE_ID` (`AP_PAYMENT_LINE_TYPE_ID`),
  KEY `FK_AP_PAYMENT_LINE_EB_OBJECT_ID` (`EB_OBJECT_ID`),
  CONSTRAINT `FK_AP_PAYMENT_LINE_AP_PAYMENT_ID` FOREIGN KEY (`AP_PAYMENT_ID`) REFERENCES `AP_PAYMENT` (`AP_PAYMENT_ID`),
  CONSTRAINT `FK_AP_PAYMENT_LINE_LINE_TYPE_ID` FOREIGN KEY (`AP_PAYMENT_LINE_TYPE_ID`) REFERENCES `AP_PAYMENT_LINE_TYPE` (`AP_PAYMENT_LINE_TYPE_ID`),
  CONSTRAINT `FK_AP_PAYMENT_LINE_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_AP_PAYMENT_LINE_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_AP_PAYMENT_LINE_EB_OBJECT_ID` FOREIGN KEY (`EB_OBJECT_ID`) REFERENCES `EB_OBJECT` (`EB_OBJECT_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS SUPPLIER_ADVANCE_PAYMENT_LINE;

CREATE TABLE SUPPLIER_ADVANCE_PAYMENT_LINE (
	SUPPLIER_ADVANCE_PAYMENT_LINE_ID int(10) unsigned NOT NULL AUTO_INCREMENT,
	SUPPLIER_ADVANCE_PAYMENT_ID int(10) unsigned NOT NULL,
	EB_OBJECT_ID int(10) unsigned DEFAULT NULL,
	AMOUNT double DEFAULT 0,
	PRIMARY KEY (SUPPLIER_ADVANCE_PAYMENT_LINE_ID),
	KEY FK_SAPL_SAP_ID (SUPPLIER_ADVANCE_PAYMENT_ID),
	KEY FK_SAPL_EB_OBJECT_ID (EB_OBJECT_ID),
	CONSTRAINT FK_SAPL_SAP_ID FOREIGN KEY (SUPPLIER_ADVANCE_PAYMENT_ID) REFERENCES SUPPLIER_ADVANCE_PAYMENT (SUPPLIER_ADVANCE_PAYMENT_ID),
	CONSTRAINT FK_SAPL_EB_OBJECT_ID FOREIGN KEY (EB_OBJECT_ID) REFERENCES EB_OBJECT (EB_OBJECT_ID)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


-- Description: sql script in creating SO_TYPE table.

DROP TABLE IF EXISTS SO_TYPE;

CREATE TABLE SO_TYPE (
  SO_TYPE_ID int(10) unsigned NOT NULL AUTO_INCREMENT,
  NAME varchar(50) NOT NULL,
  ACTIVE tinyint(1) NOT NULL,
  CREATED_BY int(10) unsigned NOT NULL,
  CREATED_DATE timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  UPDATED_BY int(10) unsigned NOT NULL,
  UPDATED_DATE timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (SO_TYPE_ID),
  KEY FK_SO_TYPE_CREATED_BY (CREATED_BY),
  KEY FK_SO_TYPE_UPDATED_BY (UPDATED_BY),
  CONSTRAINT FK_SO_TYPE_CREATED_BY FOREIGN KEY (CREATED_BY) REFERENCES USER (USER_ID),
  CONSTRAINT FK_SO_TYPE_UPDATED_BY FOREIGN KEY (UPDATED_BY) REFERENCES USER (USER_ID)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

ALTER TABLE DELIVERY_RECEIPT 
ADD DATE_RECEIVED DATE DEFAULT NULL,
ADD RECEIVER varchar (50) DEFAULT NULL;

SYSTEM echo 'Inserting SO_TYPE'; 
INSERT INTO SO_TYPE VALUES (1,'PO',1,1,NOW(),1,NOW());
INSERT INTO SO_TYPE VALUES (2,'PCR',1,1,NOW(),1,NOW());

INSERT INTO DELIVERY_RECEIPT_TYPE (DELIVERY_RECEIPT_TYPE_ID, NAME, ACTIVE) 
VALUES ('5', 'Delivery Receipt - Cental', '1'),
	('6', 'Delivery Receipt - NSB3', '1'),
	('7', 'Delivery Receipt - NSB4', '1'),
	('8', 'Delivery Receipt - NSB5', '1'),
	('9', 'Delivery Receipt - NSB8', '1'),
	('10', 'Delivery Receipt - NSB8A', '1');
	
DROP TABLE IF EXISTS AR_SERVICE_LINE;

CREATE TABLE AR_SERVICE_LINE (
		AR_SERVICE_LINE_ID int(10) unsigned NOT NULL AUTO_INCREMENT,
		AR_TRANSACTION_ID int(10) unsigned NOT NULL,
		SERVICE_SETTING_ID int(10) unsigned NOT NULL,
		EB_OBJECT_ID int(10) unsigned,
		QUANTITY double DEFAULT '0',
		UNITOFMEASUREMENT_ID int(10) unsigned DEFAULT NULL,
		UP_AMOUNT double DEFAULT '0',
		AMOUNT double DEFAULT '0',
		TAX_TYPE_ID int(10) unsigned DEFAULT NULL,
		VAT_AMOUNT double DEFAULT '0',
		DISCOUNT_TYPE_ID int(10) unsigned DEFAULT NULL,
		PRIMARY KEY (AR_SERVICE_LINE_ID),
		KEY FK_AR_SERVICE_LINE_AR_TRANSACTION_ID (AR_TRANSACTION_ID),
		KEY FK_AR_SERVICE_LINE_SERVICE_SETTING_ID (SERVICE_SETTING_ID),
		KEY FK_AR_SERVICE_LINE_EB_OBJECT_ID (EB_OBJECT_ID),
		KEY FK_AR_SERVICE_LINE_TAX_TYPE_ID (TAX_TYPE_ID),
		KEY FK_AR_SERVICE_LINE_DISCOUNT_TYPE_ID (DISCOUNT_TYPE_ID),
		CONSTRAINT FK_AR_SERVICE_LINE_AR_TRANSACTION_ID FOREIGN KEY (AR_TRANSACTION_ID) REFERENCES AR_TRANSACTION (AR_TRANSACTION_ID),
		CONSTRAINT FK_AR_SERVICE_LINE_EB_OBJECT_ID FOREIGN KEY (EB_OBJECT_ID) REFERENCES EB_OBJECT (EB_OBJECT_ID),
		CONSTRAINT FK_AR_SERVICE_LINE_SERVICE_SETTING_ID FOREIGN KEY (SERVICE_SETTING_ID) REFERENCES SERVICE_SETTING (SERVICE_SETTING_ID),
		CONSTRAINT FK_AR_SERVICE_LINE_TAX_TYPE_ID FOREIGN KEY (TAX_TYPE_ID) REFERENCES TAX_TYPE (TAX_TYPE_ID),
		CONSTRAINT FK_AR_SERVICE_LINE_DISCOUNT_TYPE_ID FOREIGN KEY (DISCOUNT_TYPE_ID) REFERENCES ITEM_DISCOUNT_TYPE (ITEM_DISCOUNT_TYPE_ID)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS TRANSACTION_CLASSIFICATION;

CREATE TABLE `TRANSACTION_CLASSIFICATION` (
  `TRANSACTION_CLASSIFICATION_ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `EB_SL_KEY_ID` int(10) unsigned NOT NULL,
  `NAME` varchar(50) NOT NULL,
  `ACTIVE` tinyint(1) NOT NULL,
  `CREATED_BY` int(10) unsigned NOT NULL,
  `CREATED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPDATED_BY` int(10) unsigned NOT NULL,
  `UPDATED_DATE` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`TRANSACTION_CLASSIFICATION_ID`),
  KEY `FK_TRANSACTION_CLASSIFICATION_EB_SL_KEY_ID` (`EB_SL_KEY_ID`),
  KEY `FK_TRANSACTION_CLASSIFICATION_CREATED_BY` (`CREATED_BY`),
  KEY `FK_TRANSACTION_CLASSIFICATION_UPDATED_BY` (`UPDATED_BY`),
  CONSTRAINT `FK_TRANSACTION_CLASSIFICATION_CREATED_BY` FOREIGN KEY (`CREATED_BY`) REFERENCES `USER` (`USER_ID`),
  CONSTRAINT `FK_TRANSACTION_CLASSIFICATION_EB_SL_KEY_ID` FOREIGN KEY (`EB_SL_KEY_ID`) REFERENCES `EB_SL_KEY` (`EB_SL_KEY_ID`),
  CONSTRAINT `FK_TRANSACTION_CLASSIFICATION_UPDATED_BY` FOREIGN KEY (`UPDATED_BY`) REFERENCES `USER` (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

SYSTEM echo 'Inserting TRANSACTION_CLASSIFICATION'; 
INSERT INTO `TRANSACTION_CLASSIFICATION` VALUES 
(1,1,'Regular Transaction',1,1,NOW(),1,NOW()),
(2,1,'Debit Memo',1,1,NOW(),1,NOW()),
(3,1,'Credit Memo',1,1,NOW(),1,NOW());

INSERT INTO AR_TRANSACTION_TYPE VALUES ('17', '1', 'AR Transaction - Central', '1', '1', NOW(), '1', NOW());
INSERT INTO AR_TRANSACTION_TYPE VALUES ('18', '1', 'AR Transaction - NSB 3', '1', '1', NOW(), '1', NOW());
INSERT INTO AR_TRANSACTION_TYPE VALUES ('19', '1', 'AR Transaction - NSB 4', '1', '1', NOW(), '1', NOW());
INSERT INTO AR_TRANSACTION_TYPE VALUES ('20', '1', 'AR Transaction - NSB 5', '1', '1', NOW(), '1', NOW());
INSERT INTO AR_TRANSACTION_TYPE VALUES ('21', '1', 'AR Transaction - NSB 8', '1', '1', NOW(), '1', NOW());
INSERT INTO AR_TRANSACTION_TYPE VALUES ('22', '1', 'AR Transaction - NSB 8A', '1', '1', NOW(), '1', NOW());

INSERT INTO OBJECT_TYPE VALUES (24007, 'AR_SERVICE_LINE', 'AR_SERVICE_LINE', 'eulap.eb.service.ArServiceLineService', 1, 1, NOW(), 1, NOW());


ALTER TABLE AR_TRANSACTION ADD DIVISION_ID INT(10) UNSIGNED DEFAULT NULL AFTER COMPANY_ID,
ADD CONSTRAINT FK_AR_TRANSACTION_DIVISION_ID FOREIGN KEY (DIVISION_ID) REFERENCES DIVISION (DIVISION_ID);

ALTER TABLE AR_TRANSACTION ADD CURRENCY_ID INT(10) UNSIGNED DEFAULT NULL AFTER DESCRIPTION,
ADD CONSTRAINT FK_AR_TRANSACTION_CURRENCY_ID FOREIGN KEY (CURRENCY_ID) REFERENCES CURRENCY (CURRENCY_ID);

ALTER TABLE AR_TRANSACTION ADD CURRENCY_RATE_ID INT(10) UNSIGNED DEFAULT NULL AFTER CURRENCY_ID,
ADD CONSTRAINT FK_AR_TRANSACTION_CURRENCY_RATE_ID FOREIGN KEY (CURRENCY_RATE_ID) REFERENCES CURRENCY_RATE (CURRENCY_RATE_ID);

ALTER TABLE AR_TRANSACTION ADD CURRENCY_RATE_VALUE double DEFAULT 0 AFTER CURRENCY_RATE_ID;

ALTER TABLE AR_TRANSACTION ADD COLUMN WT_VAT_AMOUNT double DEFAULT 0 AFTER WT_AMOUNT;

ALTER TABLE AR_TRANSACTION ADD TRANSACTION_CLASSIFICATION_ID INT(10) UNSIGNED DEFAULT NULL,
ADD CONSTRAINT FK_AR_TRANSACTION_TRANSACTION_CLASSIFICATION_ID FOREIGN KEY (TRANSACTION_CLASSIFICATION_ID) REFERENCES TRANSACTION_CLASSIFICATION (TRANSACTION_CLASSIFICATION_ID);

ALTER TABLE AR_MISCELLANEOUS ADD COMPANY_ID INT(10) UNSIGNED DEFAULT NULL AFTER EB_OBJECT_ID,
ADD CONSTRAINT FK_AR_MISCELLANEOUS_COMPANY_ID FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY (COMPANY_ID);

ALTER TABLE AR_MISCELLANEOUS ADD DIVISION_ID INT(10) UNSIGNED DEFAULT NULL AFTER AMOUNT,
ADD CONSTRAINT FK_AR_MISCELLANEOUS_DIVISION_ID FOREIGN KEY (DIVISION_ID) REFERENCES DIVISION (DIVISION_ID);

ALTER TABLE AR_MISCELLANEOUS ADD CURRENCY_ID INT(10) UNSIGNED DEFAULT NULL AFTER AMOUNT,
ADD CONSTRAINT FK_AR_MISCELLANEOUS_CURRENCY_ID FOREIGN KEY (CURRENCY_ID) REFERENCES CURRENCY (CURRENCY_ID);

ALTER TABLE AR_MISCELLANEOUS ADD CURRENCY_RATE_VALUE double DEFAULT 0 AFTER CURRENCY_ID;

ALTER TABLE AR_MISCELLANEOUS ADD CURRENCY_RATE_ID INT(10) UNSIGNED DEFAULT NULL AFTER CURRENCY_ID,
ADD CONSTRAINT FK_AR_MISCELLANEOUS_CURRENCY_RATE_ID FOREIGN KEY (CURRENCY_RATE_ID) REFERENCES CURRENCY_RATE (CURRENCY_RATE_ID);

ALTER TABLE AR_MISCELLANEOUS ADD COLUMN WT_VAT_AMOUNT double DEFAULT 0 AFTER WT_AMOUNT;

ALTER TABLE REPACKING ADD DIVISION_ID INT(10) unsigned DEFAULT NULL AFTER COMPANY_ID,
ADD CONSTRAINT FK_RP_DIVISION_ID FOREIGN KEY (DIVISION_ID) REFERENCES DIVISION (DIVISION_ID);

ALTER TABLE STOCK_ADJUSTMENT ADD DIVISION_ID INT(10) unsigned DEFAULT NULL AFTER COMPANY_ID,
ADD CONSTRAINT FK_STOCK_ADJUSTMENT_DIVISION_ID FOREIGN KEY (DIVISION_ID) REFERENCES DIVISION (DIVISION_ID);

ALTER TABLE STOCK_ADJUSTMENT ADD BMS_NUMBER varchar(50) DEFAULT NULL;

ALTER TABLE STOCK_ADJUSTMENT ADD CURRENCY_ID INT(10) unsigned DEFAULT NULL,
ADD CONSTRAINT FK_STOCK_ADJUSTMENT_CURRENCY_ID FOREIGN KEY (CURRENCY_ID) REFERENCES CURRENCY (CURRENCY_ID);

ALTER TABLE STOCK_ADJUSTMENT ADD CURRENCY_RATE_ID INT(10) unsigned DEFAULT NULL AFTER CURRENCY_ID,
ADD CONSTRAINT FK_STOCK_ADJUSTMENT_CURRENCY_RATE_ID FOREIGN KEY (CURRENCY_RATE_ID) REFERENCES CURRENCY_RATE (CURRENCY_RATE_ID);

ALTER TABLE STOCK_ADJUSTMENT ADD CURRENCY_RATE_VALUE double DEFAULT 0 AFTER CURRENCY_RATE_ID;

INSERT INTO STOCK_ADJUSTMENT_CLASSIFICATION
VALUES (5, 'Stock Adjustment In - Central', 1, 1, NOW(), 1, NOW()),
(6, 'Stock Adjustment In - NSB 3', 1, 1, NOW(), 1, NOW()),
(7, 'Stock Adjustment In - NSB 4', 1, 1, NOW(), 1, NOW()),
(8, 'Stock Adjustment In - NSB 5', 1, 1, NOW(), 1, NOW()),
(9, 'Stock Adjustment In - NSB 8', 1, 1, NOW(), 1, NOW()),
(10, 'Stock Adjustment In - NSB 8A', 1, 1, NOW(), 1, NOW());


-- Description: Sql script for creating PETTY_CASH_VOUCHER table

DROP TABLE IF EXISTS PETTY_CASH_VOUCHER;

CREATE TABLE PETTY_CASH_VOUCHER (
	PETTY_CASH_VOUCHER_ID int(10) unsigned NOT NULL AUTO_INCREMENT,
	FORM_WORKFLOW_ID int(10) unsigned DEFAULT NULL,
	EB_OBJECT_ID int(10) unsigned DEFAULT NULL,
	EB_SL_KEY_ID int(10) unsigned NOT NULL,
	SEQUENCE_NO int(10) unsigned NOT NULL,
	COMPANY_ID int(10) unsigned NOT NULL,
	DIVISION_ID int(10) unsigned NOT NULL,
	USER_CUSTODIAN_ID int(10) unsigned NOT NULL,
	PCV_DATE date NOT NULL,
	REQUESTOR text,
	REFERENCE_NO text,
	DESCRIPTION text,
	AMOUNT double DEFAULT '0',
	CREATED_BY int(10) unsigned NOT NULL,
	CREATED_DATE timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
	UPDATED_BY int(10) unsigned NOT NULL,
	UPDATED_DATE timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
	PRIMARY KEY (PETTY_CASH_VOUCHER_ID),
	KEY FK_PETTY_CASH_VOUCHER_EB_SL_KEY_ID (EB_SL_KEY_ID),
	KEY FK_PETTY_CASH_VOUCHER_EB_OBJECT_ID (EB_OBJECT_ID),
	KEY FK_PETTY_CASH_VOUCHER_COMPANY_ID (COMPANY_ID),
	KEY FK_PETTY_CASH_VOUCHER_DIVISION_ID (DIVISION_ID),
	KEY FK_PETTY_CASH_VOUCHER_USER_CUSTODIAN_ID (USER_CUSTODIAN_ID),
	KEY FK_PETTY_CASH_VOUCHER_CREATED_BY (CREATED_BY),
	KEY FK_PETTY_CASH_VOUCHER_UPDATED_BY (UPDATED_BY),
	KEY FK_PETTY_CASH_VOUCHER_FORM_WORKFLOW_ID (FORM_WORKFLOW_ID),
	CONSTRAINT FK_PETTY_CASH_VOUCHER_EB_OBJECT_ID FOREIGN KEY (EB_OBJECT_ID) REFERENCES EB_OBJECT (EB_OBJECT_ID),
	CONSTRAINT FK_PETTY_CASH_VOUCHER_COMPANY_ID FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY (COMPANY_ID),
	CONSTRAINT FK_PETTY_CASH_VOUCHER_DIVISION_ID FOREIGN KEY (DIVISION_ID) REFERENCES DIVISION (DIVISION_ID),
	CONSTRAINT FK_PETTY_CASH_VOUCHER_USER_CUSTODIAN_ID FOREIGN KEY (USER_CUSTODIAN_ID) REFERENCES USER_CUSTODIAN (USER_CUSTODIAN_ID),
	CONSTRAINT FK_PETTY_CASH_VOUCHER_EB_SL_KEY_ID FOREIGN KEY (EB_SL_KEY_ID) REFERENCES EB_SL_KEY (EB_SL_KEY_ID),
	CONSTRAINT FK_PETTY_CASH_VOUCHER_FORM_WORKFLOW_ID FOREIGN KEY (FORM_WORKFLOW_ID) REFERENCES FORM_WORKFLOW (FORM_WORKFLOW_ID),
	CONSTRAINT FK_PETTY_CASH_VOUCHER_CREATED_BY FOREIGN KEY (CREATED_BY) REFERENCES USER (USER_ID),
	CONSTRAINT FK_PETTY_CASH_VOUCHER_UPDATED_BY FOREIGN KEY (UPDATED_BY) REFERENCES USER (USER_ID)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO OBJECT_TYPE VALUES (24008, 'PETTY_CASH_VOUCHER', 'PETTY_CASH_VOUCHER', 'eulap.eb.service.PettyCashVoucherService', 1, 1, NOW(), 1, NOW());

DROP TABLE IF EXISTS SUPPLIER_ADV_PAYMENT_ACCOUNT;

CREATE TABLE SUPPLIER_ADV_PAYMENT_ACCOUNT (
	SUPPLIER_ADV_PAYMENT_ACCOUNT_ID int(10) unsigned NOT NULL AUTO_INCREMENT,
	COMPANY_ID int(10) unsigned NOT NULL,
	DIVISION_ID int(10) unsigned NOT NULL,
	ACCOUNT_COMBINATION_ID int(10) unsigned NOT NULL,
	ACTIVE tinyint(1) DEFAULT '1',
	CREATED_BY int(10) unsigned NOT NULL,
	CREATED_DATE timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
	UPDATED_BY int(10) unsigned NOT NULL,
	UPDATED_DATE timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
	PRIMARY KEY (SUPPLIER_ADV_PAYMENT_ACCOUNT_ID),
	KEY FK_SAPA_COMPANY_ID (COMPANY_ID),
	KEY FK_SAPA_DIVISION_ID (DIVISION_ID),
	KEY FK_SAPA_AC_ID (ACCOUNT_COMBINATION_ID),
	KEY FK_SAPA_CREATED_BY (CREATED_BY),
	KEY FK_SAPA_UPDATED_BY (UPDATED_BY),
	CONSTRAINT FK_SAPA_COMPANY_ID FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY (COMPANY_ID),
	CONSTRAINT FK_SAPA_DIVISION_ID FOREIGN KEY (DIVISION_ID) REFERENCES DIVISION (DIVISION_ID),
	CONSTRAINT FK_SAPA_AC_ID FOREIGN KEY (ACCOUNT_COMBINATION_ID) REFERENCES ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID),
	CONSTRAINT FK_SAPA_CREATED_BY FOREIGN KEY (CREATED_BY) REFERENCES USER (USER_ID),
	CONSTRAINT FK_SAPA_UPDATED_BY FOREIGN KEY (UPDATED_BY) REFERENCES USER (USER_ID)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS DELIVERY_RECEIPT_ACCOUNT;

CREATE TABLE DELIVERY_RECEIPT_ACCOUNT (
	DELIVERY_RECEIPT_ACCOUNT_ID int(10) unsigned NOT NULL AUTO_INCREMENT,
	COMPANY_ID int(10) unsigned NOT NULL,
	DIVISION_ID int(10) unsigned DEFAULT NULL,
	DEFAULT_SERVICE_AC_ID int(10) unsigned NOT NULL,
	ACTIVE tinyint(1) DEFAULT '1',
	CREATED_BY int(10) unsigned NOT NULL,
	CREATED_DATE timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
	UPDATED_BY int(10) unsigned NOT NULL,
	UPDATED_DATE timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
	PRIMARY KEY (DELIVERY_RECEIPT_ACCOUNT_ID),
	KEY FK_DRA_COMPANY_ID (COMPANY_ID),
	KEY FK_DRA_DIVISION_ID (DIVISION_ID),
	KEY FK_DRA_DEFAULT_SERVICE_AC_ID (DEFAULT_SERVICE_AC_ID),
	KEY FK_DRA_CREATED_BY (CREATED_BY),
	KEY FK_DRA_UPDATED_BY (UPDATED_BY),
	CONSTRAINT FK_DRA_COMPANY_ID FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY (COMPANY_ID),
	CONSTRAINT FK_DRA_DIVISION_ID FOREIGN KEY (DIVISION_ID) REFERENCES DIVISION (DIVISION_ID),
	CONSTRAINT FK_DRA_DEFAULT_SERVICE_AC_ID FOREIGN KEY (DEFAULT_SERVICE_AC_ID) REFERENCES ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID),
	CONSTRAINT FK_DRA_CREATED_BY FOREIGN KEY (CREATED_BY) REFERENCES USER (USER_ID),
	CONSTRAINT FK_DRA_UPDATED_BY FOREIGN KEY (UPDATED_BY) REFERENCES USER (USER_ID)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS CUSTOMER_ADVANCE_PAYMENT_ACCOUNT;

CREATE TABLE CUSTOMER_ADVANCE_PAYMENT_ACCOUNT (
	CUSTOMER_ADVANCE_PAYMENT_ACCOUNT_ID int(10) unsigned NOT NULL AUTO_INCREMENT,
	COMPANY_ID int(10) unsigned NOT NULL,
	DIVISION_ID int(10) unsigned DEFAULT NULL,
	DEFAULT_CREDIT_AC_ID int(10) unsigned NOT NULL,
	ACTIVE tinyint(1) DEFAULT '1',
	CREATED_BY int(10) unsigned NOT NULL,
	CREATED_DATE timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
	UPDATED_BY int(10) unsigned NOT NULL,
	UPDATED_DATE timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
	PRIMARY KEY (CUSTOMER_ADVANCE_PAYMENT_ACCOUNT_ID),
	KEY FK_CAPA_COMPANY_ID (COMPANY_ID),
	KEY FK_CAPA_DIVISION_ID (DIVISION_ID),
	KEY FK_CAPA_DEFAULT_CREDIT_AC_ID (DEFAULT_CREDIT_AC_ID),
	KEY FK_CAPA_CREATED_BY (CREATED_BY),
	KEY FK_CAPA_UPDATED_BY (UPDATED_BY),
	CONSTRAINT FK_CAPA_COMPANY_ID FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY (COMPANY_ID),
	CONSTRAINT FK_CAPA_DIVISION_ID FOREIGN KEY (DIVISION_ID) REFERENCES DIVISION (DIVISION_ID),
	CONSTRAINT FK_CAPA_DEFAULT_CREDIT_AC_ID FOREIGN KEY (DEFAULT_CREDIT_AC_ID) REFERENCES ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID),
	CONSTRAINT FK_CAPA_CREATED_BY FOREIGN KEY (CREATED_BY) REFERENCES USER (USER_ID),
	CONSTRAINT FK_CAPA_UPDATED_BY FOREIGN KEY (UPDATED_BY) REFERENCES USER (USER_ID)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO EB_OBJECT (EB_OBJECT_ID, OBJECT_TYPE_ID, CREATED_BY, CREATED_DATE) VALUES (73, 100, 1, NOW());
-- ACCOUNT
INSERT INTO ACCOUNT (ACCOUNT_ID, NUMBER, ACCOUNT_NAME, DESCRIPTION, ACCOUNT_TYPE_ID, RELATED_ACCOUNT_ID, EB_OBJECT_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (60, '1011400000', 'Advances To Supplier', 'Advances To Supplier', 1, NULL, 73, 1, 1, NOW(), 1, NOW(), 1);
-- ACCOUNT COMBINATION
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (447, 1, 60, 1, 1, 1, NOW(), 1, NOW(), 1);
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (448, 1, 60, 2, 1, 1, NOW(), 1, NOW(), 1);
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (449, 1, 60, 3, 1, 1, NOW(), 1, NOW(), 1);
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (450, 1, 60, 4, 1, 1, NOW(), 1, NOW(), 1);
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (451, 1, 60, 5, 1, 1, NOW(), 1, NOW(), 1);
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (452, 1, 60, 6, 1, 1, NOW(), 1, NOW(), 1);
-- SUPPLIER_ADV_PAYMENT_ACCOUNT
INSERT INTO SUPPLIER_ADV_PAYMENT_ACCOUNT (COMPANY_ID, DIVISION_ID, ACCOUNT_COMBINATION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE)
VALUES (1, 1, 447, 1, 1, NOW(), 1, NOW());
INSERT INTO SUPPLIER_ADV_PAYMENT_ACCOUNT (COMPANY_ID, DIVISION_ID, ACCOUNT_COMBINATION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE)
VALUES (1, 2, 448, 1, 1, NOW(), 1, NOW());
INSERT INTO SUPPLIER_ADV_PAYMENT_ACCOUNT (COMPANY_ID, DIVISION_ID, ACCOUNT_COMBINATION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE)
VALUES (1, 3, 449, 1, 1, NOW(), 1, NOW());
INSERT INTO SUPPLIER_ADV_PAYMENT_ACCOUNT (COMPANY_ID, DIVISION_ID, ACCOUNT_COMBINATION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE)
VALUES (1, 4, 450, 1, 1, NOW(), 1, NOW());
INSERT INTO SUPPLIER_ADV_PAYMENT_ACCOUNT (COMPANY_ID, DIVISION_ID, ACCOUNT_COMBINATION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE)
VALUES (1, 5, 451, 1, 1, NOW(), 1, NOW());
INSERT INTO SUPPLIER_ADV_PAYMENT_ACCOUNT (COMPANY_ID, DIVISION_ID, ACCOUNT_COMBINATION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE)
VALUES (1, 6, 452, 1, 1, NOW(), 1, NOW());

-- DELIVERY RECEIPT ACCOUNT
INSERT INTO DELIVERY_RECEIPT_ACCOUNT (COMPANY_ID, DIVISION_ID, DEFAULT_SERVICE_AC_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE)
VALUES (1, 1, 14, 1, 1, NOW(), 1, NOW());
INSERT INTO DELIVERY_RECEIPT_ACCOUNT (COMPANY_ID, DIVISION_ID, DEFAULT_SERVICE_AC_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE)
VALUES (1, 2, 57, 1, 1, NOW(), 1, NOW());
INSERT INTO DELIVERY_RECEIPT_ACCOUNT (COMPANY_ID, DIVISION_ID, DEFAULT_SERVICE_AC_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE)
VALUES (1, 3, 120, 1, 1, NOW(), 1, NOW());
INSERT INTO DELIVERY_RECEIPT_ACCOUNT (COMPANY_ID, DIVISION_ID, DEFAULT_SERVICE_AC_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE)
VALUES (1, 4, 183, 1, 1, NOW(), 1, NOW());
INSERT INTO DELIVERY_RECEIPT_ACCOUNT (COMPANY_ID, DIVISION_ID, DEFAULT_SERVICE_AC_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE)
VALUES (1, 5, 246, 1, 1, NOW(), 1, NOW());
INSERT INTO DELIVERY_RECEIPT_ACCOUNT (COMPANY_ID, DIVISION_ID, DEFAULT_SERVICE_AC_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE)
VALUES (1, 6, 309, 1, 1, NOW(), 1, NOW());

-- CUSTOMER ADVANCE PAYMENT
INSERT INTO EB_OBJECT (EB_OBJECT_ID, OBJECT_TYPE_ID, CREATED_BY, CREATED_DATE) VALUES (74, 100, 1, NOW());
-- ACCOUNT
INSERT INTO ACCOUNT (ACCOUNT_ID, NUMBER, ACCOUNT_NAME, DESCRIPTION, ACCOUNT_TYPE_ID, RELATED_ACCOUNT_ID, EB_OBJECT_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (61, '1111', 'ADVANCES FROM CUSTOMER', 'ADVANCES FROM CUSTOMER', 9, NULL, 74, 1, 1, NOW(), 1, NOW(), 1);
-- ACCOUNT COMBINATION
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (453, 1, 61, 1, 1, 1, NOW(), 1, NOW(), 1);
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (454, 1, 61, 2, 1, 1, NOW(), 1, NOW(), 1);
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (455, 1, 61, 3, 1, 1, NOW(), 1, NOW(), 1);
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (456, 1, 61, 4, 1, 1, NOW(), 1, NOW(), 1);
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (457, 1, 61, 5, 1, 1, NOW(), 1, NOW(), 1);
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (458, 1, 61, 6, 1, 1, NOW(), 1, NOW(), 1);

INSERT INTO CUSTOMER_ADVANCE_PAYMENT_ACCOUNT (COMPANY_ID, DIVISION_ID, DEFAULT_CREDIT_AC_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE)
VALUES (1, 1, 453, 1, 1, NOW(), 1, NOW());
INSERT INTO CUSTOMER_ADVANCE_PAYMENT_ACCOUNT (COMPANY_ID, DIVISION_ID, DEFAULT_CREDIT_AC_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE)
VALUES (1, 2, 454, 1, 1, NOW(), 1, NOW());
INSERT INTO CUSTOMER_ADVANCE_PAYMENT_ACCOUNT (COMPANY_ID, DIVISION_ID, DEFAULT_CREDIT_AC_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE)
VALUES (1, 3, 455, 1, 1, NOW(), 1, NOW());
INSERT INTO CUSTOMER_ADVANCE_PAYMENT_ACCOUNT (COMPANY_ID, DIVISION_ID, DEFAULT_CREDIT_AC_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE)
VALUES (1, 4, 456, 1, 1, NOW(), 1, NOW());
INSERT INTO CUSTOMER_ADVANCE_PAYMENT_ACCOUNT (COMPANY_ID, DIVISION_ID, DEFAULT_CREDIT_AC_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE)
VALUES (1, 5, 457, 1, 1, NOW(), 1, NOW());
INSERT INTO CUSTOMER_ADVANCE_PAYMENT_ACCOUNT (COMPANY_ID, DIVISION_ID, DEFAULT_CREDIT_AC_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE)
VALUES (1, 6, 458, 1, 1, NOW(), 1, NOW());

-- AR INVOICE ACCOUNT
-- AR RETETENTION ACCOUNT COMBINATION
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (459, 1, 58, 2, 1, 1, NOW(), 1, NOW(), 1);
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (460, 1, 58, 3, 1, 1, NOW(), 1, NOW(), 1);
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (461, 1, 58, 4, 1, 1, NOW(), 1, NOW(), 1);
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (462, 1, 58, 5, 1, 1, NOW(), 1, NOW(), 1);
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (463, 1, 58, 6, 1, 1, NOW(), 1, NOW(), 1);
-- CREDITABLE WITHHOLDING TAX ACCOUT COMBINATION
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (464, 1, 59, 2, 1, 1, NOW(), 1, NOW(), 1);
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (465, 1, 59, 3, 1, 1, NOW(), 1, NOW(), 1);
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (466, 1, 59, 4, 1, 1, NOW(), 1, NOW(), 1);
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (467, 1, 59, 5, 1, 1, NOW(), 1, NOW(), 1);
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (468, 1, 59, 6, 1, 1, NOW(), 1, NOW(), 1);

INSERT INTO AR_INVOICE_ACCOUNT (COMPANY_ID, DIVISION_ID, RETENTION_AC_ID, WT_VAT_AC_ID, DEFAULT_DISC_AC_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE)
VALUES (1, 2, 459, 464, 55, 1, 1, NOW(), 1, NOW());
INSERT INTO AR_INVOICE_ACCOUNT (COMPANY_ID, DIVISION_ID, RETENTION_AC_ID, WT_VAT_AC_ID, DEFAULT_DISC_AC_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE)
VALUES (1, 3, 460, 465, 118, 1, 1, NOW(), 1, NOW());
INSERT INTO AR_INVOICE_ACCOUNT (COMPANY_ID, DIVISION_ID, RETENTION_AC_ID, WT_VAT_AC_ID, DEFAULT_DISC_AC_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE)
VALUES (1, 4, 461, 466, 181, 1, 1, NOW(), 1, NOW());
INSERT INTO AR_INVOICE_ACCOUNT (COMPANY_ID, DIVISION_ID, RETENTION_AC_ID, WT_VAT_AC_ID, DEFAULT_DISC_AC_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE)
VALUES (1, 5, 462, 467, 244, 1, 1, NOW(), 1, NOW());
INSERT INTO AR_INVOICE_ACCOUNT (COMPANY_ID, DIVISION_ID, RETENTION_AC_ID, WT_VAT_AC_ID, DEFAULT_DISC_AC_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE)
VALUES (1, 6, 463, 468, 307, 1, 1, NOW(), 1, NOW());

-- VAT_ACCOUNT_SETUP
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (469, 1, 53, 2, 1, 1, NOW(), 1, NOW(), 1);
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (470, 1, 53, 3, 1, 1, NOW(), 1, NOW(), 1);
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (471, 1, 53, 4, 1, 1, NOW(), 1, NOW(), 1);
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (472, 1, 53, 5, 1, 1, NOW(), 1, NOW(), 1);
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (473, 1, 53, 6, 1, 1, NOW(), 1, NOW(), 1);

INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (474, 1, 54, 2, 1, 1, NOW(), 1, NOW(), 1);
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (475, 1, 54, 3, 1, 1, NOW(), 1, NOW(), 1);
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (476, 1, 54, 4, 1, 1, NOW(), 1, NOW(), 1);
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (477, 1, 54, 5, 1, 1, NOW(), 1, NOW(), 1);
INSERT INTO ACCOUNT_COMBINATION (ACCOUNT_COMBINATION_ID, COMPANY_ID, ACCOUNT_ID, DIVISION_ID, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, EB_SL_KEY_ID)
VALUES (478, 1, 54, 6, 1, 1, NOW(), 1, NOW(), 1);
-- UPDATE EXISTING ACCOUNTS
-- THE CURRENT ACCOUNT COMBINATIONS FOR VAT_ACCOUNT_SETUP INPUT AND OUTPUT VAT IS 0.
UPDATE VAT_ACCOUNT_SETUP SET INPUT_VAT_AC_ID = 469, OUTPUT_VAT_AC_ID = 474 WHERE DIVISION_ID = 2;
UPDATE VAT_ACCOUNT_SETUP SET INPUT_VAT_AC_ID = 470, OUTPUT_VAT_AC_ID = 475 WHERE DIVISION_ID = 3;
UPDATE VAT_ACCOUNT_SETUP SET INPUT_VAT_AC_ID = 471, OUTPUT_VAT_AC_ID = 476 WHERE DIVISION_ID = 4;
UPDATE VAT_ACCOUNT_SETUP SET INPUT_VAT_AC_ID = 472, OUTPUT_VAT_AC_ID = 477 WHERE DIVISION_ID = 5;
UPDATE VAT_ACCOUNT_SETUP SET INPUT_VAT_AC_ID = 473, OUTPUT_VAT_AC_ID = 478 WHERE DIVISION_ID = 6;

INSERT INTO INVOICE_TYPE (INVOICE_TYPE_ID, EB_SL_KEY_ID, NAME, ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE) 
VALUES ('37', '1', 'AP Invoice Confidential - Central', '1', '1', NOW(), '1', NOW()),
('38', '1', 'AP Invoice Confidential - NSB 3', '1', '1', NOW(), '1', NOW()),
('39', '1', 'AP Invoice Confidential - NSB 4', '1', '1', NOW(), '1', NOW()),
('40', '1', 'AP Invoice Confidential - NSB 5', '1', '1', NOW(), '1', NOW()),
('41', '1', 'AP Invoice Confidential - NSB 8', '1', '1', NOW(), '1', NOW()),
('42', '1', 'AP Invoice Confidential - NSB 8A', '1', '1', NOW(), '1', NOW());

INSERT INTO STOCK_ADJUSTMENT_CLASSIFICATION VALUES 
(11, 'Stock Adjustment Out - Central', 1, 1, NOW(), 1, NOW()),
(12, 'Stock Adjustment Out - NSB 3', 1, 1, NOW(), 1, NOW()),
(13, 'Stock Adjustment Out - NSB 4', 1, 1, NOW(), 1, NOW()),
(14, 'Stock Adjustment Out - NSB 5', 1, 1, NOW(), 1, NOW()),
(15, 'Stock Adjustment Out - NSB 8', 1, 1, NOW(), 1, NOW()),
(16, 'Stock Adjustment Out - NSB 8A', 1, 1, NOW(), 1, NOW());