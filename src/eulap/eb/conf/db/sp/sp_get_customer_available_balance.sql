-- Description: Stored procedure that will get the available balance of the customer.


Delimiter //
DROP PROCEDURE IF EXISTS GET_CUSTOMER_AVAILABE_BALANCE;
CREATE PROCEDURE GET_CUSTOMER_AVAILABE_BALANCE(IN IN_CUSTOMER_ID INT)
BEGIN

SELECT CREDIT_LIMIT - ((TOTAL_TRANSACTION + TOTAL_INVOICE)- TOTAL_RECEIPT) FROM (
SELECT CUST_ID, CREDIT_LIMIT, SUM(TOTAL_TRANSACTION) AS TOTAL_TRANSACTION, SUM(TOTAL_RECEIPT) AS TOTAL_RECEIPT, SUM(TOTAL_INVOICE) AS TOTAL_INVOICE FROM(

-- CREDIT LIMIT
SELECT AR_CUSTOMER_ID AS CUST_ID, MAX_AMOUNT AS CREDIT_LIMIT, 0 AS TOTAL_TRANSACTION, 0 AS TOTAL_RECEIPT, 0 AS TOTAL_INVOICE
FROM AR_CUSTOMER WHERE AR_CUSTOMER_ID = IN_CUSTOMER_ID

UNION ALL

-- TOTAL AR TRANSACTION
SELECT ART.CUSTOMER_ID AS CUST_ID, 0 AS CREDIT_LIMIT, COALESCE(SUM(ART.AMOUNT), 0) AS TOTAL_TRANSACTION, 0 AS TOTAL_RECEIPT, 0 AS TOTAL_INVOICE
FROM AR_TRANSACTION ART
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ART.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4  AND ART.CUSTOMER_ID = IN_CUSTOMER_ID

UNION ALL 

-- TOTAL RECEIPT
SELECT ARR.AR_CUSTOMER_ID AS CUST_ID, 0 AS CREDIT_LIMIT, 0 AS TOTAL_TRANSACTION, COALESCE(SUM(ARR.AMOUNT), 0) AS TOTAL_RECEIPT, 0 AS TOTAL_INVOICE
FROM AR_RECEIPT ARR
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ARR.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4 AND ARR.AR_CUSTOMER_ID = IN_CUSTOMER_ID

UNION ALL

-- TOTAL AR INVOICE
SELECT  ARI.AR_CUSTOMER_ID AS CUST_ID,  0 AS CREDIT_LIMIT, 0 AS TOTAL_TRANSACTION,  0 AS TOTAL_RECEIPT, COALESCE(SUM(ARI.AMOUNT), 0) AS TOTAL_INVOICE
FROM AR_INVOICE ARI
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ARI.FORM_WORKFLOW_ID
WHERE FW.CURRENT_STATUS_ID != 4 AND ARI.AR_CUSTOMER_ID = IN_CUSTOMER_ID

) AS TBL
) AS CUSTOMER_BALANCE;
END //