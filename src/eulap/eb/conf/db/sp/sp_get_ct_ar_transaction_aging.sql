-- Description: Stored procedure for retrieving data for Customer type - AR Transaction Aging.


Delimiter //
DROP PROCEDURE IF EXISTS GET_CT_AR_TRANSACTION_AGING;

CREATE PROCEDURE GET_CT_AR_TRANSACTION_AGING(IN IN_COMPANY_ID INT, IN IN_TRANSACTION_TYPE_ID INT, IN IN_AR_CUSTOMER_ID INT,
IN IN_AR_CUSTOMER_ACCOUNT_ID INT, IN IN_CUSTOMER_TYPE_ID INT, IN IN_GROUP_BY_OPTION INT, IN IN_AGE_BASIS INT, IN IN_TRANS_AS_OF_DATE DATE, IN IN_COLLECTION_AS_OF_DATE DATE)

BEGIN

SELECT TYPE, ID, CUSTOMER_NAME, CUSTOMER_ACCOUNT, TYPE_CA, TRANSACTION_NUMBER, TERM,
 SUM(TRANSACTION_AMT) AS TOTAL_TRANSACTION, SUM(PAID_AMT) AS TOTAL_TRANSACTION, SUM(TRANSACTION_AMT - PAID_AMT) AS BALANCE,
 SUM(1_30_DAYS) AS 1_30_DAYS, SUM(31_60_DAYS) AS 31_60_DAYS, SUM(61_90_DAYS) AS 61_90_DAYS, SUM(91_120_DAYS),
 SUM(121_150_DAYS) AS 121_150_DAYS, SUM(151_UP) AS 151_UP FROM (

SELECT TYPE, TYPE_ID, ID, AGE_BASIS, CUSTOMER_NAME, CUSTOMER_ACCOUNT, CONCAT(TYPE_ID, ' ', AR_CUSTOMER_ACCOUNT_ID) AS TYPE_CA, 
 TRANSACTION_NUMBER, TERM, SUM(TRANSACTION_AMT) AS TRANSACTION_AMT, SUM(PAID_AMT) AS PAID_AMT,
 IF(DATEDIFF(IN_TRANS_AS_OF_DATE, AGE_BASIS) BETWEEN 1 AND 30, SUM(TRANSACTION_AMT - PAID_AMT), 0) AS 1_30_DAYS,
 IF(DATEDIFF(IN_TRANS_AS_OF_DATE, AGE_BASIS) BETWEEN 31 AND 60, SUM(TRANSACTION_AMT - PAID_AMT), 0) AS 31_60_DAYS, 
 IF(DATEDIFF(IN_TRANS_AS_OF_DATE, AGE_BASIS) BETWEEN 61 AND 90, SUM(TRANSACTION_AMT - PAID_AMT), 0) AS 61_90_DAYS, 
 IF(DATEDIFF(IN_TRANS_AS_OF_DATE, AGE_BASIS) BETWEEN 91 AND 120, SUM(TRANSACTION_AMT - PAID_AMT), 0) AS 91_120_DAYS,
 IF(DATEDIFF(IN_TRANS_AS_OF_DATE, AGE_BASIS) BETWEEN 121 AND 150, SUM(TRANSACTION_AMT - PAID_AMT), 0) AS 121_150_DAYS, 
 IF(DATEDIFF(IN_TRANS_AS_OF_DATE, AGE_BASIS) >= 151, SUM(TRANSACTION_AMT - PAID_AMT), 0) AS 151_UP
FROM (
 SELECT
  (CASE WHEN T.AR_TRANSACTION_TYPE_ID = 1 THEN "REG"
    WHEN T.AR_TRANSACTION_TYPE_ID = 2 THEN "DM"
    WHEN T.AR_TRANSACTION_TYPE_ID = 3 THEN "CM"
    WHEN T.AR_TRANSACTION_TYPE_ID = 4 THEN "AS"
    WHEN T.AR_TRANSACTION_TYPE_ID = 5 THEN "ASR"
    WHEN T.AR_TRANSACTION_TYPE_ID = 6 THEN "ET"
    WHEN T.AR_TRANSACTION_TYPE_ID = 7 THEN "ASR-EB"
    WHEN T.AR_TRANSACTION_TYPE_ID = 8 THEN "AS-W"
    WHEN T.AR_TRANSACTION_TYPE_ID = 9 THEN "ASR-W" 
    WHEN T.AR_TRANSACTION_TYPE_ID = 10 THEN "AS-IS"
    WHEN T.AR_TRANSACTION_TYPE_ID = 11 THEN "ASR-IS" END) AS TYPE,
  T.AR_TRANSACTION_ID AS ID, T.AR_TRANSACTION_TYPE_ID AS TYPE_ID,
  (CASE WHEN IN_AGE_BASIS = 1 THEN (
  	(CASE WHEN T.DUE_DATE IS NULL THEN T.TRANSACTION_DATE ELSE T.DUE_DATE END))
    WHEN IN_AGE_BASIS = 2 THEN T.TRANSACTION_DATE 
    ELSE (CASE WHEN T.GL_DATE IS NULL THEN T.TRANSACTION_DATE ELSE T.GL_DATE END) END) AS AGE_BASIS,
  C.NAME AS CUSTOMER_NAME, CA.NAME AS CUSTOMER_ACCOUNT, TRM.NAME AS TERM,
  (CASE WHEN T.AR_TRANSACTION_TYPE_ID = 4 THEN
    (CASE WHEN T.DESCRIPTION IS NULL OR T.DESCRIPTION="" THEN T.TRANSACTION_NUMBER
    ELSE CONCAT(T.TRANSACTION_NUMBER, ", ", T.DESCRIPTION) END)
    WHEN T.AR_TRANSACTION_TYPE_ID = 5 THEN
  (CASE WHEN T.DESCRIPTION IS NULL OR T.DESCRIPTION="" THEN T.TRANSACTION_NUMBER
    ELSE CONCAT(T.TRANSACTION_NUMBER, ", ", T.DESCRIPTION) END)
    WHEN T.AR_TRANSACTION_TYPE_ID = 7 THEN
  (CASE WHEN T.DESCRIPTION IS NULL OR T.DESCRIPTION="" THEN T.TRANSACTION_NUMBER
    ELSE CONCAT(T.TRANSACTION_NUMBER, ", ", T.DESCRIPTION) END)
    ELSE T.TRANSACTION_NUMBER END) AS TRANSACTION_NUMBER,
  T.CUSTOMER_ACCOUNT_ID AS AR_CUSTOMER_ACCOUNT_ID,
  (CASE WHEN T.AR_TRANSACTION_TYPE_ID = 7 THEN -T.AMOUNT ELSE T.AMOUNT END) TRANSACTION_AMT, 0 AS PAID_AMT
  FROM AR_TRANSACTION T
  INNER JOIN AR_CUSTOMER C ON C.AR_CUSTOMER_ID=T.CUSTOMER_ID
  INNER JOIN AR_CUSTOMER_ACCOUNT CA ON CA.AR_CUSTOMER_ACCOUNT_ID=T.CUSTOMER_ACCOUNT_ID
  INNER JOIN CUSTOMER_TYPE CT ON CT.CUSTOMER_TYPE_ID =C.CUSTOMER_TYPE_ID
  INNER JOIN TERM TRM ON TRM.TERM_ID=T.TERM_ID
  INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID=T.FORM_WORKFLOW_ID
  WHERE FW.CURRENT_STATUS_ID != 4
  AND CA.COMPANY_ID = IN_COMPANY_ID
  AND (CASE WHEN IN_TRANSACTION_TYPE_ID != -1 THEN T.AR_TRANSACTION_TYPE_ID = IN_TRANSACTION_TYPE_ID
  			ELSE T.AR_TRANSACTION_TYPE_ID != IN_TRANSACTION_TYPE_ID END)
  AND (CASE WHEN IN_AR_CUSTOMER_ID != -1 THEN T.CUSTOMER_ID = IN_AR_CUSTOMER_ID
  			ELSE T.CUSTOMER_ID != IN_AR_CUSTOMER_ID END)
  AND (CASE WHEN IN_AR_CUSTOMER_ACCOUNT_ID != -1 THEN T.CUSTOMER_ACCOUNT_ID = IN_AR_CUSTOMER_ACCOUNT_ID
  			ELSE T.CUSTOMER_ACCOUNT_ID != IN_AR_CUSTOMER_ACCOUNT_ID END)
  AND (CASE WHEN IN_CUSTOMER_TYPE_ID != -1 THEN C.CUSTOMER_TYPE_ID = IN_CUSTOMER_TYPE_ID
  			ELSE C.CUSTOMER_TYPE_ID != IN_CUSTOMER_TYPE_ID END)

UNION ALL

SELECT
  "ACC-COL" AS TYPE, T.AR_TRANSACTION_ID AS ID, T.AR_TRANSACTION_TYPE_ID AS TYPE_ID, AR.MATURITY_DATE AS AGE_BASIS,
  C.NAME AS CUSTOMER_NAME, CA.NAME AS CUSTOMER_ACCOUNT, '' AS TERM, 
  '' AS TRANSACTION_NUMBER, T.CUSTOMER_ACCOUNT_ID AS AR_CUSTOMER_ACCOUNT_ID,
  0 AS TRANSACTION_AMT, ART.AMOUNT AS PAID_AMT
  FROM AR_RECEIPT_TRANSACTION ART
  INNER JOIN AR_RECEIPT AR ON AR.AR_RECEIPT_ID = ART.AR_RECEIPT_ID
  INNER JOIN AR_TRANSACTION T ON ART.AR_TRANSACTION_ID = T.AR_TRANSACTION_ID
  INNER JOIN AR_CUSTOMER C ON C.AR_CUSTOMER_ID = AR.AR_CUSTOMER_ID
  INNER JOIN AR_CUSTOMER_ACCOUNT CA ON CA.AR_CUSTOMER_ACCOUNT_ID = AR.AR_CUSTOMER_ACCOUNT_ID
  INNER JOIN CUSTOMER_TYPE CT ON CT.CUSTOMER_TYPE_ID = C.CUSTOMER_TYPE_ID
  INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID=AR.FORM_WORKFLOW_ID
  WHERE FW.CURRENT_STATUS_ID != 4
  AND AR.MATURITY_DATE <= IN_COLLECTION_AS_OF_DATE
  AND CA.COMPANY_ID = IN_COMPANY_ID
  AND (CASE WHEN IN_TRANSACTION_TYPE_ID != -1 THEN T.AR_TRANSACTION_TYPE_ID = IN_TRANSACTION_TYPE_ID
  			ELSE T.AR_TRANSACTION_TYPE_ID != IN_TRANSACTION_TYPE_ID END)
  AND (CASE WHEN IN_AR_CUSTOMER_ID != -1 THEN T.CUSTOMER_ID = IN_AR_CUSTOMER_ID
  			ELSE T.CUSTOMER_ID != IN_AR_CUSTOMER_ID END)
  AND (CASE WHEN IN_AR_CUSTOMER_ACCOUNT_ID != -1 THEN T.CUSTOMER_ACCOUNT_ID = IN_AR_CUSTOMER_ACCOUNT_ID
  			ELSE T.CUSTOMER_ACCOUNT_ID != IN_AR_CUSTOMER_ACCOUNT_ID END)
  AND (CASE WHEN IN_CUSTOMER_TYPE_ID != -1 THEN C.CUSTOMER_TYPE_ID = IN_CUSTOMER_TYPE_ID
  			ELSE C.CUSTOMER_TYPE_ID != IN_CUSTOMER_TYPE_ID END)

 ) AS AGING_INNER_TBL GROUP BY ID 
) AS TRANSACTION_AGING
WHERE IN_TRANS_AS_OF_DATE > AGE_BASIS
GROUP BY CASE WHEN IN_GROUP_BY_OPTION = 1 THEN ID ELSE TYPE_CA END
HAVING (SUM(TRANSACTION_AMT) - SUM(PAID_AMT)) NOT BETWEEN -0.009 AND 0.009
ORDER BY CUSTOMER_NAME, CUSTOMER_ACCOUNT, ID;
END //
