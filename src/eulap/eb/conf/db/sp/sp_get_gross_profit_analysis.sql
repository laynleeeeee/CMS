-- Description: Stored procedure that will get the gross profit analysis.




Delimiter //
DROP PROCEDURE IF EXISTS GET_GROSS_PROFIT_ANALYSIS; //
CREATE PROCEDURE GET_GROSS_PROFIT_ANALYSIS (IN IN_COMPANY_ID INT, IN IN_DIVISION_ID INT, IN IN_ITEM_CATEGORY_ID INT, IN IN_DATE_FROM DATE, IN IN_DATE_TO DATE)
BEGIN

-- IF IN_ITEM_CATEGORY_ID IS NULL THEN

SELECT DIVISION, STOCK_CODE, DESCRIPTION, QTY_SOLD, UOM, NET_SALES, COST_OF_SALES FROM (

SELECT D.NAME AS DIVISION, I.STOCK_CODE AS
STOCK_CODE, I.DESCRIPTION AS DESCRIPTION,
SUM(QUANTITY) AS QTY_SOLD, UM.NAME AS UOM, SUM(ARI.AMOUNT) AS NET_SALES,
SUM(COALESCE(UNIT_COST, 0) * QUANTITY) AS COST_OF_SALES
FROM AR_INVOICE AR
INNER JOIN AR_INVOICE_ITEM ARI ON ARI.AR_INVOICE_ID = AR.AR_INVOICE_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AR.DIVISION_ID
INNER JOIN ITEM I ON I.ITEM_ID = ARI.ITEM_ID
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID =
I.UNIT_MEASUREMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = AR.FORM_WORKFLOW_ID
WHERE IS_COMPLETE = 1
AND IF(IN_DIVISION_ID != -1, AR.DIVISION_ID = IN_DIVISION_ID,
AR.DIVISION_ID != IN_DIVISION_ID)
AND IF(IN_ITEM_CATEGORY_ID != -1, I.ITEM_CATEGORY_ID =
IN_ITEM_CATEGORY_ID, I.ITEM_CATEGORY_ID != IN_ITEM_CATEGORY_ID)
AND AR.DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
GROUP BY I.ITEM_ID, D.DIVISION_ID

UNION ALL

-- Serialized Items
SELECT D.NAME AS DIVISION, I.STOCK_CODE AS
STOCK_CODE, I.DESCRIPTION AS DESCRIPTION,
SUM(SI.QUANTITY) AS QTY_SOLD, UM.NAME AS UOM, SUM(SI.AMOUNT) AS NET_SALES,
SUM(COALESCE(SI.UNIT_COST, 0) * SI.QUANTITY) AS COST_OF_SALES
FROM SERIAL_ITEM SI
INNER JOIN OBJECT_TO_OBJECT OTO ON OTO.TO_OBJECT_ID = SI.EB_OBJECT_ID
INNER JOIN AR_INVOICE AR ON AR.EB_OBJECT_ID = OTO.FROM_OBJECT_ID
INNER JOIN DIVISION D ON D.DIVISION_ID = AR.DIVISION_ID
INNER JOIN ITEM I ON I.ITEM_ID = SI.ITEM_ID
INNER JOIN UNIT_MEASUREMENT UM ON UM.UNITOFMEASUREMENT_ID =
I.UNIT_MEASUREMENT_ID
INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = AR.FORM_WORKFLOW_ID
WHERE IS_COMPLETE = 1
AND SI.ACTIVE = 1
AND OTO.OR_TYPE_ID = 12006
AND AR.DATE BETWEEN IN_DATE_FROM AND IN_DATE_TO
GROUP BY I.ITEM_ID, D.DIVISION_ID
) AS GPA ORDER BY STOCK_CODE, DIVISION;
-- END IF

END;//