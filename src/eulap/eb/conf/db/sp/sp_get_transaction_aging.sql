-- Description: Stored procedure for retrieving data for AR Transaction Aging.


Delimiter //
DROP PROCEDURE IF EXISTS GET_TRANSACTION_AGING; //

CREATE PROCEDURE GET_TRANSACTION_AGING(IN IN_COMPANY_ID INT, IN IN_DIVISION_ID INT, IN IN_TRANSACTION_CLASSIFICATION_ID INT,
IN IN_AR_CUSTOMER_ID INT, IN IN_AR_CUSTOMER_ACCOUNT_ID INT, IN IN_GROUP_BY_OPTION INT, IN IN_AGE_BASIS INT, IN IN_AS_OF_DATE DATE,
IN IN_ACCOUNT_ID INT, IN IN_LIMIT_FROM INT, IN IN_LIMIT_TO INT)

BEGIN

SELECT DIVISION, TYPE, TRANSACTION_CLASSIFICATION, ID, CUSTOMER_NAME, CUSTOMER_ACCOUNT, TRANSACTION_NUMBER, TRANSACTION_DATE, TERM,
ROUND(SUM(TRANSACTION_AMT) - SUM(PAID_AMT), 2) AS TOTAL_TRANSACTION, SUM(PAID_AMT) AS TOTAL_PAYMENT, ROUND(SUM(TRANSACTION_AMT) - SUM(PAID_AMT), 2)  AS BALANCE,
ROUND(SUM(0_DAY), 2) AS 0_DAY, ROUND(SUM(1_30_DAYS), 2) AS 1_30_DAYS, ROUND(SUM(31_60_DAYS), 2) AS 31_60_DAYS, ROUND(SUM(61_90_DAYS), 2) AS 61_90_DAYS,
ROUND(SUM(91_120_DAYS), 2) AS 91_120_DAYS, ROUND(SUM(121_150_DAYS), 2) AS 121_150_DAYS, ROUND(SUM(151_UP), 2) AS 151_UP, ACCOUNT_NAME FROM (

	SELECT DIVISION, TYPE, TRANSACTION_CLASSIFICATION,ID, CUSTOMER_NAME, CUSTOMER_ACCOUNT, TYPE_ID, AR_CUSTOMER_ACCOUNT_ID,
	TRANSACTION_NUMBER, TRANSACTION_DATE, TERM, SUM(TRANSACTION_AMT) AS TRANSACTION_AMT, SUM(PAID_AMT) AS PAID_AMT, AGE_BASIS,
	IF(DATEDIFF(IN_AS_OF_DATE, AGE_BASIS) = 0, SUM(TRANSACTION_AMT - PAID_AMT), 0) AS 0_DAY,
	IF(DATEDIFF(IN_AS_OF_DATE, AGE_BASIS) BETWEEN 1 AND 30, SUM(TRANSACTION_AMT - PAID_AMT), 0) AS 1_30_DAYS,
	IF(DATEDIFF(IN_AS_OF_DATE, AGE_BASIS) BETWEEN 31 AND 60, SUM(TRANSACTION_AMT - PAID_AMT), 0) AS 31_60_DAYS, 
	IF(DATEDIFF(IN_AS_OF_DATE, AGE_BASIS) BETWEEN 61 AND 90, SUM(TRANSACTION_AMT - PAID_AMT), 0) AS 61_90_DAYS, 
	IF(DATEDIFF(IN_AS_OF_DATE, AGE_BASIS) BETWEEN 91 AND 120, SUM(TRANSACTION_AMT - PAID_AMT), 0) AS 91_120_DAYS,
	IF(DATEDIFF(IN_AS_OF_DATE, AGE_BASIS) BETWEEN 121 AND 150, SUM(TRANSACTION_AMT - PAID_AMT), 0) AS 121_150_DAYS,
	IF(DATEDIFF(IN_AS_OF_DATE, AGE_BASIS) >= 151, SUM(TRANSACTION_AMT - PAID_AMT), 0) AS 151_UP, ACCOUNT_NAME FROM (

		SELECT D.NAME AS DIVISION, TC.NAME AS TRANSACTION_CLASSIFICATION,
		(CASE WHEN T.TRANSACTION_CLASSIFICATION_ID = 1 THEN "REG"
			WHEN T.TRANSACTION_CLASSIFICATION_ID = 2 THEN "DM"
			WHEN T.TRANSACTION_CLASSIFICATION_ID = 3 THEN "CM" END) AS TYPE,
		T.EB_OBJECT_ID AS ID, T.TRANSACTION_CLASSIFICATION_ID AS TYPE_ID,
		(CASE WHEN IN_AGE_BASIS = 1 THEN (CASE WHEN T.DUE_DATE IS NULL THEN T.TRANSACTION_DATE ELSE T.DUE_DATE END)
			WHEN IN_AGE_BASIS = 2 THEN T.TRANSACTION_DATE WHEN IN_AGE_BASIS = 3 THEN T.GL_DATE END) AS AGE_BASIS,
		C.NAME AS CUSTOMER_NAME, CA.NAME AS CUSTOMER_ACCOUNT, TRM.NAME AS TERM,
		CONCAT('TR-', T.TRANSACTION_NUMBER, ' ', CONCAT('ART-' , T.SEQUENCE_NO)) AS TRANSACTION_NUMBER,
		T.CUSTOMER_ACCOUNT_ID AS AR_CUSTOMER_ACCOUNT_ID, T.AMOUNT AS TRANSACTION_AMT, 0 AS PAID_AMT,
		T.GL_DATE AS TRANSACTION_DATE, A.ACCOUNT_NAME
		FROM AR_TRANSACTION T
		INNER JOIN AR_CUSTOMER C ON C.AR_CUSTOMER_ID = T.CUSTOMER_ID
		INNER JOIN AR_CUSTOMER_ACCOUNT CA ON CA.AR_CUSTOMER_ACCOUNT_ID = T.CUSTOMER_ACCOUNT_ID
		INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = CA.DEFAULT_DEBIT_AC_ID 
		INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
		INNER JOIN TERM TRM ON TRM.TERM_ID = T.TERM_ID
		INNER JOIN COMPANY COM ON COM.COMPANY_ID = T.COMPANY_ID
		INNER JOIN DIVISION D ON D.DIVISION_ID = T.DIVISION_ID
		INNER JOIN TRANSACTION_CLASSIFICATION TC ON TC.TRANSACTION_CLASSIFICATION_ID = T.TRANSACTION_CLASSIFICATION_ID
		INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = T.FORM_WORKFLOW_ID
		WHERE FW.IS_COMPLETE = 1
		AND T.COMPANY_ID = IN_COMPANY_ID
		AND T.AR_TRANSACTION_TYPE_ID IN (17, 18, 19, 20, 21, 22)
		AND T.GL_DATE <= IN_AS_OF_DATE
		AND (CASE WHEN IN_DIVISION_ID != -1 THEN T.DIVISION_ID = IN_DIVISION_ID ELSE T.DIVISION_ID != IN_DIVISION_ID END)
		AND (CASE WHEN IN_ACCOUNT_ID != -1 THEN AC.ACCOUNT_ID = IN_ACCOUNT_ID ELSE AC.ACCOUNT_ID != IN_ACCOUNT_ID END)
		AND (CASE WHEN IN_TRANSACTION_CLASSIFICATION_ID != -1 THEN T.TRANSACTION_CLASSIFICATION_ID = IN_TRANSACTION_CLASSIFICATION_ID
			ELSE T.TRANSACTION_CLASSIFICATION_ID != IN_TRANSACTION_CLASSIFICATION_ID END)
		AND (CASE WHEN IN_AR_CUSTOMER_ID != -1 THEN T.CUSTOMER_ID = IN_AR_CUSTOMER_ID ELSE T.CUSTOMER_ID != IN_AR_CUSTOMER_ID END)
		AND (CASE WHEN IN_AR_CUSTOMER_ACCOUNT_ID != -1 THEN T.CUSTOMER_ACCOUNT_ID = IN_AR_CUSTOMER_ACCOUNT_ID
			ELSE T.CUSTOMER_ACCOUNT_ID != IN_AR_CUSTOMER_ACCOUNT_ID END)

		UNION ALL

		SELECT D.NAME AS DIVISION, TC.NAME AS TRANSACTION_CLASSIFICATION,
		(CASE WHEN ART.TRANSACTION_CLASSIFICATION_ID = 1 THEN "REG"
			WHEN ART.TRANSACTION_CLASSIFICATION_ID = 2 THEN "DM"
			WHEN ART.TRANSACTION_CLASSIFICATION_ID = 3 THEN "CM" END) AS TYPE, OTO.FROM_OBJECT_ID AS ID,
		ART.TRANSACTION_CLASSIFICATION_ID AS TYPE_ID, ARR.MATURITY_DATE AS AGE_BASIS, C.NAME AS CUSTOMER_NAME,
		CA.NAME AS CUSTOMER_ACCOUNT, ' ' AS TERM, CONCAT('TR-', ART.TRANSACTION_NUMBER, ' ', CONCAT('ART-' , ART.SEQUENCE_NO)) AS TRANSACTION_NUMBER,
		ARR.AR_CUSTOMER_ACCOUNT_ID, 0 AS TRANSACTION_AMT, ARRL.AMOUNT AS PAID_AMT, ARR.MATURITY_DATE AS TRANSACTION_DATE, A.ACCOUNT_NAME
		FROM AR_RECEIPT_LINE ARRL
		INNER JOIN OBJECT_TO_OBJECT OTO ON OTO.TO_OBJECT_ID = ARRL.EB_OBJECT_ID
		INNER JOIN AR_RECEIPT ARR ON ARR.AR_RECEIPT_ID = ARRL.AR_RECEIPT_ID
		INNER JOIN AR_CUSTOMER C ON C.AR_CUSTOMER_ID = ARR.AR_CUSTOMER_ID
		INNER JOIN AR_CUSTOMER_ACCOUNT CA ON CA.AR_CUSTOMER_ACCOUNT_ID = ARR.AR_CUSTOMER_ACCOUNT_ID
		INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = CA.DEFAULT_DEBIT_AC_ID
		INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
		INNER JOIN DIVISION D ON D.DIVISION_ID = ARR.DIVISION_ID
		INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ARR.FORM_WORKFLOW_ID
		INNER JOIN AR_TRANSACTION ART ON ART.EB_OBJECT_ID = OTO.FROM_OBJECT_ID
		INNER JOIN TRANSACTION_CLASSIFICATION TC ON TC.TRANSACTION_CLASSIFICATION_ID = ART.TRANSACTION_CLASSIFICATION_ID
		WHERE OTO.OR_TYPE_ID = 24006
		AND FW.CURRENT_STATUS_ID != 4
		AND ARR.COMPANY_ID = IN_COMPANY_ID
		AND ARR.MATURITY_DATE <= IN_AS_OF_DATE
		AND (CASE WHEN IN_DIVISION_ID != -1 THEN ARR.DIVISION_ID = IN_DIVISION_ID ELSE ARR.DIVISION_ID != IN_DIVISION_ID END)
		AND (CASE WHEN IN_ACCOUNT_ID != -1 THEN AC.ACCOUNT_ID = IN_ACCOUNT_ID ELSE AC.ACCOUNT_ID != IN_ACCOUNT_ID END)
		AND (CASE WHEN IN_TRANSACTION_CLASSIFICATION_ID != -1 THEN ART.TRANSACTION_CLASSIFICATION_ID = IN_TRANSACTION_CLASSIFICATION_ID
			ELSE ART.TRANSACTION_CLASSIFICATION_ID != IN_TRANSACTION_CLASSIFICATION_ID END)
		AND (CASE WHEN IN_AR_CUSTOMER_ID != -1 THEN ARR.AR_CUSTOMER_ID = IN_AR_CUSTOMER_ID ELSE ARR.AR_CUSTOMER_ID != IN_AR_CUSTOMER_ID END)
		AND (CASE WHEN IN_AR_CUSTOMER_ACCOUNT_ID != -1 THEN ARR.AR_CUSTOMER_ACCOUNT_ID = IN_AR_CUSTOMER_ACCOUNT_ID
			ELSE ARR.AR_CUSTOMER_ACCOUNT_ID != IN_AR_CUSTOMER_ACCOUNT_ID END)

		UNION ALL

		SELECT D.NAME AS DIVISION, 'AR Invoice' AS TRANSACTION_CLASSIFICATION, 'ARI' AS TYPE, ARI.EB_OBJECT_ID AS ID, 4 AS TYPE_ID,
		(CASE WHEN IN_AGE_BASIS = 1 THEN IF(ARI.DUE_DATE IS NULL, ARI.DATE, ARI.DUE_DATE) WHEN IN_AGE_BASIS = 2 THEN ARI.DATE
			WHEN IN_AGE_BASIS = 3 THEN ARI.DATE_RECEIVED END) AS AGE_BASIS, C.NAME AS CUSTOMER_NAME, CA.NAME AS CUSTOMER_ACCOUNT,
		TRM.NAME AS TERM, CONCAT('ARI-', ARI.SEQUENCE_NO) AS TRANSACTION_NUMBER, ARI.AR_CUSTOMER_ACCOUNT_ID,
		ARI.AMOUNT AS TRANSACTION_AMT, 0 AS PAID_AMT, ARI.DATE as TRANSACTION_DATE, A.ACCOUNT_NAME
		FROM AR_INVOICE ARI
		INNER JOIN AR_CUSTOMER C ON C.AR_CUSTOMER_ID = ARI.AR_CUSTOMER_ID
		INNER JOIN AR_CUSTOMER_ACCOUNT CA ON CA.AR_CUSTOMER_ACCOUNT_ID = ARI.AR_CUSTOMER_ACCOUNT_ID
		INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = CA.DEFAULT_DEBIT_AC_ID
		INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
		INNER JOIN TERM TRM ON TRM.TERM_ID = ARI.TERM_ID
		INNER JOIN DIVISION D ON D.DIVISION_ID = ARI.DIVISION_ID
		INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ARI.FORM_WORKFLOW_ID
		WHERE (CASE WHEN IN_AGE_BASIS != 2 THEN FW.IS_COMPLETE = 1 ELSE FW.CURRENT_STATUS_ID != 4 END)
		AND ARI.AMOUNT != 0
		AND ARI.COMPANY_ID = IN_COMPANY_ID
		AND (CASE WHEN IN_AGE_BASIS != 2 THEN ARI.DATE_RECEIVED <= IN_AS_OF_DATE ELSE ARI.DATE <= IN_AS_OF_DATE END)
		AND (CASE WHEN IN_DIVISION_ID != -1 THEN ARI.DIVISION_ID = IN_DIVISION_ID ELSE ARI.DIVISION_ID != IN_DIVISION_ID END)
		AND (CASE WHEN IN_ACCOUNT_ID != -1 THEN AC.ACCOUNT_ID = IN_ACCOUNT_ID ELSE AC.ACCOUNT_ID != IN_ACCOUNT_ID END)
		AND (CASE WHEN IN_TRANSACTION_CLASSIFICATION_ID != -1 THEN 4 = IN_TRANSACTION_CLASSIFICATION_ID ELSE 4 != IN_TRANSACTION_CLASSIFICATION_ID END)
		AND (CASE WHEN IN_AR_CUSTOMER_ID != -1 THEN ARI.AR_CUSTOMER_ID = IN_AR_CUSTOMER_ID ELSE ARI.AR_CUSTOMER_ID != IN_AR_CUSTOMER_ID END)
		AND (CASE WHEN IN_AR_CUSTOMER_ACCOUNT_ID != -1 THEN ARI.AR_CUSTOMER_ACCOUNT_ID = IN_AR_CUSTOMER_ACCOUNT_ID
			ELSE ARI.AR_CUSTOMER_ACCOUNT_ID != IN_AR_CUSTOMER_ACCOUNT_ID END)

		UNION ALL

		SELECT D.NAME AS DIVISION, 'AR Invoice' AS TRANSACTION_CLASSIFICATION, 'ARI' AS TYPE, OTO.FROM_OBJECT_ID AS ID,
		4 AS TYPE_ID, ARR.MATURITY_DATE AS AGE_BASIS, C.NAME AS CUSTOMER_NAME, CA.NAME AS CUSTOMER_ACCOUNT, ' ' AS TERM,
		CONCAT('ARI-', ARI.SEQUENCE_NO) AS TRANSACTION_NUMBER, ARR.AR_CUSTOMER_ACCOUNT_ID, 0 AS TRANSACTION_AMT,
		ARRL.AMOUNT AS PAID_AMT, ARR.MATURITY_DATE AS TRANSACTION_DATE, A.ACCOUNT_NAME
		FROM AR_RECEIPT_LINE ARRL
		INNER JOIN OBJECT_TO_OBJECT OTO ON OTO.TO_OBJECT_ID = ARRL.EB_OBJECT_ID
		INNER JOIN AR_RECEIPT ARR ON ARR.AR_RECEIPT_ID = ARRL.AR_RECEIPT_ID
		INNER JOIN AR_CUSTOMER C ON C.AR_CUSTOMER_ID = ARR.AR_CUSTOMER_ID
		INNER JOIN AR_CUSTOMER_ACCOUNT CA ON CA.AR_CUSTOMER_ACCOUNT_ID = ARR.AR_CUSTOMER_ACCOUNT_ID
		INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = CA.DEFAULT_DEBIT_AC_ID
		INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
		INNER JOIN DIVISION D ON D.DIVISION_ID = ARR.DIVISION_ID
		INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ARR.FORM_WORKFLOW_ID
		INNER JOIN AR_INVOICE ARI ON ARI.EB_OBJECT_ID = OTO.FROM_OBJECT_ID
		WHERE OTO.OR_TYPE_ID = 24006
		AND FW.CURRENT_STATUS_ID != 4
		AND ARR.COMPANY_ID = IN_COMPANY_ID
		AND ARR.MATURITY_DATE <= IN_AS_OF_DATE
		AND (CASE WHEN IN_DIVISION_ID != -1 THEN ARR.DIVISION_ID = IN_DIVISION_ID ELSE ARR.DIVISION_ID != IN_DIVISION_ID END)
		AND (CASE WHEN IN_ACCOUNT_ID != -1 THEN AC.ACCOUNT_ID = IN_ACCOUNT_ID ELSE AC.ACCOUNT_ID != IN_ACCOUNT_ID END)
		AND (CASE WHEN IN_TRANSACTION_CLASSIFICATION_ID != -1 THEN 4 = IN_TRANSACTION_CLASSIFICATION_ID ELSE 4 != IN_TRANSACTION_CLASSIFICATION_ID END)
		AND (CASE WHEN IN_AR_CUSTOMER_ID != -1 THEN ARR.AR_CUSTOMER_ID = IN_AR_CUSTOMER_ID ELSE ARR.AR_CUSTOMER_ID != IN_AR_CUSTOMER_ID END)
		AND (CASE WHEN IN_AR_CUSTOMER_ACCOUNT_ID != -1 THEN ARR.AR_CUSTOMER_ACCOUNT_ID = IN_AR_CUSTOMER_ACCOUNT_ID
			ELSE ARR.AR_CUSTOMER_ACCOUNT_ID != IN_AR_CUSTOMER_ACCOUNT_ID END)

		UNION ALL

		SELECT D.NAME AS DIVISION, 'Customer Advance Payment' AS TRANSACTION_CLASSIFICATION, 'CAP' AS TYPE, CAP.EB_OBJECT_ID AS ID, 5 AS TYPE_ID,
		CAP.MATURITY_DATE AS AGE_BASIS, C.NAME AS CUSTOMER_NAME, CA.NAME AS CUSTOMER_ACCOUNT,
		' ' AS TERM, CONCAT('CAP-', CAP.CAP_NUMBER) AS TRANSACTION_NUMBER, CAP.AR_CUSTOMER_ACCOUNT_ID,
		CAP.AMOUNT AS TRANSACTION_AMT, 0 AS PAID_AMT, CAP.MATURITY_DATE as TRANSACTION_DATE, A.ACCOUNT_NAME
		FROM CUSTOMER_ADVANCE_PAYMENT CAP
		INNER JOIN AR_CUSTOMER C ON C.AR_CUSTOMER_ID = CAP.AR_CUSTOMER_ID
		INNER JOIN AR_CUSTOMER_ACCOUNT CA ON CA.AR_CUSTOMER_ACCOUNT_ID = CAP.AR_CUSTOMER_ACCOUNT_ID
		INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = CA.DEFAULT_DEBIT_AC_ID
		INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
		INNER JOIN DIVISION D ON D.DIVISION_ID = CAP.DIVISION_ID
		INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = CAP.FORM_WORKFLOW_ID
		WHERE FW.IS_COMPLETE = 1
		AND CAP.COMPANY_ID = IN_COMPANY_ID
		AND CAP.MATURITY_DATE <= IN_AS_OF_DATE
		AND (CASE WHEN IN_DIVISION_ID != -1 THEN CAP.DIVISION_ID = IN_DIVISION_ID ELSE CAP.DIVISION_ID != IN_DIVISION_ID END)
		AND (CASE WHEN IN_ACCOUNT_ID != -1 THEN AC.ACCOUNT_ID = IN_ACCOUNT_ID ELSE AC.ACCOUNT_ID != IN_ACCOUNT_ID END)
		AND (CASE WHEN IN_TRANSACTION_CLASSIFICATION_ID != -1 THEN 5 = IN_TRANSACTION_CLASSIFICATION_ID ELSE 5 != IN_TRANSACTION_CLASSIFICATION_ID END)
		AND (CASE WHEN IN_AR_CUSTOMER_ID != -1 THEN CAP.AR_CUSTOMER_ID = IN_AR_CUSTOMER_ID ELSE CAP.AR_CUSTOMER_ID != IN_AR_CUSTOMER_ID END)
		AND (CASE WHEN IN_AR_CUSTOMER_ACCOUNT_ID != -1 THEN CAP.AR_CUSTOMER_ACCOUNT_ID = IN_AR_CUSTOMER_ACCOUNT_ID
			ELSE CAP.AR_CUSTOMER_ACCOUNT_ID != IN_AR_CUSTOMER_ACCOUNT_ID END)

		UNION ALL

		SELECT D.NAME AS DIVISION, 'Customer Advance Payment' AS TRANSACTION_CLASSIFICATION, 'CAP' AS TYPE, OTO.FROM_OBJECT_ID AS ID,
		5 AS TYPE_ID, ARR.MATURITY_DATE AS AGE_BASIS, C.NAME AS CUSTOMER_NAME, CA.NAME AS CUSTOMER_ACCOUNT, ' ' AS TERM,
		CONCAT('CAP-', CAP.CAP_NUMBER) AS TRANSACTION_NUMBER, ARR.AR_CUSTOMER_ACCOUNT_ID, 0 AS TRANSACTION_AMT,
		ARRL.AMOUNT AS PAID_AMT, ARR.MATURITY_DATE AS TRANSACTION_DATE, A.ACCOUNT_NAME
		FROM AR_RECEIPT_LINE ARRL
		INNER JOIN OBJECT_TO_OBJECT OTO ON OTO.TO_OBJECT_ID = ARRL.EB_OBJECT_ID
		INNER JOIN AR_RECEIPT ARR ON ARR.AR_RECEIPT_ID = ARRL.AR_RECEIPT_ID
		INNER JOIN AR_CUSTOMER C ON C.AR_CUSTOMER_ID = ARR.AR_CUSTOMER_ID
		INNER JOIN AR_CUSTOMER_ACCOUNT CA ON CA.AR_CUSTOMER_ACCOUNT_ID = ARR.AR_CUSTOMER_ACCOUNT_ID
		INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = CA.DEFAULT_DEBIT_AC_ID
		INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
		INNER JOIN DIVISION D ON D.DIVISION_ID = ARR.DIVISION_ID
		INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ARR.FORM_WORKFLOW_ID
		INNER JOIN CUSTOMER_ADVANCE_PAYMENT CAP ON CAP.EB_OBJECT_ID = OTO.FROM_OBJECT_ID
		WHERE OTO.OR_TYPE_ID = 24006
		AND FW.CURRENT_STATUS_ID != 4
		AND ARR.COMPANY_ID = IN_COMPANY_ID
		AND ARR.MATURITY_DATE <= IN_AS_OF_DATE
		AND (CASE WHEN IN_DIVISION_ID != -1 THEN ARR.DIVISION_ID = IN_DIVISION_ID ELSE ARR.DIVISION_ID != IN_DIVISION_ID END)
		AND (CASE WHEN IN_ACCOUNT_ID != -1 THEN AC.ACCOUNT_ID = IN_ACCOUNT_ID ELSE AC.ACCOUNT_ID != IN_ACCOUNT_ID END)
		AND (CASE WHEN IN_TRANSACTION_CLASSIFICATION_ID != -1 THEN 5 = IN_TRANSACTION_CLASSIFICATION_ID ELSE 5 != IN_TRANSACTION_CLASSIFICATION_ID END)
		AND (CASE WHEN IN_AR_CUSTOMER_ID != -1 THEN ARR.AR_CUSTOMER_ID = IN_AR_CUSTOMER_ID ELSE ARR.AR_CUSTOMER_ID != IN_AR_CUSTOMER_ID END)
		AND (CASE WHEN IN_AR_CUSTOMER_ACCOUNT_ID != -1 THEN ARR.AR_CUSTOMER_ACCOUNT_ID = IN_AR_CUSTOMER_ACCOUNT_ID
			ELSE ARR.AR_CUSTOMER_ACCOUNT_ID != IN_AR_CUSTOMER_ACCOUNT_ID END)

		UNION ALL

		SELECT D.NAME AS DIVISION, 'AR Invoice' AS TRANSACTION_CLASSIFICATION, 'ARI-RETENTION' AS TYPE, ARI.EB_OBJECT_ID AS ID,
		4 AS TYPE_ID, PR.DATE AS AGE_BASIS, C.NAME AS CUSTOMER_NAME, CA.NAME AS CUSTOMER_ACCOUNT,
		' ' AS TERM, CONCAT('ARI-', ARI.SEQUENCE_NO) AS TRANSACTION_NUMBER, PR.AR_CUSTOMER_ACCOUNT_ID,
		-ARI.RETENTION AS TRANSACTION_AMT, 0 AS PAID_AMT, PR.DATE as TRANSACTION_DATE, A.ACCOUNT_NAME
		FROM AR_INVOICE ARI
		INNER JOIN OBJECT_TO_OBJECT OTO ON OTO.FROM_OBJECT_ID = ARI.EB_OBJECT_ID
		INNER JOIN PROJECT_RETENTION_LINE PRL ON PRL.EB_OBJECT_ID = OTO.TO_OBJECT_ID
		INNER JOIN PROJECT_RETENTION PR ON PR.PROJECT_RETENTION_ID = PRL.PROJECT_RETENTION_ID
		INNER JOIN AR_CUSTOMER C ON C.AR_CUSTOMER_ID = PR.AR_CUSTOMER_ID
		INNER JOIN AR_CUSTOMER_ACCOUNT CA ON CA.AR_CUSTOMER_ACCOUNT_ID = PR.AR_CUSTOMER_ACCOUNT_ID
		INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = CA.DEFAULT_DEBIT_AC_ID
		INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
		INNER JOIN DIVISION D ON D.DIVISION_ID = PR.DIVISION_ID
		INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = PR.FORM_WORKFLOW_ID
		WHERE FW.IS_COMPLETE = 1
		AND ARI.AMOUNT = 0
		AND (ARI.RETENTION IS NOT NULL && ARI.RETENTION != 0)
		AND PR.COMPANY_ID = IN_COMPANY_ID
		AND PR.DATE <= IN_AS_OF_DATE
		AND (CASE WHEN IN_DIVISION_ID != -1 THEN PR.DIVISION_ID = IN_DIVISION_ID ELSE PR.DIVISION_ID != IN_DIVISION_ID END)
		AND (CASE WHEN IN_ACCOUNT_ID != -1 THEN AC.ACCOUNT_ID = IN_ACCOUNT_ID ELSE AC.ACCOUNT_ID != IN_ACCOUNT_ID END)
		AND (CASE WHEN IN_TRANSACTION_CLASSIFICATION_ID != -1 THEN 6 = IN_TRANSACTION_CLASSIFICATION_ID ELSE 6 != IN_TRANSACTION_CLASSIFICATION_ID END)
		AND (CASE WHEN IN_AR_CUSTOMER_ID != -1 THEN PR.AR_CUSTOMER_ID = IN_AR_CUSTOMER_ID ELSE PR.AR_CUSTOMER_ID != IN_AR_CUSTOMER_ID END)
		AND (CASE WHEN IN_AR_CUSTOMER_ACCOUNT_ID != -1 THEN PR.AR_CUSTOMER_ACCOUNT_ID = IN_AR_CUSTOMER_ACCOUNT_ID
			ELSE PR.AR_CUSTOMER_ACCOUNT_ID != IN_AR_CUSTOMER_ACCOUNT_ID END)

		UNION ALL

		SELECT D.NAME AS DIVISION, 'Project Retention' AS TRANSACTION_CLASSIFICATION, 'PR' AS TYPE, OTO.FROM_OBJECT_ID AS ID,
		6 AS TYPE_ID, ARR.MATURITY_DATE AS AGE_BASIS, C.NAME AS CUSTOMER_NAME, CA.NAME AS CUSTOMER_ACCOUNT, ' ' AS TERM,
		CONCAT('PR-', PR.SEQUENCE_NO) AS TRANSACTION_NUMBER, PR.AR_CUSTOMER_ACCOUNT_ID, 0 AS TRANSACTION_AMT,
		ARRL.AMOUNT AS PAID_AMT, ARR.MATURITY_DATE AS TRANSACTION_DATE, A.ACCOUNT_NAME
		FROM AR_RECEIPT_LINE ARRL
		INNER JOIN OBJECT_TO_OBJECT OTO ON OTO.TO_OBJECT_ID = ARRL.EB_OBJECT_ID
		INNER JOIN AR_RECEIPT ARR ON ARR.AR_RECEIPT_ID = ARRL.AR_RECEIPT_ID
		INNER JOIN AR_CUSTOMER C ON C.AR_CUSTOMER_ID = ARR.AR_CUSTOMER_ID
		INNER JOIN AR_CUSTOMER_ACCOUNT CA ON CA.AR_CUSTOMER_ACCOUNT_ID = ARR.AR_CUSTOMER_ACCOUNT_ID
		INNER JOIN ACCOUNT_COMBINATION AC ON AC.ACCOUNT_COMBINATION_ID = CA.DEFAULT_DEBIT_AC_ID
		INNER JOIN ACCOUNT A ON A.ACCOUNT_ID = AC.ACCOUNT_ID
		INNER JOIN DIVISION D ON D.DIVISION_ID = ARR.DIVISION_ID
		INNER JOIN FORM_WORKFLOW FW ON FW.FORM_WORKFLOW_ID = ARR.FORM_WORKFLOW_ID
		INNER JOIN PROJECT_RETENTION PR ON PR.EB_OBJECT_ID = OTO.FROM_OBJECT_ID
		WHERE OTO.OR_TYPE_ID = 24006
		AND FW.CURRENT_STATUS_ID != 4
		AND ARR.COMPANY_ID = IN_COMPANY_ID
		AND ARR.MATURITY_DATE <= IN_AS_OF_DATE
		AND (CASE WHEN IN_DIVISION_ID != -1 THEN ARR.DIVISION_ID = IN_DIVISION_ID ELSE ARR.DIVISION_ID != IN_DIVISION_ID END)
		AND (CASE WHEN IN_ACCOUNT_ID != -1 THEN AC.ACCOUNT_ID = IN_ACCOUNT_ID ELSE AC.ACCOUNT_ID != IN_ACCOUNT_ID END)
		AND (CASE WHEN IN_TRANSACTION_CLASSIFICATION_ID != -1 THEN 6 = IN_TRANSACTION_CLASSIFICATION_ID ELSE 6 != IN_TRANSACTION_CLASSIFICATION_ID END)
		AND (CASE WHEN IN_AR_CUSTOMER_ID != -1 THEN ARR.AR_CUSTOMER_ID = IN_AR_CUSTOMER_ID ELSE ARR.AR_CUSTOMER_ID != IN_AR_CUSTOMER_ID END)
		AND (CASE WHEN IN_AR_CUSTOMER_ACCOUNT_ID != -1 THEN ARR.AR_CUSTOMER_ACCOUNT_ID = IN_AR_CUSTOMER_ACCOUNT_ID
			ELSE ARR.AR_CUSTOMER_ACCOUNT_ID != IN_AR_CUSTOMER_ACCOUNT_ID END)

	) AS AGING_INNER_TBL GROUP BY ID
	HAVING ROUND(SUM(TRANSACTION_AMT) - SUM(PAID_AMT), 2) NOT BETWEEN -0.009 AND 0.009
) AS TRANSACTION_AGING
WHERE IN_AS_OF_DATE >= AGE_BASIS
GROUP BY CASE WHEN IN_GROUP_BY_OPTION = 1 THEN ID ELSE CONCAT(TYPE_ID, '-', AR_CUSTOMER_ACCOUNT_ID) END
ORDER BY TYPE_ID, CUSTOMER_NAME, CUSTOMER_ACCOUNT, ID;
END //